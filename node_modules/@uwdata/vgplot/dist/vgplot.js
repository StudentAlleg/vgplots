var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all2) => {
  for (var name2 in all2)
    __defProp(target, name2, { get: all2[name2], enumerable: true });
};
var __copyProps = (to, from2, except, desc2) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc2 = __getOwnPropDesc(from2, key)) || desc2.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../node_modules/binary-search-bounds/search-bounds.js
var require_search_bounds = __commonJS({
  "../../node_modules/binary-search-bounds/search-bounds.js"(exports, module) {
    "use strict";
    function ge(a2, y3, c4, l, h2) {
      var i2 = h2 + 1;
      while (l <= h2) {
        var m2 = l + h2 >>> 1, x3 = a2[m2];
        var p2 = c4 !== void 0 ? c4(x3, y3) : x3 - y3;
        if (p2 >= 0) {
          i2 = m2;
          h2 = m2 - 1;
        } else {
          l = m2 + 1;
        }
      }
      return i2;
    }
    function gt2(a2, y3, c4, l, h2) {
      var i2 = h2 + 1;
      while (l <= h2) {
        var m2 = l + h2 >>> 1, x3 = a2[m2];
        var p2 = c4 !== void 0 ? c4(x3, y3) : x3 - y3;
        if (p2 > 0) {
          i2 = m2;
          h2 = m2 - 1;
        } else {
          l = m2 + 1;
        }
      }
      return i2;
    }
    function lt2(a2, y3, c4, l, h2) {
      var i2 = l - 1;
      while (l <= h2) {
        var m2 = l + h2 >>> 1, x3 = a2[m2];
        var p2 = c4 !== void 0 ? c4(x3, y3) : x3 - y3;
        if (p2 < 0) {
          i2 = m2;
          l = m2 + 1;
        } else {
          h2 = m2 - 1;
        }
      }
      return i2;
    }
    function le(a2, y3, c4, l, h2) {
      var i2 = l - 1;
      while (l <= h2) {
        var m2 = l + h2 >>> 1, x3 = a2[m2];
        var p2 = c4 !== void 0 ? c4(x3, y3) : x3 - y3;
        if (p2 <= 0) {
          i2 = m2;
          l = m2 + 1;
        } else {
          h2 = m2 - 1;
        }
      }
      return i2;
    }
    function eq2(a2, y3, c4, l, h2) {
      while (l <= h2) {
        var m2 = l + h2 >>> 1, x3 = a2[m2];
        var p2 = c4 !== void 0 ? c4(x3, y3) : x3 - y3;
        if (p2 === 0) {
          return m2;
        }
        if (p2 <= 0) {
          l = m2 + 1;
        } else {
          h2 = m2 - 1;
        }
      }
      return -1;
    }
    function norm(a2, y3, c4, l, h2, f2) {
      if (typeof c4 === "function") {
        return f2(a2, y3, c4, l === void 0 ? 0 : l | 0, h2 === void 0 ? a2.length - 1 : h2 | 0);
      }
      return f2(a2, y3, void 0, c4 === void 0 ? 0 : c4 | 0, l === void 0 ? a2.length - 1 : l | 0);
    }
    module.exports = {
      ge: function(a2, y3, c4, l, h2) {
        return norm(a2, y3, c4, l, h2, ge);
      },
      gt: function(a2, y3, c4, l, h2) {
        return norm(a2, y3, c4, l, h2, gt2);
      },
      lt: function(a2, y3, c4, l, h2) {
        return norm(a2, y3, c4, l, h2, lt2);
      },
      le: function(a2, y3, c4, l, h2) {
        return norm(a2, y3, c4, l, h2, le);
      },
      eq: function(a2, y3, c4, l, h2) {
        return norm(a2, y3, c4, l, h2, eq2);
      }
    };
  }
});

// ../../node_modules/interval-tree-1d/interval-tree.js
var require_interval_tree = __commonJS({
  "../../node_modules/interval-tree-1d/interval-tree.js"(exports, module) {
    "use strict";
    var bounds = require_search_bounds();
    var NOT_FOUND = 0;
    var SUCCESS = 1;
    var EMPTY = 2;
    module.exports = createWrapper;
    function IntervalTreeNode(mid2, left2, right2, leftPoints, rightPoints) {
      this.mid = mid2;
      this.left = left2;
      this.right = right2;
      this.leftPoints = leftPoints;
      this.rightPoints = rightPoints;
      this.count = (left2 ? left2.count : 0) + (right2 ? right2.count : 0) + leftPoints.length;
    }
    var proto = IntervalTreeNode.prototype;
    function copy4(a2, b2) {
      a2.mid = b2.mid;
      a2.left = b2.left;
      a2.right = b2.right;
      a2.leftPoints = b2.leftPoints;
      a2.rightPoints = b2.rightPoints;
      a2.count = b2.count;
    }
    function rebuild(node, intervals) {
      var ntree = createIntervalTree(intervals);
      node.mid = ntree.mid;
      node.left = ntree.left;
      node.right = ntree.right;
      node.leftPoints = ntree.leftPoints;
      node.rightPoints = ntree.rightPoints;
      node.count = ntree.count;
    }
    function rebuildWithInterval(node, interval2) {
      var intervals = node.intervals([]);
      intervals.push(interval2);
      rebuild(node, intervals);
    }
    function rebuildWithoutInterval(node, interval2) {
      var intervals = node.intervals([]);
      var idx = intervals.indexOf(interval2);
      if (idx < 0) {
        return NOT_FOUND;
      }
      intervals.splice(idx, 1);
      rebuild(node, intervals);
      return SUCCESS;
    }
    proto.intervals = function(result) {
      result.push.apply(result, this.leftPoints);
      if (this.left) {
        this.left.intervals(result);
      }
      if (this.right) {
        this.right.intervals(result);
      }
      return result;
    };
    proto.insert = function(interval2) {
      var weight = this.count - this.leftPoints.length;
      this.count += 1;
      if (interval2[1] < this.mid) {
        if (this.left) {
          if (4 * (this.left.count + 1) > 3 * (weight + 1)) {
            rebuildWithInterval(this, interval2);
          } else {
            this.left.insert(interval2);
          }
        } else {
          this.left = createIntervalTree([interval2]);
        }
      } else if (interval2[0] > this.mid) {
        if (this.right) {
          if (4 * (this.right.count + 1) > 3 * (weight + 1)) {
            rebuildWithInterval(this, interval2);
          } else {
            this.right.insert(interval2);
          }
        } else {
          this.right = createIntervalTree([interval2]);
        }
      } else {
        var l = bounds.ge(this.leftPoints, interval2, compareBegin);
        var r = bounds.ge(this.rightPoints, interval2, compareEnd);
        this.leftPoints.splice(l, 0, interval2);
        this.rightPoints.splice(r, 0, interval2);
      }
    };
    proto.remove = function(interval2) {
      var weight = this.count - this.leftPoints;
      if (interval2[1] < this.mid) {
        if (!this.left) {
          return NOT_FOUND;
        }
        var rw = this.right ? this.right.count : 0;
        if (4 * rw > 3 * (weight - 1)) {
          return rebuildWithoutInterval(this, interval2);
        }
        var r = this.left.remove(interval2);
        if (r === EMPTY) {
          this.left = null;
          this.count -= 1;
          return SUCCESS;
        } else if (r === SUCCESS) {
          this.count -= 1;
        }
        return r;
      } else if (interval2[0] > this.mid) {
        if (!this.right) {
          return NOT_FOUND;
        }
        var lw = this.left ? this.left.count : 0;
        if (4 * lw > 3 * (weight - 1)) {
          return rebuildWithoutInterval(this, interval2);
        }
        var r = this.right.remove(interval2);
        if (r === EMPTY) {
          this.right = null;
          this.count -= 1;
          return SUCCESS;
        } else if (r === SUCCESS) {
          this.count -= 1;
        }
        return r;
      } else {
        if (this.count === 1) {
          if (this.leftPoints[0] === interval2) {
            return EMPTY;
          } else {
            return NOT_FOUND;
          }
        }
        if (this.leftPoints.length === 1 && this.leftPoints[0] === interval2) {
          if (this.left && this.right) {
            var p2 = this;
            var n = this.left;
            while (n.right) {
              p2 = n;
              n = n.right;
            }
            if (p2 === this) {
              n.right = this.right;
            } else {
              var l = this.left;
              var r = this.right;
              p2.count -= n.count;
              p2.right = n.left;
              n.left = l;
              n.right = r;
            }
            copy4(this, n);
            this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;
          } else if (this.left) {
            copy4(this, this.left);
          } else {
            copy4(this, this.right);
          }
          return SUCCESS;
        }
        for (var l = bounds.ge(this.leftPoints, interval2, compareBegin); l < this.leftPoints.length; ++l) {
          if (this.leftPoints[l][0] !== interval2[0]) {
            break;
          }
          if (this.leftPoints[l] === interval2) {
            this.count -= 1;
            this.leftPoints.splice(l, 1);
            for (var r = bounds.ge(this.rightPoints, interval2, compareEnd); r < this.rightPoints.length; ++r) {
              if (this.rightPoints[r][1] !== interval2[1]) {
                break;
              } else if (this.rightPoints[r] === interval2) {
                this.rightPoints.splice(r, 1);
                return SUCCESS;
              }
            }
          }
        }
        return NOT_FOUND;
      }
    };
    function reportLeftRange(arr, hi, cb) {
      for (var i2 = 0; i2 < arr.length && arr[i2][0] <= hi; ++i2) {
        var r = cb(arr[i2]);
        if (r) {
          return r;
        }
      }
    }
    function reportRightRange(arr, lo, cb) {
      for (var i2 = arr.length - 1; i2 >= 0 && arr[i2][1] >= lo; --i2) {
        var r = cb(arr[i2]);
        if (r) {
          return r;
        }
      }
    }
    function reportRange(arr, cb) {
      for (var i2 = 0; i2 < arr.length; ++i2) {
        var r = cb(arr[i2]);
        if (r) {
          return r;
        }
      }
    }
    proto.queryPoint = function(x3, cb) {
      if (x3 < this.mid) {
        if (this.left) {
          var r = this.left.queryPoint(x3, cb);
          if (r) {
            return r;
          }
        }
        return reportLeftRange(this.leftPoints, x3, cb);
      } else if (x3 > this.mid) {
        if (this.right) {
          var r = this.right.queryPoint(x3, cb);
          if (r) {
            return r;
          }
        }
        return reportRightRange(this.rightPoints, x3, cb);
      } else {
        return reportRange(this.leftPoints, cb);
      }
    };
    proto.queryInterval = function(lo, hi, cb) {
      if (lo < this.mid && this.left) {
        var r = this.left.queryInterval(lo, hi, cb);
        if (r) {
          return r;
        }
      }
      if (hi > this.mid && this.right) {
        var r = this.right.queryInterval(lo, hi, cb);
        if (r) {
          return r;
        }
      }
      if (hi < this.mid) {
        return reportLeftRange(this.leftPoints, hi, cb);
      } else if (lo > this.mid) {
        return reportRightRange(this.rightPoints, lo, cb);
      } else {
        return reportRange(this.leftPoints, cb);
      }
    };
    function compareNumbers(a2, b2) {
      return a2 - b2;
    }
    function compareBegin(a2, b2) {
      var d = a2[0] - b2[0];
      if (d) {
        return d;
      }
      return a2[1] - b2[1];
    }
    function compareEnd(a2, b2) {
      var d = a2[1] - b2[1];
      if (d) {
        return d;
      }
      return a2[0] - b2[0];
    }
    function createIntervalTree(intervals) {
      if (intervals.length === 0) {
        return null;
      }
      var pts = [];
      for (var i2 = 0; i2 < intervals.length; ++i2) {
        pts.push(intervals[i2][0], intervals[i2][1]);
      }
      pts.sort(compareNumbers);
      var mid2 = pts[pts.length >> 1];
      var leftIntervals = [];
      var rightIntervals = [];
      var centerIntervals = [];
      for (var i2 = 0; i2 < intervals.length; ++i2) {
        var s2 = intervals[i2];
        if (s2[1] < mid2) {
          leftIntervals.push(s2);
        } else if (mid2 < s2[0]) {
          rightIntervals.push(s2);
        } else {
          centerIntervals.push(s2);
        }
      }
      var leftPoints = centerIntervals;
      var rightPoints = centerIntervals.slice();
      leftPoints.sort(compareBegin);
      rightPoints.sort(compareEnd);
      return new IntervalTreeNode(
        mid2,
        createIntervalTree(leftIntervals),
        createIntervalTree(rightIntervals),
        leftPoints,
        rightPoints
      );
    }
    function IntervalTree2(root2) {
      this.root = root2;
    }
    var tproto = IntervalTree2.prototype;
    tproto.insert = function(interval2) {
      if (this.root) {
        this.root.insert(interval2);
      } else {
        this.root = new IntervalTreeNode(interval2[0], null, null, [interval2], [interval2]);
      }
    };
    tproto.remove = function(interval2) {
      if (this.root) {
        var r = this.root.remove(interval2);
        if (r === EMPTY) {
          this.root = null;
        }
        return r !== NOT_FOUND;
      }
      return false;
    };
    tproto.queryPoint = function(p2, cb) {
      if (this.root) {
        return this.root.queryPoint(p2, cb);
      }
    };
    tproto.queryInterval = function(lo, hi, cb) {
      if (lo <= hi && this.root) {
        return this.root.queryInterval(lo, hi, cb);
      }
    };
    Object.defineProperty(tproto, "count", {
      get: function() {
        if (this.root) {
          return this.root.count;
        }
        return 0;
      }
    });
    Object.defineProperty(tproto, "intervals", {
      get: function() {
        if (this.root) {
          return this.root.intervals([]);
        }
        return [];
      }
    });
    function createWrapper(intervals) {
      if (!intervals || intervals.length === 0) {
        return new IntervalTree2(null);
      }
      return new IntervalTree2(createIntervalTree(intervals));
    }
  }
});

// ../../node_modules/tslib/tslib.es6.js
function __rest(s2, e) {
  var t = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t[p2[i2]] = s2[p2[i2]];
    }
  return t;
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __values(o) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o[s2], i2 = 0;
  if (m2)
    return m2.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i2 >= o.length)
          o = void 0;
        return { value: o && o[i2++], done: !o };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __await(v3) {
  return this instanceof __await ? (this.v = v3, this) : new __await(v3);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
  return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2;
  function verb(n) {
    if (g2[n])
      i2[n] = function(v3) {
        return new Promise(function(a2, b2) {
          q2.push([n, v3, a2, b2]) > 1 || resume(n, v3);
        });
      };
  }
  function resume(n, v3) {
    try {
      step(g2[n](v3));
    } catch (e) {
      settle(q2[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q2[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v3) {
    if (f2(v3), q2.shift(), q2.length)
      resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator(o) {
  var i2, p2;
  return i2 = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i2[Symbol.iterator] = function() {
    return this;
  }, i2;
  function verb(n, f2) {
    i2[n] = o[n] ? function(v3) {
      return (p2 = !p2) ? { value: __await(o[n](v3)), done: false } : f2 ? f2(v3) : v3;
    } : f2;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m2 = o[Symbol.asyncIterator], i2;
  return m2 ? m2.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2);
  function verb(n) {
    i2[n] = o[n] && function(v3) {
      return new Promise(function(resolve, reject) {
        v3 = o[n](v3), settle(resolve, reject, v3.done, v3.value);
      });
    };
  }
  function settle(resolve, reject, d, v3) {
    Promise.resolve(v3).then(function(v4) {
      resolve({ value: v4, done: d });
    }, reject);
  }
}

// ../core/node_modules/apache-arrow/util/buffer.mjs
var buffer_exports = {};
__export(buffer_exports, {
  compareArrayLike: () => compareArrayLike,
  joinUint8Arrays: () => joinUint8Arrays,
  memcpy: () => memcpy,
  rebaseValueOffsets: () => rebaseValueOffsets,
  toArrayBufferView: () => toArrayBufferView,
  toArrayBufferViewAsyncIterator: () => toArrayBufferViewAsyncIterator,
  toArrayBufferViewIterator: () => toArrayBufferViewIterator,
  toBigInt64Array: () => toBigInt64Array,
  toBigUint64Array: () => toBigUint64Array,
  toFloat32Array: () => toFloat32Array,
  toFloat32ArrayAsyncIterator: () => toFloat32ArrayAsyncIterator,
  toFloat32ArrayIterator: () => toFloat32ArrayIterator,
  toFloat64Array: () => toFloat64Array,
  toFloat64ArrayAsyncIterator: () => toFloat64ArrayAsyncIterator,
  toFloat64ArrayIterator: () => toFloat64ArrayIterator,
  toInt16Array: () => toInt16Array,
  toInt16ArrayAsyncIterator: () => toInt16ArrayAsyncIterator,
  toInt16ArrayIterator: () => toInt16ArrayIterator,
  toInt32Array: () => toInt32Array,
  toInt32ArrayAsyncIterator: () => toInt32ArrayAsyncIterator,
  toInt32ArrayIterator: () => toInt32ArrayIterator,
  toInt8Array: () => toInt8Array,
  toInt8ArrayAsyncIterator: () => toInt8ArrayAsyncIterator,
  toInt8ArrayIterator: () => toInt8ArrayIterator,
  toUint16Array: () => toUint16Array,
  toUint16ArrayAsyncIterator: () => toUint16ArrayAsyncIterator,
  toUint16ArrayIterator: () => toUint16ArrayIterator,
  toUint32Array: () => toUint32Array,
  toUint32ArrayAsyncIterator: () => toUint32ArrayAsyncIterator,
  toUint32ArrayIterator: () => toUint32ArrayIterator,
  toUint8Array: () => toUint8Array,
  toUint8ArrayAsyncIterator: () => toUint8ArrayAsyncIterator,
  toUint8ArrayIterator: () => toUint8ArrayIterator,
  toUint8ClampedArray: () => toUint8ClampedArray,
  toUint8ClampedArrayAsyncIterator: () => toUint8ClampedArrayAsyncIterator,
  toUint8ClampedArrayIterator: () => toUint8ClampedArrayIterator
});

// ../core/node_modules/apache-arrow/util/utf8.mjs
var decoder = new TextDecoder("utf-8");
var decodeUtf8 = (buffer) => decoder.decode(buffer);
var encoder = new TextEncoder();
var encodeUtf8 = (value) => encoder.encode(value);

// ../core/node_modules/apache-arrow/util/compat.mjs
var [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {
  const BigInt64ArrayUnavailableError = () => {
    throw new Error("BigInt64Array is not available in this environment");
  };
  class BigInt64ArrayUnavailable {
    static get BYTES_PER_ELEMENT() {
      return 8;
    }
    static of() {
      throw BigInt64ArrayUnavailableError();
    }
    static from() {
      throw BigInt64ArrayUnavailableError();
    }
    constructor() {
      throw BigInt64ArrayUnavailableError();
    }
  }
  return typeof BigInt64Array !== "undefined" ? [BigInt64Array, true] : [BigInt64ArrayUnavailable, false];
})();
var [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {
  const BigUint64ArrayUnavailableError = () => {
    throw new Error("BigUint64Array is not available in this environment");
  };
  class BigUint64ArrayUnavailable {
    static get BYTES_PER_ELEMENT() {
      return 8;
    }
    static of() {
      throw BigUint64ArrayUnavailableError();
    }
    static from() {
      throw BigUint64ArrayUnavailableError();
    }
    constructor() {
      throw BigUint64ArrayUnavailableError();
    }
  }
  return typeof BigUint64Array !== "undefined" ? [BigUint64Array, true] : [BigUint64ArrayUnavailable, false];
})();
var isNumber = (x3) => typeof x3 === "number";
var isBoolean = (x3) => typeof x3 === "boolean";
var isFunction = (x3) => typeof x3 === "function";
var isObject = (x3) => x3 != null && Object(x3) === x3;
var isPromise = (x3) => {
  return isObject(x3) && isFunction(x3.then);
};
var isIterable = (x3) => {
  return isObject(x3) && isFunction(x3[Symbol.iterator]);
};
var isAsyncIterable = (x3) => {
  return isObject(x3) && isFunction(x3[Symbol.asyncIterator]);
};
var isArrowJSON = (x3) => {
  return isObject(x3) && isObject(x3["schema"]);
};
var isIteratorResult = (x3) => {
  return isObject(x3) && "done" in x3 && "value" in x3;
};
var isFileHandle = (x3) => {
  return isObject(x3) && isFunction(x3["stat"]) && isNumber(x3["fd"]);
};
var isFetchResponse = (x3) => {
  return isObject(x3) && isReadableDOMStream(x3["body"]);
};
var isReadableInterop = (x3) => "_getDOMStream" in x3 && "_getNodeStream" in x3;
var isWritableDOMStream = (x3) => {
  return isObject(x3) && isFunction(x3["abort"]) && isFunction(x3["getWriter"]) && !isReadableInterop(x3);
};
var isReadableDOMStream = (x3) => {
  return isObject(x3) && isFunction(x3["cancel"]) && isFunction(x3["getReader"]) && !isReadableInterop(x3);
};
var isWritableNodeStream = (x3) => {
  return isObject(x3) && isFunction(x3["end"]) && isFunction(x3["write"]) && isBoolean(x3["writable"]) && !isReadableInterop(x3);
};
var isReadableNodeStream = (x3) => {
  return isObject(x3) && isFunction(x3["read"]) && isFunction(x3["pipe"]) && isBoolean(x3["readable"]) && !isReadableInterop(x3);
};
var isFlatbuffersByteBuffer = (x3) => {
  return isObject(x3) && isFunction(x3["clear"]) && isFunction(x3["bytes"]) && isFunction(x3["position"]) && isFunction(x3["setPosition"]) && isFunction(x3["capacity"]) && isFunction(x3["getBufferIdentifier"]) && isFunction(x3["createLong"]);
};

// ../core/node_modules/apache-arrow/util/buffer.mjs
var SharedArrayBuf = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : ArrayBuffer;
function collapseContiguousByteRanges(chunks) {
  const result = chunks[0] ? [chunks[0]] : [];
  let xOffset, yOffset, xLen, yLen;
  for (let x3, y3, i2 = 0, j2 = 0, n = chunks.length; ++i2 < n; ) {
    x3 = result[j2];
    y3 = chunks[i2];
    if (!x3 || !y3 || x3.buffer !== y3.buffer || y3.byteOffset < x3.byteOffset) {
      y3 && (result[++j2] = y3);
      continue;
    }
    ({ byteOffset: xOffset, byteLength: xLen } = x3);
    ({ byteOffset: yOffset, byteLength: yLen } = y3);
    if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {
      y3 && (result[++j2] = y3);
      continue;
    }
    result[j2] = new Uint8Array(x3.buffer, xOffset, yOffset - xOffset + yLen);
  }
  return result;
}
function memcpy(target, source, targetByteOffset = 0, sourceByteLength = source.byteLength) {
  const targetByteLength = target.byteLength;
  const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);
  const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));
  dst.set(src, targetByteOffset);
  return target;
}
function joinUint8Arrays(chunks, size) {
  const result = collapseContiguousByteRanges(chunks);
  const byteLength = result.reduce((x3, b2) => x3 + b2.byteLength, 0);
  let source, sliced, buffer;
  let offset2 = 0, index2 = -1;
  const length4 = Math.min(size || Number.POSITIVE_INFINITY, byteLength);
  for (const n = result.length; ++index2 < n; ) {
    source = result[index2];
    sliced = source.subarray(0, Math.min(source.length, length4 - offset2));
    if (length4 <= offset2 + sliced.length) {
      if (sliced.length < source.length) {
        result[index2] = source.subarray(sliced.length);
      } else if (sliced.length === source.length) {
        index2++;
      }
      buffer ? memcpy(buffer, sliced, offset2) : buffer = sliced;
      break;
    }
    memcpy(buffer || (buffer = new Uint8Array(length4)), sliced, offset2);
    offset2 += sliced.length;
  }
  return [buffer || new Uint8Array(0), result.slice(index2), byteLength - (buffer ? buffer.byteLength : 0)];
}
function toArrayBufferView(ArrayBufferViewCtor, input2) {
  let value = isIteratorResult(input2) ? input2.value : input2;
  if (value instanceof ArrayBufferViewCtor) {
    if (ArrayBufferViewCtor === Uint8Array) {
      return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);
    }
    return value;
  }
  if (!value) {
    return new ArrayBufferViewCtor(0);
  }
  if (typeof value === "string") {
    value = encodeUtf8(value);
  }
  if (value instanceof ArrayBuffer) {
    return new ArrayBufferViewCtor(value);
  }
  if (value instanceof SharedArrayBuf) {
    return new ArrayBufferViewCtor(value);
  }
  if (isFlatbuffersByteBuffer(value)) {
    return toArrayBufferView(ArrayBufferViewCtor, value.bytes());
  }
  return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);
}
var toInt8Array = (input2) => toArrayBufferView(Int8Array, input2);
var toInt16Array = (input2) => toArrayBufferView(Int16Array, input2);
var toInt32Array = (input2) => toArrayBufferView(Int32Array, input2);
var toBigInt64Array = (input2) => toArrayBufferView(BigInt64ArrayCtor, input2);
var toUint8Array = (input2) => toArrayBufferView(Uint8Array, input2);
var toUint16Array = (input2) => toArrayBufferView(Uint16Array, input2);
var toUint32Array = (input2) => toArrayBufferView(Uint32Array, input2);
var toBigUint64Array = (input2) => toArrayBufferView(BigUint64ArrayCtor, input2);
var toFloat32Array = (input2) => toArrayBufferView(Float32Array, input2);
var toFloat64Array = (input2) => toArrayBufferView(Float64Array, input2);
var toUint8ClampedArray = (input2) => toArrayBufferView(Uint8ClampedArray, input2);
var pump = (iterator) => {
  iterator.next();
  return iterator;
};
function* toArrayBufferViewIterator(ArrayCtor, source) {
  const wrap2 = function* (x3) {
    yield x3;
  };
  const buffers = typeof source === "string" ? wrap2(source) : ArrayBuffer.isView(source) ? wrap2(source) : source instanceof ArrayBuffer ? wrap2(source) : source instanceof SharedArrayBuf ? wrap2(source) : !isIterable(source) ? wrap2(source) : source;
  yield* pump(function* (it2) {
    let r = null;
    do {
      r = it2.next(yield toArrayBufferView(ArrayCtor, r));
    } while (!r.done);
  }(buffers[Symbol.iterator]()));
  return new ArrayCtor();
}
var toInt8ArrayIterator = (input2) => toArrayBufferViewIterator(Int8Array, input2);
var toInt16ArrayIterator = (input2) => toArrayBufferViewIterator(Int16Array, input2);
var toInt32ArrayIterator = (input2) => toArrayBufferViewIterator(Int32Array, input2);
var toUint8ArrayIterator = (input2) => toArrayBufferViewIterator(Uint8Array, input2);
var toUint16ArrayIterator = (input2) => toArrayBufferViewIterator(Uint16Array, input2);
var toUint32ArrayIterator = (input2) => toArrayBufferViewIterator(Uint32Array, input2);
var toFloat32ArrayIterator = (input2) => toArrayBufferViewIterator(Float32Array, input2);
var toFloat64ArrayIterator = (input2) => toArrayBufferViewIterator(Float64Array, input2);
var toUint8ClampedArrayIterator = (input2) => toArrayBufferViewIterator(Uint8ClampedArray, input2);
function toArrayBufferViewAsyncIterator(ArrayCtor, source) {
  return __asyncGenerator(this, arguments, function* toArrayBufferViewAsyncIterator_1() {
    if (isPromise(source)) {
      return yield __await(yield __await(yield* __asyncDelegator(__asyncValues(toArrayBufferViewAsyncIterator(ArrayCtor, yield __await(source))))));
    }
    const wrap2 = function(x3) {
      return __asyncGenerator(this, arguments, function* () {
        yield yield __await(yield __await(x3));
      });
    };
    const emit = function(source2) {
      return __asyncGenerator(this, arguments, function* () {
        yield __await(yield* __asyncDelegator(__asyncValues(pump(function* (it2) {
          let r = null;
          do {
            r = it2.next(yield r === null || r === void 0 ? void 0 : r.value);
          } while (!r.done);
        }(source2[Symbol.iterator]())))));
      });
    };
    const buffers = typeof source === "string" ? wrap2(source) : ArrayBuffer.isView(source) ? wrap2(source) : source instanceof ArrayBuffer ? wrap2(source) : source instanceof SharedArrayBuf ? wrap2(source) : isIterable(source) ? emit(source) : !isAsyncIterable(source) ? wrap2(source) : source;
    yield __await(
      // otherwise if AsyncIterable, use it
      yield* __asyncDelegator(__asyncValues(pump(function(it2) {
        return __asyncGenerator(this, arguments, function* () {
          let r = null;
          do {
            r = yield __await(it2.next(yield yield __await(toArrayBufferView(ArrayCtor, r))));
          } while (!r.done);
        });
      }(buffers[Symbol.asyncIterator]()))))
    );
    return yield __await(new ArrayCtor());
  });
}
var toInt8ArrayAsyncIterator = (input2) => toArrayBufferViewAsyncIterator(Int8Array, input2);
var toInt16ArrayAsyncIterator = (input2) => toArrayBufferViewAsyncIterator(Int16Array, input2);
var toInt32ArrayAsyncIterator = (input2) => toArrayBufferViewAsyncIterator(Int32Array, input2);
var toUint8ArrayAsyncIterator = (input2) => toArrayBufferViewAsyncIterator(Uint8Array, input2);
var toUint16ArrayAsyncIterator = (input2) => toArrayBufferViewAsyncIterator(Uint16Array, input2);
var toUint32ArrayAsyncIterator = (input2) => toArrayBufferViewAsyncIterator(Uint32Array, input2);
var toFloat32ArrayAsyncIterator = (input2) => toArrayBufferViewAsyncIterator(Float32Array, input2);
var toFloat64ArrayAsyncIterator = (input2) => toArrayBufferViewAsyncIterator(Float64Array, input2);
var toUint8ClampedArrayAsyncIterator = (input2) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input2);
function rebaseValueOffsets(offset2, length4, valueOffsets) {
  if (offset2 !== 0) {
    valueOffsets = valueOffsets.slice(0, length4 + 1);
    for (let i2 = -1; ++i2 <= length4; ) {
      valueOffsets[i2] += offset2;
    }
  }
  return valueOffsets;
}
function compareArrayLike(a2, b2) {
  let i2 = 0;
  const n = a2.length;
  if (n !== b2.length) {
    return false;
  }
  if (n > 0) {
    do {
      if (a2[i2] !== b2[i2]) {
        return false;
      }
    } while (++i2 < n);
  }
  return true;
}

// ../core/node_modules/apache-arrow/io/adapters.mjs
var adapters_default = {
  fromIterable(source) {
    return pump2(fromIterable(source));
  },
  fromAsyncIterable(source) {
    return pump2(fromAsyncIterable(source));
  },
  fromDOMStream(source) {
    return pump2(fromDOMStream(source));
  },
  fromNodeStream(stream) {
    return pump2(fromNodeStream(stream));
  },
  // @ts-ignore
  toDOMStream(source, options) {
    throw new Error(`"toDOMStream" not available in this environment`);
  },
  // @ts-ignore
  toNodeStream(source, options) {
    throw new Error(`"toNodeStream" not available in this environment`);
  }
};
var pump2 = (iterator) => {
  iterator.next();
  return iterator;
};
function* fromIterable(source) {
  let done, threw = false;
  let buffers = [], buffer;
  let cmd, size, bufferLength = 0;
  function byteRange() {
    if (cmd === "peek") {
      return joinUint8Arrays(buffers, size)[0];
    }
    [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);
    return buffer;
  }
  ({ cmd, size } = yield null);
  const it2 = toUint8ArrayIterator(source)[Symbol.iterator]();
  try {
    do {
      ({ done, value: buffer } = Number.isNaN(size - bufferLength) ? it2.next() : it2.next(size - bufferLength));
      if (!done && buffer.byteLength > 0) {
        buffers.push(buffer);
        bufferLength += buffer.byteLength;
      }
      if (done || size <= bufferLength) {
        do {
          ({ cmd, size } = yield byteRange());
        } while (size < bufferLength);
      }
    } while (!done);
  } catch (e) {
    (threw = true) && typeof it2.throw === "function" && it2.throw(e);
  } finally {
    threw === false && typeof it2.return === "function" && it2.return(null);
  }
  return null;
}
function fromAsyncIterable(source) {
  return __asyncGenerator(this, arguments, function* fromAsyncIterable_1() {
    let done, threw = false;
    let buffers = [], buffer;
    let cmd, size, bufferLength = 0;
    function byteRange() {
      if (cmd === "peek") {
        return joinUint8Arrays(buffers, size)[0];
      }
      [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);
      return buffer;
    }
    ({ cmd, size } = yield yield __await(null));
    const it2 = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();
    try {
      do {
        ({ done, value: buffer } = Number.isNaN(size - bufferLength) ? yield __await(it2.next()) : yield __await(it2.next(size - bufferLength)));
        if (!done && buffer.byteLength > 0) {
          buffers.push(buffer);
          bufferLength += buffer.byteLength;
        }
        if (done || size <= bufferLength) {
          do {
            ({ cmd, size } = yield yield __await(byteRange()));
          } while (size < bufferLength);
        }
      } while (!done);
    } catch (e) {
      (threw = true) && typeof it2.throw === "function" && (yield __await(it2.throw(e)));
    } finally {
      threw === false && typeof it2.return === "function" && (yield __await(it2.return(new Uint8Array(0))));
    }
    return yield __await(null);
  });
}
function fromDOMStream(source) {
  return __asyncGenerator(this, arguments, function* fromDOMStream_1() {
    let done = false, threw = false;
    let buffers = [], buffer;
    let cmd, size, bufferLength = 0;
    function byteRange() {
      if (cmd === "peek") {
        return joinUint8Arrays(buffers, size)[0];
      }
      [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);
      return buffer;
    }
    ({ cmd, size } = yield yield __await(null));
    const it2 = new AdaptiveByteReader(source);
    try {
      do {
        ({ done, value: buffer } = Number.isNaN(size - bufferLength) ? yield __await(it2["read"]()) : yield __await(it2["read"](size - bufferLength)));
        if (!done && buffer.byteLength > 0) {
          buffers.push(toUint8Array(buffer));
          bufferLength += buffer.byteLength;
        }
        if (done || size <= bufferLength) {
          do {
            ({ cmd, size } = yield yield __await(byteRange()));
          } while (size < bufferLength);
        }
      } while (!done);
    } catch (e) {
      (threw = true) && (yield __await(it2["cancel"](e)));
    } finally {
      threw === false ? yield __await(it2["cancel"]()) : source["locked"] && it2.releaseLock();
    }
    return yield __await(null);
  });
}
var AdaptiveByteReader = class {
  constructor(source) {
    this.source = source;
    this.reader = null;
    this.reader = this.source["getReader"]();
    this.reader["closed"].catch(() => {
    });
  }
  get closed() {
    return this.reader ? this.reader["closed"].catch(() => {
    }) : Promise.resolve();
  }
  releaseLock() {
    if (this.reader) {
      this.reader.releaseLock();
    }
    this.reader = null;
  }
  cancel(reason) {
    return __awaiter(this, void 0, void 0, function* () {
      const { reader, source } = this;
      reader && (yield reader["cancel"](reason).catch(() => {
      }));
      source && (source["locked"] && this.releaseLock());
    });
  }
  read(size) {
    return __awaiter(this, void 0, void 0, function* () {
      if (size === 0) {
        return { done: this.reader == null, value: new Uint8Array(0) };
      }
      const result = yield this.reader.read();
      !result.done && (result.value = toUint8Array(result));
      return result;
    });
  }
};
var onEvent = (stream, event) => {
  const handler = (_2) => resolve([event, _2]);
  let resolve;
  return [event, handler, new Promise((r) => (resolve = r) && stream["once"](event, handler))];
};
function fromNodeStream(stream) {
  return __asyncGenerator(this, arguments, function* fromNodeStream_1() {
    const events = [];
    let event = "error";
    let done = false, err = null;
    let cmd, size, bufferLength = 0;
    let buffers = [], buffer;
    function byteRange() {
      if (cmd === "peek") {
        return joinUint8Arrays(buffers, size)[0];
      }
      [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);
      return buffer;
    }
    ({ cmd, size } = yield yield __await(null));
    if (stream["isTTY"]) {
      yield yield __await(new Uint8Array(0));
      return yield __await(null);
    }
    try {
      events[0] = onEvent(stream, "end");
      events[1] = onEvent(stream, "error");
      do {
        events[2] = onEvent(stream, "readable");
        [event, err] = yield __await(Promise.race(events.map((x3) => x3[2])));
        if (event === "error") {
          break;
        }
        if (!(done = event === "end")) {
          if (!Number.isFinite(size - bufferLength)) {
            buffer = toUint8Array(stream["read"]());
          } else {
            buffer = toUint8Array(stream["read"](size - bufferLength));
            if (buffer.byteLength < size - bufferLength) {
              buffer = toUint8Array(stream["read"]());
            }
          }
          if (buffer.byteLength > 0) {
            buffers.push(buffer);
            bufferLength += buffer.byteLength;
          }
        }
        if (done || size <= bufferLength) {
          do {
            ({ cmd, size } = yield yield __await(byteRange()));
          } while (size < bufferLength);
        }
      } while (!done);
    } finally {
      yield __await(cleanup(events, event === "error" ? err : null));
    }
    return yield __await(null);
    function cleanup(events2, err2) {
      buffer = buffers = null;
      return new Promise((resolve, reject) => {
        for (const [evt, fn] of events2) {
          stream["off"](evt, fn);
        }
        try {
          const destroy = stream["destroy"];
          destroy && destroy.call(stream, err2);
          err2 = void 0;
        } catch (e) {
          err2 = e || err2;
        } finally {
          err2 != null ? reject(err2) : resolve();
        }
      });
    }
  });
}

// ../core/node_modules/apache-arrow/enum.mjs
var MetadataVersion;
(function(MetadataVersion5) {
  MetadataVersion5[MetadataVersion5["V1"] = 0] = "V1";
  MetadataVersion5[MetadataVersion5["V2"] = 1] = "V2";
  MetadataVersion5[MetadataVersion5["V3"] = 2] = "V3";
  MetadataVersion5[MetadataVersion5["V4"] = 3] = "V4";
  MetadataVersion5[MetadataVersion5["V5"] = 4] = "V5";
})(MetadataVersion || (MetadataVersion = {}));
var UnionMode;
(function(UnionMode5) {
  UnionMode5[UnionMode5["Sparse"] = 0] = "Sparse";
  UnionMode5[UnionMode5["Dense"] = 1] = "Dense";
})(UnionMode || (UnionMode = {}));
var Precision;
(function(Precision5) {
  Precision5[Precision5["HALF"] = 0] = "HALF";
  Precision5[Precision5["SINGLE"] = 1] = "SINGLE";
  Precision5[Precision5["DOUBLE"] = 2] = "DOUBLE";
})(Precision || (Precision = {}));
var DateUnit;
(function(DateUnit5) {
  DateUnit5[DateUnit5["DAY"] = 0] = "DAY";
  DateUnit5[DateUnit5["MILLISECOND"] = 1] = "MILLISECOND";
})(DateUnit || (DateUnit = {}));
var TimeUnit;
(function(TimeUnit5) {
  TimeUnit5[TimeUnit5["SECOND"] = 0] = "SECOND";
  TimeUnit5[TimeUnit5["MILLISECOND"] = 1] = "MILLISECOND";
  TimeUnit5[TimeUnit5["MICROSECOND"] = 2] = "MICROSECOND";
  TimeUnit5[TimeUnit5["NANOSECOND"] = 3] = "NANOSECOND";
})(TimeUnit || (TimeUnit = {}));
var IntervalUnit;
(function(IntervalUnit5) {
  IntervalUnit5[IntervalUnit5["YEAR_MONTH"] = 0] = "YEAR_MONTH";
  IntervalUnit5[IntervalUnit5["DAY_TIME"] = 1] = "DAY_TIME";
  IntervalUnit5[IntervalUnit5["MONTH_DAY_NANO"] = 2] = "MONTH_DAY_NANO";
})(IntervalUnit || (IntervalUnit = {}));
var MessageHeader;
(function(MessageHeader5) {
  MessageHeader5[MessageHeader5["NONE"] = 0] = "NONE";
  MessageHeader5[MessageHeader5["Schema"] = 1] = "Schema";
  MessageHeader5[MessageHeader5["DictionaryBatch"] = 2] = "DictionaryBatch";
  MessageHeader5[MessageHeader5["RecordBatch"] = 3] = "RecordBatch";
  MessageHeader5[MessageHeader5["Tensor"] = 4] = "Tensor";
  MessageHeader5[MessageHeader5["SparseTensor"] = 5] = "SparseTensor";
})(MessageHeader || (MessageHeader = {}));
var Type;
(function(Type5) {
  Type5[Type5["NONE"] = 0] = "NONE";
  Type5[Type5["Null"] = 1] = "Null";
  Type5[Type5["Int"] = 2] = "Int";
  Type5[Type5["Float"] = 3] = "Float";
  Type5[Type5["Binary"] = 4] = "Binary";
  Type5[Type5["Utf8"] = 5] = "Utf8";
  Type5[Type5["Bool"] = 6] = "Bool";
  Type5[Type5["Decimal"] = 7] = "Decimal";
  Type5[Type5["Date"] = 8] = "Date";
  Type5[Type5["Time"] = 9] = "Time";
  Type5[Type5["Timestamp"] = 10] = "Timestamp";
  Type5[Type5["Interval"] = 11] = "Interval";
  Type5[Type5["List"] = 12] = "List";
  Type5[Type5["Struct"] = 13] = "Struct";
  Type5[Type5["Union"] = 14] = "Union";
  Type5[Type5["FixedSizeBinary"] = 15] = "FixedSizeBinary";
  Type5[Type5["FixedSizeList"] = 16] = "FixedSizeList";
  Type5[Type5["Map"] = 17] = "Map";
  Type5[Type5["Dictionary"] = -1] = "Dictionary";
  Type5[Type5["Int8"] = -2] = "Int8";
  Type5[Type5["Int16"] = -3] = "Int16";
  Type5[Type5["Int32"] = -4] = "Int32";
  Type5[Type5["Int64"] = -5] = "Int64";
  Type5[Type5["Uint8"] = -6] = "Uint8";
  Type5[Type5["Uint16"] = -7] = "Uint16";
  Type5[Type5["Uint32"] = -8] = "Uint32";
  Type5[Type5["Uint64"] = -9] = "Uint64";
  Type5[Type5["Float16"] = -10] = "Float16";
  Type5[Type5["Float32"] = -11] = "Float32";
  Type5[Type5["Float64"] = -12] = "Float64";
  Type5[Type5["DateDay"] = -13] = "DateDay";
  Type5[Type5["DateMillisecond"] = -14] = "DateMillisecond";
  Type5[Type5["TimestampSecond"] = -15] = "TimestampSecond";
  Type5[Type5["TimestampMillisecond"] = -16] = "TimestampMillisecond";
  Type5[Type5["TimestampMicrosecond"] = -17] = "TimestampMicrosecond";
  Type5[Type5["TimestampNanosecond"] = -18] = "TimestampNanosecond";
  Type5[Type5["TimeSecond"] = -19] = "TimeSecond";
  Type5[Type5["TimeMillisecond"] = -20] = "TimeMillisecond";
  Type5[Type5["TimeMicrosecond"] = -21] = "TimeMicrosecond";
  Type5[Type5["TimeNanosecond"] = -22] = "TimeNanosecond";
  Type5[Type5["DenseUnion"] = -23] = "DenseUnion";
  Type5[Type5["SparseUnion"] = -24] = "SparseUnion";
  Type5[Type5["IntervalDayTime"] = -25] = "IntervalDayTime";
  Type5[Type5["IntervalYearMonth"] = -26] = "IntervalYearMonth";
})(Type || (Type = {}));
var BufferType;
(function(BufferType3) {
  BufferType3[BufferType3["OFFSET"] = 0] = "OFFSET";
  BufferType3[BufferType3["DATA"] = 1] = "DATA";
  BufferType3[BufferType3["VALIDITY"] = 2] = "VALIDITY";
  BufferType3[BufferType3["TYPE"] = 3] = "TYPE";
})(BufferType || (BufferType = {}));

// ../core/node_modules/apache-arrow/util/vector.mjs
var vector_exports = {};
__export(vector_exports, {
  clampIndex: () => clampIndex,
  clampRange: () => clampRange,
  createElementComparator: () => createElementComparator
});

// ../core/node_modules/apache-arrow/util/pretty.mjs
var undf = void 0;
function valueToString(x3) {
  if (x3 === null) {
    return "null";
  }
  if (x3 === undf) {
    return "undefined";
  }
  switch (typeof x3) {
    case "number":
      return `${x3}`;
    case "bigint":
      return `${x3}`;
    case "string":
      return `"${x3}"`;
  }
  if (typeof x3[Symbol.toPrimitive] === "function") {
    return x3[Symbol.toPrimitive]("string");
  }
  if (ArrayBuffer.isView(x3)) {
    if (x3 instanceof BigInt64ArrayCtor || x3 instanceof BigUint64ArrayCtor) {
      return `[${[...x3].map((x4) => valueToString(x4))}]`;
    }
    return `[${x3}]`;
  }
  return ArrayBuffer.isView(x3) ? `[${x3}]` : JSON.stringify(x3, (_2, y3) => typeof y3 === "bigint" ? `${y3}` : y3);
}

// ../core/node_modules/apache-arrow/util/bn.mjs
var bn_exports = {};
__export(bn_exports, {
  BN: () => BN,
  bignumToBigInt: () => bignumToBigInt,
  bignumToString: () => bignumToString,
  isArrowBigNumSymbol: () => isArrowBigNumSymbol
});
var isArrowBigNumSymbol = Symbol.for("isArrowBigNum");
function BigNum(x3, ...xs) {
  if (xs.length === 0) {
    return Object.setPrototypeOf(toArrayBufferView(this["TypedArray"], x3), this.constructor.prototype);
  }
  return Object.setPrototypeOf(new this["TypedArray"](x3, ...xs), this.constructor.prototype);
}
BigNum.prototype[isArrowBigNumSymbol] = true;
BigNum.prototype.toJSON = function() {
  return `"${bignumToString(this)}"`;
};
BigNum.prototype.valueOf = function() {
  return bignumToNumber(this);
};
BigNum.prototype.toString = function() {
  return bignumToString(this);
};
BigNum.prototype[Symbol.toPrimitive] = function(hint = "default") {
  switch (hint) {
    case "number":
      return bignumToNumber(this);
    case "string":
      return bignumToString(this);
    case "default":
      return bignumToBigInt(this);
  }
  return bignumToString(this);
};
function SignedBigNum(...args) {
  return BigNum.apply(this, args);
}
function UnsignedBigNum(...args) {
  return BigNum.apply(this, args);
}
function DecimalBigNum(...args) {
  return BigNum.apply(this, args);
}
Object.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));
Object.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));
Object.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));
Object.assign(SignedBigNum.prototype, BigNum.prototype, { "constructor": SignedBigNum, "signed": true, "TypedArray": Int32Array, "BigIntArray": BigInt64ArrayCtor });
Object.assign(UnsignedBigNum.prototype, BigNum.prototype, { "constructor": UnsignedBigNum, "signed": false, "TypedArray": Uint32Array, "BigIntArray": BigUint64ArrayCtor });
Object.assign(DecimalBigNum.prototype, BigNum.prototype, { "constructor": DecimalBigNum, "signed": true, "TypedArray": Uint32Array, "BigIntArray": BigUint64ArrayCtor });
function bignumToNumber(bn) {
  const { buffer, byteOffset, length: length4, "signed": signed } = bn;
  const words = new BigUint64ArrayCtor(buffer, byteOffset, length4);
  const negative2 = signed && words[words.length - 1] & BigInt(1) << BigInt(63);
  let number7 = negative2 ? BigInt(1) : BigInt(0);
  let i2 = BigInt(0);
  if (!negative2) {
    for (const word of words) {
      number7 += word * (BigInt(1) << BigInt(32) * i2++);
    }
  } else {
    for (const word of words) {
      number7 += ~word * (BigInt(1) << BigInt(32) * i2++);
    }
    number7 *= BigInt(-1);
  }
  return number7;
}
var bignumToString = (a2) => a2.byteLength === 8 ? `${new a2["BigIntArray"](a2.buffer, a2.byteOffset, 1)[0]}` : decimalToString(a2);
var bignumToBigInt = (a2) => a2.byteLength === 8 ? new a2["BigIntArray"](a2.buffer, a2.byteOffset, 1)[0] : decimalToString(a2);
function decimalToString(a2) {
  let digits = "";
  const base64 = new Uint32Array(2);
  let base32 = new Uint16Array(a2.buffer, a2.byteOffset, a2.byteLength / 2);
  const checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);
  let i2 = -1;
  const n = base32.length - 1;
  do {
    for (base64[0] = base32[i2 = 0]; i2 < n; ) {
      base32[i2++] = base64[1] = base64[0] / 10;
      base64[0] = (base64[0] - base64[1] * 10 << 16) + base32[i2];
    }
    base32[i2] = base64[1] = base64[0] / 10;
    base64[0] = base64[0] - base64[1] * 10;
    digits = `${base64[0]}${digits}`;
  } while (checks[0] || checks[1] || checks[2] || checks[3]);
  return digits !== null && digits !== void 0 ? digits : `0`;
}
var BN = class _BN {
  /** @nocollapse */
  static new(num, isSigned) {
    switch (isSigned) {
      case true:
        return new SignedBigNum(num);
      case false:
        return new UnsignedBigNum(num);
    }
    switch (num.constructor) {
      case Int8Array:
      case Int16Array:
      case Int32Array:
      case BigInt64ArrayCtor:
        return new SignedBigNum(num);
    }
    if (num.byteLength === 16) {
      return new DecimalBigNum(num);
    }
    return new UnsignedBigNum(num);
  }
  /** @nocollapse */
  static signed(num) {
    return new SignedBigNum(num);
  }
  /** @nocollapse */
  static unsigned(num) {
    return new UnsignedBigNum(num);
  }
  /** @nocollapse */
  static decimal(num) {
    return new DecimalBigNum(num);
  }
  constructor(num, isSigned) {
    return _BN.new(num, isSigned);
  }
};

// ../core/node_modules/apache-arrow/util/bigint.mjs
function bigIntToNumber(number7) {
  if (typeof number7 === "bigint" && (number7 < Number.MIN_SAFE_INTEGER || number7 > Number.MAX_SAFE_INTEGER)) {
    throw new TypeError(`${number7} is not safe to convert to a number.`);
  }
  return Number(number7);
}

// ../core/node_modules/apache-arrow/type.mjs
var _a;
var _b;
var _c;
var _d;
var _e;
var _f;
var _g;
var _h;
var _j;
var _k;
var _l;
var _m;
var _o;
var _p;
var _q;
var _r;
var _s;
var _t;
var _u;
var DataType = class _DataType {
  /** @nocollapse */
  static isNull(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Null;
  }
  /** @nocollapse */
  static isInt(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Int;
  }
  /** @nocollapse */
  static isFloat(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Float;
  }
  /** @nocollapse */
  static isBinary(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Binary;
  }
  /** @nocollapse */
  static isUtf8(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Utf8;
  }
  /** @nocollapse */
  static isBool(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Bool;
  }
  /** @nocollapse */
  static isDecimal(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Decimal;
  }
  /** @nocollapse */
  static isDate(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Date;
  }
  /** @nocollapse */
  static isTime(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Time;
  }
  /** @nocollapse */
  static isTimestamp(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Timestamp;
  }
  /** @nocollapse */
  static isInterval(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Interval;
  }
  /** @nocollapse */
  static isList(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.List;
  }
  /** @nocollapse */
  static isStruct(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Struct;
  }
  /** @nocollapse */
  static isUnion(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Union;
  }
  /** @nocollapse */
  static isFixedSizeBinary(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.FixedSizeBinary;
  }
  /** @nocollapse */
  static isFixedSizeList(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.FixedSizeList;
  }
  /** @nocollapse */
  static isMap(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Map;
  }
  /** @nocollapse */
  static isDictionary(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type.Dictionary;
  }
  /** @nocollapse */
  static isDenseUnion(x3) {
    return _DataType.isUnion(x3) && x3.mode === UnionMode.Dense;
  }
  /** @nocollapse */
  static isSparseUnion(x3) {
    return _DataType.isUnion(x3) && x3.mode === UnionMode.Sparse;
  }
  get typeId() {
    return Type.NONE;
  }
};
_a = Symbol.toStringTag;
DataType[_a] = ((proto) => {
  proto.children = null;
  proto.ArrayType = Array;
  return proto[Symbol.toStringTag] = "DataType";
})(DataType.prototype);
var Null = class extends DataType {
  toString() {
    return `Null`;
  }
  get typeId() {
    return Type.Null;
  }
};
_b = Symbol.toStringTag;
Null[_b] = ((proto) => proto[Symbol.toStringTag] = "Null")(Null.prototype);
var Int_ = class extends DataType {
  constructor(isSigned, bitWidth) {
    super();
    this.isSigned = isSigned;
    this.bitWidth = bitWidth;
  }
  get typeId() {
    return Type.Int;
  }
  get ArrayType() {
    switch (this.bitWidth) {
      case 8:
        return this.isSigned ? Int8Array : Uint8Array;
      case 16:
        return this.isSigned ? Int16Array : Uint16Array;
      case 32:
        return this.isSigned ? Int32Array : Uint32Array;
      case 64:
        return this.isSigned ? BigInt64ArrayCtor : BigUint64ArrayCtor;
    }
    throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
  }
  toString() {
    return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`;
  }
};
_c = Symbol.toStringTag;
Int_[_c] = ((proto) => {
  proto.isSigned = null;
  proto.bitWidth = null;
  return proto[Symbol.toStringTag] = "Int";
})(Int_.prototype);
var Int8 = class extends Int_ {
  constructor() {
    super(true, 8);
  }
  get ArrayType() {
    return Int8Array;
  }
};
var Int16 = class extends Int_ {
  constructor() {
    super(true, 16);
  }
  get ArrayType() {
    return Int16Array;
  }
};
var Int32 = class extends Int_ {
  constructor() {
    super(true, 32);
  }
  get ArrayType() {
    return Int32Array;
  }
};
var Int64 = class extends Int_ {
  constructor() {
    super(true, 64);
  }
  get ArrayType() {
    return BigInt64ArrayCtor;
  }
};
var Uint8 = class extends Int_ {
  constructor() {
    super(false, 8);
  }
  get ArrayType() {
    return Uint8Array;
  }
};
var Uint16 = class extends Int_ {
  constructor() {
    super(false, 16);
  }
  get ArrayType() {
    return Uint16Array;
  }
};
var Uint32 = class extends Int_ {
  constructor() {
    super(false, 32);
  }
  get ArrayType() {
    return Uint32Array;
  }
};
var Uint64 = class extends Int_ {
  constructor() {
    super(false, 64);
  }
  get ArrayType() {
    return BigUint64ArrayCtor;
  }
};
Object.defineProperty(Int8.prototype, "ArrayType", { value: Int8Array });
Object.defineProperty(Int16.prototype, "ArrayType", { value: Int16Array });
Object.defineProperty(Int32.prototype, "ArrayType", { value: Int32Array });
Object.defineProperty(Int64.prototype, "ArrayType", { value: BigInt64ArrayCtor });
Object.defineProperty(Uint8.prototype, "ArrayType", { value: Uint8Array });
Object.defineProperty(Uint16.prototype, "ArrayType", { value: Uint16Array });
Object.defineProperty(Uint32.prototype, "ArrayType", { value: Uint32Array });
Object.defineProperty(Uint64.prototype, "ArrayType", { value: BigUint64ArrayCtor });
var Float = class extends DataType {
  constructor(precision) {
    super();
    this.precision = precision;
  }
  get typeId() {
    return Type.Float;
  }
  get ArrayType() {
    switch (this.precision) {
      case Precision.HALF:
        return Uint16Array;
      case Precision.SINGLE:
        return Float32Array;
      case Precision.DOUBLE:
        return Float64Array;
    }
    throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
  }
  toString() {
    return `Float${this.precision << 5 || 16}`;
  }
};
_d = Symbol.toStringTag;
Float[_d] = ((proto) => {
  proto.precision = null;
  return proto[Symbol.toStringTag] = "Float";
})(Float.prototype);
var Float16 = class extends Float {
  constructor() {
    super(Precision.HALF);
  }
};
var Float32 = class extends Float {
  constructor() {
    super(Precision.SINGLE);
  }
};
var Float64 = class extends Float {
  constructor() {
    super(Precision.DOUBLE);
  }
};
Object.defineProperty(Float16.prototype, "ArrayType", { value: Uint16Array });
Object.defineProperty(Float32.prototype, "ArrayType", { value: Float32Array });
Object.defineProperty(Float64.prototype, "ArrayType", { value: Float64Array });
var Binary = class extends DataType {
  constructor() {
    super();
  }
  get typeId() {
    return Type.Binary;
  }
  toString() {
    return `Binary`;
  }
};
_e = Symbol.toStringTag;
Binary[_e] = ((proto) => {
  proto.ArrayType = Uint8Array;
  return proto[Symbol.toStringTag] = "Binary";
})(Binary.prototype);
var Utf8 = class extends DataType {
  constructor() {
    super();
  }
  get typeId() {
    return Type.Utf8;
  }
  toString() {
    return `Utf8`;
  }
};
_f = Symbol.toStringTag;
Utf8[_f] = ((proto) => {
  proto.ArrayType = Uint8Array;
  return proto[Symbol.toStringTag] = "Utf8";
})(Utf8.prototype);
var Bool = class extends DataType {
  constructor() {
    super();
  }
  get typeId() {
    return Type.Bool;
  }
  toString() {
    return `Bool`;
  }
};
_g = Symbol.toStringTag;
Bool[_g] = ((proto) => {
  proto.ArrayType = Uint8Array;
  return proto[Symbol.toStringTag] = "Bool";
})(Bool.prototype);
var Decimal = class extends DataType {
  constructor(scale3, precision, bitWidth = 128) {
    super();
    this.scale = scale3;
    this.precision = precision;
    this.bitWidth = bitWidth;
  }
  get typeId() {
    return Type.Decimal;
  }
  toString() {
    return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`;
  }
};
_h = Symbol.toStringTag;
Decimal[_h] = ((proto) => {
  proto.scale = null;
  proto.precision = null;
  proto.ArrayType = Uint32Array;
  return proto[Symbol.toStringTag] = "Decimal";
})(Decimal.prototype);
var Date_ = class extends DataType {
  constructor(unit3) {
    super();
    this.unit = unit3;
  }
  get typeId() {
    return Type.Date;
  }
  toString() {
    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;
  }
};
_j = Symbol.toStringTag;
Date_[_j] = ((proto) => {
  proto.unit = null;
  proto.ArrayType = Int32Array;
  return proto[Symbol.toStringTag] = "Date";
})(Date_.prototype);
var Time_ = class extends DataType {
  constructor(unit3, bitWidth) {
    super();
    this.unit = unit3;
    this.bitWidth = bitWidth;
  }
  get typeId() {
    return Type.Time;
  }
  toString() {
    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;
  }
  get ArrayType() {
    switch (this.bitWidth) {
      case 32:
        return Int32Array;
      case 64:
        return BigInt64ArrayCtor;
    }
    throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
  }
};
_k = Symbol.toStringTag;
Time_[_k] = ((proto) => {
  proto.unit = null;
  proto.bitWidth = null;
  return proto[Symbol.toStringTag] = "Time";
})(Time_.prototype);
var Timestamp_ = class extends DataType {
  constructor(unit3, timezone) {
    super();
    this.unit = unit3;
    this.timezone = timezone;
  }
  get typeId() {
    return Type.Timestamp;
  }
  toString() {
    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`;
  }
};
_l = Symbol.toStringTag;
Timestamp_[_l] = ((proto) => {
  proto.unit = null;
  proto.timezone = null;
  proto.ArrayType = Int32Array;
  return proto[Symbol.toStringTag] = "Timestamp";
})(Timestamp_.prototype);
var Interval_ = class extends DataType {
  constructor(unit3) {
    super();
    this.unit = unit3;
  }
  get typeId() {
    return Type.Interval;
  }
  toString() {
    return `Interval<${IntervalUnit[this.unit]}>`;
  }
};
_m = Symbol.toStringTag;
Interval_[_m] = ((proto) => {
  proto.unit = null;
  proto.ArrayType = Int32Array;
  return proto[Symbol.toStringTag] = "Interval";
})(Interval_.prototype);
var List = class extends DataType {
  constructor(child) {
    super();
    this.children = [child];
  }
  get typeId() {
    return Type.List;
  }
  toString() {
    return `List<${this.valueType}>`;
  }
  get valueType() {
    return this.children[0].type;
  }
  get valueField() {
    return this.children[0];
  }
  get ArrayType() {
    return this.valueType.ArrayType;
  }
};
_o = Symbol.toStringTag;
List[_o] = ((proto) => {
  proto.children = null;
  return proto[Symbol.toStringTag] = "List";
})(List.prototype);
var Struct = class extends DataType {
  constructor(children2) {
    super();
    this.children = children2;
  }
  get typeId() {
    return Type.Struct;
  }
  toString() {
    return `Struct<{${this.children.map((f2) => `${f2.name}:${f2.type}`).join(`, `)}}>`;
  }
};
_p = Symbol.toStringTag;
Struct[_p] = ((proto) => {
  proto.children = null;
  return proto[Symbol.toStringTag] = "Struct";
})(Struct.prototype);
var Union_ = class extends DataType {
  constructor(mode3, typeIds, children2) {
    super();
    this.mode = mode3;
    this.children = children2;
    this.typeIds = typeIds = Int32Array.from(typeIds);
    this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex, /* @__PURE__ */ Object.create(null));
  }
  get typeId() {
    return Type.Union;
  }
  toString() {
    return `${this[Symbol.toStringTag]}<${this.children.map((x3) => `${x3.type}`).join(` | `)}>`;
  }
};
_q = Symbol.toStringTag;
Union_[_q] = ((proto) => {
  proto.mode = null;
  proto.typeIds = null;
  proto.children = null;
  proto.typeIdToChildIndex = null;
  proto.ArrayType = Int8Array;
  return proto[Symbol.toStringTag] = "Union";
})(Union_.prototype);
var FixedSizeBinary = class extends DataType {
  constructor(byteWidth) {
    super();
    this.byteWidth = byteWidth;
  }
  get typeId() {
    return Type.FixedSizeBinary;
  }
  toString() {
    return `FixedSizeBinary[${this.byteWidth}]`;
  }
};
_r = Symbol.toStringTag;
FixedSizeBinary[_r] = ((proto) => {
  proto.byteWidth = null;
  proto.ArrayType = Uint8Array;
  return proto[Symbol.toStringTag] = "FixedSizeBinary";
})(FixedSizeBinary.prototype);
var FixedSizeList = class extends DataType {
  constructor(listSize, child) {
    super();
    this.listSize = listSize;
    this.children = [child];
  }
  get typeId() {
    return Type.FixedSizeList;
  }
  get valueType() {
    return this.children[0].type;
  }
  get valueField() {
    return this.children[0];
  }
  get ArrayType() {
    return this.valueType.ArrayType;
  }
  toString() {
    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;
  }
};
_s = Symbol.toStringTag;
FixedSizeList[_s] = ((proto) => {
  proto.children = null;
  proto.listSize = null;
  return proto[Symbol.toStringTag] = "FixedSizeList";
})(FixedSizeList.prototype);
var Map_ = class extends DataType {
  constructor(child, keysSorted = false) {
    super();
    this.children = [child];
    this.keysSorted = keysSorted;
  }
  get typeId() {
    return Type.Map;
  }
  get keyType() {
    return this.children[0].type.children[0].type;
  }
  get valueType() {
    return this.children[0].type.children[1].type;
  }
  get childType() {
    return this.children[0].type;
  }
  toString() {
    return `Map<{${this.children[0].type.children.map((f2) => `${f2.name}:${f2.type}`).join(`, `)}}>`;
  }
};
_t = Symbol.toStringTag;
Map_[_t] = ((proto) => {
  proto.children = null;
  proto.keysSorted = null;
  return proto[Symbol.toStringTag] = "Map_";
})(Map_.prototype);
var getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);
var Dictionary = class extends DataType {
  constructor(dictionary, indices, id2, isOrdered2) {
    super();
    this.indices = indices;
    this.dictionary = dictionary;
    this.isOrdered = isOrdered2 || false;
    this.id = id2 == null ? getId() : bigIntToNumber(id2);
  }
  get typeId() {
    return Type.Dictionary;
  }
  get children() {
    return this.dictionary.children;
  }
  get valueType() {
    return this.dictionary;
  }
  get ArrayType() {
    return this.dictionary.ArrayType;
  }
  toString() {
    return `Dictionary<${this.indices}, ${this.dictionary}>`;
  }
};
_u = Symbol.toStringTag;
Dictionary[_u] = ((proto) => {
  proto.id = null;
  proto.indices = null;
  proto.isOrdered = null;
  proto.dictionary = null;
  return proto[Symbol.toStringTag] = "Dictionary";
})(Dictionary.prototype);
function strideForType(type2) {
  const t = type2;
  switch (type2.typeId) {
    case Type.Decimal:
      return type2.bitWidth / 32;
    case Type.Timestamp:
      return 2;
    case Type.Date:
      return 1 + t.unit;
    case Type.Interval:
      return 1 + t.unit;
    case Type.FixedSizeList:
      return t.listSize;
    case Type.FixedSizeBinary:
      return t.byteWidth;
    default:
      return 1;
  }
}

// ../core/node_modules/apache-arrow/visitor.mjs
var Visitor = class {
  visitMany(nodes, ...args) {
    return nodes.map((node, i2) => this.visit(node, ...args.map((x3) => x3[i2])));
  }
  visit(...args) {
    return this.getVisitFn(args[0], false).apply(this, args);
  }
  getVisitFn(node, throwIfNotFound = true) {
    return getVisitFn(this, node, throwIfNotFound);
  }
  getVisitFnByTypeId(typeId, throwIfNotFound = true) {
    return getVisitFnByTypeId(this, typeId, throwIfNotFound);
  }
  visitNull(_node, ..._args) {
    return null;
  }
  visitBool(_node, ..._args) {
    return null;
  }
  visitInt(_node, ..._args) {
    return null;
  }
  visitFloat(_node, ..._args) {
    return null;
  }
  visitUtf8(_node, ..._args) {
    return null;
  }
  visitBinary(_node, ..._args) {
    return null;
  }
  visitFixedSizeBinary(_node, ..._args) {
    return null;
  }
  visitDate(_node, ..._args) {
    return null;
  }
  visitTimestamp(_node, ..._args) {
    return null;
  }
  visitTime(_node, ..._args) {
    return null;
  }
  visitDecimal(_node, ..._args) {
    return null;
  }
  visitList(_node, ..._args) {
    return null;
  }
  visitStruct(_node, ..._args) {
    return null;
  }
  visitUnion(_node, ..._args) {
    return null;
  }
  visitDictionary(_node, ..._args) {
    return null;
  }
  visitInterval(_node, ..._args) {
    return null;
  }
  visitFixedSizeList(_node, ..._args) {
    return null;
  }
  visitMap(_node, ..._args) {
    return null;
  }
};
function getVisitFn(visitor, node, throwIfNotFound = true) {
  if (typeof node === "number") {
    return getVisitFnByTypeId(visitor, node, throwIfNotFound);
  }
  if (typeof node === "string" && node in Type) {
    return getVisitFnByTypeId(visitor, Type[node], throwIfNotFound);
  }
  if (node && node instanceof DataType) {
    return getVisitFnByTypeId(visitor, inferDType(node), throwIfNotFound);
  }
  if ((node === null || node === void 0 ? void 0 : node.type) && node.type instanceof DataType) {
    return getVisitFnByTypeId(visitor, inferDType(node.type), throwIfNotFound);
  }
  return getVisitFnByTypeId(visitor, Type.NONE, throwIfNotFound);
}
function getVisitFnByTypeId(visitor, dtype, throwIfNotFound = true) {
  let fn = null;
  switch (dtype) {
    case Type.Null:
      fn = visitor.visitNull;
      break;
    case Type.Bool:
      fn = visitor.visitBool;
      break;
    case Type.Int:
      fn = visitor.visitInt;
      break;
    case Type.Int8:
      fn = visitor.visitInt8 || visitor.visitInt;
      break;
    case Type.Int16:
      fn = visitor.visitInt16 || visitor.visitInt;
      break;
    case Type.Int32:
      fn = visitor.visitInt32 || visitor.visitInt;
      break;
    case Type.Int64:
      fn = visitor.visitInt64 || visitor.visitInt;
      break;
    case Type.Uint8:
      fn = visitor.visitUint8 || visitor.visitInt;
      break;
    case Type.Uint16:
      fn = visitor.visitUint16 || visitor.visitInt;
      break;
    case Type.Uint32:
      fn = visitor.visitUint32 || visitor.visitInt;
      break;
    case Type.Uint64:
      fn = visitor.visitUint64 || visitor.visitInt;
      break;
    case Type.Float:
      fn = visitor.visitFloat;
      break;
    case Type.Float16:
      fn = visitor.visitFloat16 || visitor.visitFloat;
      break;
    case Type.Float32:
      fn = visitor.visitFloat32 || visitor.visitFloat;
      break;
    case Type.Float64:
      fn = visitor.visitFloat64 || visitor.visitFloat;
      break;
    case Type.Utf8:
      fn = visitor.visitUtf8;
      break;
    case Type.Binary:
      fn = visitor.visitBinary;
      break;
    case Type.FixedSizeBinary:
      fn = visitor.visitFixedSizeBinary;
      break;
    case Type.Date:
      fn = visitor.visitDate;
      break;
    case Type.DateDay:
      fn = visitor.visitDateDay || visitor.visitDate;
      break;
    case Type.DateMillisecond:
      fn = visitor.visitDateMillisecond || visitor.visitDate;
      break;
    case Type.Timestamp:
      fn = visitor.visitTimestamp;
      break;
    case Type.TimestampSecond:
      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;
      break;
    case Type.TimestampMillisecond:
      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;
      break;
    case Type.TimestampMicrosecond:
      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;
      break;
    case Type.TimestampNanosecond:
      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;
      break;
    case Type.Time:
      fn = visitor.visitTime;
      break;
    case Type.TimeSecond:
      fn = visitor.visitTimeSecond || visitor.visitTime;
      break;
    case Type.TimeMillisecond:
      fn = visitor.visitTimeMillisecond || visitor.visitTime;
      break;
    case Type.TimeMicrosecond:
      fn = visitor.visitTimeMicrosecond || visitor.visitTime;
      break;
    case Type.TimeNanosecond:
      fn = visitor.visitTimeNanosecond || visitor.visitTime;
      break;
    case Type.Decimal:
      fn = visitor.visitDecimal;
      break;
    case Type.List:
      fn = visitor.visitList;
      break;
    case Type.Struct:
      fn = visitor.visitStruct;
      break;
    case Type.Union:
      fn = visitor.visitUnion;
      break;
    case Type.DenseUnion:
      fn = visitor.visitDenseUnion || visitor.visitUnion;
      break;
    case Type.SparseUnion:
      fn = visitor.visitSparseUnion || visitor.visitUnion;
      break;
    case Type.Dictionary:
      fn = visitor.visitDictionary;
      break;
    case Type.Interval:
      fn = visitor.visitInterval;
      break;
    case Type.IntervalDayTime:
      fn = visitor.visitIntervalDayTime || visitor.visitInterval;
      break;
    case Type.IntervalYearMonth:
      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;
      break;
    case Type.FixedSizeList:
      fn = visitor.visitFixedSizeList;
      break;
    case Type.Map:
      fn = visitor.visitMap;
      break;
  }
  if (typeof fn === "function")
    return fn;
  if (!throwIfNotFound)
    return () => null;
  throw new Error(`Unrecognized type '${Type[dtype]}'`);
}
function inferDType(type2) {
  switch (type2.typeId) {
    case Type.Null:
      return Type.Null;
    case Type.Int: {
      const { bitWidth, isSigned } = type2;
      switch (bitWidth) {
        case 8:
          return isSigned ? Type.Int8 : Type.Uint8;
        case 16:
          return isSigned ? Type.Int16 : Type.Uint16;
        case 32:
          return isSigned ? Type.Int32 : Type.Uint32;
        case 64:
          return isSigned ? Type.Int64 : Type.Uint64;
      }
      return Type.Int;
    }
    case Type.Float:
      switch (type2.precision) {
        case Precision.HALF:
          return Type.Float16;
        case Precision.SINGLE:
          return Type.Float32;
        case Precision.DOUBLE:
          return Type.Float64;
      }
      return Type.Float;
    case Type.Binary:
      return Type.Binary;
    case Type.Utf8:
      return Type.Utf8;
    case Type.Bool:
      return Type.Bool;
    case Type.Decimal:
      return Type.Decimal;
    case Type.Time:
      switch (type2.unit) {
        case TimeUnit.SECOND:
          return Type.TimeSecond;
        case TimeUnit.MILLISECOND:
          return Type.TimeMillisecond;
        case TimeUnit.MICROSECOND:
          return Type.TimeMicrosecond;
        case TimeUnit.NANOSECOND:
          return Type.TimeNanosecond;
      }
      return Type.Time;
    case Type.Timestamp:
      switch (type2.unit) {
        case TimeUnit.SECOND:
          return Type.TimestampSecond;
        case TimeUnit.MILLISECOND:
          return Type.TimestampMillisecond;
        case TimeUnit.MICROSECOND:
          return Type.TimestampMicrosecond;
        case TimeUnit.NANOSECOND:
          return Type.TimestampNanosecond;
      }
      return Type.Timestamp;
    case Type.Date:
      switch (type2.unit) {
        case DateUnit.DAY:
          return Type.DateDay;
        case DateUnit.MILLISECOND:
          return Type.DateMillisecond;
      }
      return Type.Date;
    case Type.Interval:
      switch (type2.unit) {
        case IntervalUnit.DAY_TIME:
          return Type.IntervalDayTime;
        case IntervalUnit.YEAR_MONTH:
          return Type.IntervalYearMonth;
      }
      return Type.Interval;
    case Type.Map:
      return Type.Map;
    case Type.List:
      return Type.List;
    case Type.Struct:
      return Type.Struct;
    case Type.Union:
      switch (type2.mode) {
        case UnionMode.Dense:
          return Type.DenseUnion;
        case UnionMode.Sparse:
          return Type.SparseUnion;
      }
      return Type.Union;
    case Type.FixedSizeBinary:
      return Type.FixedSizeBinary;
    case Type.FixedSizeList:
      return Type.FixedSizeList;
    case Type.Dictionary:
      return Type.Dictionary;
  }
  throw new Error(`Unrecognized type '${Type[type2.typeId]}'`);
}
Visitor.prototype.visitInt8 = null;
Visitor.prototype.visitInt16 = null;
Visitor.prototype.visitInt32 = null;
Visitor.prototype.visitInt64 = null;
Visitor.prototype.visitUint8 = null;
Visitor.prototype.visitUint16 = null;
Visitor.prototype.visitUint32 = null;
Visitor.prototype.visitUint64 = null;
Visitor.prototype.visitFloat16 = null;
Visitor.prototype.visitFloat32 = null;
Visitor.prototype.visitFloat64 = null;
Visitor.prototype.visitDateDay = null;
Visitor.prototype.visitDateMillisecond = null;
Visitor.prototype.visitTimestampSecond = null;
Visitor.prototype.visitTimestampMillisecond = null;
Visitor.prototype.visitTimestampMicrosecond = null;
Visitor.prototype.visitTimestampNanosecond = null;
Visitor.prototype.visitTimeSecond = null;
Visitor.prototype.visitTimeMillisecond = null;
Visitor.prototype.visitTimeMicrosecond = null;
Visitor.prototype.visitTimeNanosecond = null;
Visitor.prototype.visitDenseUnion = null;
Visitor.prototype.visitSparseUnion = null;
Visitor.prototype.visitIntervalDayTime = null;
Visitor.prototype.visitIntervalYearMonth = null;

// ../core/node_modules/apache-arrow/util/math.mjs
var math_exports = {};
__export(math_exports, {
  float64ToUint16: () => float64ToUint16,
  uint16ToFloat64: () => uint16ToFloat64
});
var f64 = new Float64Array(1);
var u32 = new Uint32Array(f64.buffer);
function uint16ToFloat64(h2) {
  const expo = (h2 & 31744) >> 10;
  const sigf = (h2 & 1023) / 1024;
  const sign3 = Math.pow(-1, (h2 & 32768) >> 15);
  switch (expo) {
    case 31:
      return sign3 * (sigf ? Number.NaN : 1 / 0);
    case 0:
      return sign3 * (sigf ? 6103515625e-14 * sigf : 0);
  }
  return sign3 * Math.pow(2, expo - 15) * (1 + sigf);
}
function float64ToUint16(d) {
  if (d !== d) {
    return 32256;
  }
  f64[0] = d;
  const sign3 = (u32[1] & 2147483648) >> 16 & 65535;
  let expo = u32[1] & 2146435072, sigf = 0;
  if (expo >= 1089470464) {
    if (u32[0] > 0) {
      expo = 31744;
    } else {
      expo = (expo & 2080374784) >> 16;
      sigf = (u32[1] & 1048575) >> 10;
    }
  } else if (expo <= 1056964608) {
    sigf = 1048576 + (u32[1] & 1048575);
    sigf = 1048576 + (sigf << (expo >> 20) - 998) >> 21;
    expo = 0;
  } else {
    expo = expo - 1056964608 >> 10;
    sigf = (u32[1] & 1048575) + 512 >> 10;
  }
  return sign3 | expo | sigf & 65535;
}

// ../core/node_modules/apache-arrow/visitor/set.mjs
var SetVisitor = class extends Visitor {
};
function wrapSet(fn) {
  return (data, _1, _2) => {
    if (data.setValid(_1, _2 != null)) {
      return fn(data, _1, _2);
    }
  };
}
var setEpochMsToDays = (data, index2, epochMs) => {
  data[index2] = Math.trunc(epochMs / 864e5);
};
var setEpochMsToMillisecondsLong = (data, index2, epochMs) => {
  data[index2] = Math.trunc(epochMs % 4294967296);
  data[index2 + 1] = Math.trunc(epochMs / 4294967296);
};
var setEpochMsToMicrosecondsLong = (data, index2, epochMs) => {
  data[index2] = Math.trunc(epochMs * 1e3 % 4294967296);
  data[index2 + 1] = Math.trunc(epochMs * 1e3 / 4294967296);
};
var setEpochMsToNanosecondsLong = (data, index2, epochMs) => {
  data[index2] = Math.trunc(epochMs * 1e6 % 4294967296);
  data[index2 + 1] = Math.trunc(epochMs * 1e6 / 4294967296);
};
var setVariableWidthBytes = (values2, valueOffsets, index2, value) => {
  if (index2 + 1 < valueOffsets.length) {
    const { [index2]: x3, [index2 + 1]: y3 } = valueOffsets;
    values2.set(value.subarray(0, y3 - x3), x3);
  }
};
var setBool = ({ offset: offset2, values: values2 }, index2, val) => {
  const idx = offset2 + index2;
  val ? values2[idx >> 3] |= 1 << idx % 8 : values2[idx >> 3] &= ~(1 << idx % 8);
};
var setInt = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setFloat = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setFloat16 = ({ values: values2 }, index2, value) => {
  values2[index2] = float64ToUint16(value);
};
var setAnyFloat = (data, index2, value) => {
  switch (data.type.precision) {
    case Precision.HALF:
      return setFloat16(data, index2, value);
    case Precision.SINGLE:
    case Precision.DOUBLE:
      return setFloat(data, index2, value);
  }
};
var setDateDay = ({ values: values2 }, index2, value) => {
  setEpochMsToDays(values2, index2, value.valueOf());
};
var setDateMillisecond = ({ values: values2 }, index2, value) => {
  setEpochMsToMillisecondsLong(values2, index2 * 2, value.valueOf());
};
var setFixedSizeBinary = ({ stride, values: values2 }, index2, value) => {
  values2.set(value.subarray(0, stride), stride * index2);
};
var setBinary = ({ values: values2, valueOffsets }, index2, value) => setVariableWidthBytes(values2, valueOffsets, index2, value);
var setUtf8 = ({ values: values2, valueOffsets }, index2, value) => {
  setVariableWidthBytes(values2, valueOffsets, index2, encodeUtf8(value));
};
var setDate = (data, index2, value) => {
  data.type.unit === DateUnit.DAY ? setDateDay(data, index2, value) : setDateMillisecond(data, index2, value);
};
var setTimestampSecond = ({ values: values2 }, index2, value) => setEpochMsToMillisecondsLong(values2, index2 * 2, value / 1e3);
var setTimestampMillisecond = ({ values: values2 }, index2, value) => setEpochMsToMillisecondsLong(values2, index2 * 2, value);
var setTimestampMicrosecond = ({ values: values2 }, index2, value) => setEpochMsToMicrosecondsLong(values2, index2 * 2, value);
var setTimestampNanosecond = ({ values: values2 }, index2, value) => setEpochMsToNanosecondsLong(values2, index2 * 2, value);
var setTimestamp = (data, index2, value) => {
  switch (data.type.unit) {
    case TimeUnit.SECOND:
      return setTimestampSecond(data, index2, value);
    case TimeUnit.MILLISECOND:
      return setTimestampMillisecond(data, index2, value);
    case TimeUnit.MICROSECOND:
      return setTimestampMicrosecond(data, index2, value);
    case TimeUnit.NANOSECOND:
      return setTimestampNanosecond(data, index2, value);
  }
};
var setTimeSecond = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setTimeMillisecond = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setTimeMicrosecond = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setTimeNanosecond = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setTime = (data, index2, value) => {
  switch (data.type.unit) {
    case TimeUnit.SECOND:
      return setTimeSecond(data, index2, value);
    case TimeUnit.MILLISECOND:
      return setTimeMillisecond(data, index2, value);
    case TimeUnit.MICROSECOND:
      return setTimeMicrosecond(data, index2, value);
    case TimeUnit.NANOSECOND:
      return setTimeNanosecond(data, index2, value);
  }
};
var setDecimal = ({ values: values2, stride }, index2, value) => {
  values2.set(value.subarray(0, stride), stride * index2);
};
var setList = (data, index2, value) => {
  const values2 = data.children[0];
  const valueOffsets = data.valueOffsets;
  const set3 = instance.getVisitFn(values2);
  if (Array.isArray(value)) {
    for (let idx = -1, itr = valueOffsets[index2], end = valueOffsets[index2 + 1]; itr < end; ) {
      set3(values2, itr++, value[++idx]);
    }
  } else {
    for (let idx = -1, itr = valueOffsets[index2], end = valueOffsets[index2 + 1]; itr < end; ) {
      set3(values2, itr++, value.get(++idx));
    }
  }
};
var setMap = (data, index2, value) => {
  const values2 = data.children[0];
  const { valueOffsets } = data;
  const set3 = instance.getVisitFn(values2);
  let { [index2]: idx, [index2 + 1]: end } = valueOffsets;
  const entries = value instanceof Map ? value.entries() : Object.entries(value);
  for (const val of entries) {
    set3(values2, idx, val);
    if (++idx >= end)
      break;
  }
};
var _setStructArrayValue = (o, v3) => (set3, c4, _2, i2) => c4 && set3(c4, o, v3[i2]);
var _setStructVectorValue = (o, v3) => (set3, c4, _2, i2) => c4 && set3(c4, o, v3.get(i2));
var _setStructMapValue = (o, v3) => (set3, c4, f2, _2) => c4 && set3(c4, o, v3.get(f2.name));
var _setStructObjectValue = (o, v3) => (set3, c4, f2, _2) => c4 && set3(c4, o, v3[f2.name]);
var setStruct = (data, index2, value) => {
  const childSetters = data.type.children.map((f2) => instance.getVisitFn(f2.type));
  const set3 = value instanceof Map ? _setStructMapValue(index2, value) : value instanceof Vector ? _setStructVectorValue(index2, value) : Array.isArray(value) ? _setStructArrayValue(index2, value) : _setStructObjectValue(index2, value);
  data.type.children.forEach((f2, i2) => set3(childSetters[i2], data.children[i2], f2, i2));
};
var setUnion = (data, index2, value) => {
  data.type.mode === UnionMode.Dense ? setDenseUnion(data, index2, value) : setSparseUnion(data, index2, value);
};
var setDenseUnion = (data, index2, value) => {
  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index2]];
  const child = data.children[childIndex];
  instance.visit(child, data.valueOffsets[index2], value);
};
var setSparseUnion = (data, index2, value) => {
  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index2]];
  const child = data.children[childIndex];
  instance.visit(child, index2, value);
};
var setDictionary = (data, index2, value) => {
  var _a9;
  (_a9 = data.dictionary) === null || _a9 === void 0 ? void 0 : _a9.set(data.values[index2], value);
};
var setIntervalValue = (data, index2, value) => {
  data.type.unit === IntervalUnit.DAY_TIME ? setIntervalDayTime(data, index2, value) : setIntervalYearMonth(data, index2, value);
};
var setIntervalDayTime = ({ values: values2 }, index2, value) => {
  values2.set(value.subarray(0, 2), 2 * index2);
};
var setIntervalYearMonth = ({ values: values2 }, index2, value) => {
  values2[index2] = value[0] * 12 + value[1] % 12;
};
var setFixedSizeList = (data, index2, value) => {
  const { stride } = data;
  const child = data.children[0];
  const set3 = instance.getVisitFn(child);
  if (Array.isArray(value)) {
    for (let idx = -1, offset2 = index2 * stride; ++idx < stride; ) {
      set3(child, offset2 + idx, value[idx]);
    }
  } else {
    for (let idx = -1, offset2 = index2 * stride; ++idx < stride; ) {
      set3(child, offset2 + idx, value.get(idx));
    }
  }
};
SetVisitor.prototype.visitBool = wrapSet(setBool);
SetVisitor.prototype.visitInt = wrapSet(setInt);
SetVisitor.prototype.visitInt8 = wrapSet(setInt);
SetVisitor.prototype.visitInt16 = wrapSet(setInt);
SetVisitor.prototype.visitInt32 = wrapSet(setInt);
SetVisitor.prototype.visitInt64 = wrapSet(setInt);
SetVisitor.prototype.visitUint8 = wrapSet(setInt);
SetVisitor.prototype.visitUint16 = wrapSet(setInt);
SetVisitor.prototype.visitUint32 = wrapSet(setInt);
SetVisitor.prototype.visitUint64 = wrapSet(setInt);
SetVisitor.prototype.visitFloat = wrapSet(setAnyFloat);
SetVisitor.prototype.visitFloat16 = wrapSet(setFloat16);
SetVisitor.prototype.visitFloat32 = wrapSet(setFloat);
SetVisitor.prototype.visitFloat64 = wrapSet(setFloat);
SetVisitor.prototype.visitUtf8 = wrapSet(setUtf8);
SetVisitor.prototype.visitBinary = wrapSet(setBinary);
SetVisitor.prototype.visitFixedSizeBinary = wrapSet(setFixedSizeBinary);
SetVisitor.prototype.visitDate = wrapSet(setDate);
SetVisitor.prototype.visitDateDay = wrapSet(setDateDay);
SetVisitor.prototype.visitDateMillisecond = wrapSet(setDateMillisecond);
SetVisitor.prototype.visitTimestamp = wrapSet(setTimestamp);
SetVisitor.prototype.visitTimestampSecond = wrapSet(setTimestampSecond);
SetVisitor.prototype.visitTimestampMillisecond = wrapSet(setTimestampMillisecond);
SetVisitor.prototype.visitTimestampMicrosecond = wrapSet(setTimestampMicrosecond);
SetVisitor.prototype.visitTimestampNanosecond = wrapSet(setTimestampNanosecond);
SetVisitor.prototype.visitTime = wrapSet(setTime);
SetVisitor.prototype.visitTimeSecond = wrapSet(setTimeSecond);
SetVisitor.prototype.visitTimeMillisecond = wrapSet(setTimeMillisecond);
SetVisitor.prototype.visitTimeMicrosecond = wrapSet(setTimeMicrosecond);
SetVisitor.prototype.visitTimeNanosecond = wrapSet(setTimeNanosecond);
SetVisitor.prototype.visitDecimal = wrapSet(setDecimal);
SetVisitor.prototype.visitList = wrapSet(setList);
SetVisitor.prototype.visitStruct = wrapSet(setStruct);
SetVisitor.prototype.visitUnion = wrapSet(setUnion);
SetVisitor.prototype.visitDenseUnion = wrapSet(setDenseUnion);
SetVisitor.prototype.visitSparseUnion = wrapSet(setSparseUnion);
SetVisitor.prototype.visitDictionary = wrapSet(setDictionary);
SetVisitor.prototype.visitInterval = wrapSet(setIntervalValue);
SetVisitor.prototype.visitIntervalDayTime = wrapSet(setIntervalDayTime);
SetVisitor.prototype.visitIntervalYearMonth = wrapSet(setIntervalYearMonth);
SetVisitor.prototype.visitFixedSizeList = wrapSet(setFixedSizeList);
SetVisitor.prototype.visitMap = wrapSet(setMap);
var instance = new SetVisitor();

// ../core/node_modules/apache-arrow/row/struct.mjs
var kParent = Symbol.for("parent");
var kRowIndex = Symbol.for("rowIndex");
var StructRow = class {
  constructor(parent, rowIndex) {
    this[kParent] = parent;
    this[kRowIndex] = rowIndex;
    return new Proxy(this, new StructRowProxyHandler());
  }
  toArray() {
    return Object.values(this.toJSON());
  }
  toJSON() {
    const i2 = this[kRowIndex];
    const parent = this[kParent];
    const keys = parent.type.children;
    const json = {};
    for (let j2 = -1, n = keys.length; ++j2 < n; ) {
      json[keys[j2].name] = instance2.visit(parent.children[j2], i2);
    }
    return json;
  }
  toString() {
    return `{${[...this].map(([key, val]) => `${valueToString(key)}: ${valueToString(val)}`).join(", ")}}`;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toString();
  }
  [Symbol.iterator]() {
    return new StructRowIterator(this[kParent], this[kRowIndex]);
  }
};
var StructRowIterator = class {
  constructor(data, rowIndex) {
    this.childIndex = 0;
    this.children = data.children;
    this.rowIndex = rowIndex;
    this.childFields = data.type.children;
    this.numChildren = this.childFields.length;
  }
  [Symbol.iterator]() {
    return this;
  }
  next() {
    const i2 = this.childIndex;
    if (i2 < this.numChildren) {
      this.childIndex = i2 + 1;
      return {
        done: false,
        value: [
          this.childFields[i2].name,
          instance2.visit(this.children[i2], this.rowIndex)
        ]
      };
    }
    return { done: true, value: null };
  }
};
Object.defineProperties(StructRow.prototype, {
  [Symbol.toStringTag]: { enumerable: false, configurable: false, value: "Row" },
  [kParent]: { writable: true, enumerable: false, configurable: false, value: null },
  [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 }
});
var StructRowProxyHandler = class {
  isExtensible() {
    return false;
  }
  deleteProperty() {
    return false;
  }
  preventExtensions() {
    return true;
  }
  ownKeys(row) {
    return row[kParent].type.children.map((f2) => f2.name);
  }
  has(row, key) {
    return row[kParent].type.children.findIndex((f2) => f2.name === key) !== -1;
  }
  getOwnPropertyDescriptor(row, key) {
    if (row[kParent].type.children.findIndex((f2) => f2.name === key) !== -1) {
      return { writable: true, enumerable: true, configurable: true };
    }
    return;
  }
  get(row, key) {
    if (Reflect.has(row, key)) {
      return row[key];
    }
    const idx = row[kParent].type.children.findIndex((f2) => f2.name === key);
    if (idx !== -1) {
      const val = instance2.visit(row[kParent].children[idx], row[kRowIndex]);
      Reflect.set(row, key, val);
      return val;
    }
  }
  set(row, key, val) {
    const idx = row[kParent].type.children.findIndex((f2) => f2.name === key);
    if (idx !== -1) {
      instance.visit(row[kParent].children[idx], row[kRowIndex], val);
      return Reflect.set(row, key, val);
    } else if (Reflect.has(row, key) || typeof key === "symbol") {
      return Reflect.set(row, key, val);
    }
    return false;
  }
};

// ../core/node_modules/apache-arrow/visitor/get.mjs
var GetVisitor = class extends Visitor {
};
function wrapGet(fn) {
  return (data, _1) => data.getValid(_1) ? fn(data, _1) : null;
}
var epochDaysToMs = (data, index2) => 864e5 * data[index2];
var epochMillisecondsLongToMs = (data, index2) => 4294967296 * data[index2 + 1] + (data[index2] >>> 0);
var epochMicrosecondsLongToMs = (data, index2) => 4294967296 * (data[index2 + 1] / 1e3) + (data[index2] >>> 0) / 1e3;
var epochNanosecondsLongToMs = (data, index2) => 4294967296 * (data[index2 + 1] / 1e6) + (data[index2] >>> 0) / 1e6;
var epochMillisecondsToDate = (epochMs) => new Date(epochMs);
var epochDaysToDate = (data, index2) => epochMillisecondsToDate(epochDaysToMs(data, index2));
var epochMillisecondsLongToDate = (data, index2) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index2));
var getNull = (_data, _index) => null;
var getVariableWidthBytes = (values2, valueOffsets, index2) => {
  if (index2 + 1 >= valueOffsets.length) {
    return null;
  }
  const x3 = valueOffsets[index2];
  const y3 = valueOffsets[index2 + 1];
  return values2.subarray(x3, y3);
};
var getBool = ({ offset: offset2, values: values2 }, index2) => {
  const idx = offset2 + index2;
  const byte = values2[idx >> 3];
  return (byte & 1 << idx % 8) !== 0;
};
var getDateDay = ({ values: values2 }, index2) => epochDaysToDate(values2, index2);
var getDateMillisecond = ({ values: values2 }, index2) => epochMillisecondsLongToDate(values2, index2 * 2);
var getNumeric = ({ stride, values: values2 }, index2) => values2[stride * index2];
var getFloat16 = ({ stride, values: values2 }, index2) => uint16ToFloat64(values2[stride * index2]);
var getBigInts = ({ values: values2 }, index2) => values2[index2];
var getFixedSizeBinary = ({ stride, values: values2 }, index2) => values2.subarray(stride * index2, stride * (index2 + 1));
var getBinary = ({ values: values2, valueOffsets }, index2) => getVariableWidthBytes(values2, valueOffsets, index2);
var getUtf8 = ({ values: values2, valueOffsets }, index2) => {
  const bytes = getVariableWidthBytes(values2, valueOffsets, index2);
  return bytes !== null ? decodeUtf8(bytes) : null;
};
var getInt = ({ values: values2 }, index2) => values2[index2];
var getFloat = ({ type: type2, values: values2 }, index2) => type2.precision !== Precision.HALF ? values2[index2] : uint16ToFloat64(values2[index2]);
var getDate = (data, index2) => data.type.unit === DateUnit.DAY ? getDateDay(data, index2) : getDateMillisecond(data, index2);
var getTimestampSecond = ({ values: values2 }, index2) => 1e3 * epochMillisecondsLongToMs(values2, index2 * 2);
var getTimestampMillisecond = ({ values: values2 }, index2) => epochMillisecondsLongToMs(values2, index2 * 2);
var getTimestampMicrosecond = ({ values: values2 }, index2) => epochMicrosecondsLongToMs(values2, index2 * 2);
var getTimestampNanosecond = ({ values: values2 }, index2) => epochNanosecondsLongToMs(values2, index2 * 2);
var getTimestamp = (data, index2) => {
  switch (data.type.unit) {
    case TimeUnit.SECOND:
      return getTimestampSecond(data, index2);
    case TimeUnit.MILLISECOND:
      return getTimestampMillisecond(data, index2);
    case TimeUnit.MICROSECOND:
      return getTimestampMicrosecond(data, index2);
    case TimeUnit.NANOSECOND:
      return getTimestampNanosecond(data, index2);
  }
};
var getTimeSecond = ({ values: values2 }, index2) => values2[index2];
var getTimeMillisecond = ({ values: values2 }, index2) => values2[index2];
var getTimeMicrosecond = ({ values: values2 }, index2) => values2[index2];
var getTimeNanosecond = ({ values: values2 }, index2) => values2[index2];
var getTime = (data, index2) => {
  switch (data.type.unit) {
    case TimeUnit.SECOND:
      return getTimeSecond(data, index2);
    case TimeUnit.MILLISECOND:
      return getTimeMillisecond(data, index2);
    case TimeUnit.MICROSECOND:
      return getTimeMicrosecond(data, index2);
    case TimeUnit.NANOSECOND:
      return getTimeNanosecond(data, index2);
  }
};
var getDecimal = ({ values: values2, stride }, index2) => BN.decimal(values2.subarray(stride * index2, stride * (index2 + 1)));
var getList = (data, index2) => {
  const { valueOffsets, stride, children: children2 } = data;
  const { [index2 * stride]: begin, [index2 * stride + 1]: end } = valueOffsets;
  const child = children2[0];
  const slice5 = child.slice(begin, end - begin);
  return new Vector([slice5]);
};
var getMap = (data, index2) => {
  const { valueOffsets, children: children2 } = data;
  const { [index2]: begin, [index2 + 1]: end } = valueOffsets;
  const child = children2[0];
  return new MapRow(child.slice(begin, end - begin));
};
var getStruct = (data, index2) => {
  return new StructRow(data, index2);
};
var getUnion = (data, index2) => {
  return data.type.mode === UnionMode.Dense ? getDenseUnion(data, index2) : getSparseUnion(data, index2);
};
var getDenseUnion = (data, index2) => {
  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index2]];
  const child = data.children[childIndex];
  return instance2.visit(child, data.valueOffsets[index2]);
};
var getSparseUnion = (data, index2) => {
  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index2]];
  const child = data.children[childIndex];
  return instance2.visit(child, index2);
};
var getDictionary = (data, index2) => {
  var _a9;
  return (_a9 = data.dictionary) === null || _a9 === void 0 ? void 0 : _a9.get(data.values[index2]);
};
var getInterval = (data, index2) => data.type.unit === IntervalUnit.DAY_TIME ? getIntervalDayTime(data, index2) : getIntervalYearMonth(data, index2);
var getIntervalDayTime = ({ values: values2 }, index2) => values2.subarray(2 * index2, 2 * (index2 + 1));
var getIntervalYearMonth = ({ values: values2 }, index2) => {
  const interval2 = values2[index2];
  const int32s = new Int32Array(2);
  int32s[0] = Math.trunc(interval2 / 12);
  int32s[1] = Math.trunc(interval2 % 12);
  return int32s;
};
var getFixedSizeList = (data, index2) => {
  const { stride, children: children2 } = data;
  const child = children2[0];
  const slice5 = child.slice(index2 * stride, stride);
  return new Vector([slice5]);
};
GetVisitor.prototype.visitNull = wrapGet(getNull);
GetVisitor.prototype.visitBool = wrapGet(getBool);
GetVisitor.prototype.visitInt = wrapGet(getInt);
GetVisitor.prototype.visitInt8 = wrapGet(getNumeric);
GetVisitor.prototype.visitInt16 = wrapGet(getNumeric);
GetVisitor.prototype.visitInt32 = wrapGet(getNumeric);
GetVisitor.prototype.visitInt64 = wrapGet(getBigInts);
GetVisitor.prototype.visitUint8 = wrapGet(getNumeric);
GetVisitor.prototype.visitUint16 = wrapGet(getNumeric);
GetVisitor.prototype.visitUint32 = wrapGet(getNumeric);
GetVisitor.prototype.visitUint64 = wrapGet(getBigInts);
GetVisitor.prototype.visitFloat = wrapGet(getFloat);
GetVisitor.prototype.visitFloat16 = wrapGet(getFloat16);
GetVisitor.prototype.visitFloat32 = wrapGet(getNumeric);
GetVisitor.prototype.visitFloat64 = wrapGet(getNumeric);
GetVisitor.prototype.visitUtf8 = wrapGet(getUtf8);
GetVisitor.prototype.visitBinary = wrapGet(getBinary);
GetVisitor.prototype.visitFixedSizeBinary = wrapGet(getFixedSizeBinary);
GetVisitor.prototype.visitDate = wrapGet(getDate);
GetVisitor.prototype.visitDateDay = wrapGet(getDateDay);
GetVisitor.prototype.visitDateMillisecond = wrapGet(getDateMillisecond);
GetVisitor.prototype.visitTimestamp = wrapGet(getTimestamp);
GetVisitor.prototype.visitTimestampSecond = wrapGet(getTimestampSecond);
GetVisitor.prototype.visitTimestampMillisecond = wrapGet(getTimestampMillisecond);
GetVisitor.prototype.visitTimestampMicrosecond = wrapGet(getTimestampMicrosecond);
GetVisitor.prototype.visitTimestampNanosecond = wrapGet(getTimestampNanosecond);
GetVisitor.prototype.visitTime = wrapGet(getTime);
GetVisitor.prototype.visitTimeSecond = wrapGet(getTimeSecond);
GetVisitor.prototype.visitTimeMillisecond = wrapGet(getTimeMillisecond);
GetVisitor.prototype.visitTimeMicrosecond = wrapGet(getTimeMicrosecond);
GetVisitor.prototype.visitTimeNanosecond = wrapGet(getTimeNanosecond);
GetVisitor.prototype.visitDecimal = wrapGet(getDecimal);
GetVisitor.prototype.visitList = wrapGet(getList);
GetVisitor.prototype.visitStruct = wrapGet(getStruct);
GetVisitor.prototype.visitUnion = wrapGet(getUnion);
GetVisitor.prototype.visitDenseUnion = wrapGet(getDenseUnion);
GetVisitor.prototype.visitSparseUnion = wrapGet(getSparseUnion);
GetVisitor.prototype.visitDictionary = wrapGet(getDictionary);
GetVisitor.prototype.visitInterval = wrapGet(getInterval);
GetVisitor.prototype.visitIntervalDayTime = wrapGet(getIntervalDayTime);
GetVisitor.prototype.visitIntervalYearMonth = wrapGet(getIntervalYearMonth);
GetVisitor.prototype.visitFixedSizeList = wrapGet(getFixedSizeList);
GetVisitor.prototype.visitMap = wrapGet(getMap);
var instance2 = new GetVisitor();

// ../core/node_modules/apache-arrow/row/map.mjs
var kKeys = Symbol.for("keys");
var kVals = Symbol.for("vals");
var MapRow = class {
  constructor(slice5) {
    this[kKeys] = new Vector([slice5.children[0]]).memoize();
    this[kVals] = slice5.children[1];
    return new Proxy(this, new MapRowProxyHandler());
  }
  [Symbol.iterator]() {
    return new MapRowIterator(this[kKeys], this[kVals]);
  }
  get size() {
    return this[kKeys].length;
  }
  toArray() {
    return Object.values(this.toJSON());
  }
  toJSON() {
    const keys = this[kKeys];
    const vals = this[kVals];
    const json = {};
    for (let i2 = -1, n = keys.length; ++i2 < n; ) {
      json[keys.get(i2)] = instance2.visit(vals, i2);
    }
    return json;
  }
  toString() {
    return `{${[...this].map(([key, val]) => `${valueToString(key)}: ${valueToString(val)}`).join(", ")}}`;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toString();
  }
};
var MapRowIterator = class {
  constructor(keys, vals) {
    this.keys = keys;
    this.vals = vals;
    this.keyIndex = 0;
    this.numKeys = keys.length;
  }
  [Symbol.iterator]() {
    return this;
  }
  next() {
    const i2 = this.keyIndex;
    if (i2 === this.numKeys) {
      return { done: true, value: null };
    }
    this.keyIndex++;
    return {
      done: false,
      value: [
        this.keys.get(i2),
        instance2.visit(this.vals, i2)
      ]
    };
  }
};
var MapRowProxyHandler = class {
  isExtensible() {
    return false;
  }
  deleteProperty() {
    return false;
  }
  preventExtensions() {
    return true;
  }
  ownKeys(row) {
    return row[kKeys].toArray().map(String);
  }
  has(row, key) {
    return row[kKeys].includes(key);
  }
  getOwnPropertyDescriptor(row, key) {
    const idx = row[kKeys].indexOf(key);
    if (idx !== -1) {
      return { writable: true, enumerable: true, configurable: true };
    }
    return;
  }
  get(row, key) {
    if (Reflect.has(row, key)) {
      return row[key];
    }
    const idx = row[kKeys].indexOf(key);
    if (idx !== -1) {
      const val = instance2.visit(Reflect.get(row, kVals), idx);
      Reflect.set(row, key, val);
      return val;
    }
  }
  set(row, key, val) {
    const idx = row[kKeys].indexOf(key);
    if (idx !== -1) {
      instance.visit(Reflect.get(row, kVals), idx, val);
      return Reflect.set(row, key, val);
    } else if (Reflect.has(row, key)) {
      return Reflect.set(row, key, val);
    }
    return false;
  }
};
Object.defineProperties(MapRow.prototype, {
  [Symbol.toStringTag]: { enumerable: false, configurable: false, value: "Row" },
  [kKeys]: { writable: true, enumerable: false, configurable: false, value: null },
  [kVals]: { writable: true, enumerable: false, configurable: false, value: null }
});

// ../core/node_modules/apache-arrow/util/vector.mjs
function clampIndex(source, index2, then) {
  const length4 = source.length;
  const adjust = index2 > -1 ? index2 : length4 + index2 % length4;
  return then ? then(source, adjust) : adjust;
}
var tmp;
function clampRange(source, begin, end, then) {
  const { length: len = 0 } = source;
  let lhs = typeof begin !== "number" ? 0 : begin;
  let rhs = typeof end !== "number" ? len : end;
  lhs < 0 && (lhs = (lhs % len + len) % len);
  rhs < 0 && (rhs = (rhs % len + len) % len);
  rhs < lhs && (tmp = lhs, lhs = rhs, rhs = tmp);
  rhs > len && (rhs = len);
  return then ? then(source, lhs, rhs) : [lhs, rhs];
}
var isNaNFast = (value) => value !== value;
function createElementComparator(search2) {
  const typeofSearch = typeof search2;
  if (typeofSearch !== "object" || search2 === null) {
    if (isNaNFast(search2)) {
      return isNaNFast;
    }
    return (value) => value === search2;
  }
  if (search2 instanceof Date) {
    const valueOfSearch = search2.valueOf();
    return (value) => value instanceof Date ? value.valueOf() === valueOfSearch : false;
  }
  if (ArrayBuffer.isView(search2)) {
    return (value) => value ? compareArrayLike(search2, value) : false;
  }
  if (search2 instanceof Map) {
    return createMapComparator(search2);
  }
  if (Array.isArray(search2)) {
    return createArrayLikeComparator(search2);
  }
  if (search2 instanceof Vector) {
    return createVectorComparator(search2);
  }
  return createObjectComparator(search2, true);
}
function createArrayLikeComparator(lhs) {
  const comparators = [];
  for (let i2 = -1, n = lhs.length; ++i2 < n; ) {
    comparators[i2] = createElementComparator(lhs[i2]);
  }
  return createSubElementsComparator(comparators);
}
function createMapComparator(lhs) {
  let i2 = -1;
  const comparators = [];
  for (const v3 of lhs.values())
    comparators[++i2] = createElementComparator(v3);
  return createSubElementsComparator(comparators);
}
function createVectorComparator(lhs) {
  const comparators = [];
  for (let i2 = -1, n = lhs.length; ++i2 < n; ) {
    comparators[i2] = createElementComparator(lhs.get(i2));
  }
  return createSubElementsComparator(comparators);
}
function createObjectComparator(lhs, allowEmpty = false) {
  const keys = Object.keys(lhs);
  if (!allowEmpty && keys.length === 0) {
    return () => false;
  }
  const comparators = [];
  for (let i2 = -1, n = keys.length; ++i2 < n; ) {
    comparators[i2] = createElementComparator(lhs[keys[i2]]);
  }
  return createSubElementsComparator(comparators, keys);
}
function createSubElementsComparator(comparators, keys) {
  return (rhs) => {
    if (!rhs || typeof rhs !== "object") {
      return false;
    }
    switch (rhs.constructor) {
      case Array:
        return compareArray(comparators, rhs);
      case Map:
        return compareObject(comparators, rhs, rhs.keys());
      case MapRow:
      case StructRow:
      case Object:
      case void 0:
        return compareObject(comparators, rhs, keys || Object.keys(rhs));
    }
    return rhs instanceof Vector ? compareVector(comparators, rhs) : false;
  };
}
function compareArray(comparators, arr) {
  const n = comparators.length;
  if (arr.length !== n) {
    return false;
  }
  for (let i2 = -1; ++i2 < n; ) {
    if (!comparators[i2](arr[i2])) {
      return false;
    }
  }
  return true;
}
function compareVector(comparators, vec2) {
  const n = comparators.length;
  if (vec2.length !== n) {
    return false;
  }
  for (let i2 = -1; ++i2 < n; ) {
    if (!comparators[i2](vec2.get(i2))) {
      return false;
    }
  }
  return true;
}
function compareObject(comparators, obj, keys) {
  const lKeyItr = keys[Symbol.iterator]();
  const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();
  const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();
  let i2 = 0;
  const n = comparators.length;
  let rVal = rValItr.next();
  let lKey = lKeyItr.next();
  let rKey = rKeyItr.next();
  for (; i2 < n && !lKey.done && !rKey.done && !rVal.done; ++i2, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {
    if (lKey.value !== rKey.value || !comparators[i2](rVal.value)) {
      break;
    }
  }
  if (i2 === n && lKey.done && rKey.done && rVal.done) {
    return true;
  }
  lKeyItr.return && lKeyItr.return();
  rKeyItr.return && rKeyItr.return();
  rValItr.return && rValItr.return();
  return false;
}

// ../core/node_modules/apache-arrow/util/bit.mjs
var bit_exports = {};
__export(bit_exports, {
  BitIterator: () => BitIterator,
  getBit: () => getBit,
  getBool: () => getBool2,
  packBools: () => packBools,
  popcnt_array: () => popcnt_array,
  popcnt_bit_range: () => popcnt_bit_range,
  popcnt_uint32: () => popcnt_uint32,
  setBool: () => setBool2,
  truncateBitmap: () => truncateBitmap
});
function getBool2(_data, _index, byte, bit) {
  return (byte & 1 << bit) !== 0;
}
function getBit(_data, _index, byte, bit) {
  return (byte & 1 << bit) >> bit;
}
function setBool2(bytes, index2, value) {
  return value ? !!(bytes[index2 >> 3] |= 1 << index2 % 8) || true : !(bytes[index2 >> 3] &= ~(1 << index2 % 8)) && false;
}
function truncateBitmap(offset2, length4, bitmap) {
  const alignedSize = bitmap.byteLength + 7 & ~7;
  if (offset2 > 0 || bitmap.byteLength < alignedSize) {
    const bytes = new Uint8Array(alignedSize);
    bytes.set(offset2 % 8 === 0 ? bitmap.subarray(offset2 >> 3) : (
      // Otherwise iterate each bit from the offset and return a new one
      packBools(new BitIterator(bitmap, offset2, length4, null, getBool2)).subarray(0, alignedSize)
    ));
    return bytes;
  }
  return bitmap;
}
function packBools(values2) {
  const xs = [];
  let i2 = 0, bit = 0, byte = 0;
  for (const value of values2) {
    value && (byte |= 1 << bit);
    if (++bit === 8) {
      xs[i2++] = byte;
      byte = bit = 0;
    }
  }
  if (i2 === 0 || bit > 0) {
    xs[i2++] = byte;
  }
  const b2 = new Uint8Array(xs.length + 7 & ~7);
  b2.set(xs);
  return b2;
}
var BitIterator = class {
  constructor(bytes, begin, length4, context, get3) {
    this.bytes = bytes;
    this.length = length4;
    this.context = context;
    this.get = get3;
    this.bit = begin % 8;
    this.byteIndex = begin >> 3;
    this.byte = bytes[this.byteIndex++];
    this.index = 0;
  }
  next() {
    if (this.index < this.length) {
      if (this.bit === 8) {
        this.bit = 0;
        this.byte = this.bytes[this.byteIndex++];
      }
      return {
        value: this.get(this.context, this.index++, this.byte, this.bit++)
      };
    }
    return { done: true, value: null };
  }
  [Symbol.iterator]() {
    return this;
  }
};
function popcnt_bit_range(data, lhs, rhs) {
  if (rhs - lhs <= 0) {
    return 0;
  }
  if (rhs - lhs < 8) {
    let sum6 = 0;
    for (const bit of new BitIterator(data, lhs, rhs - lhs, data, getBit)) {
      sum6 += bit;
    }
    return sum6;
  }
  const rhsInside = rhs >> 3 << 3;
  const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);
  return (
    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8
    popcnt_bit_range(data, lhs, lhsInside) + // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8
    popcnt_bit_range(data, rhsInside, rhs) + // Get the popcnt of all bits between the left and right hand sides' multiples of 8
    popcnt_array(data, lhsInside >> 3, rhsInside - lhsInside >> 3)
  );
}
function popcnt_array(arr, byteOffset, byteLength) {
  let cnt = 0, pos = Math.trunc(byteOffset);
  const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;
  while (len - pos >= 4) {
    cnt += popcnt_uint32(view.getUint32(pos));
    pos += 4;
  }
  while (len - pos >= 2) {
    cnt += popcnt_uint32(view.getUint16(pos));
    pos += 2;
  }
  while (len - pos >= 1) {
    cnt += popcnt_uint32(view.getUint8(pos));
    pos += 1;
  }
  return cnt;
}
function popcnt_uint32(uint32) {
  let i2 = Math.trunc(uint32);
  i2 = i2 - (i2 >>> 1 & 1431655765);
  i2 = (i2 & 858993459) + (i2 >>> 2 & 858993459);
  return (i2 + (i2 >>> 4) & 252645135) * 16843009 >>> 24;
}

// ../core/node_modules/apache-arrow/data.mjs
var kUnknownNullCount = -1;
var Data = class _Data {
  get typeId() {
    return this.type.typeId;
  }
  get ArrayType() {
    return this.type.ArrayType;
  }
  get buffers() {
    return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];
  }
  get byteLength() {
    let byteLength = 0;
    const { valueOffsets, values: values2, nullBitmap, typeIds } = this;
    valueOffsets && (byteLength += valueOffsets.byteLength);
    values2 && (byteLength += values2.byteLength);
    nullBitmap && (byteLength += nullBitmap.byteLength);
    typeIds && (byteLength += typeIds.byteLength);
    return this.children.reduce((byteLength2, child) => byteLength2 + child.byteLength, byteLength);
  }
  get nullCount() {
    let nullCount = this._nullCount;
    let nullBitmap;
    if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {
      this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);
    }
    return nullCount;
  }
  constructor(type2, offset2, length4, nullCount, buffers, children2 = [], dictionary) {
    this.type = type2;
    this.children = children2;
    this.dictionary = dictionary;
    this.offset = Math.floor(Math.max(offset2 || 0, 0));
    this.length = Math.floor(Math.max(length4 || 0, 0));
    this._nullCount = Math.floor(Math.max(nullCount || 0, -1));
    let buffer;
    if (buffers instanceof _Data) {
      this.stride = buffers.stride;
      this.values = buffers.values;
      this.typeIds = buffers.typeIds;
      this.nullBitmap = buffers.nullBitmap;
      this.valueOffsets = buffers.valueOffsets;
    } else {
      this.stride = strideForType(type2);
      if (buffers) {
        (buffer = buffers[0]) && (this.valueOffsets = buffer);
        (buffer = buffers[1]) && (this.values = buffer);
        (buffer = buffers[2]) && (this.nullBitmap = buffer);
        (buffer = buffers[3]) && (this.typeIds = buffer);
      }
    }
    this.nullable = this._nullCount !== 0 && this.nullBitmap && this.nullBitmap.byteLength > 0;
  }
  getValid(index2) {
    if (this.nullable && this.nullCount > 0) {
      const pos = this.offset + index2;
      const val = this.nullBitmap[pos >> 3];
      return (val & 1 << pos % 8) !== 0;
    }
    return true;
  }
  setValid(index2, value) {
    if (!this.nullable) {
      return value;
    }
    if (!this.nullBitmap || this.nullBitmap.byteLength <= index2 >> 3) {
      const { nullBitmap: nullBitmap2 } = this._changeLengthAndBackfillNullBitmap(this.length);
      Object.assign(this, { nullBitmap: nullBitmap2, _nullCount: 0 });
    }
    const { nullBitmap, offset: offset2 } = this;
    const pos = offset2 + index2 >> 3;
    const bit = (offset2 + index2) % 8;
    const val = nullBitmap[pos] >> bit & 1;
    value ? val === 0 && (nullBitmap[pos] |= 1 << bit, this._nullCount = this.nullCount + 1) : val === 1 && (nullBitmap[pos] &= ~(1 << bit), this._nullCount = this.nullCount - 1);
    return value;
  }
  clone(type2 = this.type, offset2 = this.offset, length4 = this.length, nullCount = this._nullCount, buffers = this, children2 = this.children) {
    return new _Data(type2, offset2, length4, nullCount, buffers, children2, this.dictionary);
  }
  slice(offset2, length4) {
    const { stride, typeId, children: children2 } = this;
    const nullCount = +(this._nullCount === 0) - 1;
    const childStride = typeId === 16 ? stride : 1;
    const buffers = this._sliceBuffers(offset2, length4, stride, typeId);
    return this.clone(
      this.type,
      this.offset + offset2,
      length4,
      nullCount,
      buffers,
      // Don't slice children if we have value offsets (the variable-width types)
      children2.length === 0 || this.valueOffsets ? children2 : this._sliceChildren(children2, childStride * offset2, childStride * length4)
    );
  }
  _changeLengthAndBackfillNullBitmap(newLength) {
    if (this.typeId === Type.Null) {
      return this.clone(this.type, 0, newLength, 0);
    }
    const { length: length4, nullCount } = this;
    const bitmap = new Uint8Array((newLength + 63 & ~63) >> 3).fill(255, 0, length4 >> 3);
    bitmap[length4 >> 3] = (1 << length4 - (length4 & ~7)) - 1;
    if (nullCount > 0) {
      bitmap.set(truncateBitmap(this.offset, length4, this.nullBitmap), 0);
    }
    const buffers = this.buffers;
    buffers[BufferType.VALIDITY] = bitmap;
    return this.clone(this.type, 0, newLength, nullCount + (newLength - length4), buffers);
  }
  _sliceBuffers(offset2, length4, stride, typeId) {
    let arr;
    const { buffers } = this;
    (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset2, offset2 + length4));
    (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset2, offset2 + length4 + 1)) || // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes
    (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset2, stride * (offset2 + length4)));
    return buffers;
  }
  _sliceChildren(children2, offset2, length4) {
    return children2.map((child) => child.slice(offset2, length4));
  }
};
Data.prototype.children = Object.freeze([]);
var MakeDataVisitor = class _MakeDataVisitor extends Visitor {
  visit(props) {
    return this.getVisitFn(props["type"]).call(this, props);
  }
  visitNull(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["length"]: length4 = 0 } = props;
    return new Data(type2, offset2, length4, 0);
  }
  visitBool(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const data = toArrayBufferView(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length >> 3, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitInt(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const data = toArrayBufferView(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitFloat(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const data = toArrayBufferView(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitUtf8(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const data = toUint8Array(props["data"]);
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const valueOffsets = toInt32Array(props["valueOffsets"]);
    const { ["length"]: length4 = valueOffsets.length - 1, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [valueOffsets, data, nullBitmap]);
  }
  visitBinary(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const data = toUint8Array(props["data"]);
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const valueOffsets = toInt32Array(props["valueOffsets"]);
    const { ["length"]: length4 = valueOffsets.length - 1, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [valueOffsets, data, nullBitmap]);
  }
  visitFixedSizeBinary(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const data = toArrayBufferView(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitDate(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const data = toArrayBufferView(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitTimestamp(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const data = toArrayBufferView(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitTime(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const data = toArrayBufferView(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitDecimal(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const data = toArrayBufferView(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitList(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["child"]: child } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const valueOffsets = toInt32Array(props["valueOffsets"]);
    const { ["length"]: length4 = valueOffsets.length - 1, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [valueOffsets, void 0, nullBitmap], [child]);
  }
  visitStruct(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["children"]: children2 = [] } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const { length: length4 = children2.reduce((len, { length: length5 }) => Math.max(len, length5), 0), nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, void 0, nullBitmap], children2);
  }
  visitUnion(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["children"]: children2 = [] } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const typeIds = toArrayBufferView(type2.ArrayType, props["typeIds"]);
    const { ["length"]: length4 = typeIds.length, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    if (DataType.isSparseUnion(type2)) {
      return new Data(type2, offset2, length4, nullCount, [void 0, void 0, nullBitmap, typeIds], children2);
    }
    const valueOffsets = toInt32Array(props["valueOffsets"]);
    return new Data(type2, offset2, length4, nullCount, [valueOffsets, void 0, nullBitmap, typeIds], children2);
  }
  visitDictionary(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const data = toArrayBufferView(type2.indices.ArrayType, props["data"]);
    const { ["dictionary"]: dictionary = new Vector([new _MakeDataVisitor().visit({ type: type2.dictionary })]) } = props;
    const { ["length"]: length4 = data.length, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, data, nullBitmap], [], dictionary);
  }
  visitInterval(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const data = toArrayBufferView(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitFixedSizeList(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["child"]: child = new _MakeDataVisitor().visit({ type: type2.valueType }) } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const { ["length"]: length4 = child.length / strideForType(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [void 0, void 0, nullBitmap], [child]);
  }
  visitMap(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["child"]: child = new _MakeDataVisitor().visit({ type: type2.childType }) } = props;
    const nullBitmap = toUint8Array(props["nullBitmap"]);
    const valueOffsets = toInt32Array(props["valueOffsets"]);
    const { ["length"]: length4 = valueOffsets.length - 1, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data(type2, offset2, length4, nullCount, [valueOffsets, void 0, nullBitmap], [child]);
  }
};
function makeData(props) {
  return new MakeDataVisitor().visit(props);
}

// ../core/node_modules/apache-arrow/util/chunk.mjs
var ChunkedIterator = class {
  constructor(numChunks = 0, getChunkIterator) {
    this.numChunks = numChunks;
    this.getChunkIterator = getChunkIterator;
    this.chunkIndex = 0;
    this.chunkIterator = this.getChunkIterator(0);
  }
  next() {
    while (this.chunkIndex < this.numChunks) {
      const next = this.chunkIterator.next();
      if (!next.done) {
        return next;
      }
      if (++this.chunkIndex < this.numChunks) {
        this.chunkIterator = this.getChunkIterator(this.chunkIndex);
      }
    }
    return { done: true, value: null };
  }
  [Symbol.iterator]() {
    return this;
  }
};
function computeChunkNullCounts(chunks) {
  return chunks.reduce((nullCount, chunk) => nullCount + chunk.nullCount, 0);
}
function computeChunkOffsets(chunks) {
  return chunks.reduce((offsets, chunk, index2) => {
    offsets[index2 + 1] = offsets[index2] + chunk.length;
    return offsets;
  }, new Uint32Array(chunks.length + 1));
}
function sliceChunks(chunks, offsets, begin, end) {
  const slices = [];
  for (let i2 = -1, n = chunks.length; ++i2 < n; ) {
    const chunk = chunks[i2];
    const offset2 = offsets[i2];
    const { length: length4 } = chunk;
    if (offset2 >= end) {
      break;
    }
    if (begin >= offset2 + length4) {
      continue;
    }
    if (offset2 >= begin && offset2 + length4 <= end) {
      slices.push(chunk);
      continue;
    }
    const from2 = Math.max(0, begin - offset2);
    const to = Math.min(end - offset2, length4);
    slices.push(chunk.slice(from2, to - from2));
  }
  if (slices.length === 0) {
    slices.push(chunks[0].slice(0, 0));
  }
  return slices;
}
function binarySearch(chunks, offsets, idx, fn) {
  let lhs = 0, mid2 = 0, rhs = offsets.length - 1;
  do {
    if (lhs >= rhs - 1) {
      return idx < offsets[rhs] ? fn(chunks, lhs, idx - offsets[lhs]) : null;
    }
    mid2 = lhs + Math.trunc((rhs - lhs) * 0.5);
    idx < offsets[mid2] ? rhs = mid2 : lhs = mid2;
  } while (lhs < rhs);
}
function isChunkedValid(data, index2) {
  return data.getValid(index2);
}
function wrapChunkedCall1(fn) {
  function chunkedFn(chunks, i2, j2) {
    return fn(chunks[i2], j2);
  }
  return function(index2) {
    const data = this.data;
    return binarySearch(data, this._offsets, index2, chunkedFn);
  };
}
function wrapChunkedCall2(fn) {
  let _2;
  function chunkedFn(chunks, i2, j2) {
    return fn(chunks[i2], j2, _2);
  }
  return function(index2, value) {
    const data = this.data;
    _2 = value;
    const result = binarySearch(data, this._offsets, index2, chunkedFn);
    _2 = void 0;
    return result;
  };
}
function wrapChunkedIndexOf(indexOf2) {
  let _1;
  function chunkedIndexOf(data, chunkIndex, fromIndex) {
    let begin = fromIndex, index2 = 0, total = 0;
    for (let i2 = chunkIndex - 1, n = data.length; ++i2 < n; ) {
      const chunk = data[i2];
      if (~(index2 = indexOf2(chunk, _1, begin))) {
        return total + index2;
      }
      begin = 0;
      total += chunk.length;
    }
    return -1;
  }
  return function(element, offset2) {
    _1 = element;
    const data = this.data;
    const result = typeof offset2 !== "number" ? chunkedIndexOf(data, 0, 0) : binarySearch(data, this._offsets, offset2, chunkedIndexOf);
    _1 = void 0;
    return result;
  };
}

// ../core/node_modules/apache-arrow/visitor/indexof.mjs
var IndexOfVisitor = class extends Visitor {
};
function nullIndexOf(data, searchElement) {
  return searchElement === null && data.length > 0 ? 0 : -1;
}
function indexOfNull(data, fromIndex) {
  const { nullBitmap } = data;
  if (!nullBitmap || data.nullCount <= 0) {
    return -1;
  }
  let i2 = 0;
  for (const isValid of new BitIterator(nullBitmap, data.offset + (fromIndex || 0), data.length, nullBitmap, getBool2)) {
    if (!isValid) {
      return i2;
    }
    ++i2;
  }
  return -1;
}
function indexOfValue(data, searchElement, fromIndex) {
  if (searchElement === void 0) {
    return -1;
  }
  if (searchElement === null) {
    return indexOfNull(data, fromIndex);
  }
  const get3 = instance2.getVisitFn(data);
  const compare = createElementComparator(searchElement);
  for (let i2 = (fromIndex || 0) - 1, n = data.length; ++i2 < n; ) {
    if (compare(get3(data, i2))) {
      return i2;
    }
  }
  return -1;
}
function indexOfUnion(data, searchElement, fromIndex) {
  const get3 = instance2.getVisitFn(data);
  const compare = createElementComparator(searchElement);
  for (let i2 = (fromIndex || 0) - 1, n = data.length; ++i2 < n; ) {
    if (compare(get3(data, i2))) {
      return i2;
    }
  }
  return -1;
}
IndexOfVisitor.prototype.visitNull = nullIndexOf;
IndexOfVisitor.prototype.visitBool = indexOfValue;
IndexOfVisitor.prototype.visitInt = indexOfValue;
IndexOfVisitor.prototype.visitInt8 = indexOfValue;
IndexOfVisitor.prototype.visitInt16 = indexOfValue;
IndexOfVisitor.prototype.visitInt32 = indexOfValue;
IndexOfVisitor.prototype.visitInt64 = indexOfValue;
IndexOfVisitor.prototype.visitUint8 = indexOfValue;
IndexOfVisitor.prototype.visitUint16 = indexOfValue;
IndexOfVisitor.prototype.visitUint32 = indexOfValue;
IndexOfVisitor.prototype.visitUint64 = indexOfValue;
IndexOfVisitor.prototype.visitFloat = indexOfValue;
IndexOfVisitor.prototype.visitFloat16 = indexOfValue;
IndexOfVisitor.prototype.visitFloat32 = indexOfValue;
IndexOfVisitor.prototype.visitFloat64 = indexOfValue;
IndexOfVisitor.prototype.visitUtf8 = indexOfValue;
IndexOfVisitor.prototype.visitBinary = indexOfValue;
IndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;
IndexOfVisitor.prototype.visitDate = indexOfValue;
IndexOfVisitor.prototype.visitDateDay = indexOfValue;
IndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestamp = indexOfValue;
IndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;
IndexOfVisitor.prototype.visitTime = indexOfValue;
IndexOfVisitor.prototype.visitTimeSecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;
IndexOfVisitor.prototype.visitDecimal = indexOfValue;
IndexOfVisitor.prototype.visitList = indexOfValue;
IndexOfVisitor.prototype.visitStruct = indexOfValue;
IndexOfVisitor.prototype.visitUnion = indexOfValue;
IndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;
IndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;
IndexOfVisitor.prototype.visitDictionary = indexOfValue;
IndexOfVisitor.prototype.visitInterval = indexOfValue;
IndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;
IndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;
IndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;
IndexOfVisitor.prototype.visitMap = indexOfValue;
var instance3 = new IndexOfVisitor();

// ../core/node_modules/apache-arrow/visitor/iterator.mjs
var IteratorVisitor = class extends Visitor {
};
function vectorIterator(vector3) {
  const { type: type2 } = vector3;
  if (vector3.nullCount === 0 && vector3.stride === 1 && (type2.typeId === Type.Timestamp || type2 instanceof Int_ && type2.bitWidth !== 64 || type2 instanceof Time_ && type2.bitWidth !== 64 || type2 instanceof Float && type2.precision !== Precision.HALF)) {
    return new ChunkedIterator(vector3.data.length, (chunkIndex) => {
      const data = vector3.data[chunkIndex];
      return data.values.subarray(0, data.length)[Symbol.iterator]();
    });
  }
  let offset2 = 0;
  return new ChunkedIterator(vector3.data.length, (chunkIndex) => {
    const data = vector3.data[chunkIndex];
    const length4 = data.length;
    const inner = vector3.slice(offset2, offset2 + length4);
    offset2 += length4;
    return new VectorIterator(inner);
  });
}
var VectorIterator = class {
  constructor(vector3) {
    this.vector = vector3;
    this.index = 0;
  }
  next() {
    if (this.index < this.vector.length) {
      return {
        value: this.vector.get(this.index++)
      };
    }
    return { done: true, value: null };
  }
  [Symbol.iterator]() {
    return this;
  }
};
IteratorVisitor.prototype.visitNull = vectorIterator;
IteratorVisitor.prototype.visitBool = vectorIterator;
IteratorVisitor.prototype.visitInt = vectorIterator;
IteratorVisitor.prototype.visitInt8 = vectorIterator;
IteratorVisitor.prototype.visitInt16 = vectorIterator;
IteratorVisitor.prototype.visitInt32 = vectorIterator;
IteratorVisitor.prototype.visitInt64 = vectorIterator;
IteratorVisitor.prototype.visitUint8 = vectorIterator;
IteratorVisitor.prototype.visitUint16 = vectorIterator;
IteratorVisitor.prototype.visitUint32 = vectorIterator;
IteratorVisitor.prototype.visitUint64 = vectorIterator;
IteratorVisitor.prototype.visitFloat = vectorIterator;
IteratorVisitor.prototype.visitFloat16 = vectorIterator;
IteratorVisitor.prototype.visitFloat32 = vectorIterator;
IteratorVisitor.prototype.visitFloat64 = vectorIterator;
IteratorVisitor.prototype.visitUtf8 = vectorIterator;
IteratorVisitor.prototype.visitBinary = vectorIterator;
IteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;
IteratorVisitor.prototype.visitDate = vectorIterator;
IteratorVisitor.prototype.visitDateDay = vectorIterator;
IteratorVisitor.prototype.visitDateMillisecond = vectorIterator;
IteratorVisitor.prototype.visitTimestamp = vectorIterator;
IteratorVisitor.prototype.visitTimestampSecond = vectorIterator;
IteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;
IteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;
IteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;
IteratorVisitor.prototype.visitTime = vectorIterator;
IteratorVisitor.prototype.visitTimeSecond = vectorIterator;
IteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;
IteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;
IteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;
IteratorVisitor.prototype.visitDecimal = vectorIterator;
IteratorVisitor.prototype.visitList = vectorIterator;
IteratorVisitor.prototype.visitStruct = vectorIterator;
IteratorVisitor.prototype.visitUnion = vectorIterator;
IteratorVisitor.prototype.visitDenseUnion = vectorIterator;
IteratorVisitor.prototype.visitSparseUnion = vectorIterator;
IteratorVisitor.prototype.visitDictionary = vectorIterator;
IteratorVisitor.prototype.visitInterval = vectorIterator;
IteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;
IteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;
IteratorVisitor.prototype.visitFixedSizeList = vectorIterator;
IteratorVisitor.prototype.visitMap = vectorIterator;
var instance4 = new IteratorVisitor();

// ../core/node_modules/apache-arrow/visitor/bytelength.mjs
var sum = (x3, y3) => x3 + y3;
var GetByteLengthVisitor = class extends Visitor {
  visitNull(____, _2) {
    return 0;
  }
  visitInt(data, _2) {
    return data.type.bitWidth / 8;
  }
  visitFloat(data, _2) {
    return data.type.ArrayType.BYTES_PER_ELEMENT;
  }
  visitBool(____, _2) {
    return 1 / 8;
  }
  visitDecimal(data, _2) {
    return data.type.bitWidth / 8;
  }
  visitDate(data, _2) {
    return (data.type.unit + 1) * 4;
  }
  visitTime(data, _2) {
    return data.type.bitWidth / 8;
  }
  visitTimestamp(data, _2) {
    return data.type.unit === TimeUnit.SECOND ? 4 : 8;
  }
  visitInterval(data, _2) {
    return (data.type.unit + 1) * 4;
  }
  visitStruct(data, i2) {
    return data.children.reduce((total, child) => total + instance5.visit(child, i2), 0);
  }
  visitFixedSizeBinary(data, _2) {
    return data.type.byteWidth;
  }
  visitMap(data, i2) {
    return 8 + data.children.reduce((total, child) => total + instance5.visit(child, i2), 0);
  }
  visitDictionary(data, i2) {
    var _a9;
    return data.type.indices.bitWidth / 8 + (((_a9 = data.dictionary) === null || _a9 === void 0 ? void 0 : _a9.getByteLength(data.values[i2])) || 0);
  }
};
var getUtf8ByteLength = ({ valueOffsets }, index2) => {
  return 8 + (valueOffsets[index2 + 1] - valueOffsets[index2]);
};
var getBinaryByteLength = ({ valueOffsets }, index2) => {
  return 8 + (valueOffsets[index2 + 1] - valueOffsets[index2]);
};
var getListByteLength = ({ valueOffsets, stride, children: children2 }, index2) => {
  const child = children2[0];
  const { [index2 * stride]: start2 } = valueOffsets;
  const { [index2 * stride + 1]: end } = valueOffsets;
  const visit2 = instance5.getVisitFn(child.type);
  const slice5 = child.slice(start2, end - start2);
  let size = 8;
  for (let idx = -1, len = end - start2; ++idx < len; ) {
    size += visit2(slice5, idx);
  }
  return size;
};
var getFixedSizeListByteLength = ({ stride, children: children2 }, index2) => {
  const child = children2[0];
  const slice5 = child.slice(index2 * stride, stride);
  const visit2 = instance5.getVisitFn(child.type);
  let size = 0;
  for (let idx = -1, len = slice5.length; ++idx < len; ) {
    size += visit2(slice5, idx);
  }
  return size;
};
var getUnionByteLength = (data, index2) => {
  return data.type.mode === UnionMode.Dense ? getDenseUnionByteLength(data, index2) : getSparseUnionByteLength(data, index2);
};
var getDenseUnionByteLength = ({ type: type2, children: children2, typeIds, valueOffsets }, index2) => {
  const childIndex = type2.typeIdToChildIndex[typeIds[index2]];
  return 8 + instance5.visit(children2[childIndex], valueOffsets[index2]);
};
var getSparseUnionByteLength = ({ children: children2 }, index2) => {
  return 4 + instance5.visitMany(children2, children2.map(() => index2)).reduce(sum, 0);
};
GetByteLengthVisitor.prototype.visitUtf8 = getUtf8ByteLength;
GetByteLengthVisitor.prototype.visitBinary = getBinaryByteLength;
GetByteLengthVisitor.prototype.visitList = getListByteLength;
GetByteLengthVisitor.prototype.visitFixedSizeList = getFixedSizeListByteLength;
GetByteLengthVisitor.prototype.visitUnion = getUnionByteLength;
GetByteLengthVisitor.prototype.visitDenseUnion = getDenseUnionByteLength;
GetByteLengthVisitor.prototype.visitSparseUnion = getSparseUnionByteLength;
var instance5 = new GetByteLengthVisitor();

// ../core/node_modules/apache-arrow/vector.mjs
var _a2;
var visitorsByTypeId = {};
var vectorPrototypesByTypeId = {};
var Vector = class _Vector {
  constructor(input2) {
    var _b3, _c3, _d3;
    const data = input2[0] instanceof _Vector ? input2.flatMap((x3) => x3.data) : input2;
    if (data.length === 0 || data.some((x3) => !(x3 instanceof Data))) {
      throw new TypeError("Vector constructor expects an Array of Data instances.");
    }
    const type2 = (_b3 = data[0]) === null || _b3 === void 0 ? void 0 : _b3.type;
    switch (data.length) {
      case 0:
        this._offsets = [0];
        break;
      case 1: {
        const { get: get3, set: set3, indexOf: indexOf2, byteLength } = visitorsByTypeId[type2.typeId];
        const unchunkedData = data[0];
        this.isValid = (index2) => isChunkedValid(unchunkedData, index2);
        this.get = (index2) => get3(unchunkedData, index2);
        this.set = (index2, value) => set3(unchunkedData, index2, value);
        this.indexOf = (index2) => indexOf2(unchunkedData, index2);
        this.getByteLength = (index2) => byteLength(unchunkedData, index2);
        this._offsets = [0, unchunkedData.length];
        break;
      }
      default:
        Object.setPrototypeOf(this, vectorPrototypesByTypeId[type2.typeId]);
        this._offsets = computeChunkOffsets(data);
        break;
    }
    this.data = data;
    this.type = type2;
    this.stride = strideForType(type2);
    this.numChildren = (_d3 = (_c3 = type2.children) === null || _c3 === void 0 ? void 0 : _c3.length) !== null && _d3 !== void 0 ? _d3 : 0;
    this.length = this._offsets[this._offsets.length - 1];
  }
  /**
   * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.
   */
  get byteLength() {
    if (this._byteLength === -1) {
      this._byteLength = this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);
    }
    return this._byteLength;
  }
  /**
   * The number of null elements in this Vector.
   */
  get nullCount() {
    if (this._nullCount === -1) {
      this._nullCount = computeChunkNullCounts(this.data);
    }
    return this._nullCount;
  }
  /**
   * The Array or TypedAray constructor used for the JS representation
   *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.
   */
  get ArrayType() {
    return this.type.ArrayType;
  }
  /**
   * The name that should be printed when the Vector is logged in a message.
   */
  get [Symbol.toStringTag]() {
    return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;
  }
  /**
   * The name of this Vector.
   */
  get VectorName() {
    return `${Type[this.type.typeId]}Vector`;
  }
  /**
   * Check whether an element is null.
   * @param index The index at which to read the validity bitmap.
   */
  // @ts-ignore
  isValid(index2) {
    return false;
  }
  /**
   * Get an element value by position.
   * @param index The index of the element to read.
   */
  // @ts-ignore
  get(index2) {
    return null;
  }
  /**
   * Set an element value by position.
   * @param index The index of the element to write.
   * @param value The value to set.
   */
  // @ts-ignore
  set(index2, value) {
    return;
  }
  /**
   * Retrieve the index of the first occurrence of a value in an Vector.
   * @param element The value to locate in the Vector.
   * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.
   */
  // @ts-ignore
  indexOf(element, offset2) {
    return -1;
  }
  includes(element, offset2) {
    return this.indexOf(element, offset2) > 0;
  }
  /**
   * Get the size in bytes of an element by index.
   * @param index The index at which to get the byteLength.
   */
  // @ts-ignore
  getByteLength(index2) {
    return 0;
  }
  /**
   * Iterator for the Vector's elements.
   */
  [Symbol.iterator]() {
    return instance4.visit(this);
  }
  /**
   * Combines two or more Vectors of the same type.
   * @param others Additional Vectors to add to the end of this Vector.
   */
  concat(...others) {
    return new _Vector(this.data.concat(others.flatMap((x3) => x3.data).flat(Number.POSITIVE_INFINITY)));
  }
  /**
   * Return a zero-copy sub-section of this Vector.
   * @param start The beginning of the specified portion of the Vector.
   * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.
   */
  slice(begin, end) {
    return new _Vector(clampRange(this, begin, end, ({ data, _offsets }, begin2, end2) => sliceChunks(data, _offsets, begin2, end2)));
  }
  toJSON() {
    return [...this];
  }
  /**
   * Return a JavaScript Array or TypedArray of the Vector's elements.
   *
   * @note If this Vector contains a single Data chunk and the Vector's type is a
   *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this
   *  method returns a zero-copy slice of the underlying TypedArray values. If there's
   *  more than one chunk, the resulting TypedArray will be a copy of the data from each
   *  chunk's underlying TypedArray values.
   *
   * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.
   */
  toArray() {
    const { type: type2, data, length: length4, stride, ArrayType } = this;
    switch (type2.typeId) {
      case Type.Int:
      case Type.Float:
      case Type.Decimal:
      case Type.Time:
      case Type.Timestamp:
        switch (data.length) {
          case 0:
            return new ArrayType();
          case 1:
            return data[0].values.subarray(0, length4 * stride);
          default:
            return data.reduce((memo, { values: values2, length: chunk_length }) => {
              memo.array.set(values2.subarray(0, chunk_length * stride), memo.offset);
              memo.offset += chunk_length * stride;
              return memo;
            }, { array: new ArrayType(length4 * stride), offset: 0 }).array;
        }
    }
    return [...this];
  }
  /**
   * Returns a string representation of the Vector.
   *
   * @returns A string representation of the Vector.
   */
  toString() {
    return `[${[...this].join(",")}]`;
  }
  /**
   * Returns a child Vector by name, or null if this Vector has no child with the given name.
   * @param name The name of the child to retrieve.
   */
  getChild(name2) {
    var _b3;
    return this.getChildAt((_b3 = this.type.children) === null || _b3 === void 0 ? void 0 : _b3.findIndex((f2) => f2.name === name2));
  }
  /**
   * Returns a child Vector by index, or null if this Vector has no child at the supplied index.
   * @param index The index of the child to retrieve.
   */
  getChildAt(index2) {
    if (index2 > -1 && index2 < this.numChildren) {
      return new _Vector(this.data.map(({ children: children2 }) => children2[index2]));
    }
    return null;
  }
  get isMemoized() {
    if (DataType.isDictionary(this.type)) {
      return this.data[0].dictionary.isMemoized;
    }
    return false;
  }
  /**
   * Adds memoization to the Vector's {@link get} method. For dictionary
   * vectors, this method return a vector that memoizes only the dictionary
   * values.
   *
   * Memoization is very useful when decoding a value is expensive such as
   * Uft8. The memoization creates a cache of the size of the Vector and
   * therfore increases memory usage.
   *
   * @returns A new vector that memoizes calls to {@link get}.
   */
  memoize() {
    if (DataType.isDictionary(this.type)) {
      const dictionary = new MemoizedVector(this.data[0].dictionary);
      const newData = this.data.map((data) => {
        const cloned = data.clone();
        cloned.dictionary = dictionary;
        return cloned;
      });
      return new _Vector(newData);
    }
    return new MemoizedVector(this);
  }
  /**
   * Returns a vector without memoization of the {@link get} method. If this
   * vector is not memoized, this method returns this vector.
   *
   * @returns A a vector without memoization.
   */
  unmemoize() {
    if (DataType.isDictionary(this.type) && this.isMemoized) {
      const dictionary = this.data[0].dictionary.unmemoize();
      const newData = this.data.map((data) => {
        const newData2 = data.clone();
        newData2.dictionary = dictionary;
        return newData2;
      });
      return new _Vector(newData);
    }
    return this;
  }
};
_a2 = Symbol.toStringTag;
Vector[_a2] = ((proto) => {
  proto.type = DataType.prototype;
  proto.data = [];
  proto.length = 0;
  proto.stride = 1;
  proto.numChildren = 0;
  proto._nullCount = -1;
  proto._byteLength = -1;
  proto._offsets = new Uint32Array([0]);
  proto[Symbol.isConcatSpreadable] = true;
  const typeIds = Object.keys(Type).map((T2) => Type[T2]).filter((T2) => typeof T2 === "number" && T2 !== Type.NONE);
  for (const typeId of typeIds) {
    const get3 = instance2.getVisitFnByTypeId(typeId);
    const set3 = instance.getVisitFnByTypeId(typeId);
    const indexOf2 = instance3.getVisitFnByTypeId(typeId);
    const byteLength = instance5.getVisitFnByTypeId(typeId);
    visitorsByTypeId[typeId] = { get: get3, set: set3, indexOf: indexOf2, byteLength };
    vectorPrototypesByTypeId[typeId] = Object.create(proto, {
      ["isValid"]: { value: wrapChunkedCall1(isChunkedValid) },
      ["get"]: { value: wrapChunkedCall1(instance2.getVisitFnByTypeId(typeId)) },
      ["set"]: { value: wrapChunkedCall2(instance.getVisitFnByTypeId(typeId)) },
      ["indexOf"]: { value: wrapChunkedIndexOf(instance3.getVisitFnByTypeId(typeId)) },
      ["getByteLength"]: { value: wrapChunkedCall1(instance5.getVisitFnByTypeId(typeId)) }
    });
  }
  return "Vector";
})(Vector.prototype);
var MemoizedVector = class _MemoizedVector extends Vector {
  constructor(vector3) {
    super(vector3.data);
    const get3 = this.get;
    const set3 = this.set;
    const slice5 = this.slice;
    const cache = new Array(this.length);
    Object.defineProperty(this, "get", {
      value(index2) {
        const cachedValue = cache[index2];
        if (cachedValue !== void 0) {
          return cachedValue;
        }
        const value = get3.call(this, index2);
        cache[index2] = value;
        return value;
      }
    });
    Object.defineProperty(this, "set", {
      value(index2, value) {
        set3.call(this, index2, value);
        cache[index2] = value;
      }
    });
    Object.defineProperty(this, "slice", {
      value: (begin, end) => new _MemoizedVector(slice5.call(this, begin, end))
    });
    Object.defineProperty(this, "isMemoized", { value: true });
    Object.defineProperty(this, "unmemoize", {
      value: () => new Vector(this.data)
    });
    Object.defineProperty(this, "memoize", {
      value: () => this
    });
  }
};

// ../core/node_modules/apache-arrow/builder/valid.mjs
function createIsValidFunction(nullValues) {
  if (!nullValues || nullValues.length <= 0) {
    return function isValid(value) {
      return true;
    };
  }
  let fnBody = "";
  const noNaNs = nullValues.filter((x3) => x3 === x3);
  if (noNaNs.length > 0) {
    fnBody = `
    switch (x) {${noNaNs.map((x3) => `
        case ${valueToCase(x3)}:`).join("")}
            return false;
    }`;
  }
  if (nullValues.length !== noNaNs.length) {
    fnBody = `if (x !== x) return false;
${fnBody}`;
  }
  return new Function(`x`, `${fnBody}
return true;`);
}
function valueToCase(x3) {
  if (typeof x3 !== "bigint") {
    return valueToString(x3);
  }
  return `${valueToString(x3)}n`;
}

// ../core/node_modules/apache-arrow/builder/buffer.mjs
var roundLengthUpToNearest64Bytes = (len, BPE) => (Math.ceil(len) * BPE + 63 & ~63 || 64) / BPE;
var sliceOrExtendArray = (arr, len = 0) => arr.length >= len ? arr.subarray(0, len) : memcpy(new arr.constructor(len), arr, 0);
var BufferBuilder = class {
  constructor(buffer, stride = 1) {
    this.buffer = buffer;
    this.stride = stride;
    this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;
    this.ArrayType = buffer.constructor;
    this._resize(this.length = Math.ceil(buffer.length / stride));
  }
  get byteLength() {
    return Math.ceil(this.length * this.stride) * this.BYTES_PER_ELEMENT;
  }
  get reservedLength() {
    return this.buffer.length / this.stride;
  }
  get reservedByteLength() {
    return this.buffer.byteLength;
  }
  // @ts-ignore
  set(index2, value) {
    return this;
  }
  append(value) {
    return this.set(this.length, value);
  }
  reserve(extra) {
    if (extra > 0) {
      this.length += extra;
      const stride = this.stride;
      const length4 = this.length * stride;
      const reserved = this.buffer.length;
      if (length4 >= reserved) {
        this._resize(reserved === 0 ? roundLengthUpToNearest64Bytes(length4 * 1, this.BYTES_PER_ELEMENT) : roundLengthUpToNearest64Bytes(length4 * 2, this.BYTES_PER_ELEMENT));
      }
    }
    return this;
  }
  flush(length4 = this.length) {
    length4 = roundLengthUpToNearest64Bytes(length4 * this.stride, this.BYTES_PER_ELEMENT);
    const array3 = sliceOrExtendArray(this.buffer, length4);
    this.clear();
    return array3;
  }
  clear() {
    this.length = 0;
    this._resize(0);
    return this;
  }
  _resize(newLength) {
    return this.buffer = memcpy(new this.ArrayType(newLength), this.buffer);
  }
};
BufferBuilder.prototype.offset = 0;
var DataBufferBuilder = class extends BufferBuilder {
  last() {
    return this.get(this.length - 1);
  }
  get(index2) {
    return this.buffer[index2];
  }
  set(index2, value) {
    this.reserve(index2 - this.length + 1);
    this.buffer[index2 * this.stride] = value;
    return this;
  }
};
var BitmapBufferBuilder = class extends DataBufferBuilder {
  constructor(data = new Uint8Array(0)) {
    super(data, 1 / 8);
    this.numValid = 0;
  }
  get numInvalid() {
    return this.length - this.numValid;
  }
  get(idx) {
    return this.buffer[idx >> 3] >> idx % 8 & 1;
  }
  set(idx, val) {
    const { buffer } = this.reserve(idx - this.length + 1);
    const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;
    val ? cur === 0 && (buffer[byte] |= 1 << bit, ++this.numValid) : cur === 1 && (buffer[byte] &= ~(1 << bit), --this.numValid);
    return this;
  }
  clear() {
    this.numValid = 0;
    return super.clear();
  }
};
var OffsetsBufferBuilder = class extends DataBufferBuilder {
  constructor(data = new Int32Array(1)) {
    super(data, 1);
  }
  append(value) {
    return this.set(this.length - 1, value);
  }
  set(index2, value) {
    const offset2 = this.length - 1;
    const buffer = this.reserve(index2 - offset2 + 1).buffer;
    if (offset2 < index2++) {
      buffer.fill(buffer[offset2], offset2, index2);
    }
    buffer[index2] = buffer[index2 - 1] + value;
    return this;
  }
  flush(length4 = this.length - 1) {
    if (length4 > this.length) {
      this.set(length4 - 1, 0);
    }
    return super.flush(length4 + 1);
  }
};

// ../core/node_modules/apache-arrow/builder.mjs
var Builder = class {
  /** @nocollapse */
  // @ts-ignore
  static throughNode(options) {
    throw new Error(`"throughNode" not available in this environment`);
  }
  /** @nocollapse */
  // @ts-ignore
  static throughDOM(options) {
    throw new Error(`"throughDOM" not available in this environment`);
  }
  /**
   * Construct a builder with the given Arrow DataType with optional null values,
   * which will be interpreted as "null" when set or appended to the `Builder`.
   * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.
   */
  constructor({ "type": type2, "nullValues": nulls }) {
    this.length = 0;
    this.finished = false;
    this.type = type2;
    this.children = [];
    this.nullValues = nulls;
    this.stride = strideForType(type2);
    this._nulls = new BitmapBufferBuilder();
    if (nulls && nulls.length > 0) {
      this._isValid = createIsValidFunction(nulls);
    }
  }
  /**
   * Flush the `Builder` and return a `Vector<T>`.
   * @returns {Vector<T>} A `Vector<T>` of the flushed values.
   */
  toVector() {
    return new Vector([this.flush()]);
  }
  get ArrayType() {
    return this.type.ArrayType;
  }
  get nullCount() {
    return this._nulls.numInvalid;
  }
  get numChildren() {
    return this.children.length;
  }
  /**
   * @returns The aggregate length (in bytes) of the values that have been written.
   */
  get byteLength() {
    let size = 0;
    const { _offsets, _values, _nulls, _typeIds, children: children2 } = this;
    _offsets && (size += _offsets.byteLength);
    _values && (size += _values.byteLength);
    _nulls && (size += _nulls.byteLength);
    _typeIds && (size += _typeIds.byteLength);
    return children2.reduce((size2, child) => size2 + child.byteLength, size);
  }
  /**
   * @returns The aggregate number of rows that have been reserved to write new values.
   */
  get reservedLength() {
    return this._nulls.reservedLength;
  }
  /**
   * @returns The aggregate length (in bytes) that has been reserved to write new values.
   */
  get reservedByteLength() {
    let size = 0;
    this._offsets && (size += this._offsets.reservedByteLength);
    this._values && (size += this._values.reservedByteLength);
    this._nulls && (size += this._nulls.reservedByteLength);
    this._typeIds && (size += this._typeIds.reservedByteLength);
    return this.children.reduce((size2, child) => size2 + child.reservedByteLength, size);
  }
  get valueOffsets() {
    return this._offsets ? this._offsets.buffer : null;
  }
  get values() {
    return this._values ? this._values.buffer : null;
  }
  get nullBitmap() {
    return this._nulls ? this._nulls.buffer : null;
  }
  get typeIds() {
    return this._typeIds ? this._typeIds.buffer : null;
  }
  /**
   * Appends a value (or null) to this `Builder`.
   * This is equivalent to `builder.set(builder.length, value)`.
   * @param {T['TValue'] | TNull } value The value to append.
   */
  append(value) {
    return this.set(this.length, value);
  }
  /**
   * Validates whether a value is valid (true), or null (false)
   * @param {T['TValue'] | TNull } value The value to compare against null the value representations
   */
  isValid(value) {
    return this._isValid(value);
  }
  /**
   * Write a value (or null-value sentinel) at the supplied index.
   * If the value matches one of the null-value representations, a 1-bit is
   * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to
   * the null `BitmapBufferBuilder`, and the value is passed to
   * `Builder.prototype.setValue()`.
   * @param {number} index The index of the value to write.
   * @param {T['TValue'] | TNull } value The value to write at the supplied index.
   * @returns {this} The updated `Builder` instance.
   */
  set(index2, value) {
    if (this.setValid(index2, this.isValid(value))) {
      this.setValue(index2, value);
    }
    return this;
  }
  /**
   * Write a value to the underlying buffers at the supplied index, bypassing
   * the null-value check. This is a low-level method that
   * @param {number} index
   * @param {T['TValue'] | TNull } value
   */
  setValue(index2, value) {
    this._setValue(this, index2, value);
  }
  setValid(index2, valid2) {
    this.length = this._nulls.set(index2, +valid2).length;
    return valid2;
  }
  // @ts-ignore
  addChild(child, name2 = `${this.numChildren}`) {
    throw new Error(`Cannot append children to non-nested type "${this.type}"`);
  }
  /**
   * Retrieve the child `Builder` at the supplied `index`, or null if no child
   * exists at that index.
   * @param {number} index The index of the child `Builder` to retrieve.
   * @returns {Builder | null} The child Builder at the supplied index or null.
   */
  getChildAt(index2) {
    return this.children[index2] || null;
  }
  /**
   * Commit all the values that have been written to their underlying
   * ArrayBuffers, including any child Builders if applicable, and reset
   * the internal `Builder` state.
   * @returns A `Data<T>` of the buffers and children representing the values written.
   */
  flush() {
    let data;
    let typeIds;
    let nullBitmap;
    let valueOffsets;
    const { type: type2, length: length4, nullCount, _typeIds, _offsets, _values, _nulls } = this;
    if (typeIds = _typeIds === null || _typeIds === void 0 ? void 0 : _typeIds.flush(length4)) {
      valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length4);
    } else if (valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length4)) {
      data = _values === null || _values === void 0 ? void 0 : _values.flush(_offsets.last());
    } else {
      data = _values === null || _values === void 0 ? void 0 : _values.flush(length4);
    }
    if (nullCount > 0) {
      nullBitmap = _nulls === null || _nulls === void 0 ? void 0 : _nulls.flush(length4);
    }
    const children2 = this.children.map((child) => child.flush());
    this.clear();
    return makeData({
      type: type2,
      length: length4,
      nullCount,
      children: children2,
      "child": children2[0],
      data,
      typeIds,
      nullBitmap,
      valueOffsets
    });
  }
  /**
   * Finalize this `Builder`, and child builders if applicable.
   * @returns {this} The finalized `Builder` instance.
   */
  finish() {
    this.finished = true;
    for (const child of this.children)
      child.finish();
    return this;
  }
  /**
   * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.
   * @returns {this} The cleared `Builder` instance.
   */
  clear() {
    var _a9, _b3, _c3, _d3;
    this.length = 0;
    (_a9 = this._nulls) === null || _a9 === void 0 ? void 0 : _a9.clear();
    (_b3 = this._values) === null || _b3 === void 0 ? void 0 : _b3.clear();
    (_c3 = this._offsets) === null || _c3 === void 0 ? void 0 : _c3.clear();
    (_d3 = this._typeIds) === null || _d3 === void 0 ? void 0 : _d3.clear();
    for (const child of this.children)
      child.clear();
    return this;
  }
};
Builder.prototype.length = 1;
Builder.prototype.stride = 1;
Builder.prototype.children = null;
Builder.prototype.finished = false;
Builder.prototype.nullValues = null;
Builder.prototype._isValid = () => true;
var FixedWidthBuilder = class extends Builder {
  constructor(opts) {
    super(opts);
    this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);
  }
  setValue(index2, value) {
    const values2 = this._values;
    values2.reserve(index2 - values2.length + 1);
    return super.setValue(index2, value);
  }
};
var VariableWidthBuilder = class extends Builder {
  constructor(opts) {
    super(opts);
    this._pendingLength = 0;
    this._offsets = new OffsetsBufferBuilder();
  }
  setValue(index2, value) {
    const pending = this._pending || (this._pending = /* @__PURE__ */ new Map());
    const current = pending.get(index2);
    current && (this._pendingLength -= current.length);
    this._pendingLength += value instanceof MapRow ? value[kKeys].length : value.length;
    pending.set(index2, value);
  }
  setValid(index2, isValid) {
    if (!super.setValid(index2, isValid)) {
      (this._pending || (this._pending = /* @__PURE__ */ new Map())).set(index2, void 0);
      return false;
    }
    return true;
  }
  clear() {
    this._pendingLength = 0;
    this._pending = void 0;
    return super.clear();
  }
  flush() {
    this._flush();
    return super.flush();
  }
  finish() {
    this._flush();
    return super.finish();
  }
  _flush() {
    const pending = this._pending;
    const pendingLength = this._pendingLength;
    this._pendingLength = 0;
    this._pending = void 0;
    if (pending && pending.size > 0) {
      this._flushPending(pending, pendingLength);
    }
    return this;
  }
};

// ../core/node_modules/apache-arrow/fb/block.mjs
var Block = class {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  /**
   * Index to the start of the RecordBlock (note this is past the Message header)
   */
  offset() {
    return this.bb.readInt64(this.bb_pos);
  }
  /**
   * Length of the metadata
   */
  metaDataLength() {
    return this.bb.readInt32(this.bb_pos + 8);
  }
  /**
   * Length of the data (this is aligned so there can be a gap between this and
   * the metadata).
   */
  bodyLength() {
    return this.bb.readInt64(this.bb_pos + 16);
  }
  static sizeOf() {
    return 24;
  }
  static createBlock(builder, offset2, metaDataLength, bodyLength) {
    builder.prep(8, 24);
    builder.writeInt64(BigInt(bodyLength !== null && bodyLength !== void 0 ? bodyLength : 0));
    builder.pad(4);
    builder.writeInt32(metaDataLength);
    builder.writeInt64(BigInt(offset2 !== null && offset2 !== void 0 ? offset2 : 0));
    return builder.offset();
  }
};

// ../core/node_modules/flatbuffers/mjs/constants.js
var SIZEOF_SHORT = 2;
var SIZEOF_INT = 4;
var FILE_IDENTIFIER_LENGTH = 4;
var SIZE_PREFIX_LENGTH = 4;

// ../core/node_modules/flatbuffers/mjs/utils.js
var int32 = new Int32Array(2);
var float32 = new Float32Array(int32.buffer);
var float64 = new Float64Array(int32.buffer);
var isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;

// ../core/node_modules/flatbuffers/mjs/encoding.js
var Encoding;
(function(Encoding3) {
  Encoding3[Encoding3["UTF8_BYTES"] = 1] = "UTF8_BYTES";
  Encoding3[Encoding3["UTF16_STRING"] = 2] = "UTF16_STRING";
})(Encoding || (Encoding = {}));

// ../core/node_modules/flatbuffers/mjs/byte-buffer.js
var ByteBuffer = class _ByteBuffer {
  /**
   * Create a new ByteBuffer with a given array of bytes (`Uint8Array`)
   */
  constructor(bytes_) {
    this.bytes_ = bytes_;
    this.position_ = 0;
    this.text_decoder_ = new TextDecoder();
  }
  /**
   * Create and allocate a new ByteBuffer with a given size.
   */
  static allocate(byte_size) {
    return new _ByteBuffer(new Uint8Array(byte_size));
  }
  clear() {
    this.position_ = 0;
  }
  /**
   * Get the underlying `Uint8Array`.
   */
  bytes() {
    return this.bytes_;
  }
  /**
   * Get the buffer's position.
   */
  position() {
    return this.position_;
  }
  /**
   * Set the buffer's position.
   */
  setPosition(position3) {
    this.position_ = position3;
  }
  /**
   * Get the buffer's capacity.
   */
  capacity() {
    return this.bytes_.length;
  }
  readInt8(offset2) {
    return this.readUint8(offset2) << 24 >> 24;
  }
  readUint8(offset2) {
    return this.bytes_[offset2];
  }
  readInt16(offset2) {
    return this.readUint16(offset2) << 16 >> 16;
  }
  readUint16(offset2) {
    return this.bytes_[offset2] | this.bytes_[offset2 + 1] << 8;
  }
  readInt32(offset2) {
    return this.bytes_[offset2] | this.bytes_[offset2 + 1] << 8 | this.bytes_[offset2 + 2] << 16 | this.bytes_[offset2 + 3] << 24;
  }
  readUint32(offset2) {
    return this.readInt32(offset2) >>> 0;
  }
  readInt64(offset2) {
    return BigInt.asIntN(64, BigInt(this.readUint32(offset2)) + (BigInt(this.readUint32(offset2 + 4)) << BigInt(32)));
  }
  readUint64(offset2) {
    return BigInt.asUintN(64, BigInt(this.readUint32(offset2)) + (BigInt(this.readUint32(offset2 + 4)) << BigInt(32)));
  }
  readFloat32(offset2) {
    int32[0] = this.readInt32(offset2);
    return float32[0];
  }
  readFloat64(offset2) {
    int32[isLittleEndian ? 0 : 1] = this.readInt32(offset2);
    int32[isLittleEndian ? 1 : 0] = this.readInt32(offset2 + 4);
    return float64[0];
  }
  writeInt8(offset2, value) {
    this.bytes_[offset2] = value;
  }
  writeUint8(offset2, value) {
    this.bytes_[offset2] = value;
  }
  writeInt16(offset2, value) {
    this.bytes_[offset2] = value;
    this.bytes_[offset2 + 1] = value >> 8;
  }
  writeUint16(offset2, value) {
    this.bytes_[offset2] = value;
    this.bytes_[offset2 + 1] = value >> 8;
  }
  writeInt32(offset2, value) {
    this.bytes_[offset2] = value;
    this.bytes_[offset2 + 1] = value >> 8;
    this.bytes_[offset2 + 2] = value >> 16;
    this.bytes_[offset2 + 3] = value >> 24;
  }
  writeUint32(offset2, value) {
    this.bytes_[offset2] = value;
    this.bytes_[offset2 + 1] = value >> 8;
    this.bytes_[offset2 + 2] = value >> 16;
    this.bytes_[offset2 + 3] = value >> 24;
  }
  writeInt64(offset2, value) {
    this.writeInt32(offset2, Number(BigInt.asIntN(32, value)));
    this.writeInt32(offset2 + 4, Number(BigInt.asIntN(32, value >> BigInt(32))));
  }
  writeUint64(offset2, value) {
    this.writeUint32(offset2, Number(BigInt.asUintN(32, value)));
    this.writeUint32(offset2 + 4, Number(BigInt.asUintN(32, value >> BigInt(32))));
  }
  writeFloat32(offset2, value) {
    float32[0] = value;
    this.writeInt32(offset2, int32[0]);
  }
  writeFloat64(offset2, value) {
    float64[0] = value;
    this.writeInt32(offset2, int32[isLittleEndian ? 0 : 1]);
    this.writeInt32(offset2 + 4, int32[isLittleEndian ? 1 : 0]);
  }
  /**
   * Return the file identifier.   Behavior is undefined for FlatBuffers whose
   * schema does not include a file_identifier (likely points at padding or the
   * start of a the root vtable).
   */
  getBufferIdentifier() {
    if (this.bytes_.length < this.position_ + SIZEOF_INT + FILE_IDENTIFIER_LENGTH) {
      throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");
    }
    let result = "";
    for (let i2 = 0; i2 < FILE_IDENTIFIER_LENGTH; i2++) {
      result += String.fromCharCode(this.readInt8(this.position_ + SIZEOF_INT + i2));
    }
    return result;
  }
  /**
   * Look up a field in the vtable, return an offset into the object, or 0 if the
   * field is not present.
   */
  __offset(bb_pos, vtable_offset) {
    const vtable = bb_pos - this.readInt32(bb_pos);
    return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;
  }
  /**
   * Initialize any Table-derived type to point to the union at the given offset.
   */
  __union(t, offset2) {
    t.bb_pos = offset2 + this.readInt32(offset2);
    t.bb = this;
    return t;
  }
  /**
   * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.
   * This allocates a new string and converts to wide chars upon each access.
   *
   * To avoid the conversion to string, pass Encoding.UTF8_BYTES as the
   * "optionalEncoding" argument. This is useful for avoiding conversion when
   * the data will just be packaged back up in another FlatBuffer later on.
   *
   * @param offset
   * @param opt_encoding Defaults to UTF16_STRING
   */
  __string(offset2, opt_encoding) {
    offset2 += this.readInt32(offset2);
    const length4 = this.readInt32(offset2);
    offset2 += SIZEOF_INT;
    const utf8bytes = this.bytes_.subarray(offset2, offset2 + length4);
    if (opt_encoding === Encoding.UTF8_BYTES)
      return utf8bytes;
    else
      return this.text_decoder_.decode(utf8bytes);
  }
  /**
   * Handle unions that can contain string as its member, if a Table-derived type then initialize it,
   * if a string then return a new one
   *
   * WARNING: strings are immutable in JS so we can't change the string that the user gave us, this
   * makes the behaviour of __union_with_string different compared to __union
   */
  __union_with_string(o, offset2) {
    if (typeof o === "string") {
      return this.__string(offset2);
    }
    return this.__union(o, offset2);
  }
  /**
   * Retrieve the relative offset stored at "offset"
   */
  __indirect(offset2) {
    return offset2 + this.readInt32(offset2);
  }
  /**
   * Get the start of data of a vector whose offset is stored at "offset" in this object.
   */
  __vector(offset2) {
    return offset2 + this.readInt32(offset2) + SIZEOF_INT;
  }
  /**
   * Get the length of a vector whose offset is stored at "offset" in this object.
   */
  __vector_len(offset2) {
    return this.readInt32(offset2 + this.readInt32(offset2));
  }
  __has_identifier(ident) {
    if (ident.length != FILE_IDENTIFIER_LENGTH) {
      throw new Error("FlatBuffers: file identifier must be length " + FILE_IDENTIFIER_LENGTH);
    }
    for (let i2 = 0; i2 < FILE_IDENTIFIER_LENGTH; i2++) {
      if (ident.charCodeAt(i2) != this.readInt8(this.position() + SIZEOF_INT + i2)) {
        return false;
      }
    }
    return true;
  }
  /**
   * A helper function for generating list for obj api
   */
  createScalarList(listAccessor, listLength) {
    const ret = [];
    for (let i2 = 0; i2 < listLength; ++i2) {
      const val = listAccessor(i2);
      if (val !== null) {
        ret.push(val);
      }
    }
    return ret;
  }
  /**
   * A helper function for generating list for obj api
   * @param listAccessor function that accepts an index and return data at that index
   * @param listLength listLength
   * @param res result list
   */
  createObjList(listAccessor, listLength) {
    const ret = [];
    for (let i2 = 0; i2 < listLength; ++i2) {
      const val = listAccessor(i2);
      if (val !== null) {
        ret.push(val.unpack());
      }
    }
    return ret;
  }
};

// ../core/node_modules/flatbuffers/mjs/builder.js
var Builder2 = class _Builder {
  /**
   * Create a FlatBufferBuilder.
   */
  constructor(opt_initial_size) {
    this.minalign = 1;
    this.vtable = null;
    this.vtable_in_use = 0;
    this.isNested = false;
    this.object_start = 0;
    this.vtables = [];
    this.vector_num_elems = 0;
    this.force_defaults = false;
    this.string_maps = null;
    this.text_encoder = new TextEncoder();
    let initial_size;
    if (!opt_initial_size) {
      initial_size = 1024;
    } else {
      initial_size = opt_initial_size;
    }
    this.bb = ByteBuffer.allocate(initial_size);
    this.space = initial_size;
  }
  clear() {
    this.bb.clear();
    this.space = this.bb.capacity();
    this.minalign = 1;
    this.vtable = null;
    this.vtable_in_use = 0;
    this.isNested = false;
    this.object_start = 0;
    this.vtables = [];
    this.vector_num_elems = 0;
    this.force_defaults = false;
    this.string_maps = null;
  }
  /**
   * In order to save space, fields that are set to their default value
   * don't get serialized into the buffer. Forcing defaults provides a
   * way to manually disable this optimization.
   *
   * @param forceDefaults true always serializes default values
   */
  forceDefaults(forceDefaults) {
    this.force_defaults = forceDefaults;
  }
  /**
   * Get the ByteBuffer representing the FlatBuffer. Only call this after you've
   * called finish(). The actual data starts at the ByteBuffer's current position,
   * not necessarily at 0.
   */
  dataBuffer() {
    return this.bb;
  }
  /**
   * Get the bytes representing the FlatBuffer. Only call this after you've
   * called finish().
   */
  asUint8Array() {
    return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
  }
  /**
   * Prepare to write an element of `size` after `additional_bytes` have been
   * written, e.g. if you write a string, you need to align such the int length
   * field is aligned to 4 bytes, and the string data follows it directly. If all
   * you need to do is alignment, `additional_bytes` will be 0.
   *
   * @param size This is the of the new element to write
   * @param additional_bytes The padding size
   */
  prep(size, additional_bytes) {
    if (size > this.minalign) {
      this.minalign = size;
    }
    const align_size = ~(this.bb.capacity() - this.space + additional_bytes) + 1 & size - 1;
    while (this.space < align_size + size + additional_bytes) {
      const old_buf_size = this.bb.capacity();
      this.bb = _Builder.growByteBuffer(this.bb);
      this.space += this.bb.capacity() - old_buf_size;
    }
    this.pad(align_size);
  }
  pad(byte_size) {
    for (let i2 = 0; i2 < byte_size; i2++) {
      this.bb.writeInt8(--this.space, 0);
    }
  }
  writeInt8(value) {
    this.bb.writeInt8(this.space -= 1, value);
  }
  writeInt16(value) {
    this.bb.writeInt16(this.space -= 2, value);
  }
  writeInt32(value) {
    this.bb.writeInt32(this.space -= 4, value);
  }
  writeInt64(value) {
    this.bb.writeInt64(this.space -= 8, value);
  }
  writeFloat32(value) {
    this.bb.writeFloat32(this.space -= 4, value);
  }
  writeFloat64(value) {
    this.bb.writeFloat64(this.space -= 8, value);
  }
  /**
   * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `int8` to add the buffer.
   */
  addInt8(value) {
    this.prep(1, 0);
    this.writeInt8(value);
  }
  /**
   * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `int16` to add the buffer.
   */
  addInt16(value) {
    this.prep(2, 0);
    this.writeInt16(value);
  }
  /**
   * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `int32` to add the buffer.
   */
  addInt32(value) {
    this.prep(4, 0);
    this.writeInt32(value);
  }
  /**
   * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `int64` to add the buffer.
   */
  addInt64(value) {
    this.prep(8, 0);
    this.writeInt64(value);
  }
  /**
   * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `float32` to add the buffer.
   */
  addFloat32(value) {
    this.prep(4, 0);
    this.writeFloat32(value);
  }
  /**
   * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `float64` to add the buffer.
   */
  addFloat64(value) {
    this.prep(8, 0);
    this.writeFloat64(value);
  }
  addFieldInt8(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addInt8(value);
      this.slot(voffset);
    }
  }
  addFieldInt16(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addInt16(value);
      this.slot(voffset);
    }
  }
  addFieldInt32(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addInt32(value);
      this.slot(voffset);
    }
  }
  addFieldInt64(voffset, value, defaultValue) {
    if (this.force_defaults || value !== defaultValue) {
      this.addInt64(value);
      this.slot(voffset);
    }
  }
  addFieldFloat32(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addFloat32(value);
      this.slot(voffset);
    }
  }
  addFieldFloat64(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addFloat64(value);
      this.slot(voffset);
    }
  }
  addFieldOffset(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addOffset(value);
      this.slot(voffset);
    }
  }
  /**
   * Structs are stored inline, so nothing additional is being added. `d` is always 0.
   */
  addFieldStruct(voffset, value, defaultValue) {
    if (value != defaultValue) {
      this.nested(value);
      this.slot(voffset);
    }
  }
  /**
   * Structures are always stored inline, they need to be created right
   * where they're used.  You'll get this assertion failure if you
   * created it elsewhere.
   */
  nested(obj) {
    if (obj != this.offset()) {
      throw new Error("FlatBuffers: struct must be serialized inline.");
    }
  }
  /**
   * Should not be creating any other object, string or vector
   * while an object is being constructed
   */
  notNested() {
    if (this.isNested) {
      throw new Error("FlatBuffers: object serialization must not be nested.");
    }
  }
  /**
   * Set the current vtable at `voffset` to the current location in the buffer.
   */
  slot(voffset) {
    if (this.vtable !== null)
      this.vtable[voffset] = this.offset();
  }
  /**
   * @returns Offset relative to the end of the buffer.
   */
  offset() {
    return this.bb.capacity() - this.space;
  }
  /**
   * Doubles the size of the backing ByteBuffer and copies the old data towards
   * the end of the new buffer (since we build the buffer backwards).
   *
   * @param bb The current buffer with the existing data
   * @returns A new byte buffer with the old data copied
   * to it. The data is located at the end of the buffer.
   *
   * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass
   * it a uint8Array we need to suppress the type check:
   * @suppress {checkTypes}
   */
  static growByteBuffer(bb2) {
    const old_buf_size = bb2.capacity();
    if (old_buf_size & 3221225472) {
      throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");
    }
    const new_buf_size = old_buf_size << 1;
    const nbb = ByteBuffer.allocate(new_buf_size);
    nbb.setPosition(new_buf_size - old_buf_size);
    nbb.bytes().set(bb2.bytes(), new_buf_size - old_buf_size);
    return nbb;
  }
  /**
   * Adds on offset, relative to where it will be written.
   *
   * @param offset The offset to add.
   */
  addOffset(offset2) {
    this.prep(SIZEOF_INT, 0);
    this.writeInt32(this.offset() - offset2 + SIZEOF_INT);
  }
  /**
   * Start encoding a new object in the buffer.  Users will not usually need to
   * call this directly. The FlatBuffers compiler will generate helper methods
   * that call this method internally.
   */
  startObject(numfields) {
    this.notNested();
    if (this.vtable == null) {
      this.vtable = [];
    }
    this.vtable_in_use = numfields;
    for (let i2 = 0; i2 < numfields; i2++) {
      this.vtable[i2] = 0;
    }
    this.isNested = true;
    this.object_start = this.offset();
  }
  /**
   * Finish off writing the object that is under construction.
   *
   * @returns The offset to the object inside `dataBuffer`
   */
  endObject() {
    if (this.vtable == null || !this.isNested) {
      throw new Error("FlatBuffers: endObject called without startObject");
    }
    this.addInt32(0);
    const vtableloc = this.offset();
    let i2 = this.vtable_in_use - 1;
    for (; i2 >= 0 && this.vtable[i2] == 0; i2--) {
    }
    const trimmed_size = i2 + 1;
    for (; i2 >= 0; i2--) {
      this.addInt16(this.vtable[i2] != 0 ? vtableloc - this.vtable[i2] : 0);
    }
    const standard_fields = 2;
    this.addInt16(vtableloc - this.object_start);
    const len = (trimmed_size + standard_fields) * SIZEOF_SHORT;
    this.addInt16(len);
    let existing_vtable = 0;
    const vt1 = this.space;
    outer_loop:
      for (i2 = 0; i2 < this.vtables.length; i2++) {
        const vt2 = this.bb.capacity() - this.vtables[i2];
        if (len == this.bb.readInt16(vt2)) {
          for (let j2 = SIZEOF_SHORT; j2 < len; j2 += SIZEOF_SHORT) {
            if (this.bb.readInt16(vt1 + j2) != this.bb.readInt16(vt2 + j2)) {
              continue outer_loop;
            }
          }
          existing_vtable = this.vtables[i2];
          break;
        }
      }
    if (existing_vtable) {
      this.space = this.bb.capacity() - vtableloc;
      this.bb.writeInt32(this.space, existing_vtable - vtableloc);
    } else {
      this.vtables.push(this.offset());
      this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);
    }
    this.isNested = false;
    return vtableloc;
  }
  /**
   * Finalize a buffer, poiting to the given `root_table`.
   */
  finish(root_table, opt_file_identifier, opt_size_prefix) {
    const size_prefix = opt_size_prefix ? SIZE_PREFIX_LENGTH : 0;
    if (opt_file_identifier) {
      const file_identifier = opt_file_identifier;
      this.prep(this.minalign, SIZEOF_INT + FILE_IDENTIFIER_LENGTH + size_prefix);
      if (file_identifier.length != FILE_IDENTIFIER_LENGTH) {
        throw new Error("FlatBuffers: file identifier must be length " + FILE_IDENTIFIER_LENGTH);
      }
      for (let i2 = FILE_IDENTIFIER_LENGTH - 1; i2 >= 0; i2--) {
        this.writeInt8(file_identifier.charCodeAt(i2));
      }
    }
    this.prep(this.minalign, SIZEOF_INT + size_prefix);
    this.addOffset(root_table);
    if (size_prefix) {
      this.addInt32(this.bb.capacity() - this.space);
    }
    this.bb.setPosition(this.space);
  }
  /**
   * Finalize a size prefixed buffer, pointing to the given `root_table`.
   */
  finishSizePrefixed(root_table, opt_file_identifier) {
    this.finish(root_table, opt_file_identifier, true);
  }
  /**
   * This checks a required field has been set in a given table that has
   * just been constructed.
   */
  requiredField(table2, field2) {
    const table_start = this.bb.capacity() - table2;
    const vtable_start = table_start - this.bb.readInt32(table_start);
    const ok = field2 < this.bb.readInt16(vtable_start) && this.bb.readInt16(vtable_start + field2) != 0;
    if (!ok) {
      throw new Error("FlatBuffers: field " + field2 + " must be set");
    }
  }
  /**
   * Start a new array/vector of objects.  Users usually will not call
   * this directly. The FlatBuffers compiler will create a start/end
   * method for vector types in generated code.
   *
   * @param elem_size The size of each element in the array
   * @param num_elems The number of elements in the array
   * @param alignment The alignment of the array
   */
  startVector(elem_size, num_elems, alignment) {
    this.notNested();
    this.vector_num_elems = num_elems;
    this.prep(SIZEOF_INT, elem_size * num_elems);
    this.prep(alignment, elem_size * num_elems);
  }
  /**
   * Finish off the creation of an array and all its elements. The array must be
   * created with `startVector`.
   *
   * @returns The offset at which the newly created array
   * starts.
   */
  endVector() {
    this.writeInt32(this.vector_num_elems);
    return this.offset();
  }
  /**
   * Encode the string `s` in the buffer using UTF-8. If the string passed has
   * already been seen, we return the offset of the already written string
   *
   * @param s The string to encode
   * @return The offset in the buffer where the encoded string starts
   */
  createSharedString(s2) {
    if (!s2) {
      return 0;
    }
    if (!this.string_maps) {
      this.string_maps = /* @__PURE__ */ new Map();
    }
    if (this.string_maps.has(s2)) {
      return this.string_maps.get(s2);
    }
    const offset2 = this.createString(s2);
    this.string_maps.set(s2, offset2);
    return offset2;
  }
  /**
   * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed
   * instead of a string, it is assumed to contain valid UTF-8 encoded data.
   *
   * @param s The string to encode
   * @return The offset in the buffer where the encoded string starts
   */
  createString(s2) {
    if (s2 === null || s2 === void 0) {
      return 0;
    }
    let utf8;
    if (s2 instanceof Uint8Array) {
      utf8 = s2;
    } else {
      utf8 = this.text_encoder.encode(s2);
    }
    this.addInt8(0);
    this.startVector(1, utf8.length, 1);
    this.bb.setPosition(this.space -= utf8.length);
    for (let i2 = 0, offset2 = this.space, bytes = this.bb.bytes(); i2 < utf8.length; i2++) {
      bytes[offset2++] = utf8[i2];
    }
    return this.endVector();
  }
  /**
   * A helper function to pack an object
   *
   * @returns offset of obj
   */
  createObjectOffset(obj) {
    if (obj === null) {
      return 0;
    }
    if (typeof obj === "string") {
      return this.createString(obj);
    } else {
      return obj.pack(this);
    }
  }
  /**
   * A helper function to pack a list of object
   *
   * @returns list of offsets of each non null object
   */
  createObjectOffsetList(list) {
    const ret = [];
    for (let i2 = 0; i2 < list.length; ++i2) {
      const val = list[i2];
      if (val !== null) {
        ret.push(this.createObjectOffset(val));
      } else {
        throw new Error("FlatBuffers: Argument for createObjectOffsetList cannot contain null.");
      }
    }
    return ret;
  }
  createStructOffsetList(list, startFunc) {
    startFunc(this, list.length);
    this.createObjectOffsetList(list.slice().reverse());
    return this.endVector();
  }
};

// ../core/node_modules/apache-arrow/fb/key-value.mjs
var KeyValue = class _KeyValue {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsKeyValue(bb2, obj) {
    return (obj || new _KeyValue()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsKeyValue(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _KeyValue()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  key(optionalEncoding) {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.__string(this.bb_pos + offset2, optionalEncoding) : null;
  }
  value(optionalEncoding) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.__string(this.bb_pos + offset2, optionalEncoding) : null;
  }
  static startKeyValue(builder) {
    builder.startObject(2);
  }
  static addKey(builder, keyOffset) {
    builder.addFieldOffset(0, keyOffset, 0);
  }
  static addValue(builder, valueOffset) {
    builder.addFieldOffset(1, valueOffset, 0);
  }
  static endKeyValue(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createKeyValue(builder, keyOffset, valueOffset) {
    _KeyValue.startKeyValue(builder);
    _KeyValue.addKey(builder, keyOffset);
    _KeyValue.addValue(builder, valueOffset);
    return _KeyValue.endKeyValue(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/metadata-version.mjs
var MetadataVersion2;
(function(MetadataVersion5) {
  MetadataVersion5[MetadataVersion5["V1"] = 0] = "V1";
  MetadataVersion5[MetadataVersion5["V2"] = 1] = "V2";
  MetadataVersion5[MetadataVersion5["V3"] = 2] = "V3";
  MetadataVersion5[MetadataVersion5["V4"] = 3] = "V4";
  MetadataVersion5[MetadataVersion5["V5"] = 4] = "V5";
})(MetadataVersion2 || (MetadataVersion2 = {}));

// ../core/node_modules/apache-arrow/fb/endianness.mjs
var Endianness;
(function(Endianness3) {
  Endianness3[Endianness3["Little"] = 0] = "Little";
  Endianness3[Endianness3["Big"] = 1] = "Big";
})(Endianness || (Endianness = {}));

// ../core/node_modules/apache-arrow/fb/dictionary-kind.mjs
var DictionaryKind;
(function(DictionaryKind3) {
  DictionaryKind3[DictionaryKind3["DenseArray"] = 0] = "DenseArray";
})(DictionaryKind || (DictionaryKind = {}));

// ../core/node_modules/apache-arrow/fb/int.mjs
var Int = class _Int {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsInt(bb2, obj) {
    return (obj || new _Int()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsInt(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Int()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  bitWidth() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 0;
  }
  isSigned() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? !!this.bb.readInt8(this.bb_pos + offset2) : false;
  }
  static startInt(builder) {
    builder.startObject(2);
  }
  static addBitWidth(builder, bitWidth) {
    builder.addFieldInt32(0, bitWidth, 0);
  }
  static addIsSigned(builder, isSigned) {
    builder.addFieldInt8(1, +isSigned, 0);
  }
  static endInt(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createInt(builder, bitWidth, isSigned) {
    _Int.startInt(builder);
    _Int.addBitWidth(builder, bitWidth);
    _Int.addIsSigned(builder, isSigned);
    return _Int.endInt(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/dictionary-encoding.mjs
var DictionaryEncoding = class _DictionaryEncoding {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsDictionaryEncoding(bb2, obj) {
    return (obj || new _DictionaryEncoding()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsDictionaryEncoding(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _DictionaryEncoding()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * The known dictionary id in the application where this data is used. In
   * the file or streaming formats, the dictionary ids are found in the
   * DictionaryBatch messages
   */
  id() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt64(this.bb_pos + offset2) : BigInt("0");
  }
  /**
   * The dictionary indices are constrained to be non-negative integers. If
   * this field is null, the indices must be signed int32. To maximize
   * cross-language compatibility and performance, implementations are
   * recommended to prefer signed integer types over unsigned integer types
   * and to avoid uint64 indices unless they are required by an application.
   */
  indexType(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset2), this.bb) : null;
  }
  /**
   * By default, dictionaries are not ordered, or the order does not have
   * semantic meaning. In some statistical, applications, dictionary-encoding
   * is used to represent ordered categorical data, and we provide a way to
   * preserve that metadata here
   */
  isOrdered() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? !!this.bb.readInt8(this.bb_pos + offset2) : false;
  }
  dictionaryKind() {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : DictionaryKind.DenseArray;
  }
  static startDictionaryEncoding(builder) {
    builder.startObject(4);
  }
  static addId(builder, id2) {
    builder.addFieldInt64(0, id2, BigInt("0"));
  }
  static addIndexType(builder, indexTypeOffset) {
    builder.addFieldOffset(1, indexTypeOffset, 0);
  }
  static addIsOrdered(builder, isOrdered2) {
    builder.addFieldInt8(2, +isOrdered2, 0);
  }
  static addDictionaryKind(builder, dictionaryKind) {
    builder.addFieldInt16(3, dictionaryKind, DictionaryKind.DenseArray);
  }
  static endDictionaryEncoding(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
};

// ../core/node_modules/apache-arrow/fb/binary.mjs
var Binary2 = class _Binary {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsBinary(bb2, obj) {
    return (obj || new _Binary()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsBinary(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Binary()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startBinary(builder) {
    builder.startObject(0);
  }
  static endBinary(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createBinary(builder) {
    _Binary.startBinary(builder);
    return _Binary.endBinary(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/bool.mjs
var Bool2 = class _Bool {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsBool(bb2, obj) {
    return (obj || new _Bool()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsBool(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Bool()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startBool(builder) {
    builder.startObject(0);
  }
  static endBool(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createBool(builder) {
    _Bool.startBool(builder);
    return _Bool.endBool(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/date-unit.mjs
var DateUnit2;
(function(DateUnit5) {
  DateUnit5[DateUnit5["DAY"] = 0] = "DAY";
  DateUnit5[DateUnit5["MILLISECOND"] = 1] = "MILLISECOND";
})(DateUnit2 || (DateUnit2 = {}));

// ../core/node_modules/apache-arrow/fb/date.mjs
var Date2 = class _Date {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsDate(bb2, obj) {
    return (obj || new _Date()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsDate(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Date()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  unit() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : DateUnit2.MILLISECOND;
  }
  static startDate(builder) {
    builder.startObject(1);
  }
  static addUnit(builder, unit3) {
    builder.addFieldInt16(0, unit3, DateUnit2.MILLISECOND);
  }
  static endDate(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createDate(builder, unit3) {
    _Date.startDate(builder);
    _Date.addUnit(builder, unit3);
    return _Date.endDate(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/decimal.mjs
var Decimal2 = class _Decimal {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsDecimal(bb2, obj) {
    return (obj || new _Decimal()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsDecimal(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Decimal()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * Total number of decimal digits
   */
  precision() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 0;
  }
  /**
   * Number of digits after the decimal point "."
   */
  scale() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 0;
  }
  /**
   * Number of bits per value. The only accepted widths are 128 and 256.
   * We use bitWidth for consistency with Int::bitWidth.
   */
  bitWidth() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 128;
  }
  static startDecimal(builder) {
    builder.startObject(3);
  }
  static addPrecision(builder, precision) {
    builder.addFieldInt32(0, precision, 0);
  }
  static addScale(builder, scale3) {
    builder.addFieldInt32(1, scale3, 0);
  }
  static addBitWidth(builder, bitWidth) {
    builder.addFieldInt32(2, bitWidth, 128);
  }
  static endDecimal(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createDecimal(builder, precision, scale3, bitWidth) {
    _Decimal.startDecimal(builder);
    _Decimal.addPrecision(builder, precision);
    _Decimal.addScale(builder, scale3);
    _Decimal.addBitWidth(builder, bitWidth);
    return _Decimal.endDecimal(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/time-unit.mjs
var TimeUnit2;
(function(TimeUnit5) {
  TimeUnit5[TimeUnit5["SECOND"] = 0] = "SECOND";
  TimeUnit5[TimeUnit5["MILLISECOND"] = 1] = "MILLISECOND";
  TimeUnit5[TimeUnit5["MICROSECOND"] = 2] = "MICROSECOND";
  TimeUnit5[TimeUnit5["NANOSECOND"] = 3] = "NANOSECOND";
})(TimeUnit2 || (TimeUnit2 = {}));

// ../core/node_modules/apache-arrow/fb/fixed-size-binary.mjs
var FixedSizeBinary2 = class _FixedSizeBinary {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsFixedSizeBinary(bb2, obj) {
    return (obj || new _FixedSizeBinary()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsFixedSizeBinary(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _FixedSizeBinary()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * Number of bytes per value
   */
  byteWidth() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 0;
  }
  static startFixedSizeBinary(builder) {
    builder.startObject(1);
  }
  static addByteWidth(builder, byteWidth) {
    builder.addFieldInt32(0, byteWidth, 0);
  }
  static endFixedSizeBinary(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createFixedSizeBinary(builder, byteWidth) {
    _FixedSizeBinary.startFixedSizeBinary(builder);
    _FixedSizeBinary.addByteWidth(builder, byteWidth);
    return _FixedSizeBinary.endFixedSizeBinary(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/fixed-size-list.mjs
var FixedSizeList2 = class _FixedSizeList {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsFixedSizeList(bb2, obj) {
    return (obj || new _FixedSizeList()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsFixedSizeList(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _FixedSizeList()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * Number of list items per value
   */
  listSize() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 0;
  }
  static startFixedSizeList(builder) {
    builder.startObject(1);
  }
  static addListSize(builder, listSize) {
    builder.addFieldInt32(0, listSize, 0);
  }
  static endFixedSizeList(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createFixedSizeList(builder, listSize) {
    _FixedSizeList.startFixedSizeList(builder);
    _FixedSizeList.addListSize(builder, listSize);
    return _FixedSizeList.endFixedSizeList(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/precision.mjs
var Precision2;
(function(Precision5) {
  Precision5[Precision5["HALF"] = 0] = "HALF";
  Precision5[Precision5["SINGLE"] = 1] = "SINGLE";
  Precision5[Precision5["DOUBLE"] = 2] = "DOUBLE";
})(Precision2 || (Precision2 = {}));

// ../core/node_modules/apache-arrow/fb/floating-point.mjs
var FloatingPoint = class _FloatingPoint {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsFloatingPoint(bb2, obj) {
    return (obj || new _FloatingPoint()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsFloatingPoint(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _FloatingPoint()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  precision() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : Precision2.HALF;
  }
  static startFloatingPoint(builder) {
    builder.startObject(1);
  }
  static addPrecision(builder, precision) {
    builder.addFieldInt16(0, precision, Precision2.HALF);
  }
  static endFloatingPoint(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createFloatingPoint(builder, precision) {
    _FloatingPoint.startFloatingPoint(builder);
    _FloatingPoint.addPrecision(builder, precision);
    return _FloatingPoint.endFloatingPoint(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/interval-unit.mjs
var IntervalUnit2;
(function(IntervalUnit5) {
  IntervalUnit5[IntervalUnit5["YEAR_MONTH"] = 0] = "YEAR_MONTH";
  IntervalUnit5[IntervalUnit5["DAY_TIME"] = 1] = "DAY_TIME";
  IntervalUnit5[IntervalUnit5["MONTH_DAY_NANO"] = 2] = "MONTH_DAY_NANO";
})(IntervalUnit2 || (IntervalUnit2 = {}));

// ../core/node_modules/apache-arrow/fb/interval.mjs
var Interval = class _Interval {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsInterval(bb2, obj) {
    return (obj || new _Interval()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsInterval(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Interval()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  unit() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : IntervalUnit2.YEAR_MONTH;
  }
  static startInterval(builder) {
    builder.startObject(1);
  }
  static addUnit(builder, unit3) {
    builder.addFieldInt16(0, unit3, IntervalUnit2.YEAR_MONTH);
  }
  static endInterval(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createInterval(builder, unit3) {
    _Interval.startInterval(builder);
    _Interval.addUnit(builder, unit3);
    return _Interval.endInterval(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/list.mjs
var List2 = class _List {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsList(bb2, obj) {
    return (obj || new _List()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsList(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _List()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startList(builder) {
    builder.startObject(0);
  }
  static endList(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createList(builder) {
    _List.startList(builder);
    return _List.endList(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/map.mjs
var Map2 = class _Map {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsMap(bb2, obj) {
    return (obj || new _Map()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsMap(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Map()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * Set to true if the keys within each value are sorted
   */
  keysSorted() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? !!this.bb.readInt8(this.bb_pos + offset2) : false;
  }
  static startMap(builder) {
    builder.startObject(1);
  }
  static addKeysSorted(builder, keysSorted) {
    builder.addFieldInt8(0, +keysSorted, 0);
  }
  static endMap(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createMap(builder, keysSorted) {
    _Map.startMap(builder);
    _Map.addKeysSorted(builder, keysSorted);
    return _Map.endMap(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/null.mjs
var Null2 = class _Null {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsNull(bb2, obj) {
    return (obj || new _Null()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsNull(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Null()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startNull(builder) {
    builder.startObject(0);
  }
  static endNull(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createNull(builder) {
    _Null.startNull(builder);
    return _Null.endNull(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/struct-.mjs
var Struct_ = class _Struct_ {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsStruct_(bb2, obj) {
    return (obj || new _Struct_()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsStruct_(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Struct_()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startStruct_(builder) {
    builder.startObject(0);
  }
  static endStruct_(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createStruct_(builder) {
    _Struct_.startStruct_(builder);
    return _Struct_.endStruct_(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/time.mjs
var Time = class _Time {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsTime(bb2, obj) {
    return (obj || new _Time()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsTime(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Time()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  unit() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : TimeUnit2.MILLISECOND;
  }
  bitWidth() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 32;
  }
  static startTime(builder) {
    builder.startObject(2);
  }
  static addUnit(builder, unit3) {
    builder.addFieldInt16(0, unit3, TimeUnit2.MILLISECOND);
  }
  static addBitWidth(builder, bitWidth) {
    builder.addFieldInt32(1, bitWidth, 32);
  }
  static endTime(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createTime(builder, unit3, bitWidth) {
    _Time.startTime(builder);
    _Time.addUnit(builder, unit3);
    _Time.addBitWidth(builder, bitWidth);
    return _Time.endTime(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/timestamp.mjs
var Timestamp = class _Timestamp {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsTimestamp(bb2, obj) {
    return (obj || new _Timestamp()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsTimestamp(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Timestamp()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  unit() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : TimeUnit2.SECOND;
  }
  timezone(optionalEncoding) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.__string(this.bb_pos + offset2, optionalEncoding) : null;
  }
  static startTimestamp(builder) {
    builder.startObject(2);
  }
  static addUnit(builder, unit3) {
    builder.addFieldInt16(0, unit3, TimeUnit2.SECOND);
  }
  static addTimezone(builder, timezoneOffset) {
    builder.addFieldOffset(1, timezoneOffset, 0);
  }
  static endTimestamp(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createTimestamp(builder, unit3, timezoneOffset) {
    _Timestamp.startTimestamp(builder);
    _Timestamp.addUnit(builder, unit3);
    _Timestamp.addTimezone(builder, timezoneOffset);
    return _Timestamp.endTimestamp(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/union-mode.mjs
var UnionMode2;
(function(UnionMode5) {
  UnionMode5[UnionMode5["Sparse"] = 0] = "Sparse";
  UnionMode5[UnionMode5["Dense"] = 1] = "Dense";
})(UnionMode2 || (UnionMode2 = {}));

// ../core/node_modules/apache-arrow/fb/union.mjs
var Union = class _Union {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsUnion(bb2, obj) {
    return (obj || new _Union()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsUnion(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Union()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  mode() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : UnionMode2.Sparse;
  }
  typeIds(index2) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset2) + index2 * 4) : 0;
  }
  typeIdsLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  typeIdsArray() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset2), this.bb.__vector_len(this.bb_pos + offset2)) : null;
  }
  static startUnion(builder) {
    builder.startObject(2);
  }
  static addMode(builder, mode3) {
    builder.addFieldInt16(0, mode3, UnionMode2.Sparse);
  }
  static addTypeIds(builder, typeIdsOffset) {
    builder.addFieldOffset(1, typeIdsOffset, 0);
  }
  static createTypeIdsVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addInt32(data[i2]);
    }
    return builder.endVector();
  }
  static startTypeIdsVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static endUnion(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createUnion(builder, mode3, typeIdsOffset) {
    _Union.startUnion(builder);
    _Union.addMode(builder, mode3);
    _Union.addTypeIds(builder, typeIdsOffset);
    return _Union.endUnion(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/utf8.mjs
var Utf82 = class _Utf8 {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsUtf8(bb2, obj) {
    return (obj || new _Utf8()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsUtf8(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Utf8()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startUtf8(builder) {
    builder.startObject(0);
  }
  static endUtf8(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createUtf8(builder) {
    _Utf8.startUtf8(builder);
    return _Utf8.endUtf8(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/type.mjs
var Type2;
(function(Type5) {
  Type5[Type5["NONE"] = 0] = "NONE";
  Type5[Type5["Null"] = 1] = "Null";
  Type5[Type5["Int"] = 2] = "Int";
  Type5[Type5["FloatingPoint"] = 3] = "FloatingPoint";
  Type5[Type5["Binary"] = 4] = "Binary";
  Type5[Type5["Utf8"] = 5] = "Utf8";
  Type5[Type5["Bool"] = 6] = "Bool";
  Type5[Type5["Decimal"] = 7] = "Decimal";
  Type5[Type5["Date"] = 8] = "Date";
  Type5[Type5["Time"] = 9] = "Time";
  Type5[Type5["Timestamp"] = 10] = "Timestamp";
  Type5[Type5["Interval"] = 11] = "Interval";
  Type5[Type5["List"] = 12] = "List";
  Type5[Type5["Struct_"] = 13] = "Struct_";
  Type5[Type5["Union"] = 14] = "Union";
  Type5[Type5["FixedSizeBinary"] = 15] = "FixedSizeBinary";
  Type5[Type5["FixedSizeList"] = 16] = "FixedSizeList";
  Type5[Type5["Map"] = 17] = "Map";
  Type5[Type5["Duration"] = 18] = "Duration";
  Type5[Type5["LargeBinary"] = 19] = "LargeBinary";
  Type5[Type5["LargeUtf8"] = 20] = "LargeUtf8";
  Type5[Type5["LargeList"] = 21] = "LargeList";
  Type5[Type5["RunEndEncoded"] = 22] = "RunEndEncoded";
})(Type2 || (Type2 = {}));

// ../core/node_modules/apache-arrow/fb/field.mjs
var Field = class _Field {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsField(bb2, obj) {
    return (obj || new _Field()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsField(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Field()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  name(optionalEncoding) {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.__string(this.bb_pos + offset2, optionalEncoding) : null;
  }
  /**
   * Whether or not this field can contain nulls. Should be true in general.
   */
  nullable() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? !!this.bb.readInt8(this.bb_pos + offset2) : false;
  }
  typeType() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.readUint8(this.bb_pos + offset2) : Type2.NONE;
  }
  /**
   * This is the type of the decoded value if the field is dictionary encoded.
   */
  type(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.__union(obj, this.bb_pos + offset2) : null;
  }
  /**
   * Present only if the field is dictionary encoded.
   */
  dictionary(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 12);
    return offset2 ? (obj || new DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset2), this.bb) : null;
  }
  /**
   * children apply only to nested data types like Struct, List and Union. For
   * primitive types children will have length 0.
   */
  children(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 14);
    return offset2 ? (obj || new _Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  childrenLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 14);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  /**
   * User-defined metadata
   */
  customMetadata(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 16);
    return offset2 ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  customMetadataLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 16);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  static startField(builder) {
    builder.startObject(7);
  }
  static addName(builder, nameOffset) {
    builder.addFieldOffset(0, nameOffset, 0);
  }
  static addNullable(builder, nullable) {
    builder.addFieldInt8(1, +nullable, 0);
  }
  static addTypeType(builder, typeType) {
    builder.addFieldInt8(2, typeType, Type2.NONE);
  }
  static addType(builder, typeOffset) {
    builder.addFieldOffset(3, typeOffset, 0);
  }
  static addDictionary(builder, dictionaryOffset) {
    builder.addFieldOffset(4, dictionaryOffset, 0);
  }
  static addChildren(builder, childrenOffset) {
    builder.addFieldOffset(5, childrenOffset, 0);
  }
  static createChildrenVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startChildrenVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addCustomMetadata(builder, customMetadataOffset) {
    builder.addFieldOffset(6, customMetadataOffset, 0);
  }
  static createCustomMetadataVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startCustomMetadataVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static endField(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
};

// ../core/node_modules/apache-arrow/fb/schema.mjs
var Schema = class _Schema {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsSchema(bb2, obj) {
    return (obj || new _Schema()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsSchema(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Schema()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * endianness of the buffer
   * it is Little Endian by default
   * if endianness doesn't match the underlying system then the vectors need to be converted
   */
  endianness() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : Endianness.Little;
  }
  fields(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? (obj || new Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  fieldsLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  customMetadata(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  customMetadataLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  /**
   * Features used in the stream/file.
   */
  features(index2) {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset2) + index2 * 8) : BigInt(0);
  }
  featuresLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  static startSchema(builder) {
    builder.startObject(4);
  }
  static addEndianness(builder, endianness) {
    builder.addFieldInt16(0, endianness, Endianness.Little);
  }
  static addFields(builder, fieldsOffset) {
    builder.addFieldOffset(1, fieldsOffset, 0);
  }
  static createFieldsVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startFieldsVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addCustomMetadata(builder, customMetadataOffset) {
    builder.addFieldOffset(2, customMetadataOffset, 0);
  }
  static createCustomMetadataVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startCustomMetadataVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addFeatures(builder, featuresOffset) {
    builder.addFieldOffset(3, featuresOffset, 0);
  }
  static createFeaturesVector(builder, data) {
    builder.startVector(8, data.length, 8);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addInt64(data[i2]);
    }
    return builder.endVector();
  }
  static startFeaturesVector(builder, numElems) {
    builder.startVector(8, numElems, 8);
  }
  static endSchema(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static finishSchemaBuffer(builder, offset2) {
    builder.finish(offset2);
  }
  static finishSizePrefixedSchemaBuffer(builder, offset2) {
    builder.finish(offset2, void 0, true);
  }
  static createSchema(builder, endianness, fieldsOffset, customMetadataOffset, featuresOffset) {
    _Schema.startSchema(builder);
    _Schema.addEndianness(builder, endianness);
    _Schema.addFields(builder, fieldsOffset);
    _Schema.addCustomMetadata(builder, customMetadataOffset);
    _Schema.addFeatures(builder, featuresOffset);
    return _Schema.endSchema(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/footer.mjs
var Footer = class _Footer {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsFooter(bb2, obj) {
    return (obj || new _Footer()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsFooter(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Footer()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  version() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : MetadataVersion2.V1;
  }
  schema(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? (obj || new Schema()).__init(this.bb.__indirect(this.bb_pos + offset2), this.bb) : null;
  }
  dictionaries(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? (obj || new Block()).__init(this.bb.__vector(this.bb_pos + offset2) + index2 * 24, this.bb) : null;
  }
  dictionariesLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  recordBatches(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? (obj || new Block()).__init(this.bb.__vector(this.bb_pos + offset2) + index2 * 24, this.bb) : null;
  }
  recordBatchesLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  /**
   * User-defined metadata
   */
  customMetadata(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 12);
    return offset2 ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  customMetadataLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 12);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  static startFooter(builder) {
    builder.startObject(5);
  }
  static addVersion(builder, version) {
    builder.addFieldInt16(0, version, MetadataVersion2.V1);
  }
  static addSchema(builder, schemaOffset) {
    builder.addFieldOffset(1, schemaOffset, 0);
  }
  static addDictionaries(builder, dictionariesOffset) {
    builder.addFieldOffset(2, dictionariesOffset, 0);
  }
  static startDictionariesVector(builder, numElems) {
    builder.startVector(24, numElems, 8);
  }
  static addRecordBatches(builder, recordBatchesOffset) {
    builder.addFieldOffset(3, recordBatchesOffset, 0);
  }
  static startRecordBatchesVector(builder, numElems) {
    builder.startVector(24, numElems, 8);
  }
  static addCustomMetadata(builder, customMetadataOffset) {
    builder.addFieldOffset(4, customMetadataOffset, 0);
  }
  static createCustomMetadataVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startCustomMetadataVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static endFooter(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static finishFooterBuffer(builder, offset2) {
    builder.finish(offset2);
  }
  static finishSizePrefixedFooterBuffer(builder, offset2) {
    builder.finish(offset2, void 0, true);
  }
};

// ../core/node_modules/apache-arrow/schema.mjs
var Schema2 = class _Schema {
  constructor(fields = [], metadata, dictionaries) {
    this.fields = fields || [];
    this.metadata = metadata || /* @__PURE__ */ new Map();
    if (!dictionaries) {
      dictionaries = generateDictionaryMap(fields);
    }
    this.dictionaries = dictionaries;
  }
  get [Symbol.toStringTag]() {
    return "Schema";
  }
  get names() {
    return this.fields.map((f2) => f2.name);
  }
  toString() {
    return `Schema<{ ${this.fields.map((f2, i2) => `${i2}: ${f2}`).join(", ")} }>`;
  }
  /**
   * Construct a new Schema containing only specified fields.
   *
   * @param fieldNames Names of fields to keep.
   * @returns A new Schema of fields matching the specified names.
   */
  select(fieldNames) {
    const names = new Set(fieldNames);
    const fields = this.fields.filter((f2) => names.has(f2.name));
    return new _Schema(fields, this.metadata);
  }
  /**
   * Construct a new Schema containing only fields at the specified indices.
   *
   * @param fieldIndices Indices of fields to keep.
   * @returns A new Schema of fields at the specified indices.
   */
  selectAt(fieldIndices) {
    const fields = fieldIndices.map((i2) => this.fields[i2]).filter(Boolean);
    return new _Schema(fields, this.metadata);
  }
  assign(...args) {
    const other = args[0] instanceof _Schema ? args[0] : Array.isArray(args[0]) ? new _Schema(args[0]) : new _Schema(args);
    const curFields = [...this.fields];
    const metadata = mergeMaps(mergeMaps(/* @__PURE__ */ new Map(), this.metadata), other.metadata);
    const newFields = other.fields.filter((f2) => {
      const i2 = curFields.findIndex((f3) => f3.name === f2.name);
      return ~i2 ? (curFields[i2] = f2.clone({
        metadata: mergeMaps(mergeMaps(/* @__PURE__ */ new Map(), curFields[i2].metadata), f2.metadata)
      })) && false : true;
    });
    const newDictionaries = generateDictionaryMap(newFields, /* @__PURE__ */ new Map());
    return new _Schema([...curFields, ...newFields], metadata, new Map([...this.dictionaries, ...newDictionaries]));
  }
};
Schema2.prototype.fields = null;
Schema2.prototype.metadata = null;
Schema2.prototype.dictionaries = null;
var Field2 = class _Field {
  /** @nocollapse */
  static new(...args) {
    let [name2, type2, nullable, metadata] = args;
    if (args[0] && typeof args[0] === "object") {
      ({ name: name2 } = args[0]);
      type2 === void 0 && (type2 = args[0].type);
      nullable === void 0 && (nullable = args[0].nullable);
      metadata === void 0 && (metadata = args[0].metadata);
    }
    return new _Field(`${name2}`, type2, nullable, metadata);
  }
  constructor(name2, type2, nullable = false, metadata) {
    this.name = name2;
    this.type = type2;
    this.nullable = nullable;
    this.metadata = metadata || /* @__PURE__ */ new Map();
  }
  get typeId() {
    return this.type.typeId;
  }
  get [Symbol.toStringTag]() {
    return "Field";
  }
  toString() {
    return `${this.name}: ${this.type}`;
  }
  clone(...args) {
    let [name2, type2, nullable, metadata] = args;
    !args[0] || typeof args[0] !== "object" ? [name2 = this.name, type2 = this.type, nullable = this.nullable, metadata = this.metadata] = args : { name: name2 = this.name, type: type2 = this.type, nullable = this.nullable, metadata = this.metadata } = args[0];
    return _Field.new(name2, type2, nullable, metadata);
  }
};
Field2.prototype.type = null;
Field2.prototype.name = null;
Field2.prototype.nullable = null;
Field2.prototype.metadata = null;
function mergeMaps(m1, m2) {
  return new Map([...m1 || /* @__PURE__ */ new Map(), ...m2 || /* @__PURE__ */ new Map()]);
}
function generateDictionaryMap(fields, dictionaries = /* @__PURE__ */ new Map()) {
  for (let i2 = -1, n = fields.length; ++i2 < n; ) {
    const field2 = fields[i2];
    const type2 = field2.type;
    if (DataType.isDictionary(type2)) {
      if (!dictionaries.has(type2.id)) {
        dictionaries.set(type2.id, type2.dictionary);
      } else if (dictionaries.get(type2.id) !== type2.dictionary) {
        throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);
      }
    }
    if (type2.children && type2.children.length > 0) {
      generateDictionaryMap(type2.children, dictionaries);
    }
  }
  return dictionaries;
}

// ../core/node_modules/apache-arrow/ipc/metadata/file.mjs
var Builder3 = Builder2;
var ByteBuffer2 = ByteBuffer;
var Footer_ = class {
  /** @nocollapse */
  static decode(buf) {
    buf = new ByteBuffer2(toUint8Array(buf));
    const footer = Footer.getRootAsFooter(buf);
    const schema = Schema2.decode(footer.schema());
    return new OffHeapFooter(schema, footer);
  }
  /** @nocollapse */
  static encode(footer) {
    const b2 = new Builder3();
    const schemaOffset = Schema2.encode(b2, footer.schema);
    Footer.startRecordBatchesVector(b2, footer.numRecordBatches);
    for (const rb of [...footer.recordBatches()].slice().reverse()) {
      FileBlock.encode(b2, rb);
    }
    const recordBatchesOffset = b2.endVector();
    Footer.startDictionariesVector(b2, footer.numDictionaries);
    for (const db of [...footer.dictionaryBatches()].slice().reverse()) {
      FileBlock.encode(b2, db);
    }
    const dictionaryBatchesOffset = b2.endVector();
    Footer.startFooter(b2);
    Footer.addSchema(b2, schemaOffset);
    Footer.addVersion(b2, MetadataVersion.V4);
    Footer.addRecordBatches(b2, recordBatchesOffset);
    Footer.addDictionaries(b2, dictionaryBatchesOffset);
    Footer.finishFooterBuffer(b2, Footer.endFooter(b2));
    return b2.asUint8Array();
  }
  get numRecordBatches() {
    return this._recordBatches.length;
  }
  get numDictionaries() {
    return this._dictionaryBatches.length;
  }
  constructor(schema, version = MetadataVersion.V4, recordBatches, dictionaryBatches) {
    this.schema = schema;
    this.version = version;
    recordBatches && (this._recordBatches = recordBatches);
    dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);
  }
  *recordBatches() {
    for (let block, i2 = -1, n = this.numRecordBatches; ++i2 < n; ) {
      if (block = this.getRecordBatch(i2)) {
        yield block;
      }
    }
  }
  *dictionaryBatches() {
    for (let block, i2 = -1, n = this.numDictionaries; ++i2 < n; ) {
      if (block = this.getDictionaryBatch(i2)) {
        yield block;
      }
    }
  }
  getRecordBatch(index2) {
    return index2 >= 0 && index2 < this.numRecordBatches && this._recordBatches[index2] || null;
  }
  getDictionaryBatch(index2) {
    return index2 >= 0 && index2 < this.numDictionaries && this._dictionaryBatches[index2] || null;
  }
};
var OffHeapFooter = class extends Footer_ {
  get numRecordBatches() {
    return this._footer.recordBatchesLength();
  }
  get numDictionaries() {
    return this._footer.dictionariesLength();
  }
  constructor(schema, _footer) {
    super(schema, _footer.version());
    this._footer = _footer;
  }
  getRecordBatch(index2) {
    if (index2 >= 0 && index2 < this.numRecordBatches) {
      const fileBlock = this._footer.recordBatches(index2);
      if (fileBlock) {
        return FileBlock.decode(fileBlock);
      }
    }
    return null;
  }
  getDictionaryBatch(index2) {
    if (index2 >= 0 && index2 < this.numDictionaries) {
      const fileBlock = this._footer.dictionaries(index2);
      if (fileBlock) {
        return FileBlock.decode(fileBlock);
      }
    }
    return null;
  }
};
var FileBlock = class _FileBlock {
  /** @nocollapse */
  static decode(block) {
    return new _FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());
  }
  /** @nocollapse */
  static encode(b2, fileBlock) {
    const { metaDataLength } = fileBlock;
    const offset2 = BigInt(fileBlock.offset);
    const bodyLength = BigInt(fileBlock.bodyLength);
    return Block.createBlock(b2, offset2, metaDataLength, bodyLength);
  }
  constructor(metaDataLength, bodyLength, offset2) {
    this.metaDataLength = metaDataLength;
    this.offset = bigIntToNumber(offset2);
    this.bodyLength = bigIntToNumber(bodyLength);
  }
};

// ../core/node_modules/apache-arrow/io/interfaces.mjs
var ITERATOR_DONE = Object.freeze({ done: true, value: void 0 });
var ArrowJSON = class {
  constructor(_json) {
    this._json = _json;
  }
  get schema() {
    return this._json["schema"];
  }
  get batches() {
    return this._json["batches"] || [];
  }
  get dictionaries() {
    return this._json["dictionaries"] || [];
  }
};
var ReadableInterop = class {
  tee() {
    return this._getDOMStream().tee();
  }
  pipe(writable, options) {
    return this._getNodeStream().pipe(writable, options);
  }
  pipeTo(writable, options) {
    return this._getDOMStream().pipeTo(writable, options);
  }
  pipeThrough(duplex, options) {
    return this._getDOMStream().pipeThrough(duplex, options);
  }
  _getDOMStream() {
    return this._DOMStream || (this._DOMStream = this.toDOMStream());
  }
  _getNodeStream() {
    return this._nodeStream || (this._nodeStream = this.toNodeStream());
  }
};
var AsyncQueue = class extends ReadableInterop {
  constructor() {
    super();
    this._values = [];
    this.resolvers = [];
    this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);
  }
  get closed() {
    return this._closedPromise;
  }
  cancel(reason) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.return(reason);
    });
  }
  write(value) {
    if (this._ensureOpen()) {
      this.resolvers.length <= 0 ? this._values.push(value) : this.resolvers.shift().resolve({ done: false, value });
    }
  }
  abort(value) {
    if (this._closedPromiseResolve) {
      this.resolvers.length <= 0 ? this._error = { error: value } : this.resolvers.shift().reject({ done: true, value });
    }
  }
  close() {
    if (this._closedPromiseResolve) {
      const { resolvers } = this;
      while (resolvers.length > 0) {
        resolvers.shift().resolve(ITERATOR_DONE);
      }
      this._closedPromiseResolve();
      this._closedPromiseResolve = void 0;
    }
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  toDOMStream(options) {
    return adapters_default.toDOMStream(this._closedPromiseResolve || this._error ? this : this._values, options);
  }
  toNodeStream(options) {
    return adapters_default.toNodeStream(this._closedPromiseResolve || this._error ? this : this._values, options);
  }
  throw(_2) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.abort(_2);
      return ITERATOR_DONE;
    });
  }
  return(_2) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.close();
      return ITERATOR_DONE;
    });
  }
  read(size) {
    return __awaiter(this, void 0, void 0, function* () {
      return (yield this.next(size, "read")).value;
    });
  }
  peek(size) {
    return __awaiter(this, void 0, void 0, function* () {
      return (yield this.next(size, "peek")).value;
    });
  }
  next(..._args) {
    if (this._values.length > 0) {
      return Promise.resolve({ done: false, value: this._values.shift() });
    } else if (this._error) {
      return Promise.reject({ done: true, value: this._error.error });
    } else if (!this._closedPromiseResolve) {
      return Promise.resolve(ITERATOR_DONE);
    } else {
      return new Promise((resolve, reject) => {
        this.resolvers.push({ resolve, reject });
      });
    }
  }
  _ensureOpen() {
    if (this._closedPromiseResolve) {
      return true;
    }
    throw new Error(`AsyncQueue is closed`);
  }
};

// ../core/node_modules/apache-arrow/io/stream.mjs
var AsyncByteQueue = class extends AsyncQueue {
  write(value) {
    if ((value = toUint8Array(value)).byteLength > 0) {
      return super.write(value);
    }
  }
  toString(sync = false) {
    return sync ? decodeUtf8(this.toUint8Array(true)) : this.toUint8Array(false).then(decodeUtf8);
  }
  toUint8Array(sync = false) {
    return sync ? joinUint8Arrays(this._values)[0] : (() => __awaiter(this, void 0, void 0, function* () {
      var _a9, e_1, _b3, _c3;
      const buffers = [];
      let byteLength = 0;
      try {
        for (var _d3 = true, _e3 = __asyncValues(this), _f3; _f3 = yield _e3.next(), _a9 = _f3.done, !_a9; ) {
          _c3 = _f3.value;
          _d3 = false;
          try {
            const chunk = _c3;
            buffers.push(chunk);
            byteLength += chunk.byteLength;
          } finally {
            _d3 = true;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (!_d3 && !_a9 && (_b3 = _e3.return))
            yield _b3.call(_e3);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return joinUint8Arrays(buffers, byteLength)[0];
    }))();
  }
};
var ByteStream = class {
  constructor(source) {
    if (source) {
      this.source = new ByteStreamSource(adapters_default.fromIterable(source));
    }
  }
  [Symbol.iterator]() {
    return this;
  }
  next(value) {
    return this.source.next(value);
  }
  throw(value) {
    return this.source.throw(value);
  }
  return(value) {
    return this.source.return(value);
  }
  peek(size) {
    return this.source.peek(size);
  }
  read(size) {
    return this.source.read(size);
  }
};
var AsyncByteStream = class _AsyncByteStream {
  constructor(source) {
    if (source instanceof _AsyncByteStream) {
      this.source = source.source;
    } else if (source instanceof AsyncByteQueue) {
      this.source = new AsyncByteStreamSource(adapters_default.fromAsyncIterable(source));
    } else if (isReadableNodeStream(source)) {
      this.source = new AsyncByteStreamSource(adapters_default.fromNodeStream(source));
    } else if (isReadableDOMStream(source)) {
      this.source = new AsyncByteStreamSource(adapters_default.fromDOMStream(source));
    } else if (isFetchResponse(source)) {
      this.source = new AsyncByteStreamSource(adapters_default.fromDOMStream(source.body));
    } else if (isIterable(source)) {
      this.source = new AsyncByteStreamSource(adapters_default.fromIterable(source));
    } else if (isPromise(source)) {
      this.source = new AsyncByteStreamSource(adapters_default.fromAsyncIterable(source));
    } else if (isAsyncIterable(source)) {
      this.source = new AsyncByteStreamSource(adapters_default.fromAsyncIterable(source));
    }
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  next(value) {
    return this.source.next(value);
  }
  throw(value) {
    return this.source.throw(value);
  }
  return(value) {
    return this.source.return(value);
  }
  get closed() {
    return this.source.closed;
  }
  cancel(reason) {
    return this.source.cancel(reason);
  }
  peek(size) {
    return this.source.peek(size);
  }
  read(size) {
    return this.source.read(size);
  }
};
var ByteStreamSource = class {
  constructor(source) {
    this.source = source;
  }
  cancel(reason) {
    this.return(reason);
  }
  peek(size) {
    return this.next(size, "peek").value;
  }
  read(size) {
    return this.next(size, "read").value;
  }
  next(size, cmd = "read") {
    return this.source.next({ cmd, size });
  }
  throw(value) {
    return Object.create(this.source.throw && this.source.throw(value) || ITERATOR_DONE);
  }
  return(value) {
    return Object.create(this.source.return && this.source.return(value) || ITERATOR_DONE);
  }
};
var AsyncByteStreamSource = class {
  constructor(source) {
    this.source = source;
    this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);
  }
  cancel(reason) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.return(reason);
    });
  }
  get closed() {
    return this._closedPromise;
  }
  read(size) {
    return __awaiter(this, void 0, void 0, function* () {
      return (yield this.next(size, "read")).value;
    });
  }
  peek(size) {
    return __awaiter(this, void 0, void 0, function* () {
      return (yield this.next(size, "peek")).value;
    });
  }
  next(size, cmd = "read") {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.source.next({ cmd, size });
    });
  }
  throw(value) {
    return __awaiter(this, void 0, void 0, function* () {
      const result = this.source.throw && (yield this.source.throw(value)) || ITERATOR_DONE;
      this._closedPromiseResolve && this._closedPromiseResolve();
      this._closedPromiseResolve = void 0;
      return Object.create(result);
    });
  }
  return(value) {
    return __awaiter(this, void 0, void 0, function* () {
      const result = this.source.return && (yield this.source.return(value)) || ITERATOR_DONE;
      this._closedPromiseResolve && this._closedPromiseResolve();
      this._closedPromiseResolve = void 0;
      return Object.create(result);
    });
  }
};

// ../core/node_modules/apache-arrow/io/file.mjs
var RandomAccessFile = class extends ByteStream {
  constructor(buffer, byteLength) {
    super();
    this.position = 0;
    this.buffer = toUint8Array(buffer);
    this.size = byteLength === void 0 ? this.buffer.byteLength : byteLength;
  }
  readInt32(position3) {
    const { buffer, byteOffset } = this.readAt(position3, 4);
    return new DataView(buffer, byteOffset).getInt32(0, true);
  }
  seek(position3) {
    this.position = Math.min(position3, this.size);
    return position3 < this.size;
  }
  read(nBytes) {
    const { buffer, size, position: position3 } = this;
    if (buffer && position3 < size) {
      if (typeof nBytes !== "number") {
        nBytes = Number.POSITIVE_INFINITY;
      }
      this.position = Math.min(size, position3 + Math.min(size - position3, nBytes));
      return buffer.subarray(position3, this.position);
    }
    return null;
  }
  readAt(position3, nBytes) {
    const buf = this.buffer;
    const end = Math.min(this.size, position3 + nBytes);
    return buf ? buf.subarray(position3, end) : new Uint8Array(nBytes);
  }
  close() {
    this.buffer && (this.buffer = null);
  }
  throw(value) {
    this.close();
    return { done: true, value };
  }
  return(value) {
    this.close();
    return { done: true, value };
  }
};
var AsyncRandomAccessFile = class extends AsyncByteStream {
  constructor(file, byteLength) {
    super();
    this.position = 0;
    this._handle = file;
    if (typeof byteLength === "number") {
      this.size = byteLength;
    } else {
      this._pending = (() => __awaiter(this, void 0, void 0, function* () {
        this.size = (yield file.stat()).size;
        delete this._pending;
      }))();
    }
  }
  readInt32(position3) {
    return __awaiter(this, void 0, void 0, function* () {
      const { buffer, byteOffset } = yield this.readAt(position3, 4);
      return new DataView(buffer, byteOffset).getInt32(0, true);
    });
  }
  seek(position3) {
    return __awaiter(this, void 0, void 0, function* () {
      this._pending && (yield this._pending);
      this.position = Math.min(position3, this.size);
      return position3 < this.size;
    });
  }
  read(nBytes) {
    return __awaiter(this, void 0, void 0, function* () {
      this._pending && (yield this._pending);
      const { _handle: file, size, position: position3 } = this;
      if (file && position3 < size) {
        if (typeof nBytes !== "number") {
          nBytes = Number.POSITIVE_INFINITY;
        }
        let pos = position3, offset2 = 0, bytesRead = 0;
        const end = Math.min(size, pos + Math.min(size - pos, nBytes));
        const buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));
        while ((pos += bytesRead) < end && (offset2 += bytesRead) < buffer.byteLength) {
          ({ bytesRead } = yield file.read(buffer, offset2, buffer.byteLength - offset2, pos));
        }
        return buffer;
      }
      return null;
    });
  }
  readAt(position3, nBytes) {
    return __awaiter(this, void 0, void 0, function* () {
      this._pending && (yield this._pending);
      const { _handle: file, size } = this;
      if (file && position3 + nBytes < size) {
        const end = Math.min(size, position3 + nBytes);
        const buffer = new Uint8Array(end - position3);
        return (yield file.read(buffer, 0, nBytes, position3)).buffer;
      }
      return new Uint8Array(nBytes);
    });
  }
  close() {
    return __awaiter(this, void 0, void 0, function* () {
      const f2 = this._handle;
      this._handle = null;
      f2 && (yield f2.close());
    });
  }
  throw(value) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.close();
      return { done: true, value };
    });
  }
  return(value) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.close();
      return { done: true, value };
    });
  }
};

// ../core/node_modules/apache-arrow/util/int.mjs
var int_exports = {};
__export(int_exports, {
  BaseInt64: () => BaseInt64,
  Int128: () => Int128,
  Int64: () => Int642,
  Uint64: () => Uint642
});
var carryBit16 = 1 << 16;
function intAsHex(value) {
  if (value < 0) {
    value = 4294967295 + value + 1;
  }
  return `0x${value.toString(16)}`;
}
var kInt32DecimalDigits = 8;
var kPowersOfTen = [
  1,
  10,
  100,
  1e3,
  1e4,
  1e5,
  1e6,
  1e7,
  1e8
];
var BaseInt64 = class {
  constructor(buffer) {
    this.buffer = buffer;
  }
  high() {
    return this.buffer[1];
  }
  low() {
    return this.buffer[0];
  }
  _times(other) {
    const L2 = new Uint32Array([
      this.buffer[1] >>> 16,
      this.buffer[1] & 65535,
      this.buffer[0] >>> 16,
      this.buffer[0] & 65535
    ]);
    const R = new Uint32Array([
      other.buffer[1] >>> 16,
      other.buffer[1] & 65535,
      other.buffer[0] >>> 16,
      other.buffer[0] & 65535
    ]);
    let product2 = L2[3] * R[3];
    this.buffer[0] = product2 & 65535;
    let sum6 = product2 >>> 16;
    product2 = L2[2] * R[3];
    sum6 += product2;
    product2 = L2[3] * R[2] >>> 0;
    sum6 += product2;
    this.buffer[0] += sum6 << 16;
    this.buffer[1] = sum6 >>> 0 < product2 ? carryBit16 : 0;
    this.buffer[1] += sum6 >>> 16;
    this.buffer[1] += L2[1] * R[3] + L2[2] * R[2] + L2[3] * R[1];
    this.buffer[1] += L2[0] * R[3] + L2[1] * R[2] + L2[2] * R[1] + L2[3] * R[0] << 16;
    return this;
  }
  _plus(other) {
    const sum6 = this.buffer[0] + other.buffer[0] >>> 0;
    this.buffer[1] += other.buffer[1];
    if (sum6 < this.buffer[0] >>> 0) {
      ++this.buffer[1];
    }
    this.buffer[0] = sum6;
  }
  lessThan(other) {
    return this.buffer[1] < other.buffer[1] || this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0];
  }
  equals(other) {
    return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];
  }
  greaterThan(other) {
    return other.lessThan(this);
  }
  hex() {
    return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;
  }
};
var Uint642 = class _Uint64 extends BaseInt64 {
  times(other) {
    this._times(other);
    return this;
  }
  plus(other) {
    this._plus(other);
    return this;
  }
  /** @nocollapse */
  static from(val, out_buffer = new Uint32Array(2)) {
    return _Uint64.fromString(typeof val === "string" ? val : val.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromNumber(num, out_buffer = new Uint32Array(2)) {
    return _Uint64.fromString(num.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromString(str, out_buffer = new Uint32Array(2)) {
    const length4 = str.length;
    const out = new _Uint64(out_buffer);
    for (let posn = 0; posn < length4; ) {
      const group3 = kInt32DecimalDigits < length4 - posn ? kInt32DecimalDigits : length4 - posn;
      const chunk = new _Uint64(new Uint32Array([Number.parseInt(str.slice(posn, posn + group3), 10), 0]));
      const multiple = new _Uint64(new Uint32Array([kPowersOfTen[group3], 0]));
      out.times(multiple);
      out.plus(chunk);
      posn += group3;
    }
    return out;
  }
  /** @nocollapse */
  static convertArray(values2) {
    const data = new Uint32Array(values2.length * 2);
    for (let i2 = -1, n = values2.length; ++i2 < n; ) {
      _Uint64.from(values2[i2], new Uint32Array(data.buffer, data.byteOffset + 2 * i2 * 4, 2));
    }
    return data;
  }
  /** @nocollapse */
  static multiply(left2, right2) {
    const rtrn = new _Uint64(new Uint32Array(left2.buffer));
    return rtrn.times(right2);
  }
  /** @nocollapse */
  static add(left2, right2) {
    const rtrn = new _Uint64(new Uint32Array(left2.buffer));
    return rtrn.plus(right2);
  }
};
var Int642 = class _Int64 extends BaseInt64 {
  negate() {
    this.buffer[0] = ~this.buffer[0] + 1;
    this.buffer[1] = ~this.buffer[1];
    if (this.buffer[0] == 0) {
      ++this.buffer[1];
    }
    return this;
  }
  times(other) {
    this._times(other);
    return this;
  }
  plus(other) {
    this._plus(other);
    return this;
  }
  lessThan(other) {
    const this_high = this.buffer[1] << 0;
    const other_high = other.buffer[1] << 0;
    return this_high < other_high || this_high === other_high && this.buffer[0] < other.buffer[0];
  }
  /** @nocollapse */
  static from(val, out_buffer = new Uint32Array(2)) {
    return _Int64.fromString(typeof val === "string" ? val : val.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromNumber(num, out_buffer = new Uint32Array(2)) {
    return _Int64.fromString(num.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromString(str, out_buffer = new Uint32Array(2)) {
    const negate2 = str.startsWith("-");
    const length4 = str.length;
    const out = new _Int64(out_buffer);
    for (let posn = negate2 ? 1 : 0; posn < length4; ) {
      const group3 = kInt32DecimalDigits < length4 - posn ? kInt32DecimalDigits : length4 - posn;
      const chunk = new _Int64(new Uint32Array([Number.parseInt(str.slice(posn, posn + group3), 10), 0]));
      const multiple = new _Int64(new Uint32Array([kPowersOfTen[group3], 0]));
      out.times(multiple);
      out.plus(chunk);
      posn += group3;
    }
    return negate2 ? out.negate() : out;
  }
  /** @nocollapse */
  static convertArray(values2) {
    const data = new Uint32Array(values2.length * 2);
    for (let i2 = -1, n = values2.length; ++i2 < n; ) {
      _Int64.from(values2[i2], new Uint32Array(data.buffer, data.byteOffset + 2 * i2 * 4, 2));
    }
    return data;
  }
  /** @nocollapse */
  static multiply(left2, right2) {
    const rtrn = new _Int64(new Uint32Array(left2.buffer));
    return rtrn.times(right2);
  }
  /** @nocollapse */
  static add(left2, right2) {
    const rtrn = new _Int64(new Uint32Array(left2.buffer));
    return rtrn.plus(right2);
  }
};
var Int128 = class _Int128 {
  constructor(buffer) {
    this.buffer = buffer;
  }
  high() {
    return new Int642(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
  }
  low() {
    return new Int642(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));
  }
  negate() {
    this.buffer[0] = ~this.buffer[0] + 1;
    this.buffer[1] = ~this.buffer[1];
    this.buffer[2] = ~this.buffer[2];
    this.buffer[3] = ~this.buffer[3];
    if (this.buffer[0] == 0) {
      ++this.buffer[1];
    }
    if (this.buffer[1] == 0) {
      ++this.buffer[2];
    }
    if (this.buffer[2] == 0) {
      ++this.buffer[3];
    }
    return this;
  }
  times(other) {
    const L0 = new Uint642(new Uint32Array([this.buffer[3], 0]));
    const L1 = new Uint642(new Uint32Array([this.buffer[2], 0]));
    const L2 = new Uint642(new Uint32Array([this.buffer[1], 0]));
    const L3 = new Uint642(new Uint32Array([this.buffer[0], 0]));
    const R0 = new Uint642(new Uint32Array([other.buffer[3], 0]));
    const R1 = new Uint642(new Uint32Array([other.buffer[2], 0]));
    const R2 = new Uint642(new Uint32Array([other.buffer[1], 0]));
    const R3 = new Uint642(new Uint32Array([other.buffer[0], 0]));
    let product2 = Uint642.multiply(L3, R3);
    this.buffer[0] = product2.low();
    const sum6 = new Uint642(new Uint32Array([product2.high(), 0]));
    product2 = Uint642.multiply(L2, R3);
    sum6.plus(product2);
    product2 = Uint642.multiply(L3, R2);
    sum6.plus(product2);
    this.buffer[1] = sum6.low();
    this.buffer[3] = sum6.lessThan(product2) ? 1 : 0;
    this.buffer[2] = sum6.high();
    const high = new Uint642(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
    high.plus(Uint642.multiply(L1, R3)).plus(Uint642.multiply(L2, R2)).plus(Uint642.multiply(L3, R1));
    this.buffer[3] += Uint642.multiply(L0, R3).plus(Uint642.multiply(L1, R2)).plus(Uint642.multiply(L2, R1)).plus(Uint642.multiply(L3, R0)).low();
    return this;
  }
  plus(other) {
    const sums = new Uint32Array(4);
    sums[3] = this.buffer[3] + other.buffer[3] >>> 0;
    sums[2] = this.buffer[2] + other.buffer[2] >>> 0;
    sums[1] = this.buffer[1] + other.buffer[1] >>> 0;
    sums[0] = this.buffer[0] + other.buffer[0] >>> 0;
    if (sums[0] < this.buffer[0] >>> 0) {
      ++sums[1];
    }
    if (sums[1] < this.buffer[1] >>> 0) {
      ++sums[2];
    }
    if (sums[2] < this.buffer[2] >>> 0) {
      ++sums[3];
    }
    this.buffer[3] = sums[3];
    this.buffer[2] = sums[2];
    this.buffer[1] = sums[1];
    this.buffer[0] = sums[0];
    return this;
  }
  hex() {
    return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;
  }
  /** @nocollapse */
  static multiply(left2, right2) {
    const rtrn = new _Int128(new Uint32Array(left2.buffer));
    return rtrn.times(right2);
  }
  /** @nocollapse */
  static add(left2, right2) {
    const rtrn = new _Int128(new Uint32Array(left2.buffer));
    return rtrn.plus(right2);
  }
  /** @nocollapse */
  static from(val, out_buffer = new Uint32Array(4)) {
    return _Int128.fromString(typeof val === "string" ? val : val.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromNumber(num, out_buffer = new Uint32Array(4)) {
    return _Int128.fromString(num.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromString(str, out_buffer = new Uint32Array(4)) {
    const negate2 = str.startsWith("-");
    const length4 = str.length;
    const out = new _Int128(out_buffer);
    for (let posn = negate2 ? 1 : 0; posn < length4; ) {
      const group3 = kInt32DecimalDigits < length4 - posn ? kInt32DecimalDigits : length4 - posn;
      const chunk = new _Int128(new Uint32Array([Number.parseInt(str.slice(posn, posn + group3), 10), 0, 0, 0]));
      const multiple = new _Int128(new Uint32Array([kPowersOfTen[group3], 0, 0, 0]));
      out.times(multiple);
      out.plus(chunk);
      posn += group3;
    }
    return negate2 ? out.negate() : out;
  }
  /** @nocollapse */
  static convertArray(values2) {
    const data = new Uint32Array(values2.length * 4);
    for (let i2 = -1, n = values2.length; ++i2 < n; ) {
      _Int128.from(values2[i2], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i2, 4));
    }
    return data;
  }
};

// ../core/node_modules/apache-arrow/visitor/vectorloader.mjs
var VectorLoader = class extends Visitor {
  constructor(bytes, nodes, buffers, dictionaries) {
    super();
    this.nodesIndex = -1;
    this.buffersIndex = -1;
    this.bytes = bytes;
    this.nodes = nodes;
    this.buffers = buffers;
    this.dictionaries = dictionaries;
  }
  visit(node) {
    return super.visit(node instanceof Field2 ? node.type : node);
  }
  visitNull(type2, { length: length4 } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4 });
  }
  visitBool(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitInt(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitFloat(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitUtf8(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), valueOffsets: this.readOffsets(type2), data: this.readData(type2) });
  }
  visitBinary(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), valueOffsets: this.readOffsets(type2), data: this.readData(type2) });
  }
  visitFixedSizeBinary(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitDate(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitTimestamp(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitTime(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitDecimal(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitList(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), valueOffsets: this.readOffsets(type2), "child": this.visit(type2.children[0]) });
  }
  visitStruct(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), children: this.visitMany(type2.children) });
  }
  visitUnion(type2) {
    return type2.mode === UnionMode.Sparse ? this.visitSparseUnion(type2) : this.visitDenseUnion(type2);
  }
  visitDenseUnion(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), typeIds: this.readTypeIds(type2), valueOffsets: this.readOffsets(type2), children: this.visitMany(type2.children) });
  }
  visitSparseUnion(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), typeIds: this.readTypeIds(type2), children: this.visitMany(type2.children) });
  }
  visitDictionary(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2.indices), dictionary: this.readDictionary(type2) });
  }
  visitInterval(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitFixedSizeList(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), "child": this.visit(type2.children[0]) });
  }
  visitMap(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), valueOffsets: this.readOffsets(type2), "child": this.visit(type2.children[0]) });
  }
  nextFieldNode() {
    return this.nodes[++this.nodesIndex];
  }
  nextBufferRange() {
    return this.buffers[++this.buffersIndex];
  }
  readNullBitmap(type2, nullCount, buffer = this.nextBufferRange()) {
    return nullCount > 0 && this.readData(type2, buffer) || new Uint8Array(0);
  }
  readOffsets(type2, buffer) {
    return this.readData(type2, buffer);
  }
  readTypeIds(type2, buffer) {
    return this.readData(type2, buffer);
  }
  readData(_type, { length: length4, offset: offset2 } = this.nextBufferRange()) {
    return this.bytes.subarray(offset2, offset2 + length4);
  }
  readDictionary(type2) {
    return this.dictionaries.get(type2.id);
  }
};
var JSONVectorLoader = class extends VectorLoader {
  constructor(sources, nodes, buffers, dictionaries) {
    super(new Uint8Array(0), nodes, buffers, dictionaries);
    this.sources = sources;
  }
  readNullBitmap(_type, nullCount, { offset: offset2 } = this.nextBufferRange()) {
    return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset2]);
  }
  readOffsets(_type, { offset: offset2 } = this.nextBufferRange()) {
    return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset2]));
  }
  readTypeIds(type2, { offset: offset2 } = this.nextBufferRange()) {
    return toArrayBufferView(Uint8Array, toArrayBufferView(type2.ArrayType, this.sources[offset2]));
  }
  readData(type2, { offset: offset2 } = this.nextBufferRange()) {
    const { sources } = this;
    if (DataType.isTimestamp(type2)) {
      return toArrayBufferView(Uint8Array, Int642.convertArray(sources[offset2]));
    } else if ((DataType.isInt(type2) || DataType.isTime(type2)) && type2.bitWidth === 64) {
      return toArrayBufferView(Uint8Array, Int642.convertArray(sources[offset2]));
    } else if (DataType.isDate(type2) && type2.unit === DateUnit.MILLISECOND) {
      return toArrayBufferView(Uint8Array, Int642.convertArray(sources[offset2]));
    } else if (DataType.isDecimal(type2)) {
      return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset2]));
    } else if (DataType.isBinary(type2) || DataType.isFixedSizeBinary(type2)) {
      return binaryDataFromJSON(sources[offset2]);
    } else if (DataType.isBool(type2)) {
      return packBools(sources[offset2]);
    } else if (DataType.isUtf8(type2)) {
      return encodeUtf8(sources[offset2].join(""));
    }
    return toArrayBufferView(Uint8Array, toArrayBufferView(type2.ArrayType, sources[offset2].map((x3) => +x3)));
  }
};
function binaryDataFromJSON(values2) {
  const joined = values2.join("");
  const data = new Uint8Array(joined.length / 2);
  for (let i2 = 0; i2 < joined.length; i2 += 2) {
    data[i2 >> 1] = Number.parseInt(joined.slice(i2, i2 + 2), 16);
  }
  return data;
}

// ../core/node_modules/apache-arrow/builder/binary.mjs
var BinaryBuilder = class extends VariableWidthBuilder {
  constructor(opts) {
    super(opts);
    this._values = new BufferBuilder(new Uint8Array(0));
  }
  get byteLength() {
    let size = this._pendingLength + this.length * 4;
    this._offsets && (size += this._offsets.byteLength);
    this._values && (size += this._values.byteLength);
    this._nulls && (size += this._nulls.byteLength);
    return size;
  }
  setValue(index2, value) {
    return super.setValue(index2, toUint8Array(value));
  }
  _flushPending(pending, pendingLength) {
    const offsets = this._offsets;
    const data = this._values.reserve(pendingLength).buffer;
    let offset2 = 0;
    for (const [index2, value] of pending) {
      if (value === void 0) {
        offsets.set(index2, 0);
      } else {
        const length4 = value.length;
        data.set(value, offset2);
        offsets.set(index2, length4);
        offset2 += length4;
      }
    }
  }
};

// ../core/node_modules/apache-arrow/builder/bool.mjs
var BoolBuilder = class extends Builder {
  constructor(options) {
    super(options);
    this._values = new BitmapBufferBuilder();
  }
  setValue(index2, value) {
    this._values.set(index2, +value);
  }
};

// ../core/node_modules/apache-arrow/builder/date.mjs
var DateBuilder = class extends FixedWidthBuilder {
};
DateBuilder.prototype._setValue = setDate;
var DateDayBuilder = class extends DateBuilder {
};
DateDayBuilder.prototype._setValue = setDateDay;
var DateMillisecondBuilder = class extends DateBuilder {
};
DateMillisecondBuilder.prototype._setValue = setDateMillisecond;

// ../core/node_modules/apache-arrow/builder/decimal.mjs
var DecimalBuilder = class extends FixedWidthBuilder {
};
DecimalBuilder.prototype._setValue = setDecimal;

// ../core/node_modules/apache-arrow/builder/dictionary.mjs
var DictionaryBuilder = class extends Builder {
  constructor({ "type": type2, "nullValues": nulls, "dictionaryHashFunction": hashFn }) {
    super({ type: new Dictionary(type2.dictionary, type2.indices, type2.id, type2.isOrdered) });
    this._nulls = null;
    this._dictionaryOffset = 0;
    this._keysToIndices = /* @__PURE__ */ Object.create(null);
    this.indices = makeBuilder({ "type": this.type.indices, "nullValues": nulls });
    this.dictionary = makeBuilder({ "type": this.type.dictionary, "nullValues": null });
    if (typeof hashFn === "function") {
      this.valueToKey = hashFn;
    }
  }
  get values() {
    return this.indices.values;
  }
  get nullCount() {
    return this.indices.nullCount;
  }
  get nullBitmap() {
    return this.indices.nullBitmap;
  }
  get byteLength() {
    return this.indices.byteLength + this.dictionary.byteLength;
  }
  get reservedLength() {
    return this.indices.reservedLength + this.dictionary.reservedLength;
  }
  get reservedByteLength() {
    return this.indices.reservedByteLength + this.dictionary.reservedByteLength;
  }
  isValid(value) {
    return this.indices.isValid(value);
  }
  setValid(index2, valid2) {
    const indices = this.indices;
    valid2 = indices.setValid(index2, valid2);
    this.length = indices.length;
    return valid2;
  }
  setValue(index2, value) {
    const keysToIndices = this._keysToIndices;
    const key = this.valueToKey(value);
    let idx = keysToIndices[key];
    if (idx === void 0) {
      keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;
    }
    return this.indices.setValue(index2, idx);
  }
  flush() {
    const type2 = this.type;
    const prev = this._dictionary;
    const curr = this.dictionary.toVector();
    const data = this.indices.flush().clone(type2);
    data.dictionary = prev ? prev.concat(curr) : curr;
    this.finished || (this._dictionaryOffset += curr.length);
    this._dictionary = data.dictionary;
    this.clear();
    return data;
  }
  finish() {
    this.indices.finish();
    this.dictionary.finish();
    this._dictionaryOffset = 0;
    this._keysToIndices = /* @__PURE__ */ Object.create(null);
    return super.finish();
  }
  clear() {
    this.indices.clear();
    this.dictionary.clear();
    return super.clear();
  }
  valueToKey(val) {
    return typeof val === "string" ? val : `${val}`;
  }
};

// ../core/node_modules/apache-arrow/builder/fixedsizebinary.mjs
var FixedSizeBinaryBuilder = class extends FixedWidthBuilder {
};
FixedSizeBinaryBuilder.prototype._setValue = setFixedSizeBinary;

// ../core/node_modules/apache-arrow/builder/fixedsizelist.mjs
var FixedSizeListBuilder = class extends Builder {
  setValue(index2, value) {
    const [child] = this.children;
    const start2 = index2 * this.stride;
    for (let i2 = -1, n = value.length; ++i2 < n; ) {
      child.set(start2 + i2, value[i2]);
    }
  }
  addChild(child, name2 = "0") {
    if (this.numChildren > 0) {
      throw new Error("FixedSizeListBuilder can only have one child.");
    }
    const childIndex = this.children.push(child);
    this.type = new FixedSizeList(this.type.listSize, new Field2(name2, child.type, true));
    return childIndex;
  }
};

// ../core/node_modules/apache-arrow/builder/float.mjs
var FloatBuilder = class extends FixedWidthBuilder {
  setValue(index2, value) {
    this._values.set(index2, value);
  }
};
var Float16Builder = class extends FloatBuilder {
  setValue(index2, value) {
    super.setValue(index2, float64ToUint16(value));
  }
};
var Float32Builder = class extends FloatBuilder {
};
var Float64Builder = class extends FloatBuilder {
};

// ../core/node_modules/apache-arrow/builder/interval.mjs
var IntervalBuilder = class extends FixedWidthBuilder {
};
IntervalBuilder.prototype._setValue = setIntervalValue;
var IntervalDayTimeBuilder = class extends IntervalBuilder {
};
IntervalDayTimeBuilder.prototype._setValue = setIntervalDayTime;
var IntervalYearMonthBuilder = class extends IntervalBuilder {
};
IntervalYearMonthBuilder.prototype._setValue = setIntervalYearMonth;

// ../core/node_modules/apache-arrow/builder/int.mjs
var IntBuilder = class extends FixedWidthBuilder {
  setValue(index2, value) {
    this._values.set(index2, value);
  }
};
var Int8Builder = class extends IntBuilder {
};
var Int16Builder = class extends IntBuilder {
};
var Int32Builder = class extends IntBuilder {
};
var Int64Builder = class extends IntBuilder {
};
var Uint8Builder = class extends IntBuilder {
};
var Uint16Builder = class extends IntBuilder {
};
var Uint32Builder = class extends IntBuilder {
};
var Uint64Builder = class extends IntBuilder {
};

// ../core/node_modules/apache-arrow/builder/list.mjs
var ListBuilder = class extends VariableWidthBuilder {
  constructor(opts) {
    super(opts);
    this._offsets = new OffsetsBufferBuilder();
  }
  addChild(child, name2 = "0") {
    if (this.numChildren > 0) {
      throw new Error("ListBuilder can only have one child.");
    }
    this.children[this.numChildren] = child;
    this.type = new List(new Field2(name2, child.type, true));
    return this.numChildren - 1;
  }
  _flushPending(pending) {
    const offsets = this._offsets;
    const [child] = this.children;
    for (const [index2, value] of pending) {
      if (typeof value === "undefined") {
        offsets.set(index2, 0);
      } else {
        const n = value.length;
        const start2 = offsets.set(index2, n).buffer[index2];
        for (let i2 = -1; ++i2 < n; ) {
          child.set(start2 + i2, value[i2]);
        }
      }
    }
  }
};

// ../core/node_modules/apache-arrow/builder/map.mjs
var MapBuilder = class extends VariableWidthBuilder {
  set(index2, value) {
    return super.set(index2, value);
  }
  setValue(index2, value) {
    const row = value instanceof Map ? value : new Map(Object.entries(value));
    const pending = this._pending || (this._pending = /* @__PURE__ */ new Map());
    const current = pending.get(index2);
    current && (this._pendingLength -= current.size);
    this._pendingLength += row.size;
    pending.set(index2, row);
  }
  addChild(child, name2 = `${this.numChildren}`) {
    if (this.numChildren > 0) {
      throw new Error("ListBuilder can only have one child.");
    }
    this.children[this.numChildren] = child;
    this.type = new Map_(new Field2(name2, child.type, true), this.type.keysSorted);
    return this.numChildren - 1;
  }
  _flushPending(pending) {
    const offsets = this._offsets;
    const [child] = this.children;
    for (const [index2, value] of pending) {
      if (value === void 0) {
        offsets.set(index2, 0);
      } else {
        let { [index2]: idx, [index2 + 1]: end } = offsets.set(index2, value.size).buffer;
        for (const val of value.entries()) {
          child.set(idx, val);
          if (++idx >= end)
            break;
        }
      }
    }
  }
};

// ../core/node_modules/apache-arrow/builder/null.mjs
var NullBuilder = class extends Builder {
  // @ts-ignore
  setValue(index2, value) {
  }
  setValid(index2, valid2) {
    this.length = Math.max(index2 + 1, this.length);
    return valid2;
  }
};

// ../core/node_modules/apache-arrow/builder/struct.mjs
var StructBuilder = class extends Builder {
  setValue(index2, value) {
    const { children: children2, type: type2 } = this;
    switch (Array.isArray(value) || value.constructor) {
      case true:
        return type2.children.forEach((_2, i2) => children2[i2].set(index2, value[i2]));
      case Map:
        return type2.children.forEach((f2, i2) => children2[i2].set(index2, value.get(f2.name)));
      default:
        return type2.children.forEach((f2, i2) => children2[i2].set(index2, value[f2.name]));
    }
  }
  /** @inheritdoc */
  setValid(index2, valid2) {
    if (!super.setValid(index2, valid2)) {
      this.children.forEach((child) => child.setValid(index2, valid2));
    }
    return valid2;
  }
  addChild(child, name2 = `${this.numChildren}`) {
    const childIndex = this.children.push(child);
    this.type = new Struct([...this.type.children, new Field2(name2, child.type, true)]);
    return childIndex;
  }
};

// ../core/node_modules/apache-arrow/builder/timestamp.mjs
var TimestampBuilder = class extends FixedWidthBuilder {
};
TimestampBuilder.prototype._setValue = setTimestamp;
var TimestampSecondBuilder = class extends TimestampBuilder {
};
TimestampSecondBuilder.prototype._setValue = setTimestampSecond;
var TimestampMillisecondBuilder = class extends TimestampBuilder {
};
TimestampMillisecondBuilder.prototype._setValue = setTimestampMillisecond;
var TimestampMicrosecondBuilder = class extends TimestampBuilder {
};
TimestampMicrosecondBuilder.prototype._setValue = setTimestampMicrosecond;
var TimestampNanosecondBuilder = class extends TimestampBuilder {
};
TimestampNanosecondBuilder.prototype._setValue = setTimestampNanosecond;

// ../core/node_modules/apache-arrow/builder/time.mjs
var TimeBuilder = class extends FixedWidthBuilder {
};
TimeBuilder.prototype._setValue = setTime;
var TimeSecondBuilder = class extends TimeBuilder {
};
TimeSecondBuilder.prototype._setValue = setTimeSecond;
var TimeMillisecondBuilder = class extends TimeBuilder {
};
TimeMillisecondBuilder.prototype._setValue = setTimeMillisecond;
var TimeMicrosecondBuilder = class extends TimeBuilder {
};
TimeMicrosecondBuilder.prototype._setValue = setTimeMicrosecond;
var TimeNanosecondBuilder = class extends TimeBuilder {
};
TimeNanosecondBuilder.prototype._setValue = setTimeNanosecond;

// ../core/node_modules/apache-arrow/builder/union.mjs
var UnionBuilder = class extends Builder {
  constructor(options) {
    super(options);
    this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);
    if (typeof options["valueToChildTypeId"] === "function") {
      this._valueToChildTypeId = options["valueToChildTypeId"];
    }
  }
  get typeIdToChildIndex() {
    return this.type.typeIdToChildIndex;
  }
  append(value, childTypeId) {
    return this.set(this.length, value, childTypeId);
  }
  set(index2, value, childTypeId) {
    if (childTypeId === void 0) {
      childTypeId = this._valueToChildTypeId(this, value, index2);
    }
    if (this.setValid(index2, this.isValid(value))) {
      this.setValue(index2, value, childTypeId);
    }
    return this;
  }
  setValue(index2, value, childTypeId) {
    this._typeIds.set(index2, childTypeId);
    const childIndex = this.type.typeIdToChildIndex[childTypeId];
    const child = this.children[childIndex];
    child === null || child === void 0 ? void 0 : child.set(index2, value);
  }
  addChild(child, name2 = `${this.children.length}`) {
    const childTypeId = this.children.push(child);
    const { type: { children: children2, mode: mode3, typeIds } } = this;
    const fields = [...children2, new Field2(name2, child.type)];
    this.type = new Union_(mode3, [...typeIds, childTypeId], fields);
    return childTypeId;
  }
  /** @ignore */
  // @ts-ignore
  _valueToChildTypeId(builder, value, offset2) {
    throw new Error(`Cannot map UnionBuilder value to child typeId. Pass the \`childTypeId\` as the second argument to unionBuilder.append(), or supply a \`valueToChildTypeId\` function as part of the UnionBuilder constructor options.`);
  }
};
var SparseUnionBuilder = class extends UnionBuilder {
};
var DenseUnionBuilder = class extends UnionBuilder {
  constructor(options) {
    super(options);
    this._offsets = new DataBufferBuilder(new Int32Array(0));
  }
  /** @ignore */
  setValue(index2, value, childTypeId) {
    const id2 = this._typeIds.set(index2, childTypeId).buffer[index2];
    const child = this.getChildAt(this.type.typeIdToChildIndex[id2]);
    const denseIndex = this._offsets.set(index2, child.length).buffer[index2];
    child === null || child === void 0 ? void 0 : child.set(denseIndex, value);
  }
};

// ../core/node_modules/apache-arrow/builder/utf8.mjs
var Utf8Builder = class extends VariableWidthBuilder {
  constructor(opts) {
    super(opts);
    this._values = new BufferBuilder(new Uint8Array(0));
  }
  get byteLength() {
    let size = this._pendingLength + this.length * 4;
    this._offsets && (size += this._offsets.byteLength);
    this._values && (size += this._values.byteLength);
    this._nulls && (size += this._nulls.byteLength);
    return size;
  }
  setValue(index2, value) {
    return super.setValue(index2, encodeUtf8(value));
  }
  // @ts-ignore
  _flushPending(pending, pendingLength) {
  }
};
Utf8Builder.prototype._flushPending = BinaryBuilder.prototype._flushPending;

// ../core/node_modules/apache-arrow/visitor/builderctor.mjs
var GetBuilderCtor = class extends Visitor {
  visitNull() {
    return NullBuilder;
  }
  visitBool() {
    return BoolBuilder;
  }
  visitInt() {
    return IntBuilder;
  }
  visitInt8() {
    return Int8Builder;
  }
  visitInt16() {
    return Int16Builder;
  }
  visitInt32() {
    return Int32Builder;
  }
  visitInt64() {
    return Int64Builder;
  }
  visitUint8() {
    return Uint8Builder;
  }
  visitUint16() {
    return Uint16Builder;
  }
  visitUint32() {
    return Uint32Builder;
  }
  visitUint64() {
    return Uint64Builder;
  }
  visitFloat() {
    return FloatBuilder;
  }
  visitFloat16() {
    return Float16Builder;
  }
  visitFloat32() {
    return Float32Builder;
  }
  visitFloat64() {
    return Float64Builder;
  }
  visitUtf8() {
    return Utf8Builder;
  }
  visitBinary() {
    return BinaryBuilder;
  }
  visitFixedSizeBinary() {
    return FixedSizeBinaryBuilder;
  }
  visitDate() {
    return DateBuilder;
  }
  visitDateDay() {
    return DateDayBuilder;
  }
  visitDateMillisecond() {
    return DateMillisecondBuilder;
  }
  visitTimestamp() {
    return TimestampBuilder;
  }
  visitTimestampSecond() {
    return TimestampSecondBuilder;
  }
  visitTimestampMillisecond() {
    return TimestampMillisecondBuilder;
  }
  visitTimestampMicrosecond() {
    return TimestampMicrosecondBuilder;
  }
  visitTimestampNanosecond() {
    return TimestampNanosecondBuilder;
  }
  visitTime() {
    return TimeBuilder;
  }
  visitTimeSecond() {
    return TimeSecondBuilder;
  }
  visitTimeMillisecond() {
    return TimeMillisecondBuilder;
  }
  visitTimeMicrosecond() {
    return TimeMicrosecondBuilder;
  }
  visitTimeNanosecond() {
    return TimeNanosecondBuilder;
  }
  visitDecimal() {
    return DecimalBuilder;
  }
  visitList() {
    return ListBuilder;
  }
  visitStruct() {
    return StructBuilder;
  }
  visitUnion() {
    return UnionBuilder;
  }
  visitDenseUnion() {
    return DenseUnionBuilder;
  }
  visitSparseUnion() {
    return SparseUnionBuilder;
  }
  visitDictionary() {
    return DictionaryBuilder;
  }
  visitInterval() {
    return IntervalBuilder;
  }
  visitIntervalDayTime() {
    return IntervalDayTimeBuilder;
  }
  visitIntervalYearMonth() {
    return IntervalYearMonthBuilder;
  }
  visitFixedSizeList() {
    return FixedSizeListBuilder;
  }
  visitMap() {
    return MapBuilder;
  }
};
var instance6 = new GetBuilderCtor();

// ../core/node_modules/apache-arrow/visitor/typecomparator.mjs
var TypeComparator = class extends Visitor {
  compareSchemas(schema, other) {
    return schema === other || other instanceof schema.constructor && this.compareManyFields(schema.fields, other.fields);
  }
  compareManyFields(fields, others) {
    return fields === others || Array.isArray(fields) && Array.isArray(others) && fields.length === others.length && fields.every((f2, i2) => this.compareFields(f2, others[i2]));
  }
  compareFields(field2, other) {
    return field2 === other || other instanceof field2.constructor && field2.name === other.name && field2.nullable === other.nullable && this.visit(field2.type, other.type);
  }
};
function compareConstructor(type2, other) {
  return other instanceof type2.constructor;
}
function compareAny(type2, other) {
  return type2 === other || compareConstructor(type2, other);
}
function compareInt(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.bitWidth === other.bitWidth && type2.isSigned === other.isSigned;
}
function compareFloat(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.precision === other.precision;
}
function compareFixedSizeBinary(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.byteWidth === other.byteWidth;
}
function compareDate(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.unit === other.unit;
}
function compareTimestamp(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.unit === other.unit && type2.timezone === other.timezone;
}
function compareTime(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.unit === other.unit && type2.bitWidth === other.bitWidth;
}
function compareList(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.children.length === other.children.length && instance7.compareManyFields(type2.children, other.children);
}
function compareStruct(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.children.length === other.children.length && instance7.compareManyFields(type2.children, other.children);
}
function compareUnion(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.mode === other.mode && type2.typeIds.every((x3, i2) => x3 === other.typeIds[i2]) && instance7.compareManyFields(type2.children, other.children);
}
function compareDictionary(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.id === other.id && type2.isOrdered === other.isOrdered && instance7.visit(type2.indices, other.indices) && instance7.visit(type2.dictionary, other.dictionary);
}
function compareInterval(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.unit === other.unit;
}
function compareFixedSizeList(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.listSize === other.listSize && type2.children.length === other.children.length && instance7.compareManyFields(type2.children, other.children);
}
function compareMap(type2, other) {
  return type2 === other || compareConstructor(type2, other) && type2.keysSorted === other.keysSorted && type2.children.length === other.children.length && instance7.compareManyFields(type2.children, other.children);
}
TypeComparator.prototype.visitNull = compareAny;
TypeComparator.prototype.visitBool = compareAny;
TypeComparator.prototype.visitInt = compareInt;
TypeComparator.prototype.visitInt8 = compareInt;
TypeComparator.prototype.visitInt16 = compareInt;
TypeComparator.prototype.visitInt32 = compareInt;
TypeComparator.prototype.visitInt64 = compareInt;
TypeComparator.prototype.visitUint8 = compareInt;
TypeComparator.prototype.visitUint16 = compareInt;
TypeComparator.prototype.visitUint32 = compareInt;
TypeComparator.prototype.visitUint64 = compareInt;
TypeComparator.prototype.visitFloat = compareFloat;
TypeComparator.prototype.visitFloat16 = compareFloat;
TypeComparator.prototype.visitFloat32 = compareFloat;
TypeComparator.prototype.visitFloat64 = compareFloat;
TypeComparator.prototype.visitUtf8 = compareAny;
TypeComparator.prototype.visitBinary = compareAny;
TypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;
TypeComparator.prototype.visitDate = compareDate;
TypeComparator.prototype.visitDateDay = compareDate;
TypeComparator.prototype.visitDateMillisecond = compareDate;
TypeComparator.prototype.visitTimestamp = compareTimestamp;
TypeComparator.prototype.visitTimestampSecond = compareTimestamp;
TypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;
TypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;
TypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;
TypeComparator.prototype.visitTime = compareTime;
TypeComparator.prototype.visitTimeSecond = compareTime;
TypeComparator.prototype.visitTimeMillisecond = compareTime;
TypeComparator.prototype.visitTimeMicrosecond = compareTime;
TypeComparator.prototype.visitTimeNanosecond = compareTime;
TypeComparator.prototype.visitDecimal = compareAny;
TypeComparator.prototype.visitList = compareList;
TypeComparator.prototype.visitStruct = compareStruct;
TypeComparator.prototype.visitUnion = compareUnion;
TypeComparator.prototype.visitDenseUnion = compareUnion;
TypeComparator.prototype.visitSparseUnion = compareUnion;
TypeComparator.prototype.visitDictionary = compareDictionary;
TypeComparator.prototype.visitInterval = compareInterval;
TypeComparator.prototype.visitIntervalDayTime = compareInterval;
TypeComparator.prototype.visitIntervalYearMonth = compareInterval;
TypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;
TypeComparator.prototype.visitMap = compareMap;
var instance7 = new TypeComparator();
function compareSchemas(schema, other) {
  return instance7.compareSchemas(schema, other);
}
function compareFields(field2, other) {
  return instance7.compareFields(field2, other);
}
function compareTypes(type2, other) {
  return instance7.visit(type2, other);
}

// ../core/node_modules/apache-arrow/factories.mjs
function makeBuilder(options) {
  const type2 = options.type;
  const builder = new (instance6.getVisitFn(type2)())(options);
  if (type2.children && type2.children.length > 0) {
    const children2 = options["children"] || [];
    const defaultOptions = { "nullValues": options["nullValues"] };
    const getChildOptions = Array.isArray(children2) ? (_2, i2) => children2[i2] || defaultOptions : ({ name: name2 }) => children2[name2] || defaultOptions;
    for (const [index2, field2] of type2.children.entries()) {
      const { type: type3 } = field2;
      const opts = getChildOptions(field2, index2);
      builder.children.push(makeBuilder(Object.assign(Object.assign({}, opts), { type: type3 })));
    }
  }
  return builder;
}

// ../core/node_modules/apache-arrow/util/recordbatch.mjs
function distributeVectorsIntoRecordBatches(schema, vecs) {
  return uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map((v3) => v3.data.concat()));
}
function uniformlyDistributeChunksAcrossRecordBatches(schema, cols) {
  const fields = [...schema.fields];
  const batches = [];
  const memo = { numBatches: cols.reduce((n, c4) => Math.max(n, c4.length), 0) };
  let numBatches = 0, batchLength = 0;
  let i2 = -1;
  const numColumns = cols.length;
  let child, children2 = [];
  while (memo.numBatches-- > 0) {
    for (batchLength = Number.POSITIVE_INFINITY, i2 = -1; ++i2 < numColumns; ) {
      children2[i2] = child = cols[i2].shift();
      batchLength = Math.min(batchLength, child ? child.length : batchLength);
    }
    if (Number.isFinite(batchLength)) {
      children2 = distributeChildren(fields, batchLength, children2, cols, memo);
      if (batchLength > 0) {
        batches[numBatches++] = makeData({
          type: new Struct(fields),
          length: batchLength,
          nullCount: 0,
          children: children2.slice()
        });
      }
    }
  }
  return [
    schema = schema.assign(fields),
    batches.map((data) => new RecordBatch(schema, data))
  ];
}
function distributeChildren(fields, batchLength, children2, columns, memo) {
  var _a9;
  const nullBitmapSize = (batchLength + 63 & ~63) >> 3;
  for (let i2 = -1, n = columns.length; ++i2 < n; ) {
    const child = children2[i2];
    const length4 = child === null || child === void 0 ? void 0 : child.length;
    if (length4 >= batchLength) {
      if (length4 === batchLength) {
        children2[i2] = child;
      } else {
        children2[i2] = child.slice(0, batchLength);
        memo.numBatches = Math.max(memo.numBatches, columns[i2].unshift(child.slice(batchLength, length4 - batchLength)));
      }
    } else {
      const field2 = fields[i2];
      fields[i2] = field2.clone({ nullable: true });
      children2[i2] = (_a9 = child === null || child === void 0 ? void 0 : child._changeLengthAndBackfillNullBitmap(batchLength)) !== null && _a9 !== void 0 ? _a9 : makeData({
        type: field2.type,
        length: batchLength,
        nullCount: batchLength,
        nullBitmap: new Uint8Array(nullBitmapSize)
      });
    }
  }
  return children2;
}

// ../core/node_modules/apache-arrow/table.mjs
var _a3;
var Table = class _Table {
  constructor(...args) {
    var _b3, _c3;
    if (args.length === 0) {
      this.batches = [];
      this.schema = new Schema2([]);
      this._offsets = [0];
      return this;
    }
    let schema;
    let offsets;
    if (args[0] instanceof Schema2) {
      schema = args.shift();
    }
    if (args[args.length - 1] instanceof Uint32Array) {
      offsets = args.pop();
    }
    const unwrap = (x3) => {
      if (x3) {
        if (x3 instanceof RecordBatch) {
          return [x3];
        } else if (x3 instanceof _Table) {
          return x3.batches;
        } else if (x3 instanceof Data) {
          if (x3.type instanceof Struct) {
            return [new RecordBatch(new Schema2(x3.type.children), x3)];
          }
        } else if (Array.isArray(x3)) {
          return x3.flatMap((v3) => unwrap(v3));
        } else if (typeof x3[Symbol.iterator] === "function") {
          return [...x3].flatMap((v3) => unwrap(v3));
        } else if (typeof x3 === "object") {
          const keys = Object.keys(x3);
          const vecs = keys.map((k3) => new Vector([x3[k3]]));
          const schema2 = new Schema2(keys.map((k3, i2) => new Field2(String(k3), vecs[i2].type)));
          const [, batches2] = distributeVectorsIntoRecordBatches(schema2, vecs);
          return batches2.length === 0 ? [new RecordBatch(x3)] : batches2;
        }
      }
      return [];
    };
    const batches = args.flatMap((v3) => unwrap(v3));
    schema = (_c3 = schema !== null && schema !== void 0 ? schema : (_b3 = batches[0]) === null || _b3 === void 0 ? void 0 : _b3.schema) !== null && _c3 !== void 0 ? _c3 : new Schema2([]);
    if (!(schema instanceof Schema2)) {
      throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");
    }
    for (const batch of batches) {
      if (!(batch instanceof RecordBatch)) {
        throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");
      }
      if (!compareSchemas(schema, batch.schema)) {
        throw new TypeError("Table and inner RecordBatch schemas must be equivalent.");
      }
    }
    this.schema = schema;
    this.batches = batches;
    this._offsets = offsets !== null && offsets !== void 0 ? offsets : computeChunkOffsets(this.data);
  }
  /**
   * The contiguous {@link RecordBatch `RecordBatch`} chunks of the Table rows.
   */
  get data() {
    return this.batches.map(({ data }) => data);
  }
  /**
   * The number of columns in this Table.
   */
  get numCols() {
    return this.schema.fields.length;
  }
  /**
   * The number of rows in this Table.
   */
  get numRows() {
    return this.data.reduce((numRows, data) => numRows + data.length, 0);
  }
  /**
   * The number of null rows in this Table.
   */
  get nullCount() {
    if (this._nullCount === -1) {
      this._nullCount = computeChunkNullCounts(this.data);
    }
    return this._nullCount;
  }
  /**
   * Check whether an element is null.
   *
   * @param index The index at which to read the validity bitmap.
   */
  // @ts-ignore
  isValid(index2) {
    return false;
  }
  /**
   * Get an element value by position.
   *
   * @param index The index of the element to read.
   */
  // @ts-ignore
  get(index2) {
    return null;
  }
  /**
   * Set an element value by position.
   *
   * @param index The index of the element to write.
   * @param value The value to set.
   */
  // @ts-ignore
  set(index2, value) {
    return;
  }
  /**
   * Retrieve the index of the first occurrence of a value in an Vector.
   *
   * @param element The value to locate in the Vector.
   * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.
   */
  // @ts-ignore
  indexOf(element, offset2) {
    return -1;
  }
  /**
   * Get the size in bytes of an element by index.
   * @param index The index at which to get the byteLength.
   */
  // @ts-ignore
  getByteLength(index2) {
    return 0;
  }
  /**
   * Iterator for rows in this Table.
   */
  [Symbol.iterator]() {
    if (this.batches.length > 0) {
      return instance4.visit(new Vector(this.data));
    }
    return new Array(0)[Symbol.iterator]();
  }
  /**
   * Return a JavaScript Array of the Table rows.
   *
   * @returns An Array of Table rows.
   */
  toArray() {
    return [...this];
  }
  /**
   * Returns a string representation of the Table rows.
   *
   * @returns A string representation of the Table rows.
   */
  toString() {
    return `[
  ${this.toArray().join(",\n  ")}
]`;
  }
  /**
   * Combines two or more Tables of the same schema.
   *
   * @param others Additional Tables to add to the end of this Tables.
   */
  concat(...others) {
    const schema = this.schema;
    const data = this.data.concat(others.flatMap(({ data: data2 }) => data2));
    return new _Table(schema, data.map((data2) => new RecordBatch(schema, data2)));
  }
  /**
   * Return a zero-copy sub-section of this Table.
   *
   * @param begin The beginning of the specified portion of the Table.
   * @param end The end of the specified portion of the Table. This is exclusive of the element at the index 'end'.
   */
  slice(begin, end) {
    const schema = this.schema;
    [begin, end] = clampRange({ length: this.numRows }, begin, end);
    const data = sliceChunks(this.data, this._offsets, begin, end);
    return new _Table(schema, data.map((chunk) => new RecordBatch(schema, chunk)));
  }
  /**
   * Returns a child Vector by name, or null if this Vector has no child with the given name.
   *
   * @param name The name of the child to retrieve.
   */
  getChild(name2) {
    return this.getChildAt(this.schema.fields.findIndex((f2) => f2.name === name2));
  }
  /**
   * Returns a child Vector by index, or null if this Vector has no child at the supplied index.
   *
   * @param index The index of the child to retrieve.
   */
  getChildAt(index2) {
    if (index2 > -1 && index2 < this.schema.fields.length) {
      const data = this.data.map((data2) => data2.children[index2]);
      if (data.length === 0) {
        const { type: type2 } = this.schema.fields[index2];
        const empty4 = makeData({ type: type2, length: 0, nullCount: 0 });
        data.push(empty4._changeLengthAndBackfillNullBitmap(this.numRows));
      }
      return new Vector(data);
    }
    return null;
  }
  /**
   * Sets a child Vector by name.
   *
   * @param name The name of the child to overwrite.
   * @returns A new Table with the supplied child for the specified name.
   */
  setChild(name2, child) {
    var _b3;
    return this.setChildAt((_b3 = this.schema.fields) === null || _b3 === void 0 ? void 0 : _b3.findIndex((f2) => f2.name === name2), child);
  }
  setChildAt(index2, child) {
    let schema = this.schema;
    let batches = [...this.batches];
    if (index2 > -1 && index2 < this.numCols) {
      if (!child) {
        child = new Vector([makeData({ type: new Null(), length: this.numRows })]);
      }
      const fields = schema.fields.slice();
      const field2 = fields[index2].clone({ type: child.type });
      const children2 = this.schema.fields.map((_2, i2) => this.getChildAt(i2));
      [fields[index2], children2[index2]] = [field2, child];
      [schema, batches] = distributeVectorsIntoRecordBatches(schema, children2);
    }
    return new _Table(schema, batches);
  }
  /**
   * Construct a new Table containing only specified columns.
   *
   * @param columnNames Names of columns to keep.
   * @returns A new Table of columns matching the specified names.
   */
  select(columnNames) {
    const nameToIndex = this.schema.fields.reduce((m2, f2, i2) => m2.set(f2.name, i2), /* @__PURE__ */ new Map());
    return this.selectAt(columnNames.map((columnName) => nameToIndex.get(columnName)).filter((x3) => x3 > -1));
  }
  /**
   * Construct a new Table containing only columns at the specified indices.
   *
   * @param columnIndices Indices of columns to keep.
   * @returns A new Table of columns at the specified indices.
   */
  selectAt(columnIndices) {
    const schema = this.schema.selectAt(columnIndices);
    const data = this.batches.map((batch) => batch.selectAt(columnIndices));
    return new _Table(schema, data);
  }
  assign(other) {
    const fields = this.schema.fields;
    const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {
      const [indices2, oldToNew2] = memo;
      const i2 = fields.findIndex((f3) => f3.name === f2.name);
      ~i2 ? oldToNew2[i2] = newIdx : indices2.push(newIdx);
      return memo;
    }, [[], []]);
    const schema = this.schema.assign(other.schema);
    const columns = [
      ...fields.map((_2, i2) => [i2, oldToNew[i2]]).map(([i2, j2]) => j2 === void 0 ? this.getChildAt(i2) : other.getChildAt(j2)),
      ...indices.map((i2) => other.getChildAt(i2))
    ].filter(Boolean);
    return new _Table(...distributeVectorsIntoRecordBatches(schema, columns));
  }
};
_a3 = Symbol.toStringTag;
Table[_a3] = ((proto) => {
  proto.schema = null;
  proto.batches = [];
  proto._offsets = new Uint32Array([0]);
  proto._nullCount = -1;
  proto[Symbol.isConcatSpreadable] = true;
  proto["isValid"] = wrapChunkedCall1(isChunkedValid);
  proto["get"] = wrapChunkedCall1(instance2.getVisitFn(Type.Struct));
  proto["set"] = wrapChunkedCall2(instance.getVisitFn(Type.Struct));
  proto["indexOf"] = wrapChunkedIndexOf(instance3.getVisitFn(Type.Struct));
  proto["getByteLength"] = wrapChunkedCall1(instance5.getVisitFn(Type.Struct));
  return "Table";
})(Table.prototype);

// ../core/node_modules/apache-arrow/recordbatch.mjs
var _a4;
var RecordBatch = class _RecordBatch {
  constructor(...args) {
    switch (args.length) {
      case 2: {
        [this.schema] = args;
        if (!(this.schema instanceof Schema2)) {
          throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");
        }
        [
          ,
          this.data = makeData({
            nullCount: 0,
            type: new Struct(this.schema.fields),
            children: this.schema.fields.map((f2) => makeData({ type: f2.type, nullCount: 0 }))
          })
        ] = args;
        if (!(this.data instanceof Data)) {
          throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");
        }
        [this.schema, this.data] = ensureSameLengthData(this.schema, this.data.children);
        break;
      }
      case 1: {
        const [obj] = args;
        const { fields, children: children2, length: length4 } = Object.keys(obj).reduce((memo, name2, i2) => {
          memo.children[i2] = obj[name2];
          memo.length = Math.max(memo.length, obj[name2].length);
          memo.fields[i2] = Field2.new({ name: name2, type: obj[name2].type, nullable: true });
          return memo;
        }, {
          length: 0,
          fields: new Array(),
          children: new Array()
        });
        const schema = new Schema2(fields);
        const data = makeData({ type: new Struct(fields), length: length4, children: children2, nullCount: 0 });
        [this.schema, this.data] = ensureSameLengthData(schema, data.children, length4);
        break;
      }
      default:
        throw new TypeError("RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.");
    }
  }
  get dictionaries() {
    return this._dictionaries || (this._dictionaries = collectDictionaries(this.schema.fields, this.data.children));
  }
  /**
   * The number of columns in this RecordBatch.
   */
  get numCols() {
    return this.schema.fields.length;
  }
  /**
   * The number of rows in this RecordBatch.
   */
  get numRows() {
    return this.data.length;
  }
  /**
   * The number of null rows in this RecordBatch.
   */
  get nullCount() {
    return this.data.nullCount;
  }
  /**
   * Check whether an element is null.
   * @param index The index at which to read the validity bitmap.
   */
  isValid(index2) {
    return this.data.getValid(index2);
  }
  /**
   * Get a row by position.
   * @param index The index of the element to read.
   */
  get(index2) {
    return instance2.visit(this.data, index2);
  }
  /**
   * Set a row by position.
   * @param index The index of the element to write.
   * @param value The value to set.
   */
  set(index2, value) {
    return instance.visit(this.data, index2, value);
  }
  /**
   * Retrieve the index of the first occurrence of a row in an RecordBatch.
   * @param element The row to locate in the RecordBatch.
   * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.
   */
  indexOf(element, offset2) {
    return instance3.visit(this.data, element, offset2);
  }
  /**
   * Get the size (in bytes) of a row by index.
   * @param index The row index for which to compute the byteLength.
   */
  getByteLength(index2) {
    return instance5.visit(this.data, index2);
  }
  /**
   * Iterator for rows in this RecordBatch.
   */
  [Symbol.iterator]() {
    return instance4.visit(new Vector([this.data]));
  }
  /**
   * Return a JavaScript Array of the RecordBatch rows.
   * @returns An Array of RecordBatch rows.
   */
  toArray() {
    return [...this];
  }
  /**
   * Combines two or more RecordBatch of the same schema.
   * @param others Additional RecordBatch to add to the end of this RecordBatch.
   */
  concat(...others) {
    return new Table(this.schema, [this, ...others]);
  }
  /**
   * Return a zero-copy sub-section of this RecordBatch.
   * @param start The beginning of the specified portion of the RecordBatch.
   * @param end The end of the specified portion of the RecordBatch. This is exclusive of the element at the index 'end'.
   */
  slice(begin, end) {
    const [slice5] = new Vector([this.data]).slice(begin, end).data;
    return new _RecordBatch(this.schema, slice5);
  }
  /**
   * Returns a child Vector by name, or null if this Vector has no child with the given name.
   * @param name The name of the child to retrieve.
   */
  getChild(name2) {
    var _b3;
    return this.getChildAt((_b3 = this.schema.fields) === null || _b3 === void 0 ? void 0 : _b3.findIndex((f2) => f2.name === name2));
  }
  /**
   * Returns a child Vector by index, or null if this Vector has no child at the supplied index.
   * @param index The index of the child to retrieve.
   */
  getChildAt(index2) {
    if (index2 > -1 && index2 < this.schema.fields.length) {
      return new Vector([this.data.children[index2]]);
    }
    return null;
  }
  /**
   * Sets a child Vector by name.
   * @param name The name of the child to overwrite.
   * @returns A new RecordBatch with the new child for the specified name.
   */
  setChild(name2, child) {
    var _b3;
    return this.setChildAt((_b3 = this.schema.fields) === null || _b3 === void 0 ? void 0 : _b3.findIndex((f2) => f2.name === name2), child);
  }
  setChildAt(index2, child) {
    let schema = this.schema;
    let data = this.data;
    if (index2 > -1 && index2 < this.numCols) {
      if (!child) {
        child = new Vector([makeData({ type: new Null(), length: this.numRows })]);
      }
      const fields = schema.fields.slice();
      const children2 = data.children.slice();
      const field2 = fields[index2].clone({ type: child.type });
      [fields[index2], children2[index2]] = [field2, child.data[0]];
      schema = new Schema2(fields, new Map(this.schema.metadata));
      data = makeData({ type: new Struct(fields), children: children2 });
    }
    return new _RecordBatch(schema, data);
  }
  /**
   * Construct a new RecordBatch containing only specified columns.
   *
   * @param columnNames Names of columns to keep.
   * @returns A new RecordBatch of columns matching the specified names.
   */
  select(columnNames) {
    const schema = this.schema.select(columnNames);
    const type2 = new Struct(schema.fields);
    const children2 = [];
    for (const name2 of columnNames) {
      const index2 = this.schema.fields.findIndex((f2) => f2.name === name2);
      if (~index2) {
        children2[index2] = this.data.children[index2];
      }
    }
    return new _RecordBatch(schema, makeData({ type: type2, length: this.numRows, children: children2 }));
  }
  /**
   * Construct a new RecordBatch containing only columns at the specified indices.
   *
   * @param columnIndices Indices of columns to keep.
   * @returns A new RecordBatch of columns matching at the specified indices.
   */
  selectAt(columnIndices) {
    const schema = this.schema.selectAt(columnIndices);
    const children2 = columnIndices.map((i2) => this.data.children[i2]).filter(Boolean);
    const subset = makeData({ type: new Struct(schema.fields), length: this.numRows, children: children2 });
    return new _RecordBatch(schema, subset);
  }
};
_a4 = Symbol.toStringTag;
RecordBatch[_a4] = ((proto) => {
  proto._nullCount = -1;
  proto[Symbol.isConcatSpreadable] = true;
  return "RecordBatch";
})(RecordBatch.prototype);
function ensureSameLengthData(schema, chunks, maxLength = chunks.reduce((max4, col) => Math.max(max4, col.length), 0)) {
  var _b3;
  const fields = [...schema.fields];
  const children2 = [...chunks];
  const nullBitmapSize = (maxLength + 63 & ~63) >> 3;
  for (const [idx, field2] of schema.fields.entries()) {
    const chunk = chunks[idx];
    if (!chunk || chunk.length !== maxLength) {
      fields[idx] = field2.clone({ nullable: true });
      children2[idx] = (_b3 = chunk === null || chunk === void 0 ? void 0 : chunk._changeLengthAndBackfillNullBitmap(maxLength)) !== null && _b3 !== void 0 ? _b3 : makeData({
        type: field2.type,
        length: maxLength,
        nullCount: maxLength,
        nullBitmap: new Uint8Array(nullBitmapSize)
      });
    }
  }
  return [
    schema.assign(fields),
    makeData({ type: new Struct(fields), length: maxLength, children: children2 })
  ];
}
function collectDictionaries(fields, children2, dictionaries = /* @__PURE__ */ new Map()) {
  for (let i2 = -1, n = fields.length; ++i2 < n; ) {
    const field2 = fields[i2];
    const type2 = field2.type;
    const data = children2[i2];
    if (DataType.isDictionary(type2)) {
      if (!dictionaries.has(type2.id)) {
        if (data.dictionary) {
          dictionaries.set(type2.id, data.dictionary);
        }
      } else if (dictionaries.get(type2.id) !== data.dictionary) {
        throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);
      }
    }
    if (type2.children && type2.children.length > 0) {
      collectDictionaries(type2.children, data.children, dictionaries);
    }
  }
  return dictionaries;
}
var _InternalEmptyPlaceholderRecordBatch = class extends RecordBatch {
  constructor(schema) {
    const children2 = schema.fields.map((f2) => makeData({ type: f2.type }));
    const data = makeData({ type: new Struct(schema.fields), nullCount: 0, children: children2 });
    super(schema, data);
  }
};

// ../core/node_modules/apache-arrow/fb/body-compression-method.mjs
var BodyCompressionMethod;
(function(BodyCompressionMethod3) {
  BodyCompressionMethod3[BodyCompressionMethod3["BUFFER"] = 0] = "BUFFER";
})(BodyCompressionMethod || (BodyCompressionMethod = {}));

// ../core/node_modules/apache-arrow/fb/compression-type.mjs
var CompressionType;
(function(CompressionType3) {
  CompressionType3[CompressionType3["LZ4_FRAME"] = 0] = "LZ4_FRAME";
  CompressionType3[CompressionType3["ZSTD"] = 1] = "ZSTD";
})(CompressionType || (CompressionType = {}));

// ../core/node_modules/apache-arrow/fb/body-compression.mjs
var BodyCompression = class _BodyCompression {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsBodyCompression(bb2, obj) {
    return (obj || new _BodyCompression()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsBodyCompression(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _BodyCompression()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * Compressor library.
   * For LZ4_FRAME, each compressed buffer must consist of a single frame.
   */
  codec() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt8(this.bb_pos + offset2) : CompressionType.LZ4_FRAME;
  }
  /**
   * Indicates the way the record batch body was compressed
   */
  method() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.readInt8(this.bb_pos + offset2) : BodyCompressionMethod.BUFFER;
  }
  static startBodyCompression(builder) {
    builder.startObject(2);
  }
  static addCodec(builder, codec) {
    builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);
  }
  static addMethod(builder, method) {
    builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);
  }
  static endBodyCompression(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createBodyCompression(builder, codec, method) {
    _BodyCompression.startBodyCompression(builder);
    _BodyCompression.addCodec(builder, codec);
    _BodyCompression.addMethod(builder, method);
    return _BodyCompression.endBodyCompression(builder);
  }
};

// ../core/node_modules/apache-arrow/fb/buffer.mjs
var Buffer2 = class {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  /**
   * The relative offset into the shared memory page where the bytes for this
   * buffer starts
   */
  offset() {
    return this.bb.readInt64(this.bb_pos);
  }
  /**
   * The absolute length (in bytes) of the memory buffer. The memory is found
   * from offset (inclusive) to offset + length (non-inclusive). When building
   * messages using the encapsulated IPC message, padding bytes may be written
   * after a buffer, but such padding bytes do not need to be accounted for in
   * the size here.
   */
  length() {
    return this.bb.readInt64(this.bb_pos + 8);
  }
  static sizeOf() {
    return 16;
  }
  static createBuffer(builder, offset2, length4) {
    builder.prep(8, 16);
    builder.writeInt64(BigInt(length4 !== null && length4 !== void 0 ? length4 : 0));
    builder.writeInt64(BigInt(offset2 !== null && offset2 !== void 0 ? offset2 : 0));
    return builder.offset();
  }
};

// ../core/node_modules/apache-arrow/fb/field-node.mjs
var FieldNode = class {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  /**
   * The number of value slots in the Arrow array at this level of a nested
   * tree
   */
  length() {
    return this.bb.readInt64(this.bb_pos);
  }
  /**
   * The number of observed nulls. Fields with null_count == 0 may choose not
   * to write their physical validity bitmap out as a materialized buffer,
   * instead setting the length of the bitmap buffer to 0.
   */
  nullCount() {
    return this.bb.readInt64(this.bb_pos + 8);
  }
  static sizeOf() {
    return 16;
  }
  static createFieldNode(builder, length4, null_count) {
    builder.prep(8, 16);
    builder.writeInt64(BigInt(null_count !== null && null_count !== void 0 ? null_count : 0));
    builder.writeInt64(BigInt(length4 !== null && length4 !== void 0 ? length4 : 0));
    return builder.offset();
  }
};

// ../core/node_modules/apache-arrow/fb/record-batch.mjs
var RecordBatch2 = class _RecordBatch {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsRecordBatch(bb2, obj) {
    return (obj || new _RecordBatch()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsRecordBatch(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _RecordBatch()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * number of records / rows. The arrays in the batch should all have this
   * length
   */
  length() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt64(this.bb_pos + offset2) : BigInt("0");
  }
  /**
   * Nodes correspond to the pre-ordered flattened logical schema
   */
  nodes(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? (obj || new FieldNode()).__init(this.bb.__vector(this.bb_pos + offset2) + index2 * 16, this.bb) : null;
  }
  nodesLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  /**
   * Buffers correspond to the pre-ordered flattened buffer tree
   *
   * The number of buffers appended to this list depends on the schema. For
   * example, most primitive arrays will have 2 buffers, 1 for the validity
   * bitmap and 1 for the values. For struct arrays, there will only be a
   * single buffer for the validity (nulls) bitmap
   */
  buffers(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? (obj || new Buffer2()).__init(this.bb.__vector(this.bb_pos + offset2) + index2 * 16, this.bb) : null;
  }
  buffersLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  /**
   * Optional compression of the message body
   */
  compression(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? (obj || new BodyCompression()).__init(this.bb.__indirect(this.bb_pos + offset2), this.bb) : null;
  }
  static startRecordBatch(builder) {
    builder.startObject(4);
  }
  static addLength(builder, length4) {
    builder.addFieldInt64(0, length4, BigInt("0"));
  }
  static addNodes(builder, nodesOffset) {
    builder.addFieldOffset(1, nodesOffset, 0);
  }
  static startNodesVector(builder, numElems) {
    builder.startVector(16, numElems, 8);
  }
  static addBuffers(builder, buffersOffset) {
    builder.addFieldOffset(2, buffersOffset, 0);
  }
  static startBuffersVector(builder, numElems) {
    builder.startVector(16, numElems, 8);
  }
  static addCompression(builder, compressionOffset) {
    builder.addFieldOffset(3, compressionOffset, 0);
  }
  static endRecordBatch(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
};

// ../core/node_modules/apache-arrow/fb/dictionary-batch.mjs
var DictionaryBatch = class _DictionaryBatch {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsDictionaryBatch(bb2, obj) {
    return (obj || new _DictionaryBatch()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsDictionaryBatch(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _DictionaryBatch()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  id() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt64(this.bb_pos + offset2) : BigInt("0");
  }
  data(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? (obj || new RecordBatch2()).__init(this.bb.__indirect(this.bb_pos + offset2), this.bb) : null;
  }
  /**
   * If isDelta is true the values in the dictionary are to be appended to a
   * dictionary with the indicated id. If isDelta is false this dictionary
   * should replace the existing dictionary.
   */
  isDelta() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? !!this.bb.readInt8(this.bb_pos + offset2) : false;
  }
  static startDictionaryBatch(builder) {
    builder.startObject(3);
  }
  static addId(builder, id2) {
    builder.addFieldInt64(0, id2, BigInt("0"));
  }
  static addData(builder, dataOffset) {
    builder.addFieldOffset(1, dataOffset, 0);
  }
  static addIsDelta(builder, isDelta) {
    builder.addFieldInt8(2, +isDelta, 0);
  }
  static endDictionaryBatch(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
};

// ../core/node_modules/apache-arrow/fb/message-header.mjs
var MessageHeader2;
(function(MessageHeader5) {
  MessageHeader5[MessageHeader5["NONE"] = 0] = "NONE";
  MessageHeader5[MessageHeader5["Schema"] = 1] = "Schema";
  MessageHeader5[MessageHeader5["DictionaryBatch"] = 2] = "DictionaryBatch";
  MessageHeader5[MessageHeader5["RecordBatch"] = 3] = "RecordBatch";
  MessageHeader5[MessageHeader5["Tensor"] = 4] = "Tensor";
  MessageHeader5[MessageHeader5["SparseTensor"] = 5] = "SparseTensor";
})(MessageHeader2 || (MessageHeader2 = {}));

// ../core/node_modules/apache-arrow/fb/message.mjs
var Message = class _Message {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsMessage(bb2, obj) {
    return (obj || new _Message()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsMessage(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH);
    return (obj || new _Message()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  version() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : MetadataVersion2.V1;
  }
  headerType() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.readUint8(this.bb_pos + offset2) : MessageHeader2.NONE;
  }
  header(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.__union(obj, this.bb_pos + offset2) : null;
  }
  bodyLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.readInt64(this.bb_pos + offset2) : BigInt("0");
  }
  customMetadata(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 12);
    return offset2 ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  customMetadataLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 12);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  static startMessage(builder) {
    builder.startObject(5);
  }
  static addVersion(builder, version) {
    builder.addFieldInt16(0, version, MetadataVersion2.V1);
  }
  static addHeaderType(builder, headerType) {
    builder.addFieldInt8(1, headerType, MessageHeader2.NONE);
  }
  static addHeader(builder, headerOffset) {
    builder.addFieldOffset(2, headerOffset, 0);
  }
  static addBodyLength(builder, bodyLength) {
    builder.addFieldInt64(3, bodyLength, BigInt("0"));
  }
  static addCustomMetadata(builder, customMetadataOffset) {
    builder.addFieldOffset(4, customMetadataOffset, 0);
  }
  static createCustomMetadataVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startCustomMetadataVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static endMessage(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static finishMessageBuffer(builder, offset2) {
    builder.finish(offset2);
  }
  static finishSizePrefixedMessageBuffer(builder, offset2) {
    builder.finish(offset2, void 0, true);
  }
  static createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {
    _Message.startMessage(builder);
    _Message.addVersion(builder, version);
    _Message.addHeaderType(builder, headerType);
    _Message.addHeader(builder, headerOffset);
    _Message.addBodyLength(builder, bodyLength);
    _Message.addCustomMetadata(builder, customMetadataOffset);
    return _Message.endMessage(builder);
  }
};

// ../core/node_modules/apache-arrow/visitor/typeassembler.mjs
var TypeAssembler = class extends Visitor {
  visit(node, builder) {
    return node == null || builder == null ? void 0 : super.visit(node, builder);
  }
  visitNull(_node, b2) {
    Null2.startNull(b2);
    return Null2.endNull(b2);
  }
  visitInt(node, b2) {
    Int.startInt(b2);
    Int.addBitWidth(b2, node.bitWidth);
    Int.addIsSigned(b2, node.isSigned);
    return Int.endInt(b2);
  }
  visitFloat(node, b2) {
    FloatingPoint.startFloatingPoint(b2);
    FloatingPoint.addPrecision(b2, node.precision);
    return FloatingPoint.endFloatingPoint(b2);
  }
  visitBinary(_node, b2) {
    Binary2.startBinary(b2);
    return Binary2.endBinary(b2);
  }
  visitBool(_node, b2) {
    Bool2.startBool(b2);
    return Bool2.endBool(b2);
  }
  visitUtf8(_node, b2) {
    Utf82.startUtf8(b2);
    return Utf82.endUtf8(b2);
  }
  visitDecimal(node, b2) {
    Decimal2.startDecimal(b2);
    Decimal2.addScale(b2, node.scale);
    Decimal2.addPrecision(b2, node.precision);
    Decimal2.addBitWidth(b2, node.bitWidth);
    return Decimal2.endDecimal(b2);
  }
  visitDate(node, b2) {
    Date2.startDate(b2);
    Date2.addUnit(b2, node.unit);
    return Date2.endDate(b2);
  }
  visitTime(node, b2) {
    Time.startTime(b2);
    Time.addUnit(b2, node.unit);
    Time.addBitWidth(b2, node.bitWidth);
    return Time.endTime(b2);
  }
  visitTimestamp(node, b2) {
    const timezone = node.timezone && b2.createString(node.timezone) || void 0;
    Timestamp.startTimestamp(b2);
    Timestamp.addUnit(b2, node.unit);
    if (timezone !== void 0) {
      Timestamp.addTimezone(b2, timezone);
    }
    return Timestamp.endTimestamp(b2);
  }
  visitInterval(node, b2) {
    Interval.startInterval(b2);
    Interval.addUnit(b2, node.unit);
    return Interval.endInterval(b2);
  }
  visitList(_node, b2) {
    List2.startList(b2);
    return List2.endList(b2);
  }
  visitStruct(_node, b2) {
    Struct_.startStruct_(b2);
    return Struct_.endStruct_(b2);
  }
  visitUnion(node, b2) {
    Union.startTypeIdsVector(b2, node.typeIds.length);
    const typeIds = Union.createTypeIdsVector(b2, node.typeIds);
    Union.startUnion(b2);
    Union.addMode(b2, node.mode);
    Union.addTypeIds(b2, typeIds);
    return Union.endUnion(b2);
  }
  visitDictionary(node, b2) {
    const indexType = this.visit(node.indices, b2);
    DictionaryEncoding.startDictionaryEncoding(b2);
    DictionaryEncoding.addId(b2, BigInt(node.id));
    DictionaryEncoding.addIsOrdered(b2, node.isOrdered);
    if (indexType !== void 0) {
      DictionaryEncoding.addIndexType(b2, indexType);
    }
    return DictionaryEncoding.endDictionaryEncoding(b2);
  }
  visitFixedSizeBinary(node, b2) {
    FixedSizeBinary2.startFixedSizeBinary(b2);
    FixedSizeBinary2.addByteWidth(b2, node.byteWidth);
    return FixedSizeBinary2.endFixedSizeBinary(b2);
  }
  visitFixedSizeList(node, b2) {
    FixedSizeList2.startFixedSizeList(b2);
    FixedSizeList2.addListSize(b2, node.listSize);
    return FixedSizeList2.endFixedSizeList(b2);
  }
  visitMap(node, b2) {
    Map2.startMap(b2);
    Map2.addKeysSorted(b2, node.keysSorted);
    return Map2.endMap(b2);
  }
};
var instance8 = new TypeAssembler();

// ../core/node_modules/apache-arrow/ipc/metadata/json.mjs
function schemaFromJSON(_schema, dictionaries = /* @__PURE__ */ new Map()) {
  return new Schema2(schemaFieldsFromJSON(_schema, dictionaries), customMetadataFromJSON(_schema["customMetadata"]), dictionaries);
}
function recordBatchFromJSON(b2) {
  return new RecordBatch3(b2["count"], fieldNodesFromJSON(b2["columns"]), buffersFromJSON(b2["columns"]));
}
function dictionaryBatchFromJSON(b2) {
  return new DictionaryBatch2(recordBatchFromJSON(b2["data"]), b2["id"], b2["isDelta"]);
}
function schemaFieldsFromJSON(_schema, dictionaries) {
  return (_schema["fields"] || []).filter(Boolean).map((f2) => Field2.fromJSON(f2, dictionaries));
}
function fieldChildrenFromJSON(_field, dictionaries) {
  return (_field["children"] || []).filter(Boolean).map((f2) => Field2.fromJSON(f2, dictionaries));
}
function fieldNodesFromJSON(xs) {
  return (xs || []).reduce((fieldNodes, column3) => [
    ...fieldNodes,
    new FieldNode2(column3["count"], nullCountFromJSON(column3["VALIDITY"])),
    ...fieldNodesFromJSON(column3["children"])
  ], []);
}
function buffersFromJSON(xs, buffers = []) {
  for (let i2 = -1, n = (xs || []).length; ++i2 < n; ) {
    const column3 = xs[i2];
    column3["VALIDITY"] && buffers.push(new BufferRegion(buffers.length, column3["VALIDITY"].length));
    column3["TYPE"] && buffers.push(new BufferRegion(buffers.length, column3["TYPE"].length));
    column3["OFFSET"] && buffers.push(new BufferRegion(buffers.length, column3["OFFSET"].length));
    column3["DATA"] && buffers.push(new BufferRegion(buffers.length, column3["DATA"].length));
    buffers = buffersFromJSON(column3["children"], buffers);
  }
  return buffers;
}
function nullCountFromJSON(validity) {
  return (validity || []).reduce((sum6, val) => sum6 + +(val === 0), 0);
}
function fieldFromJSON(_field, dictionaries) {
  let id2;
  let keys;
  let field2;
  let dictMeta;
  let type2;
  let dictType;
  if (!dictionaries || !(dictMeta = _field["dictionary"])) {
    type2 = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));
    field2 = new Field2(_field["name"], type2, _field["nullable"], customMetadataFromJSON(_field["customMetadata"]));
  } else if (!dictionaries.has(id2 = dictMeta["id"])) {
    keys = (keys = dictMeta["indexType"]) ? indexTypeFromJSON(keys) : new Int32();
    dictionaries.set(id2, type2 = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));
    dictType = new Dictionary(type2, keys, id2, dictMeta["isOrdered"]);
    field2 = new Field2(_field["name"], dictType, _field["nullable"], customMetadataFromJSON(_field["customMetadata"]));
  } else {
    keys = (keys = dictMeta["indexType"]) ? indexTypeFromJSON(keys) : new Int32();
    dictType = new Dictionary(dictionaries.get(id2), keys, id2, dictMeta["isOrdered"]);
    field2 = new Field2(_field["name"], dictType, _field["nullable"], customMetadataFromJSON(_field["customMetadata"]));
  }
  return field2 || null;
}
function customMetadataFromJSON(_metadata) {
  return new Map(Object.entries(_metadata || {}));
}
function indexTypeFromJSON(_type) {
  return new Int_(_type["isSigned"], _type["bitWidth"]);
}
function typeFromJSON(f2, children2) {
  const typeId = f2["type"]["name"];
  switch (typeId) {
    case "NONE":
      return new Null();
    case "null":
      return new Null();
    case "binary":
      return new Binary();
    case "utf8":
      return new Utf8();
    case "bool":
      return new Bool();
    case "list":
      return new List((children2 || [])[0]);
    case "struct":
      return new Struct(children2 || []);
    case "struct_":
      return new Struct(children2 || []);
  }
  switch (typeId) {
    case "int": {
      const t = f2["type"];
      return new Int_(t["isSigned"], t["bitWidth"]);
    }
    case "floatingpoint": {
      const t = f2["type"];
      return new Float(Precision[t["precision"]]);
    }
    case "decimal": {
      const t = f2["type"];
      return new Decimal(t["scale"], t["precision"], t["bitWidth"]);
    }
    case "date": {
      const t = f2["type"];
      return new Date_(DateUnit[t["unit"]]);
    }
    case "time": {
      const t = f2["type"];
      return new Time_(TimeUnit[t["unit"]], t["bitWidth"]);
    }
    case "timestamp": {
      const t = f2["type"];
      return new Timestamp_(TimeUnit[t["unit"]], t["timezone"]);
    }
    case "interval": {
      const t = f2["type"];
      return new Interval_(IntervalUnit[t["unit"]]);
    }
    case "union": {
      const t = f2["type"];
      return new Union_(UnionMode[t["mode"]], t["typeIds"] || [], children2 || []);
    }
    case "fixedsizebinary": {
      const t = f2["type"];
      return new FixedSizeBinary(t["byteWidth"]);
    }
    case "fixedsizelist": {
      const t = f2["type"];
      return new FixedSizeList(t["listSize"], (children2 || [])[0]);
    }
    case "map": {
      const t = f2["type"];
      return new Map_((children2 || [])[0], t["keysSorted"]);
    }
  }
  throw new Error(`Unrecognized type: "${typeId}"`);
}

// ../core/node_modules/apache-arrow/ipc/metadata/message.mjs
var Builder4 = Builder2;
var ByteBuffer3 = ByteBuffer;
var Message2 = class _Message {
  /** @nocollapse */
  static fromJSON(msg, headerType) {
    const message = new _Message(0, MetadataVersion.V4, headerType);
    message._createHeader = messageHeaderFromJSON(msg, headerType);
    return message;
  }
  /** @nocollapse */
  static decode(buf) {
    buf = new ByteBuffer3(toUint8Array(buf));
    const _message = Message.getRootAsMessage(buf);
    const bodyLength = _message.bodyLength();
    const version = _message.version();
    const headerType = _message.headerType();
    const message = new _Message(bodyLength, version, headerType);
    message._createHeader = decodeMessageHeader(_message, headerType);
    return message;
  }
  /** @nocollapse */
  static encode(message) {
    const b2 = new Builder4();
    let headerOffset = -1;
    if (message.isSchema()) {
      headerOffset = Schema2.encode(b2, message.header());
    } else if (message.isRecordBatch()) {
      headerOffset = RecordBatch3.encode(b2, message.header());
    } else if (message.isDictionaryBatch()) {
      headerOffset = DictionaryBatch2.encode(b2, message.header());
    }
    Message.startMessage(b2);
    Message.addVersion(b2, MetadataVersion.V4);
    Message.addHeader(b2, headerOffset);
    Message.addHeaderType(b2, message.headerType);
    Message.addBodyLength(b2, BigInt(message.bodyLength));
    Message.finishMessageBuffer(b2, Message.endMessage(b2));
    return b2.asUint8Array();
  }
  /** @nocollapse */
  static from(header, bodyLength = 0) {
    if (header instanceof Schema2) {
      return new _Message(0, MetadataVersion.V4, MessageHeader.Schema, header);
    }
    if (header instanceof RecordBatch3) {
      return new _Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);
    }
    if (header instanceof DictionaryBatch2) {
      return new _Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);
    }
    throw new Error(`Unrecognized Message header: ${header}`);
  }
  get type() {
    return this.headerType;
  }
  get version() {
    return this._version;
  }
  get headerType() {
    return this._headerType;
  }
  get bodyLength() {
    return this._bodyLength;
  }
  header() {
    return this._createHeader();
  }
  isSchema() {
    return this.headerType === MessageHeader.Schema;
  }
  isRecordBatch() {
    return this.headerType === MessageHeader.RecordBatch;
  }
  isDictionaryBatch() {
    return this.headerType === MessageHeader.DictionaryBatch;
  }
  constructor(bodyLength, version, headerType, header) {
    this._version = version;
    this._headerType = headerType;
    this.body = new Uint8Array(0);
    header && (this._createHeader = () => header);
    this._bodyLength = bigIntToNumber(bodyLength);
  }
};
var RecordBatch3 = class {
  get nodes() {
    return this._nodes;
  }
  get length() {
    return this._length;
  }
  get buffers() {
    return this._buffers;
  }
  constructor(length4, nodes, buffers) {
    this._nodes = nodes;
    this._buffers = buffers;
    this._length = bigIntToNumber(length4);
  }
};
var DictionaryBatch2 = class {
  get id() {
    return this._id;
  }
  get data() {
    return this._data;
  }
  get isDelta() {
    return this._isDelta;
  }
  get length() {
    return this.data.length;
  }
  get nodes() {
    return this.data.nodes;
  }
  get buffers() {
    return this.data.buffers;
  }
  constructor(data, id2, isDelta = false) {
    this._data = data;
    this._isDelta = isDelta;
    this._id = bigIntToNumber(id2);
  }
};
var BufferRegion = class {
  constructor(offset2, length4) {
    this.offset = bigIntToNumber(offset2);
    this.length = bigIntToNumber(length4);
  }
};
var FieldNode2 = class {
  constructor(length4, nullCount) {
    this.length = bigIntToNumber(length4);
    this.nullCount = bigIntToNumber(nullCount);
  }
};
function messageHeaderFromJSON(message, type2) {
  return () => {
    switch (type2) {
      case MessageHeader.Schema:
        return Schema2.fromJSON(message);
      case MessageHeader.RecordBatch:
        return RecordBatch3.fromJSON(message);
      case MessageHeader.DictionaryBatch:
        return DictionaryBatch2.fromJSON(message);
    }
    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type2]}, type: ${type2} }`);
  };
}
function decodeMessageHeader(message, type2) {
  return () => {
    switch (type2) {
      case MessageHeader.Schema:
        return Schema2.decode(message.header(new Schema()));
      case MessageHeader.RecordBatch:
        return RecordBatch3.decode(message.header(new RecordBatch2()), message.version());
      case MessageHeader.DictionaryBatch:
        return DictionaryBatch2.decode(message.header(new DictionaryBatch()), message.version());
    }
    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type2]}, type: ${type2} }`);
  };
}
Field2["encode"] = encodeField;
Field2["decode"] = decodeField;
Field2["fromJSON"] = fieldFromJSON;
Schema2["encode"] = encodeSchema;
Schema2["decode"] = decodeSchema;
Schema2["fromJSON"] = schemaFromJSON;
RecordBatch3["encode"] = encodeRecordBatch;
RecordBatch3["decode"] = decodeRecordBatch;
RecordBatch3["fromJSON"] = recordBatchFromJSON;
DictionaryBatch2["encode"] = encodeDictionaryBatch;
DictionaryBatch2["decode"] = decodeDictionaryBatch;
DictionaryBatch2["fromJSON"] = dictionaryBatchFromJSON;
FieldNode2["encode"] = encodeFieldNode;
FieldNode2["decode"] = decodeFieldNode;
BufferRegion["encode"] = encodeBufferRegion;
BufferRegion["decode"] = decodeBufferRegion;
function decodeSchema(_schema, dictionaries = /* @__PURE__ */ new Map()) {
  const fields = decodeSchemaFields(_schema, dictionaries);
  return new Schema2(fields, decodeCustomMetadata(_schema), dictionaries);
}
function decodeRecordBatch(batch, version = MetadataVersion.V4) {
  if (batch.compression() !== null) {
    throw new Error("Record batch compression not implemented");
  }
  return new RecordBatch3(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));
}
function decodeDictionaryBatch(batch, version = MetadataVersion.V4) {
  return new DictionaryBatch2(RecordBatch3.decode(batch.data(), version), batch.id(), batch.isDelta());
}
function decodeBufferRegion(b2) {
  return new BufferRegion(b2.offset(), b2.length());
}
function decodeFieldNode(f2) {
  return new FieldNode2(f2.length(), f2.nullCount());
}
function decodeFieldNodes(batch) {
  const nodes = [];
  for (let f2, i2 = -1, j2 = -1, n = batch.nodesLength(); ++i2 < n; ) {
    if (f2 = batch.nodes(i2)) {
      nodes[++j2] = FieldNode2.decode(f2);
    }
  }
  return nodes;
}
function decodeBuffers(batch, version) {
  const bufferRegions = [];
  for (let b2, i2 = -1, j2 = -1, n = batch.buffersLength(); ++i2 < n; ) {
    if (b2 = batch.buffers(i2)) {
      if (version < MetadataVersion.V4) {
        b2.bb_pos += 8 * (i2 + 1);
      }
      bufferRegions[++j2] = BufferRegion.decode(b2);
    }
  }
  return bufferRegions;
}
function decodeSchemaFields(schema, dictionaries) {
  const fields = [];
  for (let f2, i2 = -1, j2 = -1, n = schema.fieldsLength(); ++i2 < n; ) {
    if (f2 = schema.fields(i2)) {
      fields[++j2] = Field2.decode(f2, dictionaries);
    }
  }
  return fields;
}
function decodeFieldChildren(field2, dictionaries) {
  const children2 = [];
  for (let f2, i2 = -1, j2 = -1, n = field2.childrenLength(); ++i2 < n; ) {
    if (f2 = field2.children(i2)) {
      children2[++j2] = Field2.decode(f2, dictionaries);
    }
  }
  return children2;
}
function decodeField(f2, dictionaries) {
  let id2;
  let field2;
  let type2;
  let keys;
  let dictType;
  let dictMeta;
  if (!dictionaries || !(dictMeta = f2.dictionary())) {
    type2 = decodeFieldType(f2, decodeFieldChildren(f2, dictionaries));
    field2 = new Field2(f2.name(), type2, f2.nullable(), decodeCustomMetadata(f2));
  } else if (!dictionaries.has(id2 = bigIntToNumber(dictMeta.id()))) {
    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();
    dictionaries.set(id2, type2 = decodeFieldType(f2, decodeFieldChildren(f2, dictionaries)));
    dictType = new Dictionary(type2, keys, id2, dictMeta.isOrdered());
    field2 = new Field2(f2.name(), dictType, f2.nullable(), decodeCustomMetadata(f2));
  } else {
    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();
    dictType = new Dictionary(dictionaries.get(id2), keys, id2, dictMeta.isOrdered());
    field2 = new Field2(f2.name(), dictType, f2.nullable(), decodeCustomMetadata(f2));
  }
  return field2 || null;
}
function decodeCustomMetadata(parent) {
  const data = /* @__PURE__ */ new Map();
  if (parent) {
    for (let entry, key, i2 = -1, n = Math.trunc(parent.customMetadataLength()); ++i2 < n; ) {
      if ((entry = parent.customMetadata(i2)) && (key = entry.key()) != null) {
        data.set(key, entry.value());
      }
    }
  }
  return data;
}
function decodeIndexType(_type) {
  return new Int_(_type.isSigned(), _type.bitWidth());
}
function decodeFieldType(f2, children2) {
  const typeId = f2.typeType();
  switch (typeId) {
    case Type2["NONE"]:
      return new Null();
    case Type2["Null"]:
      return new Null();
    case Type2["Binary"]:
      return new Binary();
    case Type2["Utf8"]:
      return new Utf8();
    case Type2["Bool"]:
      return new Bool();
    case Type2["List"]:
      return new List((children2 || [])[0]);
    case Type2["Struct_"]:
      return new Struct(children2 || []);
  }
  switch (typeId) {
    case Type2["Int"]: {
      const t = f2.type(new Int());
      return new Int_(t.isSigned(), t.bitWidth());
    }
    case Type2["FloatingPoint"]: {
      const t = f2.type(new FloatingPoint());
      return new Float(t.precision());
    }
    case Type2["Decimal"]: {
      const t = f2.type(new Decimal2());
      return new Decimal(t.scale(), t.precision(), t.bitWidth());
    }
    case Type2["Date"]: {
      const t = f2.type(new Date2());
      return new Date_(t.unit());
    }
    case Type2["Time"]: {
      const t = f2.type(new Time());
      return new Time_(t.unit(), t.bitWidth());
    }
    case Type2["Timestamp"]: {
      const t = f2.type(new Timestamp());
      return new Timestamp_(t.unit(), t.timezone());
    }
    case Type2["Interval"]: {
      const t = f2.type(new Interval());
      return new Interval_(t.unit());
    }
    case Type2["Union"]: {
      const t = f2.type(new Union());
      return new Union_(t.mode(), t.typeIdsArray() || [], children2 || []);
    }
    case Type2["FixedSizeBinary"]: {
      const t = f2.type(new FixedSizeBinary2());
      return new FixedSizeBinary(t.byteWidth());
    }
    case Type2["FixedSizeList"]: {
      const t = f2.type(new FixedSizeList2());
      return new FixedSizeList(t.listSize(), (children2 || [])[0]);
    }
    case Type2["Map"]: {
      const t = f2.type(new Map2());
      return new Map_((children2 || [])[0], t.keysSorted());
    }
  }
  throw new Error(`Unrecognized type: "${Type2[typeId]}" (${typeId})`);
}
function encodeSchema(b2, schema) {
  const fieldOffsets = schema.fields.map((f2) => Field2.encode(b2, f2));
  Schema.startFieldsVector(b2, fieldOffsets.length);
  const fieldsVectorOffset = Schema.createFieldsVector(b2, fieldOffsets);
  const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : Schema.createCustomMetadataVector(b2, [...schema.metadata].map(([k3, v3]) => {
    const key = b2.createString(`${k3}`);
    const val = b2.createString(`${v3}`);
    KeyValue.startKeyValue(b2);
    KeyValue.addKey(b2, key);
    KeyValue.addValue(b2, val);
    return KeyValue.endKeyValue(b2);
  }));
  Schema.startSchema(b2);
  Schema.addFields(b2, fieldsVectorOffset);
  Schema.addEndianness(b2, platformIsLittleEndian ? Endianness.Little : Endianness.Big);
  if (metadataOffset !== -1) {
    Schema.addCustomMetadata(b2, metadataOffset);
  }
  return Schema.endSchema(b2);
}
function encodeField(b2, field2) {
  let nameOffset = -1;
  let typeOffset = -1;
  let dictionaryOffset = -1;
  const type2 = field2.type;
  let typeId = field2.typeId;
  if (!DataType.isDictionary(type2)) {
    typeOffset = instance8.visit(type2, b2);
  } else {
    typeId = type2.dictionary.typeId;
    dictionaryOffset = instance8.visit(type2, b2);
    typeOffset = instance8.visit(type2.dictionary, b2);
  }
  const childOffsets = (type2.children || []).map((f2) => Field2.encode(b2, f2));
  const childrenVectorOffset = Field.createChildrenVector(b2, childOffsets);
  const metadataOffset = !(field2.metadata && field2.metadata.size > 0) ? -1 : Field.createCustomMetadataVector(b2, [...field2.metadata].map(([k3, v3]) => {
    const key = b2.createString(`${k3}`);
    const val = b2.createString(`${v3}`);
    KeyValue.startKeyValue(b2);
    KeyValue.addKey(b2, key);
    KeyValue.addValue(b2, val);
    return KeyValue.endKeyValue(b2);
  }));
  if (field2.name) {
    nameOffset = b2.createString(field2.name);
  }
  Field.startField(b2);
  Field.addType(b2, typeOffset);
  Field.addTypeType(b2, typeId);
  Field.addChildren(b2, childrenVectorOffset);
  Field.addNullable(b2, !!field2.nullable);
  if (nameOffset !== -1) {
    Field.addName(b2, nameOffset);
  }
  if (dictionaryOffset !== -1) {
    Field.addDictionary(b2, dictionaryOffset);
  }
  if (metadataOffset !== -1) {
    Field.addCustomMetadata(b2, metadataOffset);
  }
  return Field.endField(b2);
}
function encodeRecordBatch(b2, recordBatch) {
  const nodes = recordBatch.nodes || [];
  const buffers = recordBatch.buffers || [];
  RecordBatch2.startNodesVector(b2, nodes.length);
  for (const n of nodes.slice().reverse())
    FieldNode2.encode(b2, n);
  const nodesVectorOffset = b2.endVector();
  RecordBatch2.startBuffersVector(b2, buffers.length);
  for (const b_ of buffers.slice().reverse())
    BufferRegion.encode(b2, b_);
  const buffersVectorOffset = b2.endVector();
  RecordBatch2.startRecordBatch(b2);
  RecordBatch2.addLength(b2, BigInt(recordBatch.length));
  RecordBatch2.addNodes(b2, nodesVectorOffset);
  RecordBatch2.addBuffers(b2, buffersVectorOffset);
  return RecordBatch2.endRecordBatch(b2);
}
function encodeDictionaryBatch(b2, dictionaryBatch) {
  const dataOffset = RecordBatch3.encode(b2, dictionaryBatch.data);
  DictionaryBatch.startDictionaryBatch(b2);
  DictionaryBatch.addId(b2, BigInt(dictionaryBatch.id));
  DictionaryBatch.addIsDelta(b2, dictionaryBatch.isDelta);
  DictionaryBatch.addData(b2, dataOffset);
  return DictionaryBatch.endDictionaryBatch(b2);
}
function encodeFieldNode(b2, node) {
  return FieldNode.createFieldNode(b2, BigInt(node.length), BigInt(node.nullCount));
}
function encodeBufferRegion(b2, node) {
  return Buffer2.createBuffer(b2, BigInt(node.offset), BigInt(node.length));
}
var platformIsLittleEndian = (() => {
  const buffer = new ArrayBuffer(2);
  new DataView(buffer).setInt16(
    0,
    256,
    true
    /* littleEndian */
  );
  return new Int16Array(buffer)[0] === 256;
})();

// ../core/node_modules/apache-arrow/ipc/message.mjs
var invalidMessageType = (type2) => `Expected ${MessageHeader[type2]} Message in stream, but was null or length 0.`;
var nullMessage = (type2) => `Header pointer of flatbuffer-encoded ${MessageHeader[type2]} Message is null or length 0.`;
var invalidMessageMetadata = (expected, actual) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;
var invalidMessageBodyLength = (expected, actual) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;
var MessageReader = class {
  constructor(source) {
    this.source = source instanceof ByteStream ? source : new ByteStream(source);
  }
  [Symbol.iterator]() {
    return this;
  }
  next() {
    let r;
    if ((r = this.readMetadataLength()).done) {
      return ITERATOR_DONE;
    }
    if (r.value === -1 && (r = this.readMetadataLength()).done) {
      return ITERATOR_DONE;
    }
    if ((r = this.readMetadata(r.value)).done) {
      return ITERATOR_DONE;
    }
    return r;
  }
  throw(value) {
    return this.source.throw(value);
  }
  return(value) {
    return this.source.return(value);
  }
  readMessage(type2) {
    let r;
    if ((r = this.next()).done) {
      return null;
    }
    if (type2 != null && r.value.headerType !== type2) {
      throw new Error(invalidMessageType(type2));
    }
    return r.value;
  }
  readMessageBody(bodyLength) {
    if (bodyLength <= 0) {
      return new Uint8Array(0);
    }
    const buf = toUint8Array(this.source.read(bodyLength));
    if (buf.byteLength < bodyLength) {
      throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));
    }
    return (
      /* 1. */
      buf.byteOffset % 8 === 0 && /* 2. */
      buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice()
    );
  }
  readSchema(throwIfNull = false) {
    const type2 = MessageHeader.Schema;
    const message = this.readMessage(type2);
    const schema = message === null || message === void 0 ? void 0 : message.header();
    if (throwIfNull && !schema) {
      throw new Error(nullMessage(type2));
    }
    return schema;
  }
  readMetadataLength() {
    const buf = this.source.read(PADDING);
    const bb2 = buf && new ByteBuffer(buf);
    const len = (bb2 === null || bb2 === void 0 ? void 0 : bb2.readInt32(0)) || 0;
    return { done: len === 0, value: len };
  }
  readMetadata(metadataLength) {
    const buf = this.source.read(metadataLength);
    if (!buf) {
      return ITERATOR_DONE;
    }
    if (buf.byteLength < metadataLength) {
      throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));
    }
    return { done: false, value: Message2.decode(buf) };
  }
};
var AsyncMessageReader = class {
  constructor(source, byteLength) {
    this.source = source instanceof AsyncByteStream ? source : isFileHandle(source) ? new AsyncRandomAccessFile(source, byteLength) : new AsyncByteStream(source);
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  next() {
    return __awaiter(this, void 0, void 0, function* () {
      let r;
      if ((r = yield this.readMetadataLength()).done) {
        return ITERATOR_DONE;
      }
      if (r.value === -1 && (r = yield this.readMetadataLength()).done) {
        return ITERATOR_DONE;
      }
      if ((r = yield this.readMetadata(r.value)).done) {
        return ITERATOR_DONE;
      }
      return r;
    });
  }
  throw(value) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.source.throw(value);
    });
  }
  return(value) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.source.return(value);
    });
  }
  readMessage(type2) {
    return __awaiter(this, void 0, void 0, function* () {
      let r;
      if ((r = yield this.next()).done) {
        return null;
      }
      if (type2 != null && r.value.headerType !== type2) {
        throw new Error(invalidMessageType(type2));
      }
      return r.value;
    });
  }
  readMessageBody(bodyLength) {
    return __awaiter(this, void 0, void 0, function* () {
      if (bodyLength <= 0) {
        return new Uint8Array(0);
      }
      const buf = toUint8Array(yield this.source.read(bodyLength));
      if (buf.byteLength < bodyLength) {
        throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));
      }
      return (
        /* 1. */
        buf.byteOffset % 8 === 0 && /* 2. */
        buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice()
      );
    });
  }
  readSchema(throwIfNull = false) {
    return __awaiter(this, void 0, void 0, function* () {
      const type2 = MessageHeader.Schema;
      const message = yield this.readMessage(type2);
      const schema = message === null || message === void 0 ? void 0 : message.header();
      if (throwIfNull && !schema) {
        throw new Error(nullMessage(type2));
      }
      return schema;
    });
  }
  readMetadataLength() {
    return __awaiter(this, void 0, void 0, function* () {
      const buf = yield this.source.read(PADDING);
      const bb2 = buf && new ByteBuffer(buf);
      const len = (bb2 === null || bb2 === void 0 ? void 0 : bb2.readInt32(0)) || 0;
      return { done: len === 0, value: len };
    });
  }
  readMetadata(metadataLength) {
    return __awaiter(this, void 0, void 0, function* () {
      const buf = yield this.source.read(metadataLength);
      if (!buf) {
        return ITERATOR_DONE;
      }
      if (buf.byteLength < metadataLength) {
        throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));
      }
      return { done: false, value: Message2.decode(buf) };
    });
  }
};
var JSONMessageReader = class extends MessageReader {
  constructor(source) {
    super(new Uint8Array(0));
    this._schema = false;
    this._body = [];
    this._batchIndex = 0;
    this._dictionaryIndex = 0;
    this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);
  }
  next() {
    const { _json } = this;
    if (!this._schema) {
      this._schema = true;
      const message = Message2.fromJSON(_json.schema, MessageHeader.Schema);
      return { done: false, value: message };
    }
    if (this._dictionaryIndex < _json.dictionaries.length) {
      const batch = _json.dictionaries[this._dictionaryIndex++];
      this._body = batch["data"]["columns"];
      const message = Message2.fromJSON(batch, MessageHeader.DictionaryBatch);
      return { done: false, value: message };
    }
    if (this._batchIndex < _json.batches.length) {
      const batch = _json.batches[this._batchIndex++];
      this._body = batch["columns"];
      const message = Message2.fromJSON(batch, MessageHeader.RecordBatch);
      return { done: false, value: message };
    }
    this._body = [];
    return ITERATOR_DONE;
  }
  readMessageBody(_bodyLength) {
    return flattenDataSources(this._body);
    function flattenDataSources(xs) {
      return (xs || []).reduce((buffers, column3) => [
        ...buffers,
        ...column3["VALIDITY"] && [column3["VALIDITY"]] || [],
        ...column3["TYPE"] && [column3["TYPE"]] || [],
        ...column3["OFFSET"] && [column3["OFFSET"]] || [],
        ...column3["DATA"] && [column3["DATA"]] || [],
        ...flattenDataSources(column3["children"])
      ], []);
    }
  }
  readMessage(type2) {
    let r;
    if ((r = this.next()).done) {
      return null;
    }
    if (type2 != null && r.value.headerType !== type2) {
      throw new Error(invalidMessageType(type2));
    }
    return r.value;
  }
  readSchema() {
    const type2 = MessageHeader.Schema;
    const message = this.readMessage(type2);
    const schema = message === null || message === void 0 ? void 0 : message.header();
    if (!message || !schema) {
      throw new Error(nullMessage(type2));
    }
    return schema;
  }
};
var PADDING = 4;
var MAGIC_STR = "ARROW1";
var MAGIC = new Uint8Array(MAGIC_STR.length);
for (let i2 = 0; i2 < MAGIC_STR.length; i2 += 1) {
  MAGIC[i2] = MAGIC_STR.codePointAt(i2);
}
function checkForMagicArrowString(buffer, index2 = 0) {
  for (let i2 = -1, n = MAGIC.length; ++i2 < n; ) {
    if (MAGIC[i2] !== buffer[index2 + i2]) {
      return false;
    }
  }
  return true;
}
var magicLength = MAGIC.length;
var magicAndPadding = magicLength + PADDING;
var magicX2AndPadding = magicLength * 2 + PADDING;

// ../core/node_modules/apache-arrow/ipc/reader.mjs
var RecordBatchReader = class _RecordBatchReader extends ReadableInterop {
  constructor(impl) {
    super();
    this._impl = impl;
  }
  get closed() {
    return this._impl.closed;
  }
  get schema() {
    return this._impl.schema;
  }
  get autoDestroy() {
    return this._impl.autoDestroy;
  }
  get dictionaries() {
    return this._impl.dictionaries;
  }
  get numDictionaries() {
    return this._impl.numDictionaries;
  }
  get numRecordBatches() {
    return this._impl.numRecordBatches;
  }
  get footer() {
    return this._impl.isFile() ? this._impl.footer : null;
  }
  isSync() {
    return this._impl.isSync();
  }
  isAsync() {
    return this._impl.isAsync();
  }
  isFile() {
    return this._impl.isFile();
  }
  isStream() {
    return this._impl.isStream();
  }
  next() {
    return this._impl.next();
  }
  throw(value) {
    return this._impl.throw(value);
  }
  return(value) {
    return this._impl.return(value);
  }
  cancel() {
    return this._impl.cancel();
  }
  reset(schema) {
    this._impl.reset(schema);
    this._DOMStream = void 0;
    this._nodeStream = void 0;
    return this;
  }
  open(options) {
    const opening = this._impl.open(options);
    return isPromise(opening) ? opening.then(() => this) : this;
  }
  readRecordBatch(index2) {
    return this._impl.isFile() ? this._impl.readRecordBatch(index2) : null;
  }
  [Symbol.iterator]() {
    return this._impl[Symbol.iterator]();
  }
  [Symbol.asyncIterator]() {
    return this._impl[Symbol.asyncIterator]();
  }
  toDOMStream() {
    return adapters_default.toDOMStream(this.isSync() ? { [Symbol.iterator]: () => this } : { [Symbol.asyncIterator]: () => this });
  }
  toNodeStream() {
    return adapters_default.toNodeStream(this.isSync() ? { [Symbol.iterator]: () => this } : { [Symbol.asyncIterator]: () => this }, { objectMode: true });
  }
  /** @nocollapse */
  // @ts-ignore
  static throughNode(options) {
    throw new Error(`"throughNode" not available in this environment`);
  }
  /** @nocollapse */
  static throughDOM(writableStrategy, readableStrategy) {
    throw new Error(`"throughDOM" not available in this environment`);
  }
  /** @nocollapse */
  static from(source) {
    if (source instanceof _RecordBatchReader) {
      return source;
    } else if (isArrowJSON(source)) {
      return fromArrowJSON(source);
    } else if (isFileHandle(source)) {
      return fromFileHandle(source);
    } else if (isPromise(source)) {
      return (() => __awaiter(this, void 0, void 0, function* () {
        return yield _RecordBatchReader.from(yield source);
      }))();
    } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {
      return fromAsyncByteStream(new AsyncByteStream(source));
    }
    return fromByteStream(new ByteStream(source));
  }
  /** @nocollapse */
  static readAll(source) {
    if (source instanceof _RecordBatchReader) {
      return source.isSync() ? readAllSync(source) : readAllAsync(source);
    } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable(source) || isIteratorResult(source)) {
      return readAllSync(source);
    }
    return readAllAsync(source);
  }
};
var RecordBatchStreamReader = class extends RecordBatchReader {
  constructor(_impl) {
    super(_impl);
    this._impl = _impl;
  }
  readAll() {
    return [...this];
  }
  [Symbol.iterator]() {
    return this._impl[Symbol.iterator]();
  }
  [Symbol.asyncIterator]() {
    return __asyncGenerator(this, arguments, function* _a9() {
      yield __await(yield* __asyncDelegator(__asyncValues(this[Symbol.iterator]())));
    });
  }
};
var AsyncRecordBatchStreamReader = class extends RecordBatchReader {
  constructor(_impl) {
    super(_impl);
    this._impl = _impl;
  }
  readAll() {
    var _a9, e_1, _b3, _c3;
    return __awaiter(this, void 0, void 0, function* () {
      const batches = new Array();
      try {
        for (var _d3 = true, _e3 = __asyncValues(this), _f3; _f3 = yield _e3.next(), _a9 = _f3.done, !_a9; ) {
          _c3 = _f3.value;
          _d3 = false;
          try {
            const batch = _c3;
            batches.push(batch);
          } finally {
            _d3 = true;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (!_d3 && !_a9 && (_b3 = _e3.return))
            yield _b3.call(_e3);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return batches;
    });
  }
  [Symbol.iterator]() {
    throw new Error(`AsyncRecordBatchStreamReader is not Iterable`);
  }
  [Symbol.asyncIterator]() {
    return this._impl[Symbol.asyncIterator]();
  }
};
var RecordBatchFileReader = class extends RecordBatchStreamReader {
  constructor(_impl) {
    super(_impl);
    this._impl = _impl;
  }
};
var AsyncRecordBatchFileReader = class extends AsyncRecordBatchStreamReader {
  constructor(_impl) {
    super(_impl);
    this._impl = _impl;
  }
};
var RecordBatchReaderImpl = class {
  get numDictionaries() {
    return this._dictionaryIndex;
  }
  get numRecordBatches() {
    return this._recordBatchIndex;
  }
  constructor(dictionaries = /* @__PURE__ */ new Map()) {
    this.closed = false;
    this.autoDestroy = true;
    this._dictionaryIndex = 0;
    this._recordBatchIndex = 0;
    this.dictionaries = dictionaries;
  }
  isSync() {
    return false;
  }
  isAsync() {
    return false;
  }
  isFile() {
    return false;
  }
  isStream() {
    return false;
  }
  reset(schema) {
    this._dictionaryIndex = 0;
    this._recordBatchIndex = 0;
    this.schema = schema;
    this.dictionaries = /* @__PURE__ */ new Map();
    return this;
  }
  _loadRecordBatch(header, body) {
    const children2 = this._loadVectors(header, body, this.schema.fields);
    const data = makeData({ type: new Struct(this.schema.fields), length: header.length, children: children2 });
    return new RecordBatch(this.schema, data);
  }
  _loadDictionaryBatch(header, body) {
    const { id: id2, isDelta } = header;
    const { dictionaries, schema } = this;
    const dictionary = dictionaries.get(id2);
    if (isDelta || !dictionary) {
      const type2 = schema.dictionaries.get(id2);
      const data = this._loadVectors(header.data, body, [type2]);
      return (dictionary && isDelta ? dictionary.concat(new Vector(data)) : new Vector(data)).memoize();
    }
    return dictionary.memoize();
  }
  _loadVectors(header, body, types) {
    return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
  }
};
var RecordBatchStreamReaderImpl = class extends RecordBatchReaderImpl {
  constructor(source, dictionaries) {
    super(dictionaries);
    this._reader = !isArrowJSON(source) ? new MessageReader(this._handle = source) : new JSONMessageReader(this._handle = source);
  }
  isSync() {
    return true;
  }
  isStream() {
    return true;
  }
  [Symbol.iterator]() {
    return this;
  }
  cancel() {
    if (!this.closed && (this.closed = true)) {
      this.reset()._reader.return();
      this._reader = null;
      this.dictionaries = null;
    }
  }
  open(options) {
    if (!this.closed) {
      this.autoDestroy = shouldAutoDestroy(this, options);
      if (!(this.schema || (this.schema = this._reader.readSchema()))) {
        this.cancel();
      }
    }
    return this;
  }
  throw(value) {
    if (!this.closed && this.autoDestroy && (this.closed = true)) {
      return this.reset()._reader.throw(value);
    }
    return ITERATOR_DONE;
  }
  return(value) {
    if (!this.closed && this.autoDestroy && (this.closed = true)) {
      return this.reset()._reader.return(value);
    }
    return ITERATOR_DONE;
  }
  next() {
    if (this.closed) {
      return ITERATOR_DONE;
    }
    let message;
    const { _reader: reader } = this;
    while (message = this._readNextMessageAndValidate()) {
      if (message.isSchema()) {
        this.reset(message.header());
      } else if (message.isRecordBatch()) {
        this._recordBatchIndex++;
        const header = message.header();
        const buffer = reader.readMessageBody(message.bodyLength);
        const recordBatch = this._loadRecordBatch(header, buffer);
        return { done: false, value: recordBatch };
      } else if (message.isDictionaryBatch()) {
        this._dictionaryIndex++;
        const header = message.header();
        const buffer = reader.readMessageBody(message.bodyLength);
        const vector3 = this._loadDictionaryBatch(header, buffer);
        this.dictionaries.set(header.id, vector3);
      }
    }
    if (this.schema && this._recordBatchIndex === 0) {
      this._recordBatchIndex++;
      return { done: false, value: new _InternalEmptyPlaceholderRecordBatch(this.schema) };
    }
    return this.return();
  }
  _readNextMessageAndValidate(type2) {
    return this._reader.readMessage(type2);
  }
};
var AsyncRecordBatchStreamReaderImpl = class extends RecordBatchReaderImpl {
  constructor(source, dictionaries) {
    super(dictionaries);
    this._reader = new AsyncMessageReader(this._handle = source);
  }
  isAsync() {
    return true;
  }
  isStream() {
    return true;
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  cancel() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.closed && (this.closed = true)) {
        yield this.reset()._reader.return();
        this._reader = null;
        this.dictionaries = null;
      }
    });
  }
  open(options) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.closed) {
        this.autoDestroy = shouldAutoDestroy(this, options);
        if (!(this.schema || (this.schema = yield this._reader.readSchema()))) {
          yield this.cancel();
        }
      }
      return this;
    });
  }
  throw(value) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.closed && this.autoDestroy && (this.closed = true)) {
        return yield this.reset()._reader.throw(value);
      }
      return ITERATOR_DONE;
    });
  }
  return(value) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.closed && this.autoDestroy && (this.closed = true)) {
        return yield this.reset()._reader.return(value);
      }
      return ITERATOR_DONE;
    });
  }
  next() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.closed) {
        return ITERATOR_DONE;
      }
      let message;
      const { _reader: reader } = this;
      while (message = yield this._readNextMessageAndValidate()) {
        if (message.isSchema()) {
          yield this.reset(message.header());
        } else if (message.isRecordBatch()) {
          this._recordBatchIndex++;
          const header = message.header();
          const buffer = yield reader.readMessageBody(message.bodyLength);
          const recordBatch = this._loadRecordBatch(header, buffer);
          return { done: false, value: recordBatch };
        } else if (message.isDictionaryBatch()) {
          this._dictionaryIndex++;
          const header = message.header();
          const buffer = yield reader.readMessageBody(message.bodyLength);
          const vector3 = this._loadDictionaryBatch(header, buffer);
          this.dictionaries.set(header.id, vector3);
        }
      }
      if (this.schema && this._recordBatchIndex === 0) {
        this._recordBatchIndex++;
        return { done: false, value: new _InternalEmptyPlaceholderRecordBatch(this.schema) };
      }
      return yield this.return();
    });
  }
  _readNextMessageAndValidate(type2) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this._reader.readMessage(type2);
    });
  }
};
var RecordBatchFileReaderImpl = class extends RecordBatchStreamReaderImpl {
  get footer() {
    return this._footer;
  }
  get numDictionaries() {
    return this._footer ? this._footer.numDictionaries : 0;
  }
  get numRecordBatches() {
    return this._footer ? this._footer.numRecordBatches : 0;
  }
  constructor(source, dictionaries) {
    super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);
  }
  isSync() {
    return true;
  }
  isFile() {
    return true;
  }
  open(options) {
    if (!this.closed && !this._footer) {
      this.schema = (this._footer = this._readFooter()).schema;
      for (const block of this._footer.dictionaryBatches()) {
        block && this._readDictionaryBatch(this._dictionaryIndex++);
      }
    }
    return super.open(options);
  }
  readRecordBatch(index2) {
    var _a9;
    if (this.closed) {
      return null;
    }
    if (!this._footer) {
      this.open();
    }
    const block = (_a9 = this._footer) === null || _a9 === void 0 ? void 0 : _a9.getRecordBatch(index2);
    if (block && this._handle.seek(block.offset)) {
      const message = this._reader.readMessage(MessageHeader.RecordBatch);
      if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {
        const header = message.header();
        const buffer = this._reader.readMessageBody(message.bodyLength);
        const recordBatch = this._loadRecordBatch(header, buffer);
        return recordBatch;
      }
    }
    return null;
  }
  _readDictionaryBatch(index2) {
    var _a9;
    const block = (_a9 = this._footer) === null || _a9 === void 0 ? void 0 : _a9.getDictionaryBatch(index2);
    if (block && this._handle.seek(block.offset)) {
      const message = this._reader.readMessage(MessageHeader.DictionaryBatch);
      if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {
        const header = message.header();
        const buffer = this._reader.readMessageBody(message.bodyLength);
        const vector3 = this._loadDictionaryBatch(header, buffer);
        this.dictionaries.set(header.id, vector3);
      }
    }
  }
  _readFooter() {
    const { _handle } = this;
    const offset2 = _handle.size - magicAndPadding;
    const length4 = _handle.readInt32(offset2);
    const buffer = _handle.readAt(offset2 - length4, length4);
    return Footer_.decode(buffer);
  }
  _readNextMessageAndValidate(type2) {
    var _a9;
    if (!this._footer) {
      this.open();
    }
    if (this._footer && this._recordBatchIndex < this.numRecordBatches) {
      const block = (_a9 = this._footer) === null || _a9 === void 0 ? void 0 : _a9.getRecordBatch(this._recordBatchIndex);
      if (block && this._handle.seek(block.offset)) {
        return this._reader.readMessage(type2);
      }
    }
    return null;
  }
};
var AsyncRecordBatchFileReaderImpl = class extends AsyncRecordBatchStreamReaderImpl {
  get footer() {
    return this._footer;
  }
  get numDictionaries() {
    return this._footer ? this._footer.numDictionaries : 0;
  }
  get numRecordBatches() {
    return this._footer ? this._footer.numRecordBatches : 0;
  }
  constructor(source, ...rest) {
    const byteLength = typeof rest[0] !== "number" ? rest.shift() : void 0;
    const dictionaries = rest[0] instanceof Map ? rest.shift() : void 0;
    super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);
  }
  isFile() {
    return true;
  }
  isAsync() {
    return true;
  }
  open(options) {
    const _super = Object.create(null, {
      open: { get: () => super.open }
    });
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.closed && !this._footer) {
        this.schema = (this._footer = yield this._readFooter()).schema;
        for (const block of this._footer.dictionaryBatches()) {
          block && (yield this._readDictionaryBatch(this._dictionaryIndex++));
        }
      }
      return yield _super.open.call(this, options);
    });
  }
  readRecordBatch(index2) {
    var _a9;
    return __awaiter(this, void 0, void 0, function* () {
      if (this.closed) {
        return null;
      }
      if (!this._footer) {
        yield this.open();
      }
      const block = (_a9 = this._footer) === null || _a9 === void 0 ? void 0 : _a9.getRecordBatch(index2);
      if (block && (yield this._handle.seek(block.offset))) {
        const message = yield this._reader.readMessage(MessageHeader.RecordBatch);
        if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {
          const header = message.header();
          const buffer = yield this._reader.readMessageBody(message.bodyLength);
          const recordBatch = this._loadRecordBatch(header, buffer);
          return recordBatch;
        }
      }
      return null;
    });
  }
  _readDictionaryBatch(index2) {
    var _a9;
    return __awaiter(this, void 0, void 0, function* () {
      const block = (_a9 = this._footer) === null || _a9 === void 0 ? void 0 : _a9.getDictionaryBatch(index2);
      if (block && (yield this._handle.seek(block.offset))) {
        const message = yield this._reader.readMessage(MessageHeader.DictionaryBatch);
        if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {
          const header = message.header();
          const buffer = yield this._reader.readMessageBody(message.bodyLength);
          const vector3 = this._loadDictionaryBatch(header, buffer);
          this.dictionaries.set(header.id, vector3);
        }
      }
    });
  }
  _readFooter() {
    return __awaiter(this, void 0, void 0, function* () {
      const { _handle } = this;
      _handle._pending && (yield _handle._pending);
      const offset2 = _handle.size - magicAndPadding;
      const length4 = yield _handle.readInt32(offset2);
      const buffer = yield _handle.readAt(offset2 - length4, length4);
      return Footer_.decode(buffer);
    });
  }
  _readNextMessageAndValidate(type2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this._footer) {
        yield this.open();
      }
      if (this._footer && this._recordBatchIndex < this.numRecordBatches) {
        const block = this._footer.getRecordBatch(this._recordBatchIndex);
        if (block && (yield this._handle.seek(block.offset))) {
          return yield this._reader.readMessage(type2);
        }
      }
      return null;
    });
  }
};
var RecordBatchJSONReaderImpl = class extends RecordBatchStreamReaderImpl {
  constructor(source, dictionaries) {
    super(source, dictionaries);
  }
  _loadVectors(header, body, types) {
    return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
  }
};
function shouldAutoDestroy(self, options) {
  return options && typeof options["autoDestroy"] === "boolean" ? options["autoDestroy"] : self["autoDestroy"];
}
function* readAllSync(source) {
  const reader = RecordBatchReader.from(source);
  try {
    if (!reader.open({ autoDestroy: false }).closed) {
      do {
        yield reader;
      } while (!reader.reset().open().closed);
    }
  } finally {
    reader.cancel();
  }
}
function readAllAsync(source) {
  return __asyncGenerator(this, arguments, function* readAllAsync_1() {
    const reader = yield __await(RecordBatchReader.from(source));
    try {
      if (!(yield __await(reader.open({ autoDestroy: false }))).closed) {
        do {
          yield yield __await(reader);
        } while (!(yield __await(reader.reset().open())).closed);
      }
    } finally {
      yield __await(reader.cancel());
    }
  });
}
function fromArrowJSON(source) {
  return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));
}
function fromByteStream(source) {
  const bytes = source.peek(magicLength + 7 & ~7);
  return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes) ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read())) : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(/* @__PURE__ */ function* () {
  }()));
}
function fromAsyncByteStream(source) {
  return __awaiter(this, void 0, void 0, function* () {
    const bytes = yield source.peek(magicLength + 7 & ~7);
    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes) ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(yield source.read())) : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(function() {
      return __asyncGenerator(this, arguments, function* () {
      });
    }()));
  });
}
function fromFileHandle(source) {
  return __awaiter(this, void 0, void 0, function* () {
    const { size } = yield source.stat();
    const file = new AsyncRandomAccessFile(source, size);
    if (size >= magicX2AndPadding && checkForMagicArrowString(yield file.readAt(0, magicLength + 7 & ~7))) {
      return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file));
    }
    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file));
  });
}

// ../core/node_modules/apache-arrow/visitor/vectorassembler.mjs
var VectorAssembler = class _VectorAssembler extends Visitor {
  /** @nocollapse */
  static assemble(...args) {
    const unwrap = (nodes) => nodes.flatMap((node) => Array.isArray(node) ? unwrap(node) : node instanceof RecordBatch ? node.data.children : node.data);
    const assembler = new _VectorAssembler();
    assembler.visitMany(unwrap(args));
    return assembler;
  }
  constructor() {
    super();
    this._byteLength = 0;
    this._nodes = [];
    this._buffers = [];
    this._bufferRegions = [];
  }
  visit(data) {
    if (data instanceof Vector) {
      this.visitMany(data.data);
      return this;
    }
    const { type: type2 } = data;
    if (!DataType.isDictionary(type2)) {
      const { length: length4, nullCount } = data;
      if (length4 > 2147483647) {
        throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");
      }
      if (!DataType.isNull(type2)) {
        addBuffer.call(this, nullCount <= 0 ? new Uint8Array(0) : truncateBitmap(data.offset, length4, data.nullBitmap));
      }
      this.nodes.push(new FieldNode2(length4, nullCount));
    }
    return super.visit(data);
  }
  visitNull(_null) {
    return this;
  }
  visitDictionary(data) {
    return this.visit(data.clone(data.type.indices));
  }
  get nodes() {
    return this._nodes;
  }
  get buffers() {
    return this._buffers;
  }
  get byteLength() {
    return this._byteLength;
  }
  get bufferRegions() {
    return this._bufferRegions;
  }
};
function addBuffer(values2) {
  const byteLength = values2.byteLength + 7 & ~7;
  this.buffers.push(values2);
  this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));
  this._byteLength += byteLength;
  return this;
}
function assembleUnion(data) {
  const { type: type2, length: length4, typeIds, valueOffsets } = data;
  addBuffer.call(this, typeIds);
  if (type2.mode === UnionMode.Sparse) {
    return assembleNestedVector.call(this, data);
  } else if (type2.mode === UnionMode.Dense) {
    if (data.offset <= 0) {
      addBuffer.call(this, valueOffsets);
      return assembleNestedVector.call(this, data);
    } else {
      const maxChildTypeId = typeIds.reduce((x3, y3) => Math.max(x3, y3), typeIds[0]);
      const childLengths = new Int32Array(maxChildTypeId + 1);
      const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);
      const shiftedOffsets = new Int32Array(length4);
      const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length4, valueOffsets);
      for (let typeId, shift, index2 = -1; ++index2 < length4; ) {
        if ((shift = childOffsets[typeId = typeIds[index2]]) === -1) {
          shift = childOffsets[typeId] = unshiftedOffsets[typeId];
        }
        shiftedOffsets[index2] = unshiftedOffsets[index2] - shift;
        ++childLengths[typeId];
      }
      addBuffer.call(this, shiftedOffsets);
      for (let child, childIndex = -1, numChildren = type2.children.length; ++childIndex < numChildren; ) {
        if (child = data.children[childIndex]) {
          const typeId = type2.typeIds[childIndex];
          const childLength = Math.min(length4, childLengths[typeId]);
          this.visit(child.slice(childOffsets[typeId], childLength));
        }
      }
    }
  }
  return this;
}
function assembleBoolVector(data) {
  let values2;
  if (data.nullCount >= data.length) {
    return addBuffer.call(this, new Uint8Array(0));
  } else if ((values2 = data.values) instanceof Uint8Array) {
    return addBuffer.call(this, truncateBitmap(data.offset, data.length, values2));
  }
  return addBuffer.call(this, packBools(data.values));
}
function assembleFlatVector(data) {
  return addBuffer.call(this, data.values.subarray(0, data.length * data.stride));
}
function assembleFlatListVector(data) {
  const { length: length4, values: values2, valueOffsets } = data;
  const firstOffset = valueOffsets[0];
  const lastOffset = valueOffsets[length4];
  const byteLength = Math.min(lastOffset - firstOffset, values2.byteLength - firstOffset);
  addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length4, valueOffsets));
  addBuffer.call(this, values2.subarray(firstOffset, firstOffset + byteLength));
  return this;
}
function assembleListVector(data) {
  const { length: length4, valueOffsets } = data;
  if (valueOffsets) {
    addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length4, valueOffsets));
  }
  return this.visit(data.children[0]);
}
function assembleNestedVector(data) {
  return this.visitMany(data.type.children.map((_2, i2) => data.children[i2]).filter(Boolean))[0];
}
VectorAssembler.prototype.visitBool = assembleBoolVector;
VectorAssembler.prototype.visitInt = assembleFlatVector;
VectorAssembler.prototype.visitFloat = assembleFlatVector;
VectorAssembler.prototype.visitUtf8 = assembleFlatListVector;
VectorAssembler.prototype.visitBinary = assembleFlatListVector;
VectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;
VectorAssembler.prototype.visitDate = assembleFlatVector;
VectorAssembler.prototype.visitTimestamp = assembleFlatVector;
VectorAssembler.prototype.visitTime = assembleFlatVector;
VectorAssembler.prototype.visitDecimal = assembleFlatVector;
VectorAssembler.prototype.visitList = assembleListVector;
VectorAssembler.prototype.visitStruct = assembleNestedVector;
VectorAssembler.prototype.visitUnion = assembleUnion;
VectorAssembler.prototype.visitInterval = assembleFlatVector;
VectorAssembler.prototype.visitFixedSizeList = assembleListVector;
VectorAssembler.prototype.visitMap = assembleListVector;

// ../core/node_modules/apache-arrow/ipc/writer.mjs
var RecordBatchWriter = class extends ReadableInterop {
  /** @nocollapse */
  // @ts-ignore
  static throughNode(options) {
    throw new Error(`"throughNode" not available in this environment`);
  }
  /** @nocollapse */
  static throughDOM(writableStrategy, readableStrategy) {
    throw new Error(`"throughDOM" not available in this environment`);
  }
  constructor(options) {
    super();
    this._position = 0;
    this._started = false;
    this._sink = new AsyncByteQueue();
    this._schema = null;
    this._dictionaryBlocks = [];
    this._recordBatchBlocks = [];
    this._dictionaryDeltaOffsets = /* @__PURE__ */ new Map();
    isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });
    this._autoDestroy = typeof options.autoDestroy === "boolean" ? options.autoDestroy : true;
    this._writeLegacyIpcFormat = typeof options.writeLegacyIpcFormat === "boolean" ? options.writeLegacyIpcFormat : false;
  }
  toString(sync = false) {
    return this._sink.toString(sync);
  }
  toUint8Array(sync = false) {
    return this._sink.toUint8Array(sync);
  }
  writeAll(input2) {
    if (isPromise(input2)) {
      return input2.then((x3) => this.writeAll(x3));
    } else if (isAsyncIterable(input2)) {
      return writeAllAsync(this, input2);
    }
    return writeAll(this, input2);
  }
  get closed() {
    return this._sink.closed;
  }
  [Symbol.asyncIterator]() {
    return this._sink[Symbol.asyncIterator]();
  }
  toDOMStream(options) {
    return this._sink.toDOMStream(options);
  }
  toNodeStream(options) {
    return this._sink.toNodeStream(options);
  }
  close() {
    return this.reset()._sink.close();
  }
  abort(reason) {
    return this.reset()._sink.abort(reason);
  }
  finish() {
    this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);
    return this;
  }
  reset(sink = this._sink, schema = null) {
    if (sink === this._sink || sink instanceof AsyncByteQueue) {
      this._sink = sink;
    } else {
      this._sink = new AsyncByteQueue();
      if (sink && isWritableDOMStream(sink)) {
        this.toDOMStream({ type: "bytes" }).pipeTo(sink);
      } else if (sink && isWritableNodeStream(sink)) {
        this.toNodeStream({ objectMode: false }).pipe(sink);
      }
    }
    if (this._started && this._schema) {
      this._writeFooter(this._schema);
    }
    this._started = false;
    this._dictionaryBlocks = [];
    this._recordBatchBlocks = [];
    this._dictionaryDeltaOffsets = /* @__PURE__ */ new Map();
    if (!schema || !compareSchemas(schema, this._schema)) {
      if (schema == null) {
        this._position = 0;
        this._schema = null;
      } else {
        this._started = true;
        this._schema = schema;
        this._writeSchema(schema);
      }
    }
    return this;
  }
  write(payload) {
    let schema = null;
    if (!this._sink) {
      throw new Error(`RecordBatchWriter is closed`);
    } else if (payload == null) {
      return this.finish() && void 0;
    } else if (payload instanceof Table && !(schema = payload.schema)) {
      return this.finish() && void 0;
    } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {
      return this.finish() && void 0;
    }
    if (schema && !compareSchemas(schema, this._schema)) {
      if (this._started && this._autoDestroy) {
        return this.close();
      }
      this.reset(this._sink, schema);
    }
    if (payload instanceof RecordBatch) {
      if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {
        this._writeRecordBatch(payload);
      }
    } else if (payload instanceof Table) {
      this.writeAll(payload.batches);
    } else if (isIterable(payload)) {
      this.writeAll(payload);
    }
  }
  _writeMessage(message, alignment = 8) {
    const a2 = alignment - 1;
    const buffer = Message2.encode(message);
    const flatbufferSize = buffer.byteLength;
    const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;
    const alignedSize = flatbufferSize + prefixSize + a2 & ~a2;
    const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;
    if (message.headerType === MessageHeader.RecordBatch) {
      this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));
    } else if (message.headerType === MessageHeader.DictionaryBatch) {
      this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));
    }
    if (!this._writeLegacyIpcFormat) {
      this._write(Int32Array.of(-1));
    }
    this._write(Int32Array.of(alignedSize - prefixSize));
    if (flatbufferSize > 0) {
      this._write(buffer);
    }
    return this._writePadding(nPaddingBytes);
  }
  _write(chunk) {
    if (this._started) {
      const buffer = toUint8Array(chunk);
      if (buffer && buffer.byteLength > 0) {
        this._sink.write(buffer);
        this._position += buffer.byteLength;
      }
    }
    return this;
  }
  _writeSchema(schema) {
    return this._writeMessage(Message2.from(schema));
  }
  // @ts-ignore
  _writeFooter(schema) {
    return this._writeLegacyIpcFormat ? this._write(Int32Array.of(0)) : this._write(Int32Array.of(-1, 0));
  }
  _writeMagic() {
    return this._write(MAGIC);
  }
  _writePadding(nBytes) {
    return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;
  }
  _writeRecordBatch(batch) {
    const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);
    const recordBatch = new RecordBatch3(batch.numRows, nodes, bufferRegions);
    const message = Message2.from(recordBatch, byteLength);
    return this._writeDictionaries(batch)._writeMessage(message)._writeBodyBuffers(buffers);
  }
  _writeDictionaryBatch(dictionary, id2, isDelta = false) {
    this._dictionaryDeltaOffsets.set(id2, dictionary.length + (this._dictionaryDeltaOffsets.get(id2) || 0));
    const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(new Vector([dictionary]));
    const recordBatch = new RecordBatch3(dictionary.length, nodes, bufferRegions);
    const dictionaryBatch = new DictionaryBatch2(recordBatch, id2, isDelta);
    const message = Message2.from(dictionaryBatch, byteLength);
    return this._writeMessage(message)._writeBodyBuffers(buffers);
  }
  _writeBodyBuffers(buffers) {
    let buffer;
    let size, padding2;
    for (let i2 = -1, n = buffers.length; ++i2 < n; ) {
      if ((buffer = buffers[i2]) && (size = buffer.byteLength) > 0) {
        this._write(buffer);
        if ((padding2 = (size + 7 & ~7) - size) > 0) {
          this._writePadding(padding2);
        }
      }
    }
    return this;
  }
  _writeDictionaries(batch) {
    for (let [id2, dictionary] of batch.dictionaries) {
      let offset2 = this._dictionaryDeltaOffsets.get(id2) || 0;
      if (offset2 === 0 || (dictionary = dictionary === null || dictionary === void 0 ? void 0 : dictionary.slice(offset2)).length > 0) {
        for (const data of dictionary.data) {
          this._writeDictionaryBatch(data, id2, offset2 > 0);
          offset2 += data.length;
        }
      }
    }
    return this;
  }
};
var RecordBatchStreamWriter = class _RecordBatchStreamWriter extends RecordBatchWriter {
  /** @nocollapse */
  static writeAll(input2, options) {
    const writer = new _RecordBatchStreamWriter(options);
    if (isPromise(input2)) {
      return input2.then((x3) => writer.writeAll(x3));
    } else if (isAsyncIterable(input2)) {
      return writeAllAsync(writer, input2);
    }
    return writeAll(writer, input2);
  }
};
var RecordBatchFileWriter = class _RecordBatchFileWriter extends RecordBatchWriter {
  /** @nocollapse */
  static writeAll(input2) {
    const writer = new _RecordBatchFileWriter();
    if (isPromise(input2)) {
      return input2.then((x3) => writer.writeAll(x3));
    } else if (isAsyncIterable(input2)) {
      return writeAllAsync(writer, input2);
    }
    return writeAll(writer, input2);
  }
  constructor() {
    super();
    this._autoDestroy = true;
  }
  // @ts-ignore
  _writeSchema(schema) {
    return this._writeMagic()._writePadding(2);
  }
  _writeFooter(schema) {
    const buffer = Footer_.encode(new Footer_(schema, MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));
    return super._writeFooter(schema)._write(buffer)._write(Int32Array.of(buffer.byteLength))._writeMagic();
  }
};
function writeAll(writer, input2) {
  let chunks = input2;
  if (input2 instanceof Table) {
    chunks = input2.batches;
    writer.reset(void 0, input2.schema);
  }
  for (const batch of chunks) {
    writer.write(batch);
  }
  return writer.finish();
}
function writeAllAsync(writer, batches) {
  var _a9, batches_1, batches_1_1;
  var _b3, e_1, _c3, _d3;
  return __awaiter(this, void 0, void 0, function* () {
    try {
      for (_a9 = true, batches_1 = __asyncValues(batches); batches_1_1 = yield batches_1.next(), _b3 = batches_1_1.done, !_b3; ) {
        _d3 = batches_1_1.value;
        _a9 = false;
        try {
          const batch = _d3;
          writer.write(batch);
        } finally {
          _a9 = true;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (!_a9 && !_b3 && (_c3 = batches_1.return))
          yield _c3.call(batches_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return writer.finish();
  });
}

// ../core/node_modules/apache-arrow/io/whatwg/iterable.mjs
function toDOMStream(source, options) {
  if (isAsyncIterable(source)) {
    return asyncIterableAsReadableDOMStream(source, options);
  }
  if (isIterable(source)) {
    return iterableAsReadableDOMStream(source, options);
  }
  throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);
}
function iterableAsReadableDOMStream(source, options) {
  let it2 = null;
  const bm = (options === null || options === void 0 ? void 0 : options.type) === "bytes" || false;
  const hwm = (options === null || options === void 0 ? void 0 : options.highWaterMark) || Math.pow(2, 24);
  return new ReadableStream(Object.assign(Object.assign({}, options), {
    start(controller) {
      next(controller, it2 || (it2 = source[Symbol.iterator]()));
    },
    pull(controller) {
      it2 ? next(controller, it2) : controller.close();
    },
    cancel() {
      ((it2 === null || it2 === void 0 ? void 0 : it2.return) && it2.return() || true) && (it2 = null);
    }
  }), Object.assign({ highWaterMark: bm ? hwm : void 0 }, options));
  function next(controller, it3) {
    let buf;
    let r = null;
    let size = controller.desiredSize || null;
    while (!(r = it3.next(bm ? size : null)).done) {
      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {
        size != null && bm && (size = size - buf.byteLength + 1);
        r.value = buf;
      }
      controller.enqueue(r.value);
      if (size != null && --size <= 0) {
        return;
      }
    }
    controller.close();
  }
}
function asyncIterableAsReadableDOMStream(source, options) {
  let it2 = null;
  const bm = (options === null || options === void 0 ? void 0 : options.type) === "bytes" || false;
  const hwm = (options === null || options === void 0 ? void 0 : options.highWaterMark) || Math.pow(2, 24);
  return new ReadableStream(Object.assign(Object.assign({}, options), {
    start(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        yield next(controller, it2 || (it2 = source[Symbol.asyncIterator]()));
      });
    },
    pull(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        it2 ? yield next(controller, it2) : controller.close();
      });
    },
    cancel() {
      return __awaiter(this, void 0, void 0, function* () {
        ((it2 === null || it2 === void 0 ? void 0 : it2.return) && (yield it2.return()) || true) && (it2 = null);
      });
    }
  }), Object.assign({ highWaterMark: bm ? hwm : void 0 }, options));
  function next(controller, it3) {
    return __awaiter(this, void 0, void 0, function* () {
      let buf;
      let r = null;
      let size = controller.desiredSize || null;
      while (!(r = yield it3.next(bm ? size : null)).done) {
        if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {
          size != null && bm && (size = size - buf.byteLength + 1);
          r.value = buf;
        }
        controller.enqueue(r.value);
        if (size != null && --size <= 0) {
          return;
        }
      }
      controller.close();
    });
  }
}

// ../core/node_modules/apache-arrow/io/whatwg/builder.mjs
function builderThroughDOMStream(options) {
  return new BuilderTransform(options);
}
var BuilderTransform = class {
  constructor(options) {
    this._numChunks = 0;
    this._finished = false;
    this._bufferedSize = 0;
    const { ["readableStrategy"]: readableStrategy, ["writableStrategy"]: writableStrategy, ["queueingStrategy"]: queueingStrategy = "count" } = options, builderOptions = __rest(options, ["readableStrategy", "writableStrategy", "queueingStrategy"]);
    this._controller = null;
    this._builder = makeBuilder(builderOptions);
    this._getSize = queueingStrategy !== "bytes" ? chunkLength : chunkByteLength;
    const { ["highWaterMark"]: readableHighWaterMark = queueingStrategy === "bytes" ? Math.pow(2, 14) : 1e3 } = Object.assign({}, readableStrategy);
    const { ["highWaterMark"]: writableHighWaterMark = queueingStrategy === "bytes" ? Math.pow(2, 14) : 1e3 } = Object.assign({}, writableStrategy);
    this["readable"] = new ReadableStream({
      ["cancel"]: () => {
        this._builder.clear();
      },
      ["pull"]: (c4) => {
        this._maybeFlush(this._builder, this._controller = c4);
      },
      ["start"]: (c4) => {
        this._maybeFlush(this._builder, this._controller = c4);
      }
    }, {
      "highWaterMark": readableHighWaterMark,
      "size": queueingStrategy !== "bytes" ? chunkLength : chunkByteLength
    });
    this["writable"] = new WritableStream({
      ["abort"]: () => {
        this._builder.clear();
      },
      ["write"]: () => {
        this._maybeFlush(this._builder, this._controller);
      },
      ["close"]: () => {
        this._maybeFlush(this._builder.finish(), this._controller);
      }
    }, {
      "highWaterMark": writableHighWaterMark,
      "size": (value) => this._writeValueAndReturnChunkSize(value)
    });
  }
  _writeValueAndReturnChunkSize(value) {
    const bufferedSize = this._bufferedSize;
    this._bufferedSize = this._getSize(this._builder.append(value));
    return this._bufferedSize - bufferedSize;
  }
  _maybeFlush(builder, controller) {
    if (controller == null) {
      return;
    }
    if (this._bufferedSize >= controller.desiredSize) {
      ++this._numChunks && this._enqueue(controller, builder.toVector());
    }
    if (builder.finished) {
      if (builder.length > 0 || this._numChunks === 0) {
        ++this._numChunks && this._enqueue(controller, builder.toVector());
      }
      if (!this._finished && (this._finished = true)) {
        this._enqueue(controller, null);
      }
    }
  }
  _enqueue(controller, chunk) {
    this._bufferedSize = 0;
    this._controller = null;
    chunk == null ? controller.close() : controller.enqueue(chunk);
  }
};
var chunkLength = (chunk) => {
  var _a9;
  return (_a9 = chunk === null || chunk === void 0 ? void 0 : chunk.length) !== null && _a9 !== void 0 ? _a9 : 0;
};
var chunkByteLength = (chunk) => {
  var _a9;
  return (_a9 = chunk === null || chunk === void 0 ? void 0 : chunk.byteLength) !== null && _a9 !== void 0 ? _a9 : 0;
};

// ../core/node_modules/apache-arrow/io/whatwg/reader.mjs
function recordBatchReaderThroughDOMStream(writableStrategy, readableStrategy) {
  const queue = new AsyncByteQueue();
  let reader = null;
  const readable = new ReadableStream({
    cancel() {
      return __awaiter(this, void 0, void 0, function* () {
        yield queue.close();
      });
    },
    start(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        yield next(controller, reader || (reader = yield open()));
      });
    },
    pull(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        reader ? yield next(controller, reader) : controller.close();
      });
    }
  });
  return { writable: new WritableStream(queue, Object.assign({ "highWaterMark": Math.pow(2, 14) }, writableStrategy)), readable };
  function open() {
    return __awaiter(this, void 0, void 0, function* () {
      return yield (yield RecordBatchReader.from(queue)).open(readableStrategy);
    });
  }
  function next(controller, reader2) {
    return __awaiter(this, void 0, void 0, function* () {
      let size = controller.desiredSize;
      let r = null;
      while (!(r = yield reader2.next()).done) {
        controller.enqueue(r.value);
        if (size != null && --size <= 0) {
          return;
        }
      }
      controller.close();
    });
  }
}

// ../core/node_modules/apache-arrow/io/whatwg/writer.mjs
function recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {
  const writer = new this(writableStrategy);
  const reader = new AsyncByteStream(writer);
  const readable = new ReadableStream({
    // type: 'bytes',
    cancel() {
      return __awaiter(this, void 0, void 0, function* () {
        yield reader.cancel();
      });
    },
    pull(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        yield next(controller);
      });
    },
    start(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        yield next(controller);
      });
    }
  }, Object.assign({ "highWaterMark": Math.pow(2, 14) }, readableStrategy));
  return { writable: new WritableStream(writer, writableStrategy), readable };
  function next(controller) {
    return __awaiter(this, void 0, void 0, function* () {
      let buf = null;
      let size = controller.desiredSize;
      while (buf = yield reader.read(size || null)) {
        controller.enqueue(buf);
        if (size != null && (size -= buf.byteLength) <= 0) {
          return;
        }
      }
      controller.close();
    });
  }
}

// ../core/node_modules/apache-arrow/ipc/serialization.mjs
function tableFromIPC(input2) {
  const reader = RecordBatchReader.from(input2);
  if (isPromise(reader)) {
    return reader.then((reader2) => tableFromIPC(reader2));
  }
  if (reader.isAsync()) {
    return reader.readAll().then((xs) => new Table(xs));
  }
  return new Table(reader.readAll());
}

// ../core/node_modules/apache-arrow/Arrow.mjs
var util = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, bn_exports), int_exports), bit_exports), math_exports), buffer_exports), vector_exports), {
  compareSchemas,
  compareFields,
  compareTypes
});

// ../core/node_modules/apache-arrow/Arrow.dom.mjs
adapters_default.toDOMStream = toDOMStream;
Builder["throughDOM"] = builderThroughDOMStream;
RecordBatchReader["throughDOM"] = recordBatchReaderThroughDOMStream;
RecordBatchFileReader["throughDOM"] = recordBatchReaderThroughDOMStream;
RecordBatchStreamReader["throughDOM"] = recordBatchReaderThroughDOMStream;
RecordBatchWriter["throughDOM"] = recordBatchWriterThroughDOMStream;
RecordBatchFileWriter["throughDOM"] = recordBatchWriterThroughDOMStream;
RecordBatchStreamWriter["throughDOM"] = recordBatchWriterThroughDOMStream;

// ../core/src/connectors/socket.js
function socketConnector(uri = "ws://localhost:3000/") {
  const queue = [];
  let connected = false;
  let request = null;
  let ws;
  const events = {
    open() {
      connected = true;
      next();
    },
    close() {
      connected = false;
      request = null;
      ws = null;
      while (queue.length) {
        queue.shift().reject("Socket closed");
      }
    },
    error(event) {
      if (request) {
        const { reject } = request;
        request = null;
        next();
        reject(event);
      } else {
        console.error("WebSocket error: ", event);
      }
    },
    message({ data }) {
      if (request) {
        const { query, resolve, reject } = request;
        request = null;
        next();
        if (typeof data === "string") {
          const json = JSON.parse(data);
          json.error ? reject(json.error) : resolve(json);
        } else if (query.type === "exec") {
          resolve();
        } else if (query.type === "arrow") {
          resolve(tableFromIPC(data.arrayBuffer()));
        } else {
          throw new Error(`Unexpected socket data: ${data}`);
        }
      } else {
        console.log("WebSocket message: ", data);
      }
    }
  };
  function init2() {
    ws = new WebSocket(uri);
    for (const type2 in events) {
      ws.addEventListener(type2, events[type2]);
    }
  }
  function enqueue(query, resolve, reject) {
    if (ws == null)
      init2();
    queue.push({ query, resolve, reject });
    if (connected && !request)
      next();
  }
  function next() {
    if (queue.length) {
      request = queue.shift();
      ws.send(JSON.stringify(request.query));
    }
  }
  return {
    get connected() {
      return connected;
    },
    query(query) {
      return new Promise(
        (resolve, reject) => enqueue(query, resolve, reject)
      );
    }
  };
}

// ../core/src/util/js-type.js
function jsType(type2) {
  switch (type2) {
    case "BIGINT":
    case "HUGEINT":
    case "INTEGER":
    case "SMALLINT":
    case "TINYINT":
    case "UBIGINT":
    case "UINTEGER":
    case "USMALLINT":
    case "UTINYINT":
    case "DOUBLE":
    case "FLOAT":
    case "REAL":
    case "DECIMAL":
      return "number";
    case "DATE":
    case "TIMESTAMP":
    case "TIMESTAMPTZ":
    case "TIME":
      return "date";
    case "BOOLEAN":
      return "boolean";
    case "VARCHAR":
    case "UUID":
      return "string";
    case "LIST":
      return "array";
    case "BLOB":
    case "STRUCT":
    case "MAP":
      return "object";
    default:
      throw new Error(`Unsupported type: ${type2}`);
  }
}

// ../sql/src/ref.js
var Ref = class {
  /**
   * Create a new Ref instance.
   * @param {string|Ref|null} table The table name.
   * @param {string|null} column The column name.
   */
  constructor(table2, column3) {
    if (table2)
      this.table = String(table2);
    if (column3)
      this.column = column3;
  }
  /**
   * Get the list of referenced columns. Either a single element array
   * if column is non-null, otherwise an empty array.
   */
  get columns() {
    return this.column ? [this.column] : [];
  }
  /**
   * Generate a SQL string for this reference.
   * @returns {string} The SQL string.
   */
  toString() {
    const { table: table2, column: column3 } = this;
    if (column3) {
      const col = column3.startsWith("*") ? column3 : `"${column3}"`;
      return `${table2 ? `"${table2}".` : ""}${col}`;
    } else {
      return table2 ? `"${table2}"` : "NULL";
    }
  }
};
function isColumnRefFor(ref, name2) {
  return ref instanceof Ref && ref.column === name2;
}
function asColumn(value) {
  return typeof value === "string" ? column(value) : value;
}
function asRelation(value) {
  return typeof value === "string" ? relation(value) : value;
}
function relation(name2) {
  return new Ref(name2);
}
function column(table2, column3) {
  if (arguments.length === 1) {
    column3 = table2;
    table2 = null;
  }
  return new Ref(table2, column3);
}

// ../sql/src/to-sql.js
function literalToSQL(value) {
  switch (typeof value) {
    case "boolean":
      return value ? "TRUE" : "FALSE";
    case "string":
      return `'${value}'`;
    case "number":
      return Number.isFinite(value) ? String(value) : "NULL";
    default:
      if (value == null) {
        return "NULL";
      } else if (value instanceof Date) {
        const ts = +value;
        if (Number.isNaN(ts))
          return "NULL";
        const y3 = value.getUTCFullYear();
        const m2 = value.getUTCMonth();
        const d = value.getUTCDate();
        return ts === Date.UTC(y3, m2, d) ? `MAKE_DATE(${y3}, ${m2 + 1}, ${d})` : `EPOCH_MS(${ts})`;
      } else if (value instanceof RegExp) {
        return `'${value.source}'`;
      } else {
        return String(value);
      }
  }
}

// ../sql/src/expression.js
var isParamLike = (value) => typeof value?.addEventListener === "function";
function isSQLExpression(value) {
  return value instanceof SQLExpression;
}
var SQLExpression = class {
  /**
   * Create a new SQL expression instance.
   * @param {(string|SQLExpression|Ref)[]} parts The parts of the expression.
   * @param {string[]} [columns=[]] The column dependencies
   * @param {object} [props] Additional properties for this expression.
   */
  constructor(parts, columns, props) {
    this._expr = Array.isArray(parts) ? parts : [parts];
    this._deps = columns || [];
    this.annotate(props);
    const params = this._expr.filter((part) => isParamLike(part));
    if (params.length > 0) {
      this._params = Array.from(new Set(params));
      this._params.forEach((param) => {
        param.addEventListener("value", () => update(this, this.map?.get("value")));
      });
    } else {
      this.addEventListener = void 0;
    }
  }
  /**
   * A reference to this expression.
   * Provides compatibility with param-like objects.
   */
  get value() {
    return this;
  }
  /**
   * The column dependencies of this expression.
   * @returns {string[]} The columns dependencies.
   */
  get columns() {
    const { _params, _deps } = this;
    if (_params) {
      const pset = new Set(_params.flatMap((p2) => {
        const cols = p2.value?.columns;
        return Array.isArray(cols) ? cols : [];
      }));
      if (pset.size) {
        const set3 = new Set(_deps);
        pset.forEach((col) => set3.add(col));
        return Array.from(set3);
      }
    }
    return _deps;
  }
  /**
   * The first column dependency in this expression, or undefined if none.
   * @returns {string} The first column dependency.
   */
  get column() {
    return this._deps.length ? this._deps[0] : this.columns[0];
  }
  /**
   * Annotate this expression instance with additional properties.
   * @param {object[]} [props] One or more objects with properties to add.
   * @returns {this} This SQL expression.
   */
  annotate(...props) {
    return Object.assign(this, ...props);
  }
  /**
   * Generate a SQL code string corresponding to this expression.
   * @returns {string} A SQL code string.
   */
  toString() {
    return this._expr.map((p2) => isParamLike(p2) && !isSQLExpression(p2) ? literalToSQL(p2.value) : p2).join("");
  }
  /**
   * Add an event listener callback for the provided event type.
   * @param {string} type The event type to listen for (for example, "value").
   * @param {(a: SQLExpression) => Promise?} callback The callback function to
   *  invoke upon updates. A callback may optionally return a Promise that
   *  upstream listeners may await before proceeding.
   */
  addEventListener(type2, callback) {
    const map4 = this.map || (this.map = /* @__PURE__ */ new Map());
    const set3 = map4.get(type2) || (map4.set(type2, /* @__PURE__ */ new Set()), map4.get(type2));
    set3.add(callback);
  }
};
function update(expr, callbacks) {
  if (callbacks?.size) {
    return Promise.allSettled(Array.from(callbacks, (fn) => fn(expr)));
  }
}
function parseSQL(strings, exprs) {
  const spans = [strings[0]];
  const cols = /* @__PURE__ */ new Set();
  const n = exprs.length;
  for (let i2 = 0, k3 = 0; i2 < n; ) {
    const e = exprs[i2];
    if (isParamLike(e)) {
      spans[++k3] = e;
    } else {
      if (Array.isArray(e?.columns)) {
        e.columns.forEach((col) => cols.add(col));
      }
      spans[k3] += typeof e === "string" ? e : literalToSQL(e);
    }
    const s2 = strings[++i2];
    if (isParamLike(spans[k3])) {
      spans[++k3] = s2;
    } else {
      spans[k3] += s2;
    }
  }
  return { spans, cols: Array.from(cols) };
}
function sql(strings, ...exprs) {
  const { spans, cols } = parseSQL(strings, exprs);
  return new SQLExpression(spans, cols);
}

// ../sql/src/desc.js
function desc(expr) {
  const e = asColumn(expr);
  return sql`${e} DESC NULLS LAST`.annotate({ label: e?.label, desc: true });
}

// ../sql/src/literal.js
var literal = (value) => ({
  value,
  toString: () => literalToSQL(value)
});

// ../sql/src/operators.js
function visit(callback) {
  callback(this.op, this);
  this.children?.forEach((v3) => v3.visit(callback));
}
function logical(op, clauses) {
  const children2 = clauses.filter((x3) => x3 != null).map(asColumn);
  const strings = children2.map((c4, i2) => i2 ? ` ${op} ` : "");
  if (clauses.length)
    strings.push("");
  return sql(strings, ...children2).annotate({ op, children: children2, visit });
}
var and = (...clauses) => logical("AND", clauses.flat());
var or = (...clauses) => logical("OR", clauses.flat());
var unaryOp = (op) => (a2) => sql`(${op} ${asColumn(a2)})`.annotate({ op, a: a2, visit });
var not = unaryOp("NOT");
var unaryPostOp = (op) => (a2) => sql`(${asColumn(a2)} ${op})`.annotate({ op, a: a2, visit });
var isNull = unaryPostOp("IS NULL");
var isNotNull = unaryPostOp("IS NOT NULL");
var binaryOp = (op) => (a2, b2) => sql`(${asColumn(a2)} ${op} ${asColumn(b2)})`.annotate({ op, a: a2, b: b2, visit });
var eq = binaryOp("=");
var neq = binaryOp("<>");
var lt = binaryOp("<");
var gt = binaryOp(">");
var lte = binaryOp("<=");
var gte = binaryOp(">=");
var isDistinct = binaryOp("IS DISTINCT FROM");
var isNotDistinct = binaryOp("IS NOT DISTINCT FROM");
function rangeOp(op, a2, range3, exclusive) {
  a2 = asColumn(a2);
  const prefix2 = op.startsWith("NOT ") ? "NOT " : "";
  const expr = !range3 ? sql`` : exclusive ? sql`${prefix2}(${range3[0]} <= ${a2} AND ${a2} < ${range3[1]})` : sql`(${a2} ${op} ${range3[0]} AND ${range3[1]})`;
  return expr.annotate({ op, visit, field: a2, range: range3 });
}
var isBetween = (a2, range3, exclusive) => rangeOp("BETWEEN", a2, range3, exclusive);
var isNotBetween = (a2, range3, exclusive) => rangeOp("NOT BETWEEN", a2, range3, exclusive);

// ../sql/src/repeat.js
function repeat(length4, str) {
  return Array.from({ length: length4 }, () => str);
}

// ../sql/src/functions.js
function functionCall(op, type2) {
  return (...values2) => {
    const args = values2.map(asColumn);
    const cast2 = type2 ? `::${type2}` : "";
    const expr = args.length ? sql([`${op}(`, ...repeat(args.length - 1, ", "), `)${cast2}`], ...args) : sql`${op}()${cast2}`;
    return expr.annotate({ func: op, args });
  };
}
var regexp_matches = functionCall("REGEXP_MATCHES");
var contains = functionCall("CONTAINS");
var prefix = functionCall("PREFIX");
var suffix = functionCall("SUFFIX");
var lower = functionCall("LOWER");
var upper = functionCall("UPPER");
var length = functionCall("LENGTH");
var isNaN2 = functionCall("ISNAN");
var isFinite2 = functionCall("ISFINITE");
var isInfinite = functionCall("ISINF");

// ../sql/src/windows.js
var WindowFunction = class _WindowFunction extends SQLExpression {
  constructor(op, func, type2, name2, group3 = "", order = "", frame4 = "") {
    let expr;
    const noWindowParams = !(group3 || order || frame4);
    if (name2 && noWindowParams) {
      expr = name2 ? sql`${func} OVER "${name2}"` : sql`${func} OVER ()`;
    } else {
      const s1 = group3 && order ? " " : "";
      const s2 = (group3 || order) && frame4 ? " " : "";
      expr = sql`${func} OVER (${name2 ? `"${name2}" ` : ""}${group3}${s1}${order}${s2}${frame4})`;
    }
    if (type2) {
      expr = sql`(${expr})::${type2}`;
    }
    const { _expr, _deps } = expr;
    super(_expr, _deps, { window: op, func, type: type2, name: name2, group: group3, order, frame: frame4 });
  }
  get basis() {
    return this.column;
  }
  get label() {
    const { func } = this;
    return func.label ?? func.toString();
  }
  over(name2) {
    const { window: op, func, type: type2, group: group3, order, frame: frame4 } = this;
    return new _WindowFunction(op, func, type2, name2, group3, order, frame4);
  }
  partitionby(...expr) {
    const exprs = expr.flat().filter((x3) => x3).map(asColumn);
    const group3 = sql(
      ["PARTITION BY ", repeat(exprs.length - 1, ", "), ""],
      ...exprs
    );
    const { window: op, func, type: type2, name: name2, order, frame: frame4 } = this;
    return new _WindowFunction(op, func, type2, name2, group3, order, frame4);
  }
  orderby(...expr) {
    const exprs = expr.flat().filter((x3) => x3).map(asColumn);
    const order = sql(
      ["ORDER BY ", repeat(exprs.length - 1, ", "), ""],
      ...exprs
    );
    const { window: op, func, type: type2, name: name2, group: group3, frame: frame4 } = this;
    return new _WindowFunction(op, func, type2, name2, group3, order, frame4);
  }
  rows(expr) {
    const frame4 = windowFrame("ROWS", expr);
    const { window: op, func, type: type2, name: name2, group: group3, order } = this;
    return new _WindowFunction(op, func, type2, name2, group3, order, frame4);
  }
  range(expr) {
    const frame4 = windowFrame("RANGE", expr);
    const { window: op, func, type: type2, name: name2, group: group3, order } = this;
    return new _WindowFunction(op, func, type2, name2, group3, order, frame4);
  }
};
function windowFrame(type2, frame4) {
  if (isParamLike(frame4)) {
    const expr = sql`${frame4}`;
    expr.toString = () => `${type2} ${frameToSQL(frame4.value)}`;
    return expr;
  }
  return `${type2} ${frameToSQL(frame4)}`;
}
function frameToSQL(frame4) {
  const [prev, next] = frame4;
  const a2 = prev === 0 ? "CURRENT ROW" : Number.isFinite(prev) ? `${Math.abs(prev)} PRECEDING` : "UNBOUNDED PRECEDING";
  const b2 = next === 0 ? "CURRENT ROW" : Number.isFinite(next) ? `${Math.abs(next)} FOLLOWING` : "UNBOUNDED FOLLOWING";
  return `BETWEEN ${a2} AND ${b2}`;
}
function winf(op, type2) {
  return (...values2) => {
    const func = functionCall(op)(...values2);
    return new WindowFunction(op, func, type2);
  };
}
var row_number = winf("ROW_NUMBER", "INTEGER");
var rank = winf("RANK", "INTEGER");
var dense_rank = winf("DENSE_RANK", "INTEGER");
var percent_rank = winf("PERCENT_RANK");
var cume_dist = winf("CUME_DIST");
var ntile = winf("NTILE");
var lag = winf("LAG");
var lead = winf("LEAD");
var first_value = winf("FIRST_VALUE");
var last_value = winf("LAST_VALUE");
var nth_value = winf("NTH_VALUE");

// ../sql/src/aggregates.js
function agg(strings, ...exprs) {
  return sql(strings, ...exprs).annotate({ aggregate: true });
}
var AggregateFunction = class _AggregateFunction extends SQLExpression {
  constructor(op, args, type2, isDistinct2, filter3) {
    args = (args || []).map(asColumn);
    const { strings, exprs } = aggExpr(op, args, type2, isDistinct2, filter3);
    const { spans, cols } = parseSQL(strings, exprs);
    super(spans, cols, { aggregate: op, args, type: type2, isDistinct: isDistinct2, filter: filter3 });
  }
  get basis() {
    return this.column;
  }
  get label() {
    const { aggregate: op, args, isDistinct: isDistinct2 } = this;
    const dist2 = isDistinct2 ? "DISTINCT" + (args.length ? " " : "") : "";
    const tail = args.length ? `(${dist2}${args.map(unquoted).join(", ")})` : "";
    return `${op.toLowerCase()}${tail}`;
  }
  distinct() {
    const { aggregate: op, args, type: type2, filter: filter3 } = this;
    return new _AggregateFunction(op, args, type2, true, filter3);
  }
  where(filter3) {
    const { aggregate: op, args, type: type2, isDistinct: isDistinct2 } = this;
    return new _AggregateFunction(op, args, type2, isDistinct2, filter3);
  }
  window() {
    const { aggregate: op, args, type: type2, isDistinct: isDistinct2 } = this;
    const func = new _AggregateFunction(op, args, null, isDistinct2);
    return new WindowFunction(op, func, type2);
  }
  partitionby(...expr) {
    return this.window().partitionby(...expr);
  }
  orderby(...expr) {
    return this.window().orderby(...expr);
  }
  rows(prev, next) {
    return this.window().rows(prev, next);
  }
  range(prev, next) {
    return this.window().range(prev, next);
  }
};
function aggExpr(op, args, type2, isDistinct2, filter3) {
  const close = `)${type2 ? `::${type2}` : ""}`;
  let strings = [`${op}(${isDistinct2 ? "DISTINCT " : ""}`];
  let exprs = [];
  if (args.length) {
    strings = strings.concat([
      ...repeat(args.length - 1, ", "),
      `${close}${filter3 ? " FILTER (WHERE " : ""}`,
      ...filter3 ? [")"] : []
    ]);
    exprs = [...args, ...filter3 ? [filter3] : []];
  } else {
    strings[0] += "*" + close;
  }
  return { exprs, strings };
}
function unquoted(value) {
  const s2 = literalToSQL(value);
  return s2 && s2.startsWith('"') && s2.endsWith('"') ? s2.slice(1, -1) : s2;
}
function aggf(op, type2) {
  return (...args) => new AggregateFunction(op, args, type2);
}
var count = aggf("COUNT", "INTEGER");
var avg = aggf("AVG");
var mean = aggf("AVG");
var mad = aggf("MAD");
var max = aggf("MAX");
var min = aggf("MIN");
var sum2 = aggf("SUM", "DOUBLE");
var product = aggf("PRODUCT");
var median = aggf("MEDIAN");
var quantile = aggf("QUANTILE");
var mode = aggf("MODE");
var variance = aggf("VARIANCE");
var stddev = aggf("STDDEV");
var skewness = aggf("SKEWNESS");
var kurtosis = aggf("KURTOSIS");
var entropy = aggf("ENTROPY");
var varPop = aggf("VAR_POP");
var stddevPop = aggf("STDDEV_POP");
var corr = aggf("CORR");
var covarPop = aggf("COVAR_POP");
var regrIntercept = aggf("REGR_INTERCEPT");
var regrSlope = aggf("REGR_SLOPE");
var regrCount = aggf("REGR_COUNT");
var regrR2 = aggf("REGR_R2");
var regrSYY = aggf("REGR_SYY");
var regrSXX = aggf("REGR_SXX");
var regrSXY = aggf("REGR_SXY");
var regrAvgX = aggf("REGR_AVGX");
var regrAvgY = aggf("REGR_AVGY");
var first = aggf("FIRST");
var last = aggf("LAST");
var argmin = aggf("ARG_MIN");
var argmax = aggf("ARG_MAX");
var stringAgg = aggf("STRING_AGG");
var arrayAgg = aggf("ARRAY_AGG");

// ../sql/src/cast.js
function cast(expr, type2) {
  const arg = asColumn(expr);
  const e = sql`CAST(${arg} AS ${type2})`;
  Object.defineProperty(e, "label", {
    enumerable: true,
    get() {
      return expr.label;
    }
  });
  Object.defineProperty(e, "aggregate", {
    enumerable: true,
    get() {
      return expr.aggregate || false;
    }
  });
  return e;
}
var castDouble = (expr) => cast(expr, "DOUBLE");
var castInteger = (expr) => cast(expr, "INTEGER");

// ../sql/src/datetime.js
var epoch_ms = (expr) => {
  const d = asColumn(expr);
  return sql`(1000 * (epoch(${d}) - second(${d})) + millisecond(${d}))::DOUBLE`;
};
var dateMonth = (expr) => {
  const d = asColumn(expr);
  return sql`MAKE_DATE(2012, MONTH(${d}), 1)`.annotate({ label: "month" });
};
var dateMonthDay = (expr) => {
  const d = asColumn(expr);
  return sql`MAKE_DATE(2012, MONTH(${d}), DAY(${d}))`.annotate({ label: "date" });
};
var dateDay = (expr) => {
  const d = asColumn(expr);
  return sql`MAKE_DATE(2012, 1, DAY(${d}))`.annotate({ label: "date" });
};

// ../sql/src/Query.js
var Query = class _Query {
  static select(...expr) {
    return new _Query().select(...expr);
  }
  static from(...expr) {
    return new _Query().from(...expr);
  }
  static with(...expr) {
    return new _Query().with(...expr);
  }
  static union(...queries) {
    return new SetOperation("UNION", queries.flat());
  }
  static unionAll(...queries) {
    return new SetOperation("UNION ALL", queries.flat());
  }
  static intersect(...queries) {
    return new SetOperation("INTERSECT", queries.flat());
  }
  static except(...queries) {
    return new SetOperation("EXCEPT", queries.flat());
  }
  constructor() {
    this.query = {
      with: [],
      select: [],
      from: [],
      where: [],
      groupby: [],
      having: [],
      window: [],
      qualify: [],
      orderby: []
    };
  }
  clone() {
    const q2 = new _Query();
    q2.query = { ...this.query };
    return q2;
  }
  with(...expr) {
    const { query } = this;
    if (expr.length === 0) {
      return query.with;
    } else {
      const list = [];
      const add = (as, q2) => {
        const query2 = q2.clone();
        query2.cteFor = this;
        list.push({ as, query: query2 });
      };
      expr.flat().forEach((e) => {
        if (e == null) {
        } else if (e.as && e.query) {
          add(e.as, e.query);
        } else {
          for (const as in e) {
            add(as, e[as]);
          }
        }
      });
      query.with = query.with.concat(list);
      return this;
    }
  }
  select(...expr) {
    const { query } = this;
    if (expr.length === 0) {
      return query.select;
    } else {
      const list = [];
      for (const e of expr.flat()) {
        if (e == null) {
        } else if (typeof e === "string") {
          list.push({ as: e, expr: asColumn(e) });
        } else if (e instanceof Ref) {
          list.push({ as: e.column, expr: e });
        } else if (Array.isArray(e)) {
          list.push({ as: e[0], expr: e[1] });
        } else {
          for (const as in e) {
            list.push({ as: unquote(as), expr: asColumn(e[as]) });
          }
        }
      }
      query.select = query.select.concat(list);
      return this;
    }
  }
  $select(...expr) {
    this.query.select = [];
    return this.select(...expr);
  }
  distinct(value = true) {
    this.query.distinct = !!value;
    return this;
  }
  from(...expr) {
    const { query } = this;
    if (expr.length === 0) {
      return query.from;
    } else {
      const list = [];
      expr.flat().forEach((e) => {
        if (e == null) {
        } else if (typeof e === "string") {
          list.push({ as: e, from: asRelation(e) });
        } else if (e instanceof Ref) {
          list.push({ as: e.table, from: e });
        } else if (isQuery(e) || isSQLExpression(e)) {
          list.push({ from: e });
        } else if (Array.isArray(e)) {
          list.push({ as: unquote(e[0]), from: asRelation(e[1]) });
        } else {
          for (const as in e) {
            list.push({ as: unquote(as), from: asRelation(e[as]) });
          }
        }
      });
      query.from = query.from.concat(list);
      return this;
    }
  }
  $from(...expr) {
    this.query.from = [];
    return this.from(...expr);
  }
  sample(value, method) {
    const { query } = this;
    if (arguments.length === 0) {
      return query.sample;
    } else {
      let spec = value;
      if (typeof value === "number") {
        spec = value > 0 && value < 1 ? { perc: 100 * value, method } : { rows: Math.round(value), method };
      }
      query.sample = spec;
      return this;
    }
  }
  where(...expr) {
    const { query } = this;
    if (expr.length === 0) {
      return query.where;
    } else {
      query.where = query.where.concat(
        expr.flat().filter((x3) => x3)
      );
      return this;
    }
  }
  $where(...expr) {
    this.query.where = [];
    return this.where(...expr);
  }
  groupby(...expr) {
    const { query } = this;
    if (expr.length === 0) {
      return query.groupby;
    } else {
      query.groupby = query.groupby.concat(
        expr.flat().filter((x3) => x3).map(asColumn)
      );
      return this;
    }
  }
  $groupby(...expr) {
    this.query.groupby = [];
    return this.groupby(...expr);
  }
  having(...expr) {
    const { query } = this;
    if (expr.length === 0) {
      return query.having;
    } else {
      query.having = query.having.concat(
        expr.flat().filter((x3) => x3)
      );
      return this;
    }
  }
  window(...expr) {
    const { query } = this;
    if (expr.length === 0) {
      return query.window;
    } else {
      const list = [];
      expr.flat().forEach((e) => {
        if (e == null) {
        } else {
          for (const as in e) {
            list.push({ as: unquote(as), expr: e[as] });
          }
        }
      });
      query.window = query.window.concat(list);
      return this;
    }
  }
  qualify(...expr) {
    const { query } = this;
    if (expr.length === 0) {
      return query.qualify;
    } else {
      query.qualify = query.qualify.concat(
        expr.flat().filter((x3) => x3)
      );
      return this;
    }
  }
  orderby(...expr) {
    const { query } = this;
    if (expr.length === 0) {
      return query.orderby;
    } else {
      query.orderby = query.orderby.concat(
        expr.flat().filter((x3) => x3).map(asColumn)
      );
      return this;
    }
  }
  limit(value) {
    const { query } = this;
    if (arguments.length === 0) {
      return query.limit;
    } else {
      query.limit = Number.isFinite(value) ? value : void 0;
      return this;
    }
  }
  offset(value) {
    const { query } = this;
    if (arguments.length === 0) {
      return query.offset;
    } else {
      query.offset = Number.isFinite(value) ? value : void 0;
      return this;
    }
  }
  get subqueries() {
    const { query, cteFor } = this;
    const ctes = (cteFor?.query || query).with;
    const cte = ctes?.reduce((o, { as, query: query2 }) => (o[as] = query2, o), {});
    const q2 = [];
    query.from.forEach(({ from: from2 }) => {
      if (isQuery(from2)) {
        q2.push(from2);
      } else if (cte[from2.table]) {
        const sub = cte[from2.table];
        q2.push(sub);
      }
    });
    return q2;
  }
  toString() {
    const {
      select: select2,
      distinct: distinct2,
      from: from2,
      sample,
      where,
      groupby,
      having,
      window: window3,
      qualify,
      orderby,
      limit,
      offset: offset2,
      with: cte
    } = this.query;
    const sql2 = [];
    if (cte.length) {
      const list = cte.map(({ as, query }) => `"${as}" AS (${query})`);
      sql2.push(`WITH ${list.join(", ")}`);
    }
    const sels = select2.map(
      ({ as, expr }) => isColumnRefFor(expr, as) && !expr.table ? `${expr}` : `${expr} AS "${as}"`
    );
    sql2.push(`SELECT${distinct2 ? " DISTINCT" : ""} ${sels.join(", ")}`);
    if (from2.length) {
      const rels = from2.map(({ as, from: from3 }) => {
        const rel = isQuery(from3) ? `(${from3})` : `${from3}`;
        return !as || as === from3.table ? rel : `${rel} AS "${as}"`;
      });
      sql2.push(`FROM ${rels.join(", ")}`);
    }
    if (where.length) {
      const clauses = where.map(String).filter((x3) => x3).join(" AND ");
      if (clauses)
        sql2.push(`WHERE ${clauses}`);
    }
    if (sample) {
      const { rows, perc, method, seed } = sample;
      const size = rows ? `${rows} ROWS` : `${perc} PERCENT`;
      const how = method ? ` (${method}${seed != null ? `, ${seed}` : ""})` : "";
      sql2.push(`USING SAMPLE ${size}${how}`);
    }
    if (groupby.length) {
      sql2.push(`GROUP BY ${groupby.join(", ")}`);
    }
    if (having.length) {
      const clauses = having.map(String).filter((x3) => x3).join(" AND ");
      if (clauses)
        sql2.push(`HAVING ${clauses}`);
    }
    if (window3.length) {
      const windows = window3.map(({ as, expr }) => `"${as}" AS (${expr})`);
      sql2.push(`WINDOW ${windows.join(", ")}`);
    }
    if (qualify.length) {
      const clauses = qualify.map(String).filter((x3) => x3).join(" AND ");
      if (clauses)
        sql2.push(`QUALIFY ${clauses}`);
    }
    if (orderby.length) {
      sql2.push(`ORDER BY ${orderby.join(", ")}`);
    }
    if (Number.isFinite(limit)) {
      sql2.push(`LIMIT ${limit}`);
    }
    if (Number.isFinite(offset2)) {
      sql2.push(`OFFSET ${offset2}`);
    }
    return sql2.join(" ");
  }
};
var SetOperation = class _SetOperation {
  constructor(op, queries) {
    this.op = op;
    this.queries = queries.map((q2) => q2.clone());
    this.query = { orderby: [] };
  }
  clone() {
    const q2 = new _SetOperation(this.op, this.queries);
    q2.query = { ...this.query };
    return q2;
  }
  orderby(...expr) {
    const { query } = this;
    if (expr.length === 0) {
      return query.orderby;
    } else {
      query.orderby = query.orderby.concat(
        expr.flat().filter((x3) => x3).map(asColumn)
      );
      return this;
    }
  }
  limit(value) {
    const { query } = this;
    if (arguments.length === 0) {
      return query.limit;
    } else {
      query.limit = Number.isFinite(value) ? value : void 0;
      return this;
    }
  }
  offset(value) {
    const { query } = this;
    if (arguments.length === 0) {
      return query.offset;
    } else {
      query.offset = Number.isFinite(value) ? value : void 0;
      return this;
    }
  }
  get subqueries() {
    const { queries, cteFor } = this;
    if (cteFor)
      queries.forEach((q2) => q2.cteFor = cteFor);
    return queries;
  }
  toString() {
    const { op, queries, query: { orderby, limit, offset: offset2 } } = this;
    const sql2 = [queries.join(` ${op} `)];
    if (orderby.length) {
      sql2.push(`ORDER BY ${orderby.join(", ")}`);
    }
    if (Number.isFinite(limit)) {
      sql2.push(`LIMIT ${limit}`);
    }
    if (Number.isFinite(offset2)) {
      sql2.push(`OFFSET ${offset2}`);
    }
    return sql2.join(" ");
  }
};
function isQuery(value) {
  return value instanceof Query || value instanceof SetOperation;
}
function unquote(s2) {
  return isDoubleQuoted(s2) ? s2.slice(1, -1) : s2;
}
function isDoubleQuoted(s2) {
  return s2[0] === '"' && s2[s2.length - 1] === '"';
}

// ../sql/src/load/create.js
function create(name2, query, {
  replace = false,
  temp = true,
  view = false
} = {}) {
  return "CREATE" + (replace ? " OR REPLACE " : " ") + (temp ? "TEMP " : "") + (view ? "VIEW" : "TABLE") + (replace ? " " : " IF NOT EXISTS ") + name2 + " AS " + query;
}

// ../sql/src/load/sql-from.js
function sqlFrom(data, {
  columns = Object.keys(data?.[0] || {})
} = {}) {
  let keys = [];
  if (Array.isArray(columns)) {
    keys = columns;
    columns = keys.reduce((m2, k3) => (m2[k3] = k3, m2), {});
  } else if (columns) {
    keys = Object.keys(columns);
  }
  if (!keys.length) {
    throw new Error("Can not create table from empty column set.");
  }
  const subq = [];
  for (const datum2 of data) {
    const sel = keys.map((k3) => `${literalToSQL(datum2[k3])} AS "${columns[k3]}"`);
    subq.push(`(SELECT ${sel.join(", ")})`);
  }
  return subq.join(" UNION ALL ");
}

// ../sql/src/load/load.js
function load(method, tableName, fileName, options = {}, defaults22 = {}) {
  const { select: select2 = ["*"], where, view, temp, replace, ...file } = options;
  const params = parameters({ ...defaults22, ...file });
  const read = `${method}('${fileName}'${params ? ", " + params : ""})`;
  const filter3 = where ? ` WHERE ${where}` : "";
  const query = `SELECT ${select2.join(", ")} FROM ${read}${filter3}`;
  return create(tableName, query, { view, temp, replace });
}
function loadCSV(tableName, fileName, options) {
  return load("read_csv", tableName, fileName, options, { auto_detect: true, sample_size: -1 });
}
function loadJSON(tableName, fileName, options) {
  return load("read_json", tableName, fileName, options, { auto_detect: true, json_format: "auto" });
}
function loadParquet(tableName, fileName, options) {
  return load("read_parquet", tableName, fileName, options);
}
function loadObjects(tableName, data, options = {}) {
  const { select: select2 = ["*"], ...opt } = options;
  const values2 = sqlFrom(data);
  const query = select2.length === 1 && select2[0] === "*" ? values2 : `SELECT ${select2} FROM ${values2}`;
  return create(tableName, query, opt);
}
function parameters(options) {
  return Object.entries(options).map(([key, value]) => {
    const t = typeof value;
    const v3 = t === "boolean" ? String(value) : t === "string" ? `'${value}'` : value;
    return `${key}=${v3}`;
  }).join(", ");
}

// ../core/src/util/summarize.js
var Count = "count";
var Nulls = "nulls";
var Max = "max";
var Min = "min";
var Distinct = "distinct";
var statMap = {
  [Count]: count,
  [Distinct]: (column3) => count(column3).distinct(),
  [Max]: max,
  [Min]: min,
  [Nulls]: (column3) => count().where(isNull(column3))
};
function summarize({ table: table2, column: column3 }, stats) {
  return Query.from(table2).select(stats.map((s2) => [s2, statMap[s2](column3)]));
}

// ../core/src/Catalog.js
var object = () => /* @__PURE__ */ Object.create(null);
var Catalog = class {
  constructor(coordinator2) {
    this.mc = coordinator2;
    this.clear();
  }
  clear() {
    this.tables = object();
  }
  tableInfo(table2) {
    const cache = this.tables;
    if (cache[table2]) {
      return cache[table2];
    }
    const infoPromise = getTableInfo(this.mc, table2).catch((err) => {
      cache[table2] = null;
      throw err;
    });
    return cache[table2] = infoPromise;
  }
  async fieldInfo({ table: table2, column: column3, stats }) {
    const tableInfo = await this.tableInfo(table2);
    const colInfo = tableInfo[column3];
    if (colInfo == null)
      return;
    if (!stats?.length)
      return colInfo;
    const result = await this.mc.query(
      summarize(colInfo, stats),
      { persist: true }
    );
    const info = { ...colInfo, ...Array.from(result)[0] };
    for (const key in info) {
      const value = info[key];
      if (typeof value === "bigint") {
        info[key] = Number(value);
      }
    }
    return info;
  }
  async queryFields(fields) {
    const list = await resolveFields(this, fields);
    const data = await Promise.all(list.map((f2) => this.fieldInfo(f2)));
    return data.filter((x3) => x3);
  }
};
async function getTableInfo(mc, table2) {
  const result = await mc.query(
    `DESCRIBE "${table2}"`,
    { type: "json", cache: false }
  );
  const columns = object();
  for (const entry of result) {
    columns[entry.column_name] = {
      table: table2,
      column: entry.column_name,
      sqlType: entry.column_type,
      type: jsType(entry.column_type),
      nullable: entry.null === "YES"
    };
  }
  return columns;
}
async function resolveFields(catalog, list) {
  return list.length === 1 && list[0].column === "*" ? Object.values(await catalog.tableInfo(list[0].table)) : list;
}

// ../core/src/util/hash.js
function fnv_hash(v3) {
  let a2 = 2166136261;
  for (let i2 = 0, n = v3.length; i2 < n; ++i2) {
    const c4 = v3.charCodeAt(i2);
    const d = c4 & 65280;
    if (d)
      a2 = fnv_multiply(a2 ^ d >> 8);
    a2 = fnv_multiply(a2 ^ c4 & 255);
  }
  return fnv_mix(a2);
}
function fnv_multiply(a2) {
  return a2 + (a2 << 1) + (a2 << 4) + (a2 << 7) + (a2 << 8) + (a2 << 24);
}
function fnv_mix(a2) {
  a2 += a2 << 13;
  a2 ^= a2 >>> 7;
  a2 += a2 << 3;
  a2 ^= a2 >>> 17;
  a2 += a2 << 5;
  return a2 & 4294967295;
}

// ../core/src/DataTileIndexer.js
var identity = (x3) => x3;
var DataTileIndexer = class {
  constructor(mc, selection2) {
    this.mc = mc;
    this.selection = selection2;
    this.reset();
  }
  reset() {
    this.enabled = false;
    this.clients = null;
    this.indices = null;
    this.activeView = null;
  }
  clear() {
    if (this.indices) {
      this.mc.cancel(Array.from(this.indices.values(), (index2) => index2.result));
      this.indices = null;
    }
  }
  index(clients, active) {
    if (this.clients !== clients) {
      const cols = Array.from(clients, getIndexColumns);
      const from2 = cols[0]?.from;
      this.enabled = cols.every((c4) => c4 && c4.from === from2);
      this.clients = clients;
      this.activeView = null;
      this.clear();
    }
    if (!this.enabled)
      return false;
    active = active || this.selection.active;
    const { source } = active;
    if (source && source === this.activeView?.source)
      return true;
    this.clear();
    if (!source)
      return false;
    const activeView = this.activeView = getActiveView(active);
    if (!activeView)
      return false;
    this.mc.logger().warn("DATA TILE INDEX CONSTRUCTION");
    const sel = this.selection.remove(source);
    const indices = this.indices = /* @__PURE__ */ new Map();
    for (const client of clients) {
      if (sel.skip(client, active))
        continue;
      const index2 = getIndexColumns(client);
      const query = client.query(sel.predicate(client)).select({ ...activeView.columns, ...index2.count }).groupby(Object.keys(activeView.columns));
      const [subq] = query.subqueries;
      if (subq) {
        const cols = Object.values(activeView.columns).map((c4) => c4.columns[0]);
        subqueryPushdown(subq, cols);
      }
      const sql2 = query.toString();
      const id2 = (fnv_hash(sql2) >>> 0).toString(16);
      const table2 = `tile_index_${id2}`;
      const result = createIndex(this.mc, table2, sql2);
      indices.set(client, { table: table2, result, ...index2 });
    }
  }
  async update() {
    const { clients, selection: selection2, activeView } = this;
    const filter3 = activeView.predicate(selection2.active.predicate);
    return Promise.all(
      Array.from(clients).map((client) => this.updateClient(client, filter3))
    );
  }
  async updateClient(client, filter3) {
    const index2 = this.indices.get(client);
    if (!index2)
      return;
    if (!filter3) {
      filter3 = this.activeView.predicate(this.selection.active.predicate);
    }
    const { table: table2, dims, aggr } = index2;
    const query = Query.select(dims, aggr).from(table2).groupby(dims).where(filter3);
    return this.mc.updateClient(client, query);
  }
};
function getActiveView(clause) {
  const { source, schema } = clause;
  let columns = clause.predicate?.columns;
  if (!schema || !columns)
    return null;
  const { type: type2, scales, pixelSize = 1 } = schema;
  let predicate;
  if (type2 === "interval" && scales) {
    const bins2 = scales.map((s2) => binInterval(s2, pixelSize));
    if (bins2.some((b2) => b2 == null))
      return null;
    if (bins2.length === 1) {
      predicate = (p2) => p2 ? isBetween("active0", p2.range.map(bins2[0])) : [];
      columns = { active0: bins2[0](clause.predicate.field) };
    } else {
      predicate = (p2) => p2 ? and(p2.children.map(({ range: range3 }, i2) => isBetween(`active${i2}`, range3.map(bins2[i2])))) : [];
      columns = Object.fromEntries(
        clause.predicate.children.map((p2, i2) => [`active${i2}`, bins2[i2](p2.field)])
      );
    }
  } else if (type2 === "point") {
    predicate = identity;
    columns = Object.fromEntries(columns.map((col) => [col.toString(), col]));
  } else {
    return null;
  }
  return { source, columns, predicate };
}
function binInterval(scale3, pixelSize) {
  const { type: type2, domain, range: range3 } = scale3;
  let lift, toSql;
  switch (type2) {
    case "linear":
      lift = identity;
      toSql = asColumn;
      break;
    case "log":
      lift = Math.log;
      toSql = (c4) => sql`LN(${asColumn(c4)})`;
      break;
    case "symlog":
      lift = (x3) => Math.sign(x3) * Math.log1p(Math.abs(x3));
      toSql = (c4) => (c4 = asColumn(c4), sql`SIGN(${c4}) * LN(1 + ABS(${c4}))`);
      break;
    case "sqrt":
      lift = Math.sqrt;
      toSql = (c4) => sql`SQRT(${asColumn(c4)})`;
      break;
    case "utc":
    case "time":
      lift = (x3) => +x3;
      toSql = (c4) => c4 instanceof Date ? +c4 : epoch_ms(asColumn(c4));
      break;
  }
  return lift ? binFunction(domain, range3, pixelSize, lift, toSql) : null;
}
function binFunction(domain, range3, pixelSize, lift, toSql) {
  const lo = lift(Math.min(domain[0], domain[1]));
  const hi = lift(Math.max(domain[0], domain[1]));
  const a2 = Math.abs(lift(range3[1]) - lift(range3[0])) / (hi - lo) / pixelSize;
  const s2 = pixelSize === 1 ? "" : `${pixelSize}::INTEGER * `;
  return (value) => sql`${s2}FLOOR(${a2}::DOUBLE * (${toSql(value)} - ${lo}::DOUBLE))::INTEGER`;
}
function createIndex(mc, table2, query) {
  return mc.exec(`CREATE TEMP TABLE IF NOT EXISTS ${table2} AS ${query}`);
}
var NO_INDEX = { from: NaN };
function getIndexColumns(client) {
  if (!client.filterIndexable)
    return NO_INDEX;
  const q2 = client.query();
  const from2 = getBaseTable(q2);
  if (!from2 || !q2.groupby)
    return NO_INDEX;
  const g2 = new Set(q2.groupby().map((c4) => c4.column));
  const aggr = [];
  const dims = [];
  let count4;
  for (const { as, expr: { aggregate } } of q2.select()) {
    switch (aggregate?.toUpperCase()) {
      case "COUNT":
      case "SUM":
        aggr.push({ [as]: sql`SUM("${as}")::DOUBLE` });
        break;
      case "AVG":
        count4 = "_count_";
        aggr.push({ [as]: sql`(SUM("${as}" * ${count4}) / SUM(${count4}))::DOUBLE` });
        break;
      case "MAX":
        aggr.push({ [as]: sql`MAX("${as}")` });
        break;
      case "MIN":
        aggr.push({ [as]: sql`MIN("${as}")` });
        break;
      default:
        if (g2.has(as))
          dims.push(as);
        else
          return null;
    }
  }
  return {
    aggr,
    dims,
    count: count4 ? { [count4]: sql`COUNT(*)` } : {},
    from: from2
  };
}
function getBaseTable(query) {
  const subq = query.subqueries;
  if (query.select) {
    const from2 = query.from();
    if (!from2.length)
      return void 0;
    if (subq.length === 0)
      return from2[0].from.table;
  }
  const base = getBaseTable(subq[0]);
  for (let i2 = 1; i2 < subq.length; ++i2) {
    const from2 = getBaseTable(subq[i2]);
    if (from2 === void 0)
      continue;
    if (from2 !== base)
      return NaN;
  }
  return base;
}
function subqueryPushdown(query, cols) {
  const memo = /* @__PURE__ */ new Set();
  const pushdown = (q2) => {
    if (memo.has(q2))
      return;
    memo.add(q2);
    if (q2.select && q2.from().length) {
      q2.select(cols);
    }
    q2.subqueries.forEach(pushdown);
  };
  pushdown(query);
}

// ../core/src/FilterGroup.js
var FilterGroup = class {
  constructor(coordinator2, selection2, index2 = true) {
    this.mc = coordinator2;
    this.selection = selection2;
    this.clients = /* @__PURE__ */ new Set();
    this.indexer = index2 ? new DataTileIndexer(this.mc, selection2) : null;
    const { value, activate } = this.handlers = {
      value: () => this.update(),
      activate: (clause) => this.indexer?.index(this.clients, clause)
    };
    selection2.addEventListener("value", value);
    selection2.addEventListener("activate", activate);
  }
  finalize() {
    const { value, activate } = this.handlers;
    this.selection.removeEventListener("value", value);
    this.selection.removeEventListener("activate", activate);
  }
  reset() {
    this.indexer?.reset();
  }
  add(client) {
    (this.clients = new Set(this.clients)).add(client);
    return this;
  }
  remove(client) {
    if (this.clients.has(client)) {
      (this.clients = new Set(this.clients)).delete(client);
    }
    return this;
  }
  update() {
    const { mc, indexer, clients, selection: selection2 } = this;
    return indexer?.index(clients) ? indexer.update() : defaultUpdate(mc, clients, selection2);
  }
};
function defaultUpdate(mc, clients, selection2) {
  return Promise.all(Array.from(clients).map((client) => {
    const filter3 = selection2.predicate(client);
    if (filter3 != null) {
      return mc.updateClient(client, client.query(filter3));
    }
  }));
}

// ../core/src/util/query-result.js
function queryResult() {
  let resolve;
  let reject;
  const p2 = new Promise((r, e) => {
    resolve = r;
    reject = e;
  });
  p2.fulfill = (value) => (resolve(value), p2);
  p2.reject = (err) => (reject(err), p2);
  return p2;
}

// ../core/src/QueryConsolidator.js
function consolidator(enqueue, cache, record) {
  let pending = [];
  let id2 = 0;
  function run() {
    const groups2 = entryGroups(pending, cache);
    pending = [];
    id2 = 0;
    for (const group3 of groups2) {
      consolidate(group3, enqueue, record);
      processResults(group3, cache);
    }
  }
  return {
    add(entry, priority) {
      if (entry.request.type === "arrow") {
        id2 = id2 || requestAnimationFrame(() => run());
        pending.push({ entry, priority, index: pending.length });
      } else {
        enqueue(entry, priority);
      }
    }
  };
}
function entryGroups(entries, cache) {
  const groups2 = [];
  const groupMap = /* @__PURE__ */ new Map();
  for (const query of entries) {
    const { entry: { request } } = query;
    const key = consolidationKey(request.query, cache);
    if (!groupMap.has(key)) {
      const list = [];
      groups2.push(list);
      groupMap.set(key, list);
    }
    groupMap.get(key).push(query);
  }
  return groups2;
}
function consolidationKey(query, cache) {
  const sql2 = `${query}`;
  if (query instanceof Query && !cache.get(sql2)) {
    if (query.orderby().length || query.where().length || query.qualify().length || query.having().length) {
      return sql2;
    }
    const q2 = query.clone().$select("*");
    const groupby = query.groupby();
    if (groupby.length) {
      const map4 = {};
      query.select().forEach(({ as, expr }) => map4[as] = expr);
      q2.$groupby(groupby.map((e) => e instanceof Ref && map4[e.column] || e));
    }
    return `${q2}`;
  } else {
    return sql2;
  }
}
function consolidate(group3, enqueue, record) {
  if (shouldConsolidate(group3)) {
    enqueue({
      request: {
        type: "arrow",
        cache: false,
        record: false,
        query: consolidatedQuery(group3, record)
      },
      result: group3.result = queryResult()
    });
  } else {
    for (const { entry, priority } of group3) {
      enqueue(entry, priority);
    }
  }
}
function shouldConsolidate(group3) {
  if (group3.length > 1) {
    const sql2 = `${group3[0].entry.request.query}`;
    for (let i2 = 1; i2 < group3.length; ++i2) {
      if (sql2 !== `${group3[i2].entry.request.query}`) {
        return true;
      }
    }
  }
  return false;
}
function consolidatedQuery(group3, record) {
  const maps = group3.maps = [];
  const fields = /* @__PURE__ */ new Map();
  for (const item of group3) {
    const { query: query2 } = item.entry.request;
    const fieldMap = [];
    maps.push(fieldMap);
    for (const { as, expr } of query2.select()) {
      const e = `${expr}`;
      if (!fields.has(e)) {
        fields.set(e, [`col${fields.size}`, expr]);
      }
      const [name2] = fields.get(e);
      fieldMap.push([name2, as]);
    }
    record(`${query2}`);
  }
  const query = group3[0].entry.request.query.clone();
  const groupby = query.groupby();
  if (groupby.length) {
    const map4 = {};
    group3.maps[0].forEach(([name2, as]) => map4[as] = name2);
    query.$groupby(groupby.map((e) => e instanceof Ref && map4[e.column] || e));
  }
  return query.$select(Array.from(fields.values()));
}
async function processResults(group3, cache) {
  const { maps, result } = group3;
  if (!maps)
    return;
  let data;
  try {
    data = await result;
  } catch (err) {
    for (const { entry } of group3) {
      entry.result.reject(err);
    }
    return;
  }
  group3.forEach(({ entry }, index2) => {
    const { request, result: result2 } = entry;
    const projected = projectResult(data, maps[index2]);
    if (request.cache) {
      cache.set(String(request.query), projected);
    }
    result2.fulfill(projected);
  });
}
function projectResult(data, map4) {
  if (map4) {
    const cols = {};
    for (const [name2, as] of map4) {
      cols[as] = data.getChild(name2);
    }
    return new data.constructor(cols);
  } else {
    return data;
  }
}

// ../core/src/util/cache.js
var requestIdle = typeof requestIdleCallback !== "undefined" ? requestIdleCallback : setTimeout;
var voidCache = () => ({
  get: () => void 0,
  set: (key, value) => value,
  clear: () => {
  }
});
function lruCache({
  max: max4 = 1e3,
  // max entries
  ttl = 3 * 60 * 60 * 1e3
  // time-to-live, default 3 hours
} = {}) {
  let cache = /* @__PURE__ */ new Map();
  function evict() {
    const expire = performance.now() - ttl;
    let lruKey = null;
    let lruLast = Infinity;
    for (const [key, value] of cache) {
      const { last: last2 } = value;
      if (last2 < lruLast) {
        lruKey = key;
        lruLast = last2;
      }
      if (expire > last2) {
        cache.delete(key);
      }
    }
    if (lruKey) {
      cache.delete(lruKey);
    }
  }
  return {
    get(key) {
      const entry = cache.get(key);
      if (entry) {
        entry.last = performance.now();
        return entry.value;
      }
    },
    set(key, value) {
      cache.set(key, { last: performance.now(), value });
      if (cache.size > max4)
        requestIdle(evict);
      return value;
    },
    clear() {
      cache = /* @__PURE__ */ new Map();
    }
  };
}

// ../core/src/util/priority-queue.js
function priorityQueue(ranks) {
  const queue = Array.from(
    { length: ranks },
    () => ({ head: null, tail: null })
  );
  return {
    /**
     * Indicate if the queue is empty.
     * @returns [boolean] true if empty, false otherwise.
     */
    isEmpty() {
      return queue.every((list) => !list.head);
    },
    /**
     * Insert an item into the queue with a given priority rank.
     * @param {*} item The item to add.
     * @param {number} rank The integer priority rank.
     *  Priority ranks are integers starting at zero.
     *  Lower ranks indicate higher priority.
     */
    insert(item, rank3) {
      const list = queue[rank3];
      if (!list) {
        throw new Error(`Invalid queue priority rank: ${rank3}`);
      }
      const node = { item, next: null };
      if (list.head === null) {
        list.head = list.tail = node;
      } else {
        list.tail = list.tail.next = node;
      }
    },
    /**
     * Remove a set of items from the queue, regardless of priority rank.
     * If a provided item is not in the queue it will be ignored.
     * @param {(item: *) => boolean} test A predicate function to test
     * 	if an item should be removed (true to drop, false to keep).
     */
    remove(test) {
      for (const list of queue) {
        let { head, tail } = list;
        for (let prev = null, curr = head; curr; prev = curr, curr = curr.next) {
          if (test(curr.item)) {
            if (curr === head) {
              head = curr.next;
            } else {
              prev.next = curr.next;
            }
            if (curr === tail)
              tail = prev || head;
          }
        }
        list.head = head;
        list.tail = tail;
      }
    },
    /**
     * Remove and return the next highest priority item.
     * @returns {*} The next item in the queue,
     *  or undefined if this queue is empty.
     */
    next() {
      for (const list of queue) {
        const { head } = list;
        if (head !== null) {
          list.head = head.next;
          if (list.tail === head) {
            list.tail = null;
          }
          return head.item;
        }
      }
    }
  };
}

// ../core/src/QueryManager.js
var Priority = { High: 0, Normal: 1, Low: 2 };
function QueryManager() {
  const queue = priorityQueue(3);
  let db;
  let clientCache;
  let logger;
  let recorders = [];
  let pending = null;
  let consolidate2;
  function next() {
    if (pending || queue.isEmpty())
      return;
    const { request, result } = queue.next();
    pending = submit(request, result);
    pending.finally(() => {
      pending = null;
      next();
    });
  }
  function enqueue(entry, priority = Priority.Normal) {
    queue.insert(entry, priority);
    next();
  }
  function recordQuery(sql2) {
    if (recorders.length && sql2) {
      recorders.forEach((rec) => rec.add(sql2));
    }
  }
  async function submit(request, result) {
    try {
      const { query, type: type2, cache = false, record = true, options } = request;
      const sql2 = query ? `${query}` : null;
      if (record) {
        recordQuery(sql2);
      }
      if (cache) {
        const cached = clientCache.get(sql2);
        if (cached) {
          logger.debug("Cache");
          result.fulfill(cached);
          return;
        }
      }
      const t03 = performance.now();
      const data = await db.query({ type: type2, sql: sql2, ...options });
      if (cache)
        clientCache.set(sql2, data);
      logger.debug(`Request: ${(performance.now() - t03).toFixed(1)}`);
      result.fulfill(data);
    } catch (err) {
      result.reject(err);
    }
  }
  return {
    cache(value) {
      return value !== void 0 ? clientCache = value === true ? lruCache() : value || voidCache() : clientCache;
    },
    logger(value) {
      return value ? logger = value : logger;
    },
    connector(connector) {
      return connector ? db = connector : db;
    },
    consolidate(flag) {
      if (flag && !consolidate2) {
        consolidate2 = consolidator(enqueue, clientCache, recordQuery);
      } else if (!flag && consolidate2) {
        consolidate2 = null;
      }
    },
    request(request, priority = Priority.Normal) {
      const result = queryResult();
      const entry = { request, result };
      if (consolidate2) {
        consolidate2.add(entry, priority);
      } else {
        enqueue(entry, priority);
      }
      return result;
    },
    cancel(requests) {
      const set3 = new Set(requests);
      queue.remove(({ result }) => set3.has(result));
    },
    clear() {
      queue.remove(({ result }) => {
        result.reject("Cleared");
        return true;
      });
    },
    record() {
      let state = [];
      const recorder = {
        add(query) {
          state.push(query);
        },
        reset() {
          state = [];
        },
        snapshot() {
          return state.slice();
        },
        stop() {
          recorders = recorders.filter((x3) => x3 !== recorder);
          return state;
        }
      };
      recorders.push(recorder);
      return recorder;
    }
  };
}

// ../core/src/util/void-logger.js
function voidLogger() {
  return {
    debug() {
    },
    info() {
    },
    log() {
    },
    warn() {
    },
    error() {
    }
  };
}

// ../core/src/Coordinator.js
var _instance;
function coordinator(instance17) {
  if (instance17) {
    _instance = instance17;
  } else if (_instance == null) {
    _instance = new Coordinator();
  }
  return _instance;
}
var Coordinator = class {
  constructor(db = socketConnector(), options = {}) {
    this.catalog = new Catalog(this);
    this.manager = options.manager || QueryManager();
    this.logger(options.logger || console);
    this.configure(options);
    this.databaseConnector(db);
    this.clear();
  }
  logger(logger) {
    if (arguments.length) {
      this._logger = logger || voidLogger();
      this.manager.logger(this._logger);
    }
    return this._logger;
  }
  configure({ cache = true, consolidate: consolidate2 = true, indexes: indexes2 = true }) {
    this.manager.cache(cache);
    this.manager.consolidate(consolidate2);
    this.indexes = indexes2;
  }
  clear({ clients = true, cache = true, catalog = false } = {}) {
    this.manager.clear();
    if (clients) {
      this.clients?.forEach((client) => this.disconnect(client));
      this.filterGroups?.forEach((group3) => group3.finalize());
      this.clients = /* @__PURE__ */ new Set();
      this.filterGroups = /* @__PURE__ */ new Map();
    }
    if (cache)
      this.manager.cache().clear();
    if (catalog)
      this.catalog.clear();
  }
  databaseConnector(db) {
    return this.manager.connector(db);
  }
  // -- Query Management ----
  cancel(requests) {
    this.manager.cancel(requests);
  }
  exec(query, { priority = Priority.Normal } = {}) {
    return this.manager.request({ type: "exec", query }, priority);
  }
  query(query, {
    type: type2 = "arrow",
    cache = true,
    priority = Priority.Normal,
    ...options
  } = {}) {
    return this.manager.request({ type: type2, query, cache, options }, priority);
  }
  prefetch(query, options = {}) {
    return this.query(query, { ...options, cache: true, priority: Priority.Low });
  }
  createBundle(name2, queries, priority = Priority.Low) {
    const options = { name: name2, queries };
    return this.manager.request({ type: "create-bundle", options }, priority);
  }
  loadBundle(name2, priority = Priority.High) {
    const options = { name: name2 };
    return this.manager.request({ type: "load-bundle", options }, priority);
  }
  // -- Client Management ----
  updateClient(client, query, priority = Priority.Normal) {
    client.queryPending();
    return this.query(query, { priority }).then(
      (data) => client.queryResult(data).update(),
      (err) => {
        client.queryError(err);
        this._logger.error(err);
      }
    );
  }
  requestQuery(client, query) {
    this.filterGroups.get(client.filterBy)?.reset();
    return query ? this.updateClient(client, query) : client.update();
  }
  /**
   * Connect a client to the coordinator.
   *
   * @param {import('./MosaicClient.js').MosaicClient} client the client to disconnect
   */
  async connect(client) {
    const { catalog, clients, filterGroups, indexes: indexes2 } = this;
    if (clients.has(client)) {
      throw new Error("Client already connected.");
    }
    clients.add(client);
    const fields = client.fields();
    if (fields?.length) {
      client.fieldInfo(await catalog.queryFields(fields));
    }
    const filter3 = client.filterBy;
    if (filter3) {
      if (filterGroups.has(filter3)) {
        filterGroups.get(filter3).add(client);
      } else {
        const group3 = new FilterGroup(this, filter3, indexes2);
        filterGroups.set(filter3, group3.add(client));
      }
    }
    client.requestQuery();
  }
  /**
   * Disconnect a client from the coordinator.
   *
   * @param {import('./MosaicClient.js').MosaicClient} client the client to disconnect
   */
  disconnect(client) {
    const { clients, filterGroups } = this;
    if (!clients.has(client))
      return;
    clients.delete(client);
    filterGroups.get(client.filterBy)?.remove(client);
  }
};

// ../core/src/util/throttle.js
var NIL = {};
function throttle(callback, debounce = false) {
  let curr;
  let next;
  let pending = NIL;
  function invoke(event) {
    curr = callback(event).then(() => {
      if (next) {
        const { value } = next;
        next = null;
        invoke(value);
      } else {
        curr = null;
      }
    });
  }
  function enqueue(event) {
    next = { event };
  }
  function process(event) {
    curr ? enqueue(event) : invoke(event);
  }
  function delay(event) {
    if (pending !== event) {
      requestAnimationFrame(() => {
        const e = pending;
        pending = NIL;
        process(e);
      });
    }
    pending = event;
  }
  return debounce ? delay : process;
}

// ../core/src/MosaicClient.js
var MosaicClient = class {
  /**
   * Constructor.
   * @param {*} filterSelection An optional selection to interactively filter
   *  this client's data. If provided, a coordinator will re-query and update
   *  the client when the selection updates.
   */
  constructor(filterSelection) {
    this._filterBy = filterSelection;
    this._requestUpdate = throttle(() => this.requestQuery(), true);
  }
  /**
   * Return this client's filter selection.
   */
  get filterBy() {
    return this._filterBy;
  }
  /**
   * Return a boolean indicating if the client query can be indexed. Should
   * return true if changes to the filterBy selection does not change the
   * groupby domain of the client query.
   */
  get filterIndexable() {
    return true;
  }
  /**
   * Return an array of fields queried by this client.
   */
  fields() {
    return null;
  }
  /**
   * Called by the coordinator to set the field info for this client.
   * @returns {this}
   */
  fieldInfo() {
    return this;
  }
  /**
   * Return a query specifying the data needed by this client.
   */
  query() {
    return null;
  }
  /**
   * Called by the coordinator to inform the client that a query is pending.
   */
  queryPending() {
    return this;
  }
  /**
   * Called by the coordinator to return a query result.
   * 
   * @param {*} data the query result
   * @returns {this}
   */
  queryResult() {
    return this;
  }
  /**
   * Called by the coordinator to report a query execution error.
   */
  queryError(error2) {
    console.error(error2);
    return this;
  }
  /**
   * Request the coordinator to execute a query for this client.
   * If an explicit query is not provided, the client query method will
   * be called, filtered by the current filterBy selection.
   */
  requestQuery(query) {
    const q2 = query || this.query(this.filterBy?.predicate(this));
    return coordinator().requestQuery(this, q2);
  }
  /**
   * Request that the coordinator perform a throttled update of this client
   * using the default query. Unlike requestQuery, for which every call will
   * result in an executed query, multiple calls to requestUpdate may be
   * consolidated into a single update.
   */
  requestUpdate() {
    this._requestUpdate();
  }
  /**
   * Requests a client update.
   * For example to (re-)render an interface component.
   */
  update() {
    return this;
  }
};

// ../core/src/util/AsyncDispatch.js
var AsyncDispatch = class {
  /**
   * Create a new asynchronous dispatcher instance.
   */
  constructor() {
    this._callbacks = /* @__PURE__ */ new Map();
  }
  /**
   * Add an event listener callback for the provided event type.
   * @param {string} type The event type.
   * @param {(value: *) => Promise?} callback The event handler
   *  callback function to add. If the callback has already been
   *  added for the event type, this method has no effect.
   */
  addEventListener(type2, callback) {
    if (!this._callbacks.has(type2)) {
      this._callbacks.set(type2, {
        callbacks: /* @__PURE__ */ new Set(),
        pending: null,
        queue: new DispatchQueue()
      });
    }
    const entry = this._callbacks.get(type2);
    entry.callbacks.add(callback);
  }
  /**
   * Remove an event listener callback for the provided event type.
   * @param {string} type The event type.
   * @param {(value: *) => Promise?} callback The event handler
   *  callback function to remove.
   */
  removeEventListener(type2, callback) {
    const entry = this._callbacks.get(type2);
    if (entry) {
      entry.callbacks.delete(callback);
    }
  }
  /**
   * Lifecycle method that returns the event value to emit.
   * This default implementation simply returns the input value as-is.
   * Subclasses may override this method to implement custom transformations
   * prior to emitting an event value to all listeners.
   * @param {string} type The event type.
   * @param {*} value The event value.
   * @returns The (possibly transformed) event value to emit.
   */
  willEmit(type2, value) {
    return value;
  }
  /**
   * Lifecycle method that returns a filter function for updating the
   * queue of unemitted event values prior to enqueueing a new value.
   * This default implementation simply returns null, indicating that
   * any other unemitted event values should be dropped (that is, all
   * queued events are filtered)
   * @param {*} value The new event value that will be enqueued.
   * @returns {(value: *) => boolean|null} A dispatch queue filter
   *  function, or null if all unemitted event values should be filtered.
   */
  emitQueueFilter() {
    return null;
  }
  /**
   * Cancel all unemitted event values for the given event type.
   * @param {string} type The event type.
   */
  cancel(type2) {
    const entry = this._callbacks.get(type2);
    entry?.queue.clear();
  }
  /**
   * Emit an event value to listeners for the given event type.
   * If a previous emit has not yet resolved, the event value
   * will be queued to be emitted later.
   * The actual event value given to listeners will be the result
   * of passing the input value through the emitValue() method.
   * @param {string} type The event type.
   * @param {*} value The event value.
   */
  emit(type2, value) {
    const entry = this._callbacks.get(type2) || {};
    if (entry.pending) {
      entry.queue.enqueue(value, this.emitQueueFilter(type2, value));
    } else {
      const event = this.willEmit(type2, value);
      const { callbacks, queue } = entry;
      if (callbacks?.size) {
        const promise = Promise.allSettled(Array.from(callbacks, (callback) => callback(event))).then(() => {
          entry.pending = null;
          if (!queue.isEmpty()) {
            this.emit(type2, queue.dequeue());
          }
        });
        entry.pending = promise;
      }
    }
  }
};
var DispatchQueue = class {
  /**
   * Create a new dispatch queue instance.
   */
  constructor() {
    this.clear();
  }
  /**
   * Clear the queue state of all event values.
   */
  clear() {
    this.next = null;
  }
  /**
   * Indicate if the queue is empty.
   * @returns {boolean} True if queue is empty, false otherwise.
   */
  isEmpty() {
    return !this.next;
  }
  /**
   * Add a new value to the queue, and optionally filter the
   * current queue content in response.
   * @param {*} value The value to add.
   * @param {(value: *) => boolean} [filter] An optional filter
   *  function to apply to existing queue content. If unspecified
   *  or falsy, all previously queued values are removed. Otherwise,
   *  the provided function is applied to all queue entries. The
   *  entry is retained if the filter function returns a truthy value,
   *  otherwise the entry is removed.
   */
  enqueue(value, filter3) {
    const tail = { value };
    if (filter3 && this.next) {
      let curr = this;
      while (curr.next) {
        if (filter3(curr.next.value)) {
          curr = curr.next;
        } else {
          curr.next = curr.next.next;
        }
      }
      curr.next = tail;
    } else {
      this.next = tail;
    }
  }
  /**
   * Remove and return the next queued event value.
   * @returns {*} The next event value in the queue.
   */
  dequeue() {
    const { next } = this;
    this.next = next?.next;
    return next?.value;
  }
};

// ../core/src/util/distinct.js
function distinct(a2, b2) {
  return a2 === b2 ? false : a2 instanceof Date && b2 instanceof Date ? +a2 !== +b2 : Array.isArray(a2) && Array.isArray(b2) ? distinctArray(a2, b2) : true;
}
function distinctArray(a2, b2) {
  if (a2.length !== b2.length)
    return true;
  for (let i2 = 0; i2 < a2.length; ++i2) {
    if (a2[i2] !== b2[i2])
      return true;
  }
  return false;
}

// ../core/src/Param.js
function isParam(x3) {
  return x3 instanceof Param;
}
var Param = class _Param extends AsyncDispatch {
  /**
   * Create a new Param instance.
   * @param {*} value The initial value of the Param.
   */
  constructor(value) {
    super();
    this._value = value;
  }
  /**
   * Create a new Param instance with the given initial value.
   * @param {*} value The initial value of the Param.
   * @returns {Param} The new Param instance.
   */
  static value(value) {
    return new _Param(value);
  }
  /**
   * Create a new Param instance over an array of initial values,
   * which may contain nested Params.
   * @param {*} values The initial values of the Param.
   * @returns {Param} The new Param instance.
   */
  static array(values2) {
    if (values2.some((v3) => isParam(v3))) {
      const p2 = new _Param();
      const update2 = () => p2.update(values2.map((v3) => isParam(v3) ? v3.value : v3));
      update2();
      values2.forEach((v3) => isParam(v3) ? v3.addEventListener("value", update2) : 0);
      return p2;
    }
    return new _Param(values2);
  }
  /**
   * The current value of the Param.
   */
  get value() {
    return this._value;
  }
  /**
   * Update the Param value
   * @param {*} value The new value of the Param.
   * @param {object} [options] The update options.
   * @param {boolean} [options.force] A boolean flag indicating if the Param
   *  should emit a 'value' event even if the internal value is unchanged.
   * @returns {this} This Param instance.
   */
  update(value, { force } = {}) {
    const shouldEmit = distinct(this._value, value) || force;
    if (shouldEmit) {
      this.emit("value", value);
    } else {
      this.cancel("value");
    }
    return this;
  }
  /**
   * Upon value-typed updates, sets the current value to the input value
   * immediately prior to the event value being emitted to listeners.
   * @param {string} type The event type.
   * @param {*} value The input event value.
   * @returns {*} The input event value.
   */
  willEmit(type2, value) {
    if (type2 === "value") {
      this._value = value;
    }
    return value;
  }
};

// ../core/src/Selection.js
function isSelection(x3) {
  return x3 instanceof Selection;
}
var Selection = class _Selection extends Param {
  /**
   * Create a new Selection instance with an
   * intersect (conjunction) resolution strategy.
   * @param {object} [options] The selection options.
   * @param {boolean} [options.cross=false] Boolean flag indicating
   *  cross-filtered resolution. If true, selection clauses will not
   *  be applied to the clients they are associated with.
   * @returns {Selection} The new Selection instance.
   */
  static intersect({ cross: cross2 = false } = {}) {
    return new _Selection(new SelectionResolver({ cross: cross2 }));
  }
  /**
   * Create a new Selection instance with a
   * union (disjunction) resolution strategy.
   * @param {object} [options] The selection options.
   * @param {boolean} [options.cross=false] Boolean flag indicating
   *  cross-filtered resolution. If true, selection clauses will not
   *  be applied to the clients they are associated with.
   * @returns {Selection} The new Selection instance.
   */
  static union({ cross: cross2 = false } = {}) {
    return new _Selection(new SelectionResolver({ cross: cross2, union: true }));
  }
  /**
   * Create a new Selection instance with a singular resolution strategy
   * that keeps only the most recent selection clause.
   * @param {object} [options] The selection options.
   * @param {boolean} [options.cross=false] Boolean flag indicating
   *  cross-filtered resolution. If true, selection clauses will not
   *  be applied to the clients they are associated with.
   * @returns {Selection} The new Selection instance.
   */
  static single({ cross: cross2 = false } = {}) {
    return new _Selection(new SelectionResolver({ cross: cross2, single: true }));
  }
  /**
   * Create a new Selection instance with a
   * cross-filtered intersect resolution strategy.
   * @returns {Selection} The new Selection instance.
   */
  static crossfilter() {
    return new _Selection(new SelectionResolver({ cross: true }));
  }
  /**
   * Create a new Selection instance.
   * @param {SelectionResolver} resolver The selection resolution
   *  strategy to apply.
   */
  constructor(resolver = new SelectionResolver()) {
    super([]);
    this._resolved = this._value;
    this._resolver = resolver;
  }
  /**
   * Create a cloned copy of this Selection instance.
   * @returns {this} A clone of this selection.
   */
  clone() {
    const s2 = new _Selection(this._resolver);
    s2._value = s2._resolved = this._value;
    return s2;
  }
  /**
   * Create a clone of this Selection with clauses corresponding
   * to provided source removed.
   * @param {*} source The clause source to remove.
   * @returns {this} A cloned and updated Selection.
   */
  remove(source) {
    const s2 = this.clone();
    s2._value = s2._resolved = s2._resolver.resolve(this._resolved, { source });
    s2._value.active = { source };
    return s2;
  }
  /**
   * The current active (most recently updated) selection clause.
   */
  get active() {
    return this.clauses.active;
  }
  /**
   * The value corresponding to the current active selection clause.
   * This method ensures compatibility where a normal Param is expected.
   */
  get value() {
    return this.active?.value;
  }
  /**
   * The current array of selection clauses.
   */
  get clauses() {
    return super.value;
  }
  /**
   * Indicate if this selection has a single resolution strategy.
   */
  get single() {
    return this._resolver.single;
  }
  /**
   * Emit an activate event with the given selection clause.
   * @param {*} clause The clause repesenting the potential activation.
   */
  activate(clause) {
    this.emit("activate", clause);
  }
  /**
   * Update the selection with a new selection clause.
   * @param {*} clause The selection clause to add.
   * @returns {this} This Selection instance.
   */
  update(clause) {
    this._resolved = this._resolver.resolve(this._resolved, clause, true);
    this._resolved.active = clause;
    return super.update(this._resolved);
  }
  /**
   * Upon value-typed updates, sets the current clause list to the
   * input value and returns the active clause value.
   * @param {string} type The event type.
   * @param {*} value The input event value.
   * @returns {*} For value-typed events, returns the active clause
   *  values. Otherwise returns the input event value as-is.
   */
  willEmit(type2, value) {
    if (type2 === "value") {
      this._value = value;
      return this.value;
    }
    return value;
  }
  /**
   * Upon value-typed updates, returns a dispatch queue filter function.
   * The return value depends on the selection resolution strategy.
   * @param {string} type The event type.
   * @param {*} value The input event value.
   * @returns {*} For value-typed events, returns a dispatch queue filter
   *  function. Otherwise returns null.
   */
  emitQueueFilter(type2, value) {
    return type2 === "value" ? this._resolver.queueFilter(value) : null;
  }
  /**
   * Indicates if a selection clause should not be applied to a given client.
   * The return value depends on the selection resolution strategy.
   * @param {*} client The selection clause.
   * @param {*} clause The client to test.
   * @returns True if the client should be skipped, false otherwise.
   */
  skip(client, clause) {
    return this._resolver.skip(client, clause);
  }
  /**
   * Return a selection query predicate for the given client.
   * @param {*} client The client whose data may be filtered.
   * @returns {*} The query predicate for filtering client data,
   *  based on the current state of this selection.
   */
  predicate(client) {
    const { clauses } = this;
    return this._resolver.predicate(clauses, clauses.active, client);
  }
};
var SelectionResolver = class {
  /**
   * Create a new selection resolved instance.
   * @param {object} [options] The resolution strategy options.
   * @param {boolean} [options.union=false] Boolean flag to indicate a union strategy.
   *  If false, an intersection strategy is used.
   * @param {boolean} [options.cross=false] Boolean flag to indicate cross-filtering.
   * @param {boolean} [options.single=false] Boolean flag to indicate single clauses only.
   */
  constructor({ union, cross: cross2, single } = {}) {
    this.union = !!union;
    this.cross = !!cross2;
    this.single = !!single;
  }
  /**
   * Resolve a list of selection clauses according to the resolution strategy.
   * @param {*[]} clauseList An array of selection clauses.
   * @param {*} clause A new selection clause to add.
   * @returns {*[]} An updated array of selection clauses.
   */
  resolve(clauseList, clause, reset2 = false) {
    const { source, predicate } = clause;
    const filtered = clauseList.filter((c4) => source !== c4.source);
    const clauses = this.single ? [] : filtered;
    if (this.single && reset2)
      filtered.forEach((c4) => c4.source?.reset?.());
    if (predicate)
      clauses.push(clause);
    return clauses;
  }
  /**
   * Indicates if a selection clause should not be applied to a given client.
   * The return value depends on the resolution strategy.
   * @param {*} client The selection clause.
   * @param {*} clause The client to test.
   * @returns True if the client should be skipped, false otherwise.
   */
  skip(client, clause) {
    return this.cross && clause?.clients?.has(client);
  }
  /**
   * Return a selection query predicate for the given client.
   * @param {*[]} clauseList An array of selection clauses.
   * @param {*} active The current active selection clause.
   * @param {*} client The client whose data may be filtered.
   * @returns {*} The query predicate for filtering client data,
   *  based on the current state of this selection.
   */
  predicate(clauseList, active, client) {
    const { union } = this;
    if (this.skip(client, active))
      return void 0;
    const predicates = clauseList.filter((clause) => !this.skip(client, clause)).map((clause) => clause.predicate);
    return union && predicates.length > 1 ? or(predicates) : predicates;
  }
  /**
   * Returns a filter function for queued selection updates.
   * @param {*} value The new event value that will be enqueued.
   * @returns {(value: *) => boolean|null} A dispatch queue filter
   *  function, or null if all unemitted event values should be filtered.
   */
  queueFilter(value) {
    if (this.cross) {
      const source = value.active?.source;
      return (clauses) => clauses.active?.source !== source;
    }
  }
};

// ../core/src/connectors/rest.js
function restConnector(uri = "http://localhost:3000/") {
  return {
    async query(query) {
      const req = fetch(uri, {
        method: "POST",
        mode: "cors",
        cache: "no-cache",
        credentials: "omit",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(query)
      });
      return query.type === "exec" ? req : query.type === "arrow" ? tableFromIPC(req) : (await req).json();
    }
  };
}

// ../../node_modules/apache-arrow/util/buffer.mjs
var buffer_exports2 = {};
__export(buffer_exports2, {
  compareArrayLike: () => compareArrayLike2,
  joinUint8Arrays: () => joinUint8Arrays2,
  memcpy: () => memcpy2,
  rebaseValueOffsets: () => rebaseValueOffsets2,
  toArrayBufferView: () => toArrayBufferView2,
  toArrayBufferViewAsyncIterator: () => toArrayBufferViewAsyncIterator2,
  toArrayBufferViewIterator: () => toArrayBufferViewIterator2,
  toBigInt64Array: () => toBigInt64Array2,
  toBigUint64Array: () => toBigUint64Array2,
  toFloat32Array: () => toFloat32Array2,
  toFloat32ArrayAsyncIterator: () => toFloat32ArrayAsyncIterator2,
  toFloat32ArrayIterator: () => toFloat32ArrayIterator2,
  toFloat64Array: () => toFloat64Array2,
  toFloat64ArrayAsyncIterator: () => toFloat64ArrayAsyncIterator2,
  toFloat64ArrayIterator: () => toFloat64ArrayIterator2,
  toInt16Array: () => toInt16Array2,
  toInt16ArrayAsyncIterator: () => toInt16ArrayAsyncIterator2,
  toInt16ArrayIterator: () => toInt16ArrayIterator2,
  toInt32Array: () => toInt32Array2,
  toInt32ArrayAsyncIterator: () => toInt32ArrayAsyncIterator2,
  toInt32ArrayIterator: () => toInt32ArrayIterator2,
  toInt8Array: () => toInt8Array2,
  toInt8ArrayAsyncIterator: () => toInt8ArrayAsyncIterator2,
  toInt8ArrayIterator: () => toInt8ArrayIterator2,
  toUint16Array: () => toUint16Array2,
  toUint16ArrayAsyncIterator: () => toUint16ArrayAsyncIterator2,
  toUint16ArrayIterator: () => toUint16ArrayIterator2,
  toUint32Array: () => toUint32Array2,
  toUint32ArrayAsyncIterator: () => toUint32ArrayAsyncIterator2,
  toUint32ArrayIterator: () => toUint32ArrayIterator2,
  toUint8Array: () => toUint8Array2,
  toUint8ArrayAsyncIterator: () => toUint8ArrayAsyncIterator2,
  toUint8ArrayIterator: () => toUint8ArrayIterator2,
  toUint8ClampedArray: () => toUint8ClampedArray2,
  toUint8ClampedArrayAsyncIterator: () => toUint8ClampedArrayAsyncIterator2,
  toUint8ClampedArrayIterator: () => toUint8ClampedArrayIterator2
});

// ../../node_modules/apache-arrow/util/utf8.mjs
var decoder2 = new TextDecoder("utf-8");
var decodeUtf82 = (buffer) => decoder2.decode(buffer);
var encoder2 = new TextEncoder();
var encodeUtf82 = (value) => encoder2.encode(value);

// ../../node_modules/apache-arrow/util/compat.mjs
var [BigIntCtor, BigIntAvailable] = (() => {
  const BigIntUnavailableError = () => {
    throw new Error("BigInt is not available in this environment");
  };
  function BigIntUnavailable() {
    throw BigIntUnavailableError();
  }
  BigIntUnavailable.asIntN = () => {
    throw BigIntUnavailableError();
  };
  BigIntUnavailable.asUintN = () => {
    throw BigIntUnavailableError();
  };
  return typeof BigInt !== "undefined" ? [BigInt, true] : [BigIntUnavailable, false];
})();
var [BigInt64ArrayCtor2, BigInt64ArrayAvailable2] = (() => {
  const BigInt64ArrayUnavailableError = () => {
    throw new Error("BigInt64Array is not available in this environment");
  };
  class BigInt64ArrayUnavailable {
    static get BYTES_PER_ELEMENT() {
      return 8;
    }
    static of() {
      throw BigInt64ArrayUnavailableError();
    }
    static from() {
      throw BigInt64ArrayUnavailableError();
    }
    constructor() {
      throw BigInt64ArrayUnavailableError();
    }
  }
  return typeof BigInt64Array !== "undefined" ? [BigInt64Array, true] : [BigInt64ArrayUnavailable, false];
})();
var [BigUint64ArrayCtor2, BigUint64ArrayAvailable2] = (() => {
  const BigUint64ArrayUnavailableError = () => {
    throw new Error("BigUint64Array is not available in this environment");
  };
  class BigUint64ArrayUnavailable {
    static get BYTES_PER_ELEMENT() {
      return 8;
    }
    static of() {
      throw BigUint64ArrayUnavailableError();
    }
    static from() {
      throw BigUint64ArrayUnavailableError();
    }
    constructor() {
      throw BigUint64ArrayUnavailableError();
    }
  }
  return typeof BigUint64Array !== "undefined" ? [BigUint64Array, true] : [BigUint64ArrayUnavailable, false];
})();
var isNumber2 = (x3) => typeof x3 === "number";
var isBoolean2 = (x3) => typeof x3 === "boolean";
var isFunction2 = (x3) => typeof x3 === "function";
var isObject2 = (x3) => x3 != null && Object(x3) === x3;
var isPromise2 = (x3) => {
  return isObject2(x3) && isFunction2(x3.then);
};
var isIterable2 = (x3) => {
  return isObject2(x3) && isFunction2(x3[Symbol.iterator]);
};
var isAsyncIterable2 = (x3) => {
  return isObject2(x3) && isFunction2(x3[Symbol.asyncIterator]);
};
var isArrowJSON2 = (x3) => {
  return isObject2(x3) && isObject2(x3["schema"]);
};
var isIteratorResult2 = (x3) => {
  return isObject2(x3) && "done" in x3 && "value" in x3;
};
var isFileHandle2 = (x3) => {
  return isObject2(x3) && isFunction2(x3["stat"]) && isNumber2(x3["fd"]);
};
var isFetchResponse2 = (x3) => {
  return isObject2(x3) && isReadableDOMStream2(x3["body"]);
};
var isReadableInterop2 = (x3) => "_getDOMStream" in x3 && "_getNodeStream" in x3;
var isWritableDOMStream2 = (x3) => {
  return isObject2(x3) && isFunction2(x3["abort"]) && isFunction2(x3["getWriter"]) && !isReadableInterop2(x3);
};
var isReadableDOMStream2 = (x3) => {
  return isObject2(x3) && isFunction2(x3["cancel"]) && isFunction2(x3["getReader"]) && !isReadableInterop2(x3);
};
var isWritableNodeStream2 = (x3) => {
  return isObject2(x3) && isFunction2(x3["end"]) && isFunction2(x3["write"]) && isBoolean2(x3["writable"]) && !isReadableInterop2(x3);
};
var isReadableNodeStream2 = (x3) => {
  return isObject2(x3) && isFunction2(x3["read"]) && isFunction2(x3["pipe"]) && isBoolean2(x3["readable"]) && !isReadableInterop2(x3);
};
var isFlatbuffersByteBuffer2 = (x3) => {
  return isObject2(x3) && isFunction2(x3["clear"]) && isFunction2(x3["bytes"]) && isFunction2(x3["position"]) && isFunction2(x3["setPosition"]) && isFunction2(x3["capacity"]) && isFunction2(x3["getBufferIdentifier"]) && isFunction2(x3["createLong"]);
};

// ../../node_modules/apache-arrow/util/buffer.mjs
var SharedArrayBuf2 = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : ArrayBuffer;
function collapseContiguousByteRanges2(chunks) {
  const result = chunks[0] ? [chunks[0]] : [];
  let xOffset, yOffset, xLen, yLen;
  for (let x3, y3, i2 = 0, j2 = 0, n = chunks.length; ++i2 < n; ) {
    x3 = result[j2];
    y3 = chunks[i2];
    if (!x3 || !y3 || x3.buffer !== y3.buffer || y3.byteOffset < x3.byteOffset) {
      y3 && (result[++j2] = y3);
      continue;
    }
    ({ byteOffset: xOffset, byteLength: xLen } = x3);
    ({ byteOffset: yOffset, byteLength: yLen } = y3);
    if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {
      y3 && (result[++j2] = y3);
      continue;
    }
    result[j2] = new Uint8Array(x3.buffer, xOffset, yOffset - xOffset + yLen);
  }
  return result;
}
function memcpy2(target, source, targetByteOffset = 0, sourceByteLength = source.byteLength) {
  const targetByteLength = target.byteLength;
  const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);
  const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));
  dst.set(src, targetByteOffset);
  return target;
}
function joinUint8Arrays2(chunks, size) {
  const result = collapseContiguousByteRanges2(chunks);
  const byteLength = result.reduce((x3, b2) => x3 + b2.byteLength, 0);
  let source, sliced, buffer;
  let offset2 = 0, index2 = -1;
  const length4 = Math.min(size || Number.POSITIVE_INFINITY, byteLength);
  for (const n = result.length; ++index2 < n; ) {
    source = result[index2];
    sliced = source.subarray(0, Math.min(source.length, length4 - offset2));
    if (length4 <= offset2 + sliced.length) {
      if (sliced.length < source.length) {
        result[index2] = source.subarray(sliced.length);
      } else if (sliced.length === source.length) {
        index2++;
      }
      buffer ? memcpy2(buffer, sliced, offset2) : buffer = sliced;
      break;
    }
    memcpy2(buffer || (buffer = new Uint8Array(length4)), sliced, offset2);
    offset2 += sliced.length;
  }
  return [buffer || new Uint8Array(0), result.slice(index2), byteLength - (buffer ? buffer.byteLength : 0)];
}
function toArrayBufferView2(ArrayBufferViewCtor, input2) {
  let value = isIteratorResult2(input2) ? input2.value : input2;
  if (value instanceof ArrayBufferViewCtor) {
    if (ArrayBufferViewCtor === Uint8Array) {
      return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);
    }
    return value;
  }
  if (!value) {
    return new ArrayBufferViewCtor(0);
  }
  if (typeof value === "string") {
    value = encodeUtf82(value);
  }
  if (value instanceof ArrayBuffer) {
    return new ArrayBufferViewCtor(value);
  }
  if (value instanceof SharedArrayBuf2) {
    return new ArrayBufferViewCtor(value);
  }
  if (isFlatbuffersByteBuffer2(value)) {
    return toArrayBufferView2(ArrayBufferViewCtor, value.bytes());
  }
  return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);
}
var toInt8Array2 = (input2) => toArrayBufferView2(Int8Array, input2);
var toInt16Array2 = (input2) => toArrayBufferView2(Int16Array, input2);
var toInt32Array2 = (input2) => toArrayBufferView2(Int32Array, input2);
var toBigInt64Array2 = (input2) => toArrayBufferView2(BigInt64ArrayCtor2, input2);
var toUint8Array2 = (input2) => toArrayBufferView2(Uint8Array, input2);
var toUint16Array2 = (input2) => toArrayBufferView2(Uint16Array, input2);
var toUint32Array2 = (input2) => toArrayBufferView2(Uint32Array, input2);
var toBigUint64Array2 = (input2) => toArrayBufferView2(BigUint64ArrayCtor2, input2);
var toFloat32Array2 = (input2) => toArrayBufferView2(Float32Array, input2);
var toFloat64Array2 = (input2) => toArrayBufferView2(Float64Array, input2);
var toUint8ClampedArray2 = (input2) => toArrayBufferView2(Uint8ClampedArray, input2);
var pump3 = (iterator) => {
  iterator.next();
  return iterator;
};
function* toArrayBufferViewIterator2(ArrayCtor, source) {
  const wrap2 = function* (x3) {
    yield x3;
  };
  const buffers = typeof source === "string" ? wrap2(source) : ArrayBuffer.isView(source) ? wrap2(source) : source instanceof ArrayBuffer ? wrap2(source) : source instanceof SharedArrayBuf2 ? wrap2(source) : !isIterable2(source) ? wrap2(source) : source;
  yield* pump3(function* (it2) {
    let r = null;
    do {
      r = it2.next(yield toArrayBufferView2(ArrayCtor, r));
    } while (!r.done);
  }(buffers[Symbol.iterator]()));
  return new ArrayCtor();
}
var toInt8ArrayIterator2 = (input2) => toArrayBufferViewIterator2(Int8Array, input2);
var toInt16ArrayIterator2 = (input2) => toArrayBufferViewIterator2(Int16Array, input2);
var toInt32ArrayIterator2 = (input2) => toArrayBufferViewIterator2(Int32Array, input2);
var toUint8ArrayIterator2 = (input2) => toArrayBufferViewIterator2(Uint8Array, input2);
var toUint16ArrayIterator2 = (input2) => toArrayBufferViewIterator2(Uint16Array, input2);
var toUint32ArrayIterator2 = (input2) => toArrayBufferViewIterator2(Uint32Array, input2);
var toFloat32ArrayIterator2 = (input2) => toArrayBufferViewIterator2(Float32Array, input2);
var toFloat64ArrayIterator2 = (input2) => toArrayBufferViewIterator2(Float64Array, input2);
var toUint8ClampedArrayIterator2 = (input2) => toArrayBufferViewIterator2(Uint8ClampedArray, input2);
function toArrayBufferViewAsyncIterator2(ArrayCtor, source) {
  return __asyncGenerator(this, arguments, function* toArrayBufferViewAsyncIterator_1() {
    if (isPromise2(source)) {
      return yield __await(yield __await(yield* __asyncDelegator(__asyncValues(toArrayBufferViewAsyncIterator2(ArrayCtor, yield __await(source))))));
    }
    const wrap2 = function(x3) {
      return __asyncGenerator(this, arguments, function* () {
        yield yield __await(yield __await(x3));
      });
    };
    const emit = function(source2) {
      return __asyncGenerator(this, arguments, function* () {
        yield __await(yield* __asyncDelegator(__asyncValues(pump3(function* (it2) {
          let r = null;
          do {
            r = it2.next(yield r === null || r === void 0 ? void 0 : r.value);
          } while (!r.done);
        }(source2[Symbol.iterator]())))));
      });
    };
    const buffers = typeof source === "string" ? wrap2(source) : ArrayBuffer.isView(source) ? wrap2(source) : source instanceof ArrayBuffer ? wrap2(source) : source instanceof SharedArrayBuf2 ? wrap2(source) : isIterable2(source) ? emit(source) : !isAsyncIterable2(source) ? wrap2(source) : source;
    yield __await(
      // otherwise if AsyncIterable, use it
      yield* __asyncDelegator(__asyncValues(pump3(function(it2) {
        return __asyncGenerator(this, arguments, function* () {
          let r = null;
          do {
            r = yield __await(it2.next(yield yield __await(toArrayBufferView2(ArrayCtor, r))));
          } while (!r.done);
        });
      }(buffers[Symbol.asyncIterator]()))))
    );
    return yield __await(new ArrayCtor());
  });
}
var toInt8ArrayAsyncIterator2 = (input2) => toArrayBufferViewAsyncIterator2(Int8Array, input2);
var toInt16ArrayAsyncIterator2 = (input2) => toArrayBufferViewAsyncIterator2(Int16Array, input2);
var toInt32ArrayAsyncIterator2 = (input2) => toArrayBufferViewAsyncIterator2(Int32Array, input2);
var toUint8ArrayAsyncIterator2 = (input2) => toArrayBufferViewAsyncIterator2(Uint8Array, input2);
var toUint16ArrayAsyncIterator2 = (input2) => toArrayBufferViewAsyncIterator2(Uint16Array, input2);
var toUint32ArrayAsyncIterator2 = (input2) => toArrayBufferViewAsyncIterator2(Uint32Array, input2);
var toFloat32ArrayAsyncIterator2 = (input2) => toArrayBufferViewAsyncIterator2(Float32Array, input2);
var toFloat64ArrayAsyncIterator2 = (input2) => toArrayBufferViewAsyncIterator2(Float64Array, input2);
var toUint8ClampedArrayAsyncIterator2 = (input2) => toArrayBufferViewAsyncIterator2(Uint8ClampedArray, input2);
function rebaseValueOffsets2(offset2, length4, valueOffsets) {
  if (offset2 !== 0) {
    valueOffsets = valueOffsets.slice(0, length4 + 1);
    for (let i2 = -1; ++i2 <= length4; ) {
      valueOffsets[i2] += offset2;
    }
  }
  return valueOffsets;
}
function compareArrayLike2(a2, b2) {
  let i2 = 0;
  const n = a2.length;
  if (n !== b2.length) {
    return false;
  }
  if (n > 0) {
    do {
      if (a2[i2] !== b2[i2]) {
        return false;
      }
    } while (++i2 < n);
  }
  return true;
}

// ../../node_modules/apache-arrow/io/adapters.mjs
var adapters_default2 = {
  fromIterable(source) {
    return pump4(fromIterable2(source));
  },
  fromAsyncIterable(source) {
    return pump4(fromAsyncIterable2(source));
  },
  fromDOMStream(source) {
    return pump4(fromDOMStream2(source));
  },
  fromNodeStream(stream) {
    return pump4(fromNodeStream2(stream));
  },
  // @ts-ignore
  toDOMStream(source, options) {
    throw new Error(`"toDOMStream" not available in this environment`);
  },
  // @ts-ignore
  toNodeStream(source, options) {
    throw new Error(`"toNodeStream" not available in this environment`);
  }
};
var pump4 = (iterator) => {
  iterator.next();
  return iterator;
};
function* fromIterable2(source) {
  let done, threw = false;
  let buffers = [], buffer;
  let cmd, size, bufferLength = 0;
  function byteRange() {
    if (cmd === "peek") {
      return joinUint8Arrays2(buffers, size)[0];
    }
    [buffer, buffers, bufferLength] = joinUint8Arrays2(buffers, size);
    return buffer;
  }
  ({ cmd, size } = yield null);
  const it2 = toUint8ArrayIterator2(source)[Symbol.iterator]();
  try {
    do {
      ({ done, value: buffer } = Number.isNaN(size - bufferLength) ? it2.next() : it2.next(size - bufferLength));
      if (!done && buffer.byteLength > 0) {
        buffers.push(buffer);
        bufferLength += buffer.byteLength;
      }
      if (done || size <= bufferLength) {
        do {
          ({ cmd, size } = yield byteRange());
        } while (size < bufferLength);
      }
    } while (!done);
  } catch (e) {
    (threw = true) && typeof it2.throw === "function" && it2.throw(e);
  } finally {
    threw === false && typeof it2.return === "function" && it2.return(null);
  }
  return null;
}
function fromAsyncIterable2(source) {
  return __asyncGenerator(this, arguments, function* fromAsyncIterable_1() {
    let done, threw = false;
    let buffers = [], buffer;
    let cmd, size, bufferLength = 0;
    function byteRange() {
      if (cmd === "peek") {
        return joinUint8Arrays2(buffers, size)[0];
      }
      [buffer, buffers, bufferLength] = joinUint8Arrays2(buffers, size);
      return buffer;
    }
    ({ cmd, size } = yield yield __await(null));
    const it2 = toUint8ArrayAsyncIterator2(source)[Symbol.asyncIterator]();
    try {
      do {
        ({ done, value: buffer } = Number.isNaN(size - bufferLength) ? yield __await(it2.next()) : yield __await(it2.next(size - bufferLength)));
        if (!done && buffer.byteLength > 0) {
          buffers.push(buffer);
          bufferLength += buffer.byteLength;
        }
        if (done || size <= bufferLength) {
          do {
            ({ cmd, size } = yield yield __await(byteRange()));
          } while (size < bufferLength);
        }
      } while (!done);
    } catch (e) {
      (threw = true) && typeof it2.throw === "function" && (yield __await(it2.throw(e)));
    } finally {
      threw === false && typeof it2.return === "function" && (yield __await(it2.return(new Uint8Array(0))));
    }
    return yield __await(null);
  });
}
function fromDOMStream2(source) {
  return __asyncGenerator(this, arguments, function* fromDOMStream_1() {
    let done = false, threw = false;
    let buffers = [], buffer;
    let cmd, size, bufferLength = 0;
    function byteRange() {
      if (cmd === "peek") {
        return joinUint8Arrays2(buffers, size)[0];
      }
      [buffer, buffers, bufferLength] = joinUint8Arrays2(buffers, size);
      return buffer;
    }
    ({ cmd, size } = yield yield __await(null));
    const it2 = new AdaptiveByteReader2(source);
    try {
      do {
        ({ done, value: buffer } = Number.isNaN(size - bufferLength) ? yield __await(it2["read"]()) : yield __await(it2["read"](size - bufferLength)));
        if (!done && buffer.byteLength > 0) {
          buffers.push(toUint8Array2(buffer));
          bufferLength += buffer.byteLength;
        }
        if (done || size <= bufferLength) {
          do {
            ({ cmd, size } = yield yield __await(byteRange()));
          } while (size < bufferLength);
        }
      } while (!done);
    } catch (e) {
      (threw = true) && (yield __await(it2["cancel"](e)));
    } finally {
      threw === false ? yield __await(it2["cancel"]()) : source["locked"] && it2.releaseLock();
    }
    return yield __await(null);
  });
}
var AdaptiveByteReader2 = class {
  constructor(source) {
    this.source = source;
    this.reader = null;
    this.reader = this.source["getReader"]();
    this.reader["closed"].catch(() => {
    });
  }
  get closed() {
    return this.reader ? this.reader["closed"].catch(() => {
    }) : Promise.resolve();
  }
  releaseLock() {
    if (this.reader) {
      this.reader.releaseLock();
    }
    this.reader = null;
  }
  cancel(reason) {
    return __awaiter(this, void 0, void 0, function* () {
      const { reader, source } = this;
      reader && (yield reader["cancel"](reason).catch(() => {
      }));
      source && (source["locked"] && this.releaseLock());
    });
  }
  read(size) {
    return __awaiter(this, void 0, void 0, function* () {
      if (size === 0) {
        return { done: this.reader == null, value: new Uint8Array(0) };
      }
      const result = yield this.reader.read();
      !result.done && (result.value = toUint8Array2(result));
      return result;
    });
  }
};
var onEvent2 = (stream, event) => {
  const handler = (_2) => resolve([event, _2]);
  let resolve;
  return [event, handler, new Promise((r) => (resolve = r) && stream["once"](event, handler))];
};
function fromNodeStream2(stream) {
  return __asyncGenerator(this, arguments, function* fromNodeStream_1() {
    const events = [];
    let event = "error";
    let done = false, err = null;
    let cmd, size, bufferLength = 0;
    let buffers = [], buffer;
    function byteRange() {
      if (cmd === "peek") {
        return joinUint8Arrays2(buffers, size)[0];
      }
      [buffer, buffers, bufferLength] = joinUint8Arrays2(buffers, size);
      return buffer;
    }
    ({ cmd, size } = yield yield __await(null));
    if (stream["isTTY"]) {
      yield yield __await(new Uint8Array(0));
      return yield __await(null);
    }
    try {
      events[0] = onEvent2(stream, "end");
      events[1] = onEvent2(stream, "error");
      do {
        events[2] = onEvent2(stream, "readable");
        [event, err] = yield __await(Promise.race(events.map((x3) => x3[2])));
        if (event === "error") {
          break;
        }
        if (!(done = event === "end")) {
          if (!Number.isFinite(size - bufferLength)) {
            buffer = toUint8Array2(stream["read"]());
          } else {
            buffer = toUint8Array2(stream["read"](size - bufferLength));
            if (buffer.byteLength < size - bufferLength) {
              buffer = toUint8Array2(stream["read"]());
            }
          }
          if (buffer.byteLength > 0) {
            buffers.push(buffer);
            bufferLength += buffer.byteLength;
          }
        }
        if (done || size <= bufferLength) {
          do {
            ({ cmd, size } = yield yield __await(byteRange()));
          } while (size < bufferLength);
        }
      } while (!done);
    } finally {
      yield __await(cleanup(events, event === "error" ? err : null));
    }
    return yield __await(null);
    function cleanup(events2, err2) {
      buffer = buffers = null;
      return new Promise((resolve, reject) => {
        for (const [evt, fn] of events2) {
          stream["off"](evt, fn);
        }
        try {
          const destroy = stream["destroy"];
          destroy && destroy.call(stream, err2);
          err2 = void 0;
        } catch (e) {
          err2 = e || err2;
        } finally {
          err2 != null ? reject(err2) : resolve();
        }
      });
    }
  });
}

// ../../node_modules/apache-arrow/enum.mjs
var MetadataVersion3;
(function(MetadataVersion5) {
  MetadataVersion5[MetadataVersion5["V1"] = 0] = "V1";
  MetadataVersion5[MetadataVersion5["V2"] = 1] = "V2";
  MetadataVersion5[MetadataVersion5["V3"] = 2] = "V3";
  MetadataVersion5[MetadataVersion5["V4"] = 3] = "V4";
  MetadataVersion5[MetadataVersion5["V5"] = 4] = "V5";
})(MetadataVersion3 || (MetadataVersion3 = {}));
var UnionMode3;
(function(UnionMode5) {
  UnionMode5[UnionMode5["Sparse"] = 0] = "Sparse";
  UnionMode5[UnionMode5["Dense"] = 1] = "Dense";
})(UnionMode3 || (UnionMode3 = {}));
var Precision3;
(function(Precision5) {
  Precision5[Precision5["HALF"] = 0] = "HALF";
  Precision5[Precision5["SINGLE"] = 1] = "SINGLE";
  Precision5[Precision5["DOUBLE"] = 2] = "DOUBLE";
})(Precision3 || (Precision3 = {}));
var DateUnit3;
(function(DateUnit5) {
  DateUnit5[DateUnit5["DAY"] = 0] = "DAY";
  DateUnit5[DateUnit5["MILLISECOND"] = 1] = "MILLISECOND";
})(DateUnit3 || (DateUnit3 = {}));
var TimeUnit3;
(function(TimeUnit5) {
  TimeUnit5[TimeUnit5["SECOND"] = 0] = "SECOND";
  TimeUnit5[TimeUnit5["MILLISECOND"] = 1] = "MILLISECOND";
  TimeUnit5[TimeUnit5["MICROSECOND"] = 2] = "MICROSECOND";
  TimeUnit5[TimeUnit5["NANOSECOND"] = 3] = "NANOSECOND";
})(TimeUnit3 || (TimeUnit3 = {}));
var IntervalUnit3;
(function(IntervalUnit5) {
  IntervalUnit5[IntervalUnit5["YEAR_MONTH"] = 0] = "YEAR_MONTH";
  IntervalUnit5[IntervalUnit5["DAY_TIME"] = 1] = "DAY_TIME";
  IntervalUnit5[IntervalUnit5["MONTH_DAY_NANO"] = 2] = "MONTH_DAY_NANO";
})(IntervalUnit3 || (IntervalUnit3 = {}));
var MessageHeader3;
(function(MessageHeader5) {
  MessageHeader5[MessageHeader5["NONE"] = 0] = "NONE";
  MessageHeader5[MessageHeader5["Schema"] = 1] = "Schema";
  MessageHeader5[MessageHeader5["DictionaryBatch"] = 2] = "DictionaryBatch";
  MessageHeader5[MessageHeader5["RecordBatch"] = 3] = "RecordBatch";
  MessageHeader5[MessageHeader5["Tensor"] = 4] = "Tensor";
  MessageHeader5[MessageHeader5["SparseTensor"] = 5] = "SparseTensor";
})(MessageHeader3 || (MessageHeader3 = {}));
var Type3;
(function(Type5) {
  Type5[Type5["NONE"] = 0] = "NONE";
  Type5[Type5["Null"] = 1] = "Null";
  Type5[Type5["Int"] = 2] = "Int";
  Type5[Type5["Float"] = 3] = "Float";
  Type5[Type5["Binary"] = 4] = "Binary";
  Type5[Type5["Utf8"] = 5] = "Utf8";
  Type5[Type5["Bool"] = 6] = "Bool";
  Type5[Type5["Decimal"] = 7] = "Decimal";
  Type5[Type5["Date"] = 8] = "Date";
  Type5[Type5["Time"] = 9] = "Time";
  Type5[Type5["Timestamp"] = 10] = "Timestamp";
  Type5[Type5["Interval"] = 11] = "Interval";
  Type5[Type5["List"] = 12] = "List";
  Type5[Type5["Struct"] = 13] = "Struct";
  Type5[Type5["Union"] = 14] = "Union";
  Type5[Type5["FixedSizeBinary"] = 15] = "FixedSizeBinary";
  Type5[Type5["FixedSizeList"] = 16] = "FixedSizeList";
  Type5[Type5["Map"] = 17] = "Map";
  Type5[Type5["Dictionary"] = -1] = "Dictionary";
  Type5[Type5["Int8"] = -2] = "Int8";
  Type5[Type5["Int16"] = -3] = "Int16";
  Type5[Type5["Int32"] = -4] = "Int32";
  Type5[Type5["Int64"] = -5] = "Int64";
  Type5[Type5["Uint8"] = -6] = "Uint8";
  Type5[Type5["Uint16"] = -7] = "Uint16";
  Type5[Type5["Uint32"] = -8] = "Uint32";
  Type5[Type5["Uint64"] = -9] = "Uint64";
  Type5[Type5["Float16"] = -10] = "Float16";
  Type5[Type5["Float32"] = -11] = "Float32";
  Type5[Type5["Float64"] = -12] = "Float64";
  Type5[Type5["DateDay"] = -13] = "DateDay";
  Type5[Type5["DateMillisecond"] = -14] = "DateMillisecond";
  Type5[Type5["TimestampSecond"] = -15] = "TimestampSecond";
  Type5[Type5["TimestampMillisecond"] = -16] = "TimestampMillisecond";
  Type5[Type5["TimestampMicrosecond"] = -17] = "TimestampMicrosecond";
  Type5[Type5["TimestampNanosecond"] = -18] = "TimestampNanosecond";
  Type5[Type5["TimeSecond"] = -19] = "TimeSecond";
  Type5[Type5["TimeMillisecond"] = -20] = "TimeMillisecond";
  Type5[Type5["TimeMicrosecond"] = -21] = "TimeMicrosecond";
  Type5[Type5["TimeNanosecond"] = -22] = "TimeNanosecond";
  Type5[Type5["DenseUnion"] = -23] = "DenseUnion";
  Type5[Type5["SparseUnion"] = -24] = "SparseUnion";
  Type5[Type5["IntervalDayTime"] = -25] = "IntervalDayTime";
  Type5[Type5["IntervalYearMonth"] = -26] = "IntervalYearMonth";
})(Type3 || (Type3 = {}));
var BufferType2;
(function(BufferType3) {
  BufferType3[BufferType3["OFFSET"] = 0] = "OFFSET";
  BufferType3[BufferType3["DATA"] = 1] = "DATA";
  BufferType3[BufferType3["VALIDITY"] = 2] = "VALIDITY";
  BufferType3[BufferType3["TYPE"] = 3] = "TYPE";
})(BufferType2 || (BufferType2 = {}));

// ../../node_modules/apache-arrow/util/vector.mjs
var vector_exports2 = {};
__export(vector_exports2, {
  clampIndex: () => clampIndex2,
  clampRange: () => clampRange2,
  createElementComparator: () => createElementComparator2
});

// ../../node_modules/apache-arrow/util/pretty.mjs
var undf2 = void 0;
function valueToString2(x3) {
  if (x3 === null) {
    return "null";
  }
  if (x3 === undf2) {
    return "undefined";
  }
  switch (typeof x3) {
    case "number":
      return `${x3}`;
    case "bigint":
      return `${x3}`;
    case "string":
      return `"${x3}"`;
  }
  if (typeof x3[Symbol.toPrimitive] === "function") {
    return x3[Symbol.toPrimitive]("string");
  }
  if (ArrayBuffer.isView(x3)) {
    if (x3 instanceof BigInt64ArrayCtor2 || x3 instanceof BigUint64ArrayCtor2) {
      return `[${[...x3].map((x4) => valueToString2(x4))}]`;
    }
    return `[${x3}]`;
  }
  return ArrayBuffer.isView(x3) ? `[${x3}]` : JSON.stringify(x3, (_2, y3) => typeof y3 === "bigint" ? `${y3}` : y3);
}

// ../../node_modules/apache-arrow/util/bn.mjs
var bn_exports2 = {};
__export(bn_exports2, {
  BN: () => BN2,
  bignumToBigInt: () => bignumToBigInt2,
  bignumToString: () => bignumToString2,
  isArrowBigNumSymbol: () => isArrowBigNumSymbol2
});
var isArrowBigNumSymbol2 = Symbol.for("isArrowBigNum");
function BigNum2(x3, ...xs) {
  if (xs.length === 0) {
    return Object.setPrototypeOf(toArrayBufferView2(this["TypedArray"], x3), this.constructor.prototype);
  }
  return Object.setPrototypeOf(new this["TypedArray"](x3, ...xs), this.constructor.prototype);
}
BigNum2.prototype[isArrowBigNumSymbol2] = true;
BigNum2.prototype.toJSON = function() {
  return `"${bignumToString2(this)}"`;
};
BigNum2.prototype.valueOf = function() {
  return bignumToNumber2(this);
};
BigNum2.prototype.toString = function() {
  return bignumToString2(this);
};
BigNum2.prototype[Symbol.toPrimitive] = function(hint = "default") {
  switch (hint) {
    case "number":
      return bignumToNumber2(this);
    case "string":
      return bignumToString2(this);
    case "default":
      return bignumToBigInt2(this);
  }
  return bignumToString2(this);
};
function SignedBigNum2(...args) {
  return BigNum2.apply(this, args);
}
function UnsignedBigNum2(...args) {
  return BigNum2.apply(this, args);
}
function DecimalBigNum2(...args) {
  return BigNum2.apply(this, args);
}
Object.setPrototypeOf(SignedBigNum2.prototype, Object.create(Int32Array.prototype));
Object.setPrototypeOf(UnsignedBigNum2.prototype, Object.create(Uint32Array.prototype));
Object.setPrototypeOf(DecimalBigNum2.prototype, Object.create(Uint32Array.prototype));
Object.assign(SignedBigNum2.prototype, BigNum2.prototype, { "constructor": SignedBigNum2, "signed": true, "TypedArray": Int32Array, "BigIntArray": BigInt64ArrayCtor2 });
Object.assign(UnsignedBigNum2.prototype, BigNum2.prototype, { "constructor": UnsignedBigNum2, "signed": false, "TypedArray": Uint32Array, "BigIntArray": BigUint64ArrayCtor2 });
Object.assign(DecimalBigNum2.prototype, BigNum2.prototype, { "constructor": DecimalBigNum2, "signed": true, "TypedArray": Uint32Array, "BigIntArray": BigUint64ArrayCtor2 });
function bignumToNumber2(bn) {
  const { buffer, byteOffset, length: length4, "signed": signed } = bn;
  const words = new BigUint64ArrayCtor2(buffer, byteOffset, length4);
  const negative2 = signed && words[words.length - 1] & BigInt(1) << BigInt(63);
  let number7 = negative2 ? BigInt(1) : BigInt(0);
  let i2 = BigInt(0);
  if (!negative2) {
    for (const word of words) {
      number7 += word * (BigInt(1) << BigInt(32) * i2++);
    }
  } else {
    for (const word of words) {
      number7 += ~word * (BigInt(1) << BigInt(32) * i2++);
    }
    number7 *= BigInt(-1);
  }
  return number7;
}
var bignumToString2;
var bignumToBigInt2;
if (!BigIntAvailable) {
  bignumToString2 = decimalToString2;
  bignumToBigInt2 = bignumToString2;
} else {
  bignumToBigInt2 = (a2) => a2.byteLength === 8 ? new a2["BigIntArray"](a2.buffer, a2.byteOffset, 1)[0] : decimalToString2(a2);
  bignumToString2 = (a2) => a2.byteLength === 8 ? `${new a2["BigIntArray"](a2.buffer, a2.byteOffset, 1)[0]}` : decimalToString2(a2);
}
function decimalToString2(a2) {
  let digits = "";
  const base64 = new Uint32Array(2);
  let base32 = new Uint16Array(a2.buffer, a2.byteOffset, a2.byteLength / 2);
  const checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);
  let i2 = -1;
  const n = base32.length - 1;
  do {
    for (base64[0] = base32[i2 = 0]; i2 < n; ) {
      base32[i2++] = base64[1] = base64[0] / 10;
      base64[0] = (base64[0] - base64[1] * 10 << 16) + base32[i2];
    }
    base32[i2] = base64[1] = base64[0] / 10;
    base64[0] = base64[0] - base64[1] * 10;
    digits = `${base64[0]}${digits}`;
  } while (checks[0] || checks[1] || checks[2] || checks[3]);
  return digits !== null && digits !== void 0 ? digits : `0`;
}
var BN2 = class _BN {
  /** @nocollapse */
  static new(num, isSigned) {
    switch (isSigned) {
      case true:
        return new SignedBigNum2(num);
      case false:
        return new UnsignedBigNum2(num);
    }
    switch (num.constructor) {
      case Int8Array:
      case Int16Array:
      case Int32Array:
      case BigInt64ArrayCtor2:
        return new SignedBigNum2(num);
    }
    if (num.byteLength === 16) {
      return new DecimalBigNum2(num);
    }
    return new UnsignedBigNum2(num);
  }
  /** @nocollapse */
  static signed(num) {
    return new SignedBigNum2(num);
  }
  /** @nocollapse */
  static unsigned(num) {
    return new UnsignedBigNum2(num);
  }
  /** @nocollapse */
  static decimal(num) {
    return new DecimalBigNum2(num);
  }
  constructor(num, isSigned) {
    return _BN.new(num, isSigned);
  }
};

// ../../node_modules/apache-arrow/type.mjs
var _a5;
var _b2;
var _c2;
var _d2;
var _e2;
var _f2;
var _g2;
var _h2;
var _j2;
var _k2;
var _l2;
var _m2;
var _o2;
var _p2;
var _q2;
var _r2;
var _s2;
var _t2;
var _u2;
var DataType2 = class _DataType {
  /** @nocollapse */
  static isNull(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Null;
  }
  /** @nocollapse */
  static isInt(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Int;
  }
  /** @nocollapse */
  static isFloat(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Float;
  }
  /** @nocollapse */
  static isBinary(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Binary;
  }
  /** @nocollapse */
  static isUtf8(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Utf8;
  }
  /** @nocollapse */
  static isBool(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Bool;
  }
  /** @nocollapse */
  static isDecimal(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Decimal;
  }
  /** @nocollapse */
  static isDate(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Date;
  }
  /** @nocollapse */
  static isTime(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Time;
  }
  /** @nocollapse */
  static isTimestamp(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Timestamp;
  }
  /** @nocollapse */
  static isInterval(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Interval;
  }
  /** @nocollapse */
  static isList(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.List;
  }
  /** @nocollapse */
  static isStruct(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Struct;
  }
  /** @nocollapse */
  static isUnion(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Union;
  }
  /** @nocollapse */
  static isFixedSizeBinary(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.FixedSizeBinary;
  }
  /** @nocollapse */
  static isFixedSizeList(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.FixedSizeList;
  }
  /** @nocollapse */
  static isMap(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Map;
  }
  /** @nocollapse */
  static isDictionary(x3) {
    return (x3 === null || x3 === void 0 ? void 0 : x3.typeId) === Type3.Dictionary;
  }
  /** @nocollapse */
  static isDenseUnion(x3) {
    return _DataType.isUnion(x3) && x3.mode === UnionMode3.Dense;
  }
  /** @nocollapse */
  static isSparseUnion(x3) {
    return _DataType.isUnion(x3) && x3.mode === UnionMode3.Sparse;
  }
  get typeId() {
    return Type3.NONE;
  }
};
_a5 = Symbol.toStringTag;
DataType2[_a5] = ((proto) => {
  proto.children = null;
  proto.ArrayType = Array;
  return proto[Symbol.toStringTag] = "DataType";
})(DataType2.prototype);
var Null3 = class extends DataType2 {
  toString() {
    return `Null`;
  }
  get typeId() {
    return Type3.Null;
  }
};
_b2 = Symbol.toStringTag;
Null3[_b2] = ((proto) => proto[Symbol.toStringTag] = "Null")(Null3.prototype);
var Int_2 = class extends DataType2 {
  constructor(isSigned, bitWidth) {
    super();
    this.isSigned = isSigned;
    this.bitWidth = bitWidth;
  }
  get typeId() {
    return Type3.Int;
  }
  get ArrayType() {
    switch (this.bitWidth) {
      case 8:
        return this.isSigned ? Int8Array : Uint8Array;
      case 16:
        return this.isSigned ? Int16Array : Uint16Array;
      case 32:
        return this.isSigned ? Int32Array : Uint32Array;
      case 64:
        return this.isSigned ? BigInt64ArrayCtor2 : BigUint64ArrayCtor2;
    }
    throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
  }
  toString() {
    return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`;
  }
};
_c2 = Symbol.toStringTag;
Int_2[_c2] = ((proto) => {
  proto.isSigned = null;
  proto.bitWidth = null;
  return proto[Symbol.toStringTag] = "Int";
})(Int_2.prototype);
var Int82 = class extends Int_2 {
  constructor() {
    super(true, 8);
  }
  get ArrayType() {
    return Int8Array;
  }
};
var Int162 = class extends Int_2 {
  constructor() {
    super(true, 16);
  }
  get ArrayType() {
    return Int16Array;
  }
};
var Int322 = class extends Int_2 {
  constructor() {
    super(true, 32);
  }
  get ArrayType() {
    return Int32Array;
  }
};
var Int643 = class extends Int_2 {
  constructor() {
    super(true, 64);
  }
  get ArrayType() {
    return BigInt64ArrayCtor2;
  }
};
var Uint82 = class extends Int_2 {
  constructor() {
    super(false, 8);
  }
  get ArrayType() {
    return Uint8Array;
  }
};
var Uint162 = class extends Int_2 {
  constructor() {
    super(false, 16);
  }
  get ArrayType() {
    return Uint16Array;
  }
};
var Uint322 = class extends Int_2 {
  constructor() {
    super(false, 32);
  }
  get ArrayType() {
    return Uint32Array;
  }
};
var Uint643 = class extends Int_2 {
  constructor() {
    super(false, 64);
  }
  get ArrayType() {
    return BigUint64ArrayCtor2;
  }
};
Object.defineProperty(Int82.prototype, "ArrayType", { value: Int8Array });
Object.defineProperty(Int162.prototype, "ArrayType", { value: Int16Array });
Object.defineProperty(Int322.prototype, "ArrayType", { value: Int32Array });
Object.defineProperty(Int643.prototype, "ArrayType", { value: BigInt64ArrayCtor2 });
Object.defineProperty(Uint82.prototype, "ArrayType", { value: Uint8Array });
Object.defineProperty(Uint162.prototype, "ArrayType", { value: Uint16Array });
Object.defineProperty(Uint322.prototype, "ArrayType", { value: Uint32Array });
Object.defineProperty(Uint643.prototype, "ArrayType", { value: BigUint64ArrayCtor2 });
var Float2 = class extends DataType2 {
  constructor(precision) {
    super();
    this.precision = precision;
  }
  get typeId() {
    return Type3.Float;
  }
  get ArrayType() {
    switch (this.precision) {
      case Precision3.HALF:
        return Uint16Array;
      case Precision3.SINGLE:
        return Float32Array;
      case Precision3.DOUBLE:
        return Float64Array;
    }
    throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
  }
  toString() {
    return `Float${this.precision << 5 || 16}`;
  }
};
_d2 = Symbol.toStringTag;
Float2[_d2] = ((proto) => {
  proto.precision = null;
  return proto[Symbol.toStringTag] = "Float";
})(Float2.prototype);
var Float162 = class extends Float2 {
  constructor() {
    super(Precision3.HALF);
  }
};
var Float322 = class extends Float2 {
  constructor() {
    super(Precision3.SINGLE);
  }
};
var Float642 = class extends Float2 {
  constructor() {
    super(Precision3.DOUBLE);
  }
};
Object.defineProperty(Float162.prototype, "ArrayType", { value: Uint16Array });
Object.defineProperty(Float322.prototype, "ArrayType", { value: Float32Array });
Object.defineProperty(Float642.prototype, "ArrayType", { value: Float64Array });
var Binary3 = class extends DataType2 {
  constructor() {
    super();
  }
  get typeId() {
    return Type3.Binary;
  }
  toString() {
    return `Binary`;
  }
};
_e2 = Symbol.toStringTag;
Binary3[_e2] = ((proto) => {
  proto.ArrayType = Uint8Array;
  return proto[Symbol.toStringTag] = "Binary";
})(Binary3.prototype);
var Utf83 = class extends DataType2 {
  constructor() {
    super();
  }
  get typeId() {
    return Type3.Utf8;
  }
  toString() {
    return `Utf8`;
  }
};
_f2 = Symbol.toStringTag;
Utf83[_f2] = ((proto) => {
  proto.ArrayType = Uint8Array;
  return proto[Symbol.toStringTag] = "Utf8";
})(Utf83.prototype);
var Bool3 = class extends DataType2 {
  constructor() {
    super();
  }
  get typeId() {
    return Type3.Bool;
  }
  toString() {
    return `Bool`;
  }
};
_g2 = Symbol.toStringTag;
Bool3[_g2] = ((proto) => {
  proto.ArrayType = Uint8Array;
  return proto[Symbol.toStringTag] = "Bool";
})(Bool3.prototype);
var Decimal3 = class extends DataType2 {
  constructor(scale3, precision, bitWidth = 128) {
    super();
    this.scale = scale3;
    this.precision = precision;
    this.bitWidth = bitWidth;
  }
  get typeId() {
    return Type3.Decimal;
  }
  toString() {
    return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`;
  }
};
_h2 = Symbol.toStringTag;
Decimal3[_h2] = ((proto) => {
  proto.scale = null;
  proto.precision = null;
  proto.ArrayType = Uint32Array;
  return proto[Symbol.toStringTag] = "Decimal";
})(Decimal3.prototype);
var Date_2 = class extends DataType2 {
  constructor(unit3) {
    super();
    this.unit = unit3;
  }
  get typeId() {
    return Type3.Date;
  }
  toString() {
    return `Date${(this.unit + 1) * 32}<${DateUnit3[this.unit]}>`;
  }
};
_j2 = Symbol.toStringTag;
Date_2[_j2] = ((proto) => {
  proto.unit = null;
  proto.ArrayType = Int32Array;
  return proto[Symbol.toStringTag] = "Date";
})(Date_2.prototype);
var Time_2 = class extends DataType2 {
  constructor(unit3, bitWidth) {
    super();
    this.unit = unit3;
    this.bitWidth = bitWidth;
  }
  get typeId() {
    return Type3.Time;
  }
  toString() {
    return `Time${this.bitWidth}<${TimeUnit3[this.unit]}>`;
  }
  get ArrayType() {
    switch (this.bitWidth) {
      case 32:
        return Int32Array;
      case 64:
        return BigInt64ArrayCtor2;
    }
    throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
  }
};
_k2 = Symbol.toStringTag;
Time_2[_k2] = ((proto) => {
  proto.unit = null;
  proto.bitWidth = null;
  return proto[Symbol.toStringTag] = "Time";
})(Time_2.prototype);
var Timestamp_2 = class extends DataType2 {
  constructor(unit3, timezone) {
    super();
    this.unit = unit3;
    this.timezone = timezone;
  }
  get typeId() {
    return Type3.Timestamp;
  }
  toString() {
    return `Timestamp<${TimeUnit3[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`;
  }
};
_l2 = Symbol.toStringTag;
Timestamp_2[_l2] = ((proto) => {
  proto.unit = null;
  proto.timezone = null;
  proto.ArrayType = Int32Array;
  return proto[Symbol.toStringTag] = "Timestamp";
})(Timestamp_2.prototype);
var Interval_2 = class extends DataType2 {
  constructor(unit3) {
    super();
    this.unit = unit3;
  }
  get typeId() {
    return Type3.Interval;
  }
  toString() {
    return `Interval<${IntervalUnit3[this.unit]}>`;
  }
};
_m2 = Symbol.toStringTag;
Interval_2[_m2] = ((proto) => {
  proto.unit = null;
  proto.ArrayType = Int32Array;
  return proto[Symbol.toStringTag] = "Interval";
})(Interval_2.prototype);
var List3 = class extends DataType2 {
  constructor(child) {
    super();
    this.children = [child];
  }
  get typeId() {
    return Type3.List;
  }
  toString() {
    return `List<${this.valueType}>`;
  }
  get valueType() {
    return this.children[0].type;
  }
  get valueField() {
    return this.children[0];
  }
  get ArrayType() {
    return this.valueType.ArrayType;
  }
};
_o2 = Symbol.toStringTag;
List3[_o2] = ((proto) => {
  proto.children = null;
  return proto[Symbol.toStringTag] = "List";
})(List3.prototype);
var Struct2 = class extends DataType2 {
  constructor(children2) {
    super();
    this.children = children2;
  }
  get typeId() {
    return Type3.Struct;
  }
  toString() {
    return `Struct<{${this.children.map((f2) => `${f2.name}:${f2.type}`).join(`, `)}}>`;
  }
};
_p2 = Symbol.toStringTag;
Struct2[_p2] = ((proto) => {
  proto.children = null;
  return proto[Symbol.toStringTag] = "Struct";
})(Struct2.prototype);
var Union_2 = class extends DataType2 {
  constructor(mode3, typeIds, children2) {
    super();
    this.mode = mode3;
    this.children = children2;
    this.typeIds = typeIds = Int32Array.from(typeIds);
    this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex, /* @__PURE__ */ Object.create(null));
  }
  get typeId() {
    return Type3.Union;
  }
  toString() {
    return `${this[Symbol.toStringTag]}<${this.children.map((x3) => `${x3.type}`).join(` | `)}>`;
  }
};
_q2 = Symbol.toStringTag;
Union_2[_q2] = ((proto) => {
  proto.mode = null;
  proto.typeIds = null;
  proto.children = null;
  proto.typeIdToChildIndex = null;
  proto.ArrayType = Int8Array;
  return proto[Symbol.toStringTag] = "Union";
})(Union_2.prototype);
var FixedSizeBinary3 = class extends DataType2 {
  constructor(byteWidth) {
    super();
    this.byteWidth = byteWidth;
  }
  get typeId() {
    return Type3.FixedSizeBinary;
  }
  toString() {
    return `FixedSizeBinary[${this.byteWidth}]`;
  }
};
_r2 = Symbol.toStringTag;
FixedSizeBinary3[_r2] = ((proto) => {
  proto.byteWidth = null;
  proto.ArrayType = Uint8Array;
  return proto[Symbol.toStringTag] = "FixedSizeBinary";
})(FixedSizeBinary3.prototype);
var FixedSizeList3 = class extends DataType2 {
  constructor(listSize, child) {
    super();
    this.listSize = listSize;
    this.children = [child];
  }
  get typeId() {
    return Type3.FixedSizeList;
  }
  get valueType() {
    return this.children[0].type;
  }
  get valueField() {
    return this.children[0];
  }
  get ArrayType() {
    return this.valueType.ArrayType;
  }
  toString() {
    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;
  }
};
_s2 = Symbol.toStringTag;
FixedSizeList3[_s2] = ((proto) => {
  proto.children = null;
  proto.listSize = null;
  return proto[Symbol.toStringTag] = "FixedSizeList";
})(FixedSizeList3.prototype);
var Map_2 = class extends DataType2 {
  constructor(child, keysSorted = false) {
    super();
    this.children = [child];
    this.keysSorted = keysSorted;
  }
  get typeId() {
    return Type3.Map;
  }
  get keyType() {
    return this.children[0].type.children[0].type;
  }
  get valueType() {
    return this.children[0].type.children[1].type;
  }
  get childType() {
    return this.children[0].type;
  }
  toString() {
    return `Map<{${this.children[0].type.children.map((f2) => `${f2.name}:${f2.type}`).join(`, `)}}>`;
  }
};
_t2 = Symbol.toStringTag;
Map_2[_t2] = ((proto) => {
  proto.children = null;
  proto.keysSorted = null;
  return proto[Symbol.toStringTag] = "Map_";
})(Map_2.prototype);
var getId2 = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);
var Dictionary2 = class extends DataType2 {
  constructor(dictionary, indices, id2, isOrdered2) {
    super();
    this.indices = indices;
    this.dictionary = dictionary;
    this.isOrdered = isOrdered2 || false;
    this.id = id2 == null ? getId2() : typeof id2 === "number" ? id2 : id2.low;
  }
  get typeId() {
    return Type3.Dictionary;
  }
  get children() {
    return this.dictionary.children;
  }
  get valueType() {
    return this.dictionary;
  }
  get ArrayType() {
    return this.dictionary.ArrayType;
  }
  toString() {
    return `Dictionary<${this.indices}, ${this.dictionary}>`;
  }
};
_u2 = Symbol.toStringTag;
Dictionary2[_u2] = ((proto) => {
  proto.id = null;
  proto.indices = null;
  proto.isOrdered = null;
  proto.dictionary = null;
  return proto[Symbol.toStringTag] = "Dictionary";
})(Dictionary2.prototype);
function strideForType2(type2) {
  const t = type2;
  switch (type2.typeId) {
    case Type3.Decimal:
      return type2.bitWidth / 32;
    case Type3.Timestamp:
      return 2;
    case Type3.Date:
      return 1 + t.unit;
    case Type3.Interval:
      return 1 + t.unit;
    case Type3.FixedSizeList:
      return t.listSize;
    case Type3.FixedSizeBinary:
      return t.byteWidth;
    default:
      return 1;
  }
}

// ../../node_modules/apache-arrow/visitor.mjs
var Visitor2 = class {
  visitMany(nodes, ...args) {
    return nodes.map((node, i2) => this.visit(node, ...args.map((x3) => x3[i2])));
  }
  visit(...args) {
    return this.getVisitFn(args[0], false).apply(this, args);
  }
  getVisitFn(node, throwIfNotFound = true) {
    return getVisitFn2(this, node, throwIfNotFound);
  }
  getVisitFnByTypeId(typeId, throwIfNotFound = true) {
    return getVisitFnByTypeId2(this, typeId, throwIfNotFound);
  }
  visitNull(_node, ..._args) {
    return null;
  }
  visitBool(_node, ..._args) {
    return null;
  }
  visitInt(_node, ..._args) {
    return null;
  }
  visitFloat(_node, ..._args) {
    return null;
  }
  visitUtf8(_node, ..._args) {
    return null;
  }
  visitBinary(_node, ..._args) {
    return null;
  }
  visitFixedSizeBinary(_node, ..._args) {
    return null;
  }
  visitDate(_node, ..._args) {
    return null;
  }
  visitTimestamp(_node, ..._args) {
    return null;
  }
  visitTime(_node, ..._args) {
    return null;
  }
  visitDecimal(_node, ..._args) {
    return null;
  }
  visitList(_node, ..._args) {
    return null;
  }
  visitStruct(_node, ..._args) {
    return null;
  }
  visitUnion(_node, ..._args) {
    return null;
  }
  visitDictionary(_node, ..._args) {
    return null;
  }
  visitInterval(_node, ..._args) {
    return null;
  }
  visitFixedSizeList(_node, ..._args) {
    return null;
  }
  visitMap(_node, ..._args) {
    return null;
  }
};
function getVisitFn2(visitor, node, throwIfNotFound = true) {
  if (typeof node === "number") {
    return getVisitFnByTypeId2(visitor, node, throwIfNotFound);
  }
  if (typeof node === "string" && node in Type3) {
    return getVisitFnByTypeId2(visitor, Type3[node], throwIfNotFound);
  }
  if (node && node instanceof DataType2) {
    return getVisitFnByTypeId2(visitor, inferDType2(node), throwIfNotFound);
  }
  if ((node === null || node === void 0 ? void 0 : node.type) && node.type instanceof DataType2) {
    return getVisitFnByTypeId2(visitor, inferDType2(node.type), throwIfNotFound);
  }
  return getVisitFnByTypeId2(visitor, Type3.NONE, throwIfNotFound);
}
function getVisitFnByTypeId2(visitor, dtype, throwIfNotFound = true) {
  let fn = null;
  switch (dtype) {
    case Type3.Null:
      fn = visitor.visitNull;
      break;
    case Type3.Bool:
      fn = visitor.visitBool;
      break;
    case Type3.Int:
      fn = visitor.visitInt;
      break;
    case Type3.Int8:
      fn = visitor.visitInt8 || visitor.visitInt;
      break;
    case Type3.Int16:
      fn = visitor.visitInt16 || visitor.visitInt;
      break;
    case Type3.Int32:
      fn = visitor.visitInt32 || visitor.visitInt;
      break;
    case Type3.Int64:
      fn = visitor.visitInt64 || visitor.visitInt;
      break;
    case Type3.Uint8:
      fn = visitor.visitUint8 || visitor.visitInt;
      break;
    case Type3.Uint16:
      fn = visitor.visitUint16 || visitor.visitInt;
      break;
    case Type3.Uint32:
      fn = visitor.visitUint32 || visitor.visitInt;
      break;
    case Type3.Uint64:
      fn = visitor.visitUint64 || visitor.visitInt;
      break;
    case Type3.Float:
      fn = visitor.visitFloat;
      break;
    case Type3.Float16:
      fn = visitor.visitFloat16 || visitor.visitFloat;
      break;
    case Type3.Float32:
      fn = visitor.visitFloat32 || visitor.visitFloat;
      break;
    case Type3.Float64:
      fn = visitor.visitFloat64 || visitor.visitFloat;
      break;
    case Type3.Utf8:
      fn = visitor.visitUtf8;
      break;
    case Type3.Binary:
      fn = visitor.visitBinary;
      break;
    case Type3.FixedSizeBinary:
      fn = visitor.visitFixedSizeBinary;
      break;
    case Type3.Date:
      fn = visitor.visitDate;
      break;
    case Type3.DateDay:
      fn = visitor.visitDateDay || visitor.visitDate;
      break;
    case Type3.DateMillisecond:
      fn = visitor.visitDateMillisecond || visitor.visitDate;
      break;
    case Type3.Timestamp:
      fn = visitor.visitTimestamp;
      break;
    case Type3.TimestampSecond:
      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;
      break;
    case Type3.TimestampMillisecond:
      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;
      break;
    case Type3.TimestampMicrosecond:
      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;
      break;
    case Type3.TimestampNanosecond:
      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;
      break;
    case Type3.Time:
      fn = visitor.visitTime;
      break;
    case Type3.TimeSecond:
      fn = visitor.visitTimeSecond || visitor.visitTime;
      break;
    case Type3.TimeMillisecond:
      fn = visitor.visitTimeMillisecond || visitor.visitTime;
      break;
    case Type3.TimeMicrosecond:
      fn = visitor.visitTimeMicrosecond || visitor.visitTime;
      break;
    case Type3.TimeNanosecond:
      fn = visitor.visitTimeNanosecond || visitor.visitTime;
      break;
    case Type3.Decimal:
      fn = visitor.visitDecimal;
      break;
    case Type3.List:
      fn = visitor.visitList;
      break;
    case Type3.Struct:
      fn = visitor.visitStruct;
      break;
    case Type3.Union:
      fn = visitor.visitUnion;
      break;
    case Type3.DenseUnion:
      fn = visitor.visitDenseUnion || visitor.visitUnion;
      break;
    case Type3.SparseUnion:
      fn = visitor.visitSparseUnion || visitor.visitUnion;
      break;
    case Type3.Dictionary:
      fn = visitor.visitDictionary;
      break;
    case Type3.Interval:
      fn = visitor.visitInterval;
      break;
    case Type3.IntervalDayTime:
      fn = visitor.visitIntervalDayTime || visitor.visitInterval;
      break;
    case Type3.IntervalYearMonth:
      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;
      break;
    case Type3.FixedSizeList:
      fn = visitor.visitFixedSizeList;
      break;
    case Type3.Map:
      fn = visitor.visitMap;
      break;
  }
  if (typeof fn === "function")
    return fn;
  if (!throwIfNotFound)
    return () => null;
  throw new Error(`Unrecognized type '${Type3[dtype]}'`);
}
function inferDType2(type2) {
  switch (type2.typeId) {
    case Type3.Null:
      return Type3.Null;
    case Type3.Int: {
      const { bitWidth, isSigned } = type2;
      switch (bitWidth) {
        case 8:
          return isSigned ? Type3.Int8 : Type3.Uint8;
        case 16:
          return isSigned ? Type3.Int16 : Type3.Uint16;
        case 32:
          return isSigned ? Type3.Int32 : Type3.Uint32;
        case 64:
          return isSigned ? Type3.Int64 : Type3.Uint64;
      }
      return Type3.Int;
    }
    case Type3.Float:
      switch (type2.precision) {
        case Precision3.HALF:
          return Type3.Float16;
        case Precision3.SINGLE:
          return Type3.Float32;
        case Precision3.DOUBLE:
          return Type3.Float64;
      }
      return Type3.Float;
    case Type3.Binary:
      return Type3.Binary;
    case Type3.Utf8:
      return Type3.Utf8;
    case Type3.Bool:
      return Type3.Bool;
    case Type3.Decimal:
      return Type3.Decimal;
    case Type3.Time:
      switch (type2.unit) {
        case TimeUnit3.SECOND:
          return Type3.TimeSecond;
        case TimeUnit3.MILLISECOND:
          return Type3.TimeMillisecond;
        case TimeUnit3.MICROSECOND:
          return Type3.TimeMicrosecond;
        case TimeUnit3.NANOSECOND:
          return Type3.TimeNanosecond;
      }
      return Type3.Time;
    case Type3.Timestamp:
      switch (type2.unit) {
        case TimeUnit3.SECOND:
          return Type3.TimestampSecond;
        case TimeUnit3.MILLISECOND:
          return Type3.TimestampMillisecond;
        case TimeUnit3.MICROSECOND:
          return Type3.TimestampMicrosecond;
        case TimeUnit3.NANOSECOND:
          return Type3.TimestampNanosecond;
      }
      return Type3.Timestamp;
    case Type3.Date:
      switch (type2.unit) {
        case DateUnit3.DAY:
          return Type3.DateDay;
        case DateUnit3.MILLISECOND:
          return Type3.DateMillisecond;
      }
      return Type3.Date;
    case Type3.Interval:
      switch (type2.unit) {
        case IntervalUnit3.DAY_TIME:
          return Type3.IntervalDayTime;
        case IntervalUnit3.YEAR_MONTH:
          return Type3.IntervalYearMonth;
      }
      return Type3.Interval;
    case Type3.Map:
      return Type3.Map;
    case Type3.List:
      return Type3.List;
    case Type3.Struct:
      return Type3.Struct;
    case Type3.Union:
      switch (type2.mode) {
        case UnionMode3.Dense:
          return Type3.DenseUnion;
        case UnionMode3.Sparse:
          return Type3.SparseUnion;
      }
      return Type3.Union;
    case Type3.FixedSizeBinary:
      return Type3.FixedSizeBinary;
    case Type3.FixedSizeList:
      return Type3.FixedSizeList;
    case Type3.Dictionary:
      return Type3.Dictionary;
  }
  throw new Error(`Unrecognized type '${Type3[type2.typeId]}'`);
}
Visitor2.prototype.visitInt8 = null;
Visitor2.prototype.visitInt16 = null;
Visitor2.prototype.visitInt32 = null;
Visitor2.prototype.visitInt64 = null;
Visitor2.prototype.visitUint8 = null;
Visitor2.prototype.visitUint16 = null;
Visitor2.prototype.visitUint32 = null;
Visitor2.prototype.visitUint64 = null;
Visitor2.prototype.visitFloat16 = null;
Visitor2.prototype.visitFloat32 = null;
Visitor2.prototype.visitFloat64 = null;
Visitor2.prototype.visitDateDay = null;
Visitor2.prototype.visitDateMillisecond = null;
Visitor2.prototype.visitTimestampSecond = null;
Visitor2.prototype.visitTimestampMillisecond = null;
Visitor2.prototype.visitTimestampMicrosecond = null;
Visitor2.prototype.visitTimestampNanosecond = null;
Visitor2.prototype.visitTimeSecond = null;
Visitor2.prototype.visitTimeMillisecond = null;
Visitor2.prototype.visitTimeMicrosecond = null;
Visitor2.prototype.visitTimeNanosecond = null;
Visitor2.prototype.visitDenseUnion = null;
Visitor2.prototype.visitSparseUnion = null;
Visitor2.prototype.visitIntervalDayTime = null;
Visitor2.prototype.visitIntervalYearMonth = null;

// ../../node_modules/apache-arrow/util/math.mjs
var math_exports2 = {};
__export(math_exports2, {
  float64ToUint16: () => float64ToUint162,
  uint16ToFloat64: () => uint16ToFloat642
});
var f642 = new Float64Array(1);
var u322 = new Uint32Array(f642.buffer);
function uint16ToFloat642(h2) {
  const expo = (h2 & 31744) >> 10;
  const sigf = (h2 & 1023) / 1024;
  const sign3 = Math.pow(-1, (h2 & 32768) >> 15);
  switch (expo) {
    case 31:
      return sign3 * (sigf ? Number.NaN : 1 / 0);
    case 0:
      return sign3 * (sigf ? 6103515625e-14 * sigf : 0);
  }
  return sign3 * Math.pow(2, expo - 15) * (1 + sigf);
}
function float64ToUint162(d) {
  if (d !== d) {
    return 32256;
  }
  f642[0] = d;
  const sign3 = (u322[1] & 2147483648) >> 16 & 65535;
  let expo = u322[1] & 2146435072, sigf = 0;
  if (expo >= 1089470464) {
    if (u322[0] > 0) {
      expo = 31744;
    } else {
      expo = (expo & 2080374784) >> 16;
      sigf = (u322[1] & 1048575) >> 10;
    }
  } else if (expo <= 1056964608) {
    sigf = 1048576 + (u322[1] & 1048575);
    sigf = 1048576 + (sigf << (expo >> 20) - 998) >> 21;
    expo = 0;
  } else {
    expo = expo - 1056964608 >> 10;
    sigf = (u322[1] & 1048575) + 512 >> 10;
  }
  return sign3 | expo | sigf & 65535;
}

// ../../node_modules/apache-arrow/visitor/set.mjs
var SetVisitor2 = class extends Visitor2 {
};
function wrapSet2(fn) {
  return (data, _1, _2) => {
    if (data.setValid(_1, _2 != null)) {
      return fn(data, _1, _2);
    }
  };
}
var setEpochMsToDays2 = (data, index2, epochMs) => {
  data[index2] = Math.trunc(epochMs / 864e5);
};
var setEpochMsToMillisecondsLong2 = (data, index2, epochMs) => {
  data[index2] = Math.trunc(epochMs % 4294967296);
  data[index2 + 1] = Math.trunc(epochMs / 4294967296);
};
var setEpochMsToMicrosecondsLong2 = (data, index2, epochMs) => {
  data[index2] = Math.trunc(epochMs * 1e3 % 4294967296);
  data[index2 + 1] = Math.trunc(epochMs * 1e3 / 4294967296);
};
var setEpochMsToNanosecondsLong2 = (data, index2, epochMs) => {
  data[index2] = Math.trunc(epochMs * 1e6 % 4294967296);
  data[index2 + 1] = Math.trunc(epochMs * 1e6 / 4294967296);
};
var setVariableWidthBytes2 = (values2, valueOffsets, index2, value) => {
  if (index2 + 1 < valueOffsets.length) {
    const { [index2]: x3, [index2 + 1]: y3 } = valueOffsets;
    values2.set(value.subarray(0, y3 - x3), x3);
  }
};
var setBool3 = ({ offset: offset2, values: values2 }, index2, val) => {
  const idx = offset2 + index2;
  val ? values2[idx >> 3] |= 1 << idx % 8 : values2[idx >> 3] &= ~(1 << idx % 8);
};
var setInt2 = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setFloat2 = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setFloat162 = ({ values: values2 }, index2, value) => {
  values2[index2] = float64ToUint162(value);
};
var setAnyFloat2 = (data, index2, value) => {
  switch (data.type.precision) {
    case Precision3.HALF:
      return setFloat162(data, index2, value);
    case Precision3.SINGLE:
    case Precision3.DOUBLE:
      return setFloat2(data, index2, value);
  }
};
var setDateDay2 = ({ values: values2 }, index2, value) => {
  setEpochMsToDays2(values2, index2, value.valueOf());
};
var setDateMillisecond2 = ({ values: values2 }, index2, value) => {
  setEpochMsToMillisecondsLong2(values2, index2 * 2, value.valueOf());
};
var setFixedSizeBinary2 = ({ stride, values: values2 }, index2, value) => {
  values2.set(value.subarray(0, stride), stride * index2);
};
var setBinary2 = ({ values: values2, valueOffsets }, index2, value) => setVariableWidthBytes2(values2, valueOffsets, index2, value);
var setUtf82 = ({ values: values2, valueOffsets }, index2, value) => {
  setVariableWidthBytes2(values2, valueOffsets, index2, encodeUtf82(value));
};
var setDate2 = (data, index2, value) => {
  data.type.unit === DateUnit3.DAY ? setDateDay2(data, index2, value) : setDateMillisecond2(data, index2, value);
};
var setTimestampSecond2 = ({ values: values2 }, index2, value) => setEpochMsToMillisecondsLong2(values2, index2 * 2, value / 1e3);
var setTimestampMillisecond2 = ({ values: values2 }, index2, value) => setEpochMsToMillisecondsLong2(values2, index2 * 2, value);
var setTimestampMicrosecond2 = ({ values: values2 }, index2, value) => setEpochMsToMicrosecondsLong2(values2, index2 * 2, value);
var setTimestampNanosecond2 = ({ values: values2 }, index2, value) => setEpochMsToNanosecondsLong2(values2, index2 * 2, value);
var setTimestamp2 = (data, index2, value) => {
  switch (data.type.unit) {
    case TimeUnit3.SECOND:
      return setTimestampSecond2(data, index2, value);
    case TimeUnit3.MILLISECOND:
      return setTimestampMillisecond2(data, index2, value);
    case TimeUnit3.MICROSECOND:
      return setTimestampMicrosecond2(data, index2, value);
    case TimeUnit3.NANOSECOND:
      return setTimestampNanosecond2(data, index2, value);
  }
};
var setTimeSecond2 = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setTimeMillisecond2 = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setTimeMicrosecond2 = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setTimeNanosecond2 = ({ values: values2 }, index2, value) => {
  values2[index2] = value;
};
var setTime2 = (data, index2, value) => {
  switch (data.type.unit) {
    case TimeUnit3.SECOND:
      return setTimeSecond2(data, index2, value);
    case TimeUnit3.MILLISECOND:
      return setTimeMillisecond2(data, index2, value);
    case TimeUnit3.MICROSECOND:
      return setTimeMicrosecond2(data, index2, value);
    case TimeUnit3.NANOSECOND:
      return setTimeNanosecond2(data, index2, value);
  }
};
var setDecimal2 = ({ values: values2, stride }, index2, value) => {
  values2.set(value.subarray(0, stride), stride * index2);
};
var setList2 = (data, index2, value) => {
  const values2 = data.children[0];
  const valueOffsets = data.valueOffsets;
  const set3 = instance9.getVisitFn(values2);
  if (Array.isArray(value)) {
    for (let idx = -1, itr = valueOffsets[index2], end = valueOffsets[index2 + 1]; itr < end; ) {
      set3(values2, itr++, value[++idx]);
    }
  } else {
    for (let idx = -1, itr = valueOffsets[index2], end = valueOffsets[index2 + 1]; itr < end; ) {
      set3(values2, itr++, value.get(++idx));
    }
  }
};
var setMap2 = (data, index2, value) => {
  const values2 = data.children[0];
  const { valueOffsets } = data;
  const set3 = instance9.getVisitFn(values2);
  let { [index2]: idx, [index2 + 1]: end } = valueOffsets;
  const entries = value instanceof Map ? value.entries() : Object.entries(value);
  for (const val of entries) {
    set3(values2, idx, val);
    if (++idx >= end)
      break;
  }
};
var _setStructArrayValue2 = (o, v3) => (set3, c4, _2, i2) => c4 && set3(c4, o, v3[i2]);
var _setStructVectorValue2 = (o, v3) => (set3, c4, _2, i2) => c4 && set3(c4, o, v3.get(i2));
var _setStructMapValue2 = (o, v3) => (set3, c4, f2, _2) => c4 && set3(c4, o, v3.get(f2.name));
var _setStructObjectValue2 = (o, v3) => (set3, c4, f2, _2) => c4 && set3(c4, o, v3[f2.name]);
var setStruct2 = (data, index2, value) => {
  const childSetters = data.type.children.map((f2) => instance9.getVisitFn(f2.type));
  const set3 = value instanceof Map ? _setStructMapValue2(index2, value) : value instanceof Vector2 ? _setStructVectorValue2(index2, value) : Array.isArray(value) ? _setStructArrayValue2(index2, value) : _setStructObjectValue2(index2, value);
  data.type.children.forEach((f2, i2) => set3(childSetters[i2], data.children[i2], f2, i2));
};
var setUnion2 = (data, index2, value) => {
  data.type.mode === UnionMode3.Dense ? setDenseUnion2(data, index2, value) : setSparseUnion2(data, index2, value);
};
var setDenseUnion2 = (data, index2, value) => {
  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index2]];
  const child = data.children[childIndex];
  instance9.visit(child, data.valueOffsets[index2], value);
};
var setSparseUnion2 = (data, index2, value) => {
  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index2]];
  const child = data.children[childIndex];
  instance9.visit(child, index2, value);
};
var setDictionary2 = (data, index2, value) => {
  var _a9;
  (_a9 = data.dictionary) === null || _a9 === void 0 ? void 0 : _a9.set(data.values[index2], value);
};
var setIntervalValue2 = (data, index2, value) => {
  data.type.unit === IntervalUnit3.DAY_TIME ? setIntervalDayTime2(data, index2, value) : setIntervalYearMonth2(data, index2, value);
};
var setIntervalDayTime2 = ({ values: values2 }, index2, value) => {
  values2.set(value.subarray(0, 2), 2 * index2);
};
var setIntervalYearMonth2 = ({ values: values2 }, index2, value) => {
  values2[index2] = value[0] * 12 + value[1] % 12;
};
var setFixedSizeList2 = (data, index2, value) => {
  const { stride } = data;
  const child = data.children[0];
  const set3 = instance9.getVisitFn(child);
  if (Array.isArray(value)) {
    for (let idx = -1, offset2 = index2 * stride; ++idx < stride; ) {
      set3(child, offset2 + idx, value[idx]);
    }
  } else {
    for (let idx = -1, offset2 = index2 * stride; ++idx < stride; ) {
      set3(child, offset2 + idx, value.get(idx));
    }
  }
};
SetVisitor2.prototype.visitBool = wrapSet2(setBool3);
SetVisitor2.prototype.visitInt = wrapSet2(setInt2);
SetVisitor2.prototype.visitInt8 = wrapSet2(setInt2);
SetVisitor2.prototype.visitInt16 = wrapSet2(setInt2);
SetVisitor2.prototype.visitInt32 = wrapSet2(setInt2);
SetVisitor2.prototype.visitInt64 = wrapSet2(setInt2);
SetVisitor2.prototype.visitUint8 = wrapSet2(setInt2);
SetVisitor2.prototype.visitUint16 = wrapSet2(setInt2);
SetVisitor2.prototype.visitUint32 = wrapSet2(setInt2);
SetVisitor2.prototype.visitUint64 = wrapSet2(setInt2);
SetVisitor2.prototype.visitFloat = wrapSet2(setAnyFloat2);
SetVisitor2.prototype.visitFloat16 = wrapSet2(setFloat162);
SetVisitor2.prototype.visitFloat32 = wrapSet2(setFloat2);
SetVisitor2.prototype.visitFloat64 = wrapSet2(setFloat2);
SetVisitor2.prototype.visitUtf8 = wrapSet2(setUtf82);
SetVisitor2.prototype.visitBinary = wrapSet2(setBinary2);
SetVisitor2.prototype.visitFixedSizeBinary = wrapSet2(setFixedSizeBinary2);
SetVisitor2.prototype.visitDate = wrapSet2(setDate2);
SetVisitor2.prototype.visitDateDay = wrapSet2(setDateDay2);
SetVisitor2.prototype.visitDateMillisecond = wrapSet2(setDateMillisecond2);
SetVisitor2.prototype.visitTimestamp = wrapSet2(setTimestamp2);
SetVisitor2.prototype.visitTimestampSecond = wrapSet2(setTimestampSecond2);
SetVisitor2.prototype.visitTimestampMillisecond = wrapSet2(setTimestampMillisecond2);
SetVisitor2.prototype.visitTimestampMicrosecond = wrapSet2(setTimestampMicrosecond2);
SetVisitor2.prototype.visitTimestampNanosecond = wrapSet2(setTimestampNanosecond2);
SetVisitor2.prototype.visitTime = wrapSet2(setTime2);
SetVisitor2.prototype.visitTimeSecond = wrapSet2(setTimeSecond2);
SetVisitor2.prototype.visitTimeMillisecond = wrapSet2(setTimeMillisecond2);
SetVisitor2.prototype.visitTimeMicrosecond = wrapSet2(setTimeMicrosecond2);
SetVisitor2.prototype.visitTimeNanosecond = wrapSet2(setTimeNanosecond2);
SetVisitor2.prototype.visitDecimal = wrapSet2(setDecimal2);
SetVisitor2.prototype.visitList = wrapSet2(setList2);
SetVisitor2.prototype.visitStruct = wrapSet2(setStruct2);
SetVisitor2.prototype.visitUnion = wrapSet2(setUnion2);
SetVisitor2.prototype.visitDenseUnion = wrapSet2(setDenseUnion2);
SetVisitor2.prototype.visitSparseUnion = wrapSet2(setSparseUnion2);
SetVisitor2.prototype.visitDictionary = wrapSet2(setDictionary2);
SetVisitor2.prototype.visitInterval = wrapSet2(setIntervalValue2);
SetVisitor2.prototype.visitIntervalDayTime = wrapSet2(setIntervalDayTime2);
SetVisitor2.prototype.visitIntervalYearMonth = wrapSet2(setIntervalYearMonth2);
SetVisitor2.prototype.visitFixedSizeList = wrapSet2(setFixedSizeList2);
SetVisitor2.prototype.visitMap = wrapSet2(setMap2);
var instance9 = new SetVisitor2();

// ../../node_modules/apache-arrow/row/struct.mjs
var kParent2 = Symbol.for("parent");
var kRowIndex2 = Symbol.for("rowIndex");
var StructRow2 = class {
  constructor(parent, rowIndex) {
    this[kParent2] = parent;
    this[kRowIndex2] = rowIndex;
    return new Proxy(this, new StructRowProxyHandler2());
  }
  toArray() {
    return Object.values(this.toJSON());
  }
  toJSON() {
    const i2 = this[kRowIndex2];
    const parent = this[kParent2];
    const keys = parent.type.children;
    const json = {};
    for (let j2 = -1, n = keys.length; ++j2 < n; ) {
      json[keys[j2].name] = instance10.visit(parent.children[j2], i2);
    }
    return json;
  }
  toString() {
    return `{${[...this].map(([key, val]) => `${valueToString2(key)}: ${valueToString2(val)}`).join(", ")}}`;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toString();
  }
  [Symbol.iterator]() {
    return new StructRowIterator2(this[kParent2], this[kRowIndex2]);
  }
};
var StructRowIterator2 = class {
  constructor(data, rowIndex) {
    this.childIndex = 0;
    this.children = data.children;
    this.rowIndex = rowIndex;
    this.childFields = data.type.children;
    this.numChildren = this.childFields.length;
  }
  [Symbol.iterator]() {
    return this;
  }
  next() {
    const i2 = this.childIndex;
    if (i2 < this.numChildren) {
      this.childIndex = i2 + 1;
      return {
        done: false,
        value: [
          this.childFields[i2].name,
          instance10.visit(this.children[i2], this.rowIndex)
        ]
      };
    }
    return { done: true, value: null };
  }
};
Object.defineProperties(StructRow2.prototype, {
  [Symbol.toStringTag]: { enumerable: false, configurable: false, value: "Row" },
  [kParent2]: { writable: true, enumerable: false, configurable: false, value: null },
  [kRowIndex2]: { writable: true, enumerable: false, configurable: false, value: -1 }
});
var StructRowProxyHandler2 = class {
  isExtensible() {
    return false;
  }
  deleteProperty() {
    return false;
  }
  preventExtensions() {
    return true;
  }
  ownKeys(row) {
    return row[kParent2].type.children.map((f2) => f2.name);
  }
  has(row, key) {
    return row[kParent2].type.children.findIndex((f2) => f2.name === key) !== -1;
  }
  getOwnPropertyDescriptor(row, key) {
    if (row[kParent2].type.children.findIndex((f2) => f2.name === key) !== -1) {
      return { writable: true, enumerable: true, configurable: true };
    }
    return;
  }
  get(row, key) {
    if (Reflect.has(row, key)) {
      return row[key];
    }
    const idx = row[kParent2].type.children.findIndex((f2) => f2.name === key);
    if (idx !== -1) {
      const val = instance10.visit(row[kParent2].children[idx], row[kRowIndex2]);
      Reflect.set(row, key, val);
      return val;
    }
  }
  set(row, key, val) {
    const idx = row[kParent2].type.children.findIndex((f2) => f2.name === key);
    if (idx !== -1) {
      instance9.visit(row[kParent2].children[idx], row[kRowIndex2], val);
      return Reflect.set(row, key, val);
    } else if (Reflect.has(row, key) || typeof key === "symbol") {
      return Reflect.set(row, key, val);
    }
    return false;
  }
};

// ../../node_modules/apache-arrow/visitor/get.mjs
var GetVisitor2 = class extends Visitor2 {
};
function wrapGet2(fn) {
  return (data, _1) => data.getValid(_1) ? fn(data, _1) : null;
}
var epochDaysToMs2 = (data, index2) => 864e5 * data[index2];
var epochMillisecondsLongToMs2 = (data, index2) => 4294967296 * data[index2 + 1] + (data[index2] >>> 0);
var epochMicrosecondsLongToMs2 = (data, index2) => 4294967296 * (data[index2 + 1] / 1e3) + (data[index2] >>> 0) / 1e3;
var epochNanosecondsLongToMs2 = (data, index2) => 4294967296 * (data[index2 + 1] / 1e6) + (data[index2] >>> 0) / 1e6;
var epochMillisecondsToDate2 = (epochMs) => new Date(epochMs);
var epochDaysToDate2 = (data, index2) => epochMillisecondsToDate2(epochDaysToMs2(data, index2));
var epochMillisecondsLongToDate2 = (data, index2) => epochMillisecondsToDate2(epochMillisecondsLongToMs2(data, index2));
var getNull2 = (_data, _index) => null;
var getVariableWidthBytes2 = (values2, valueOffsets, index2) => {
  if (index2 + 1 >= valueOffsets.length) {
    return null;
  }
  const x3 = valueOffsets[index2];
  const y3 = valueOffsets[index2 + 1];
  return values2.subarray(x3, y3);
};
var getBool3 = ({ offset: offset2, values: values2 }, index2) => {
  const idx = offset2 + index2;
  const byte = values2[idx >> 3];
  return (byte & 1 << idx % 8) !== 0;
};
var getDateDay2 = ({ values: values2 }, index2) => epochDaysToDate2(values2, index2);
var getDateMillisecond2 = ({ values: values2 }, index2) => epochMillisecondsLongToDate2(values2, index2 * 2);
var getNumeric2 = ({ stride, values: values2 }, index2) => values2[stride * index2];
var getFloat162 = ({ stride, values: values2 }, index2) => uint16ToFloat642(values2[stride * index2]);
var getBigInts2 = ({ values: values2 }, index2) => values2[index2];
var getFixedSizeBinary2 = ({ stride, values: values2 }, index2) => values2.subarray(stride * index2, stride * (index2 + 1));
var getBinary2 = ({ values: values2, valueOffsets }, index2) => getVariableWidthBytes2(values2, valueOffsets, index2);
var getUtf82 = ({ values: values2, valueOffsets }, index2) => {
  const bytes = getVariableWidthBytes2(values2, valueOffsets, index2);
  return bytes !== null ? decodeUtf82(bytes) : null;
};
var getInt2 = ({ values: values2 }, index2) => values2[index2];
var getFloat2 = ({ type: type2, values: values2 }, index2) => type2.precision !== Precision3.HALF ? values2[index2] : uint16ToFloat642(values2[index2]);
var getDate2 = (data, index2) => data.type.unit === DateUnit3.DAY ? getDateDay2(data, index2) : getDateMillisecond2(data, index2);
var getTimestampSecond2 = ({ values: values2 }, index2) => 1e3 * epochMillisecondsLongToMs2(values2, index2 * 2);
var getTimestampMillisecond2 = ({ values: values2 }, index2) => epochMillisecondsLongToMs2(values2, index2 * 2);
var getTimestampMicrosecond2 = ({ values: values2 }, index2) => epochMicrosecondsLongToMs2(values2, index2 * 2);
var getTimestampNanosecond2 = ({ values: values2 }, index2) => epochNanosecondsLongToMs2(values2, index2 * 2);
var getTimestamp2 = (data, index2) => {
  switch (data.type.unit) {
    case TimeUnit3.SECOND:
      return getTimestampSecond2(data, index2);
    case TimeUnit3.MILLISECOND:
      return getTimestampMillisecond2(data, index2);
    case TimeUnit3.MICROSECOND:
      return getTimestampMicrosecond2(data, index2);
    case TimeUnit3.NANOSECOND:
      return getTimestampNanosecond2(data, index2);
  }
};
var getTimeSecond2 = ({ values: values2 }, index2) => values2[index2];
var getTimeMillisecond2 = ({ values: values2 }, index2) => values2[index2];
var getTimeMicrosecond2 = ({ values: values2 }, index2) => values2[index2];
var getTimeNanosecond2 = ({ values: values2 }, index2) => values2[index2];
var getTime2 = (data, index2) => {
  switch (data.type.unit) {
    case TimeUnit3.SECOND:
      return getTimeSecond2(data, index2);
    case TimeUnit3.MILLISECOND:
      return getTimeMillisecond2(data, index2);
    case TimeUnit3.MICROSECOND:
      return getTimeMicrosecond2(data, index2);
    case TimeUnit3.NANOSECOND:
      return getTimeNanosecond2(data, index2);
  }
};
var getDecimal2 = ({ values: values2, stride }, index2) => BN2.decimal(values2.subarray(stride * index2, stride * (index2 + 1)));
var getList2 = (data, index2) => {
  const { valueOffsets, stride, children: children2 } = data;
  const { [index2 * stride]: begin, [index2 * stride + 1]: end } = valueOffsets;
  const child = children2[0];
  const slice5 = child.slice(begin, end - begin);
  return new Vector2([slice5]);
};
var getMap2 = (data, index2) => {
  const { valueOffsets, children: children2 } = data;
  const { [index2]: begin, [index2 + 1]: end } = valueOffsets;
  const child = children2[0];
  return new MapRow2(child.slice(begin, end - begin));
};
var getStruct2 = (data, index2) => {
  return new StructRow2(data, index2);
};
var getUnion2 = (data, index2) => {
  return data.type.mode === UnionMode3.Dense ? getDenseUnion2(data, index2) : getSparseUnion2(data, index2);
};
var getDenseUnion2 = (data, index2) => {
  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index2]];
  const child = data.children[childIndex];
  return instance10.visit(child, data.valueOffsets[index2]);
};
var getSparseUnion2 = (data, index2) => {
  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index2]];
  const child = data.children[childIndex];
  return instance10.visit(child, index2);
};
var getDictionary2 = (data, index2) => {
  var _a9;
  return (_a9 = data.dictionary) === null || _a9 === void 0 ? void 0 : _a9.get(data.values[index2]);
};
var getInterval2 = (data, index2) => data.type.unit === IntervalUnit3.DAY_TIME ? getIntervalDayTime2(data, index2) : getIntervalYearMonth2(data, index2);
var getIntervalDayTime2 = ({ values: values2 }, index2) => values2.subarray(2 * index2, 2 * (index2 + 1));
var getIntervalYearMonth2 = ({ values: values2 }, index2) => {
  const interval2 = values2[index2];
  const int32s = new Int32Array(2);
  int32s[0] = Math.trunc(interval2 / 12);
  int32s[1] = Math.trunc(interval2 % 12);
  return int32s;
};
var getFixedSizeList2 = (data, index2) => {
  const { stride, children: children2 } = data;
  const child = children2[0];
  const slice5 = child.slice(index2 * stride, stride);
  return new Vector2([slice5]);
};
GetVisitor2.prototype.visitNull = wrapGet2(getNull2);
GetVisitor2.prototype.visitBool = wrapGet2(getBool3);
GetVisitor2.prototype.visitInt = wrapGet2(getInt2);
GetVisitor2.prototype.visitInt8 = wrapGet2(getNumeric2);
GetVisitor2.prototype.visitInt16 = wrapGet2(getNumeric2);
GetVisitor2.prototype.visitInt32 = wrapGet2(getNumeric2);
GetVisitor2.prototype.visitInt64 = wrapGet2(getBigInts2);
GetVisitor2.prototype.visitUint8 = wrapGet2(getNumeric2);
GetVisitor2.prototype.visitUint16 = wrapGet2(getNumeric2);
GetVisitor2.prototype.visitUint32 = wrapGet2(getNumeric2);
GetVisitor2.prototype.visitUint64 = wrapGet2(getBigInts2);
GetVisitor2.prototype.visitFloat = wrapGet2(getFloat2);
GetVisitor2.prototype.visitFloat16 = wrapGet2(getFloat162);
GetVisitor2.prototype.visitFloat32 = wrapGet2(getNumeric2);
GetVisitor2.prototype.visitFloat64 = wrapGet2(getNumeric2);
GetVisitor2.prototype.visitUtf8 = wrapGet2(getUtf82);
GetVisitor2.prototype.visitBinary = wrapGet2(getBinary2);
GetVisitor2.prototype.visitFixedSizeBinary = wrapGet2(getFixedSizeBinary2);
GetVisitor2.prototype.visitDate = wrapGet2(getDate2);
GetVisitor2.prototype.visitDateDay = wrapGet2(getDateDay2);
GetVisitor2.prototype.visitDateMillisecond = wrapGet2(getDateMillisecond2);
GetVisitor2.prototype.visitTimestamp = wrapGet2(getTimestamp2);
GetVisitor2.prototype.visitTimestampSecond = wrapGet2(getTimestampSecond2);
GetVisitor2.prototype.visitTimestampMillisecond = wrapGet2(getTimestampMillisecond2);
GetVisitor2.prototype.visitTimestampMicrosecond = wrapGet2(getTimestampMicrosecond2);
GetVisitor2.prototype.visitTimestampNanosecond = wrapGet2(getTimestampNanosecond2);
GetVisitor2.prototype.visitTime = wrapGet2(getTime2);
GetVisitor2.prototype.visitTimeSecond = wrapGet2(getTimeSecond2);
GetVisitor2.prototype.visitTimeMillisecond = wrapGet2(getTimeMillisecond2);
GetVisitor2.prototype.visitTimeMicrosecond = wrapGet2(getTimeMicrosecond2);
GetVisitor2.prototype.visitTimeNanosecond = wrapGet2(getTimeNanosecond2);
GetVisitor2.prototype.visitDecimal = wrapGet2(getDecimal2);
GetVisitor2.prototype.visitList = wrapGet2(getList2);
GetVisitor2.prototype.visitStruct = wrapGet2(getStruct2);
GetVisitor2.prototype.visitUnion = wrapGet2(getUnion2);
GetVisitor2.prototype.visitDenseUnion = wrapGet2(getDenseUnion2);
GetVisitor2.prototype.visitSparseUnion = wrapGet2(getSparseUnion2);
GetVisitor2.prototype.visitDictionary = wrapGet2(getDictionary2);
GetVisitor2.prototype.visitInterval = wrapGet2(getInterval2);
GetVisitor2.prototype.visitIntervalDayTime = wrapGet2(getIntervalDayTime2);
GetVisitor2.prototype.visitIntervalYearMonth = wrapGet2(getIntervalYearMonth2);
GetVisitor2.prototype.visitFixedSizeList = wrapGet2(getFixedSizeList2);
GetVisitor2.prototype.visitMap = wrapGet2(getMap2);
var instance10 = new GetVisitor2();

// ../../node_modules/apache-arrow/row/map.mjs
var kKeys2 = Symbol.for("keys");
var kVals2 = Symbol.for("vals");
var MapRow2 = class {
  constructor(slice5) {
    this[kKeys2] = new Vector2([slice5.children[0]]).memoize();
    this[kVals2] = slice5.children[1];
    return new Proxy(this, new MapRowProxyHandler2());
  }
  [Symbol.iterator]() {
    return new MapRowIterator2(this[kKeys2], this[kVals2]);
  }
  get size() {
    return this[kKeys2].length;
  }
  toArray() {
    return Object.values(this.toJSON());
  }
  toJSON() {
    const keys = this[kKeys2];
    const vals = this[kVals2];
    const json = {};
    for (let i2 = -1, n = keys.length; ++i2 < n; ) {
      json[keys.get(i2)] = instance10.visit(vals, i2);
    }
    return json;
  }
  toString() {
    return `{${[...this].map(([key, val]) => `${valueToString2(key)}: ${valueToString2(val)}`).join(", ")}}`;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toString();
  }
};
var MapRowIterator2 = class {
  constructor(keys, vals) {
    this.keys = keys;
    this.vals = vals;
    this.keyIndex = 0;
    this.numKeys = keys.length;
  }
  [Symbol.iterator]() {
    return this;
  }
  next() {
    const i2 = this.keyIndex;
    if (i2 === this.numKeys) {
      return { done: true, value: null };
    }
    this.keyIndex++;
    return {
      done: false,
      value: [
        this.keys.get(i2),
        instance10.visit(this.vals, i2)
      ]
    };
  }
};
var MapRowProxyHandler2 = class {
  isExtensible() {
    return false;
  }
  deleteProperty() {
    return false;
  }
  preventExtensions() {
    return true;
  }
  ownKeys(row) {
    return row[kKeys2].toArray().map(String);
  }
  has(row, key) {
    return row[kKeys2].includes(key);
  }
  getOwnPropertyDescriptor(row, key) {
    const idx = row[kKeys2].indexOf(key);
    if (idx !== -1) {
      return { writable: true, enumerable: true, configurable: true };
    }
    return;
  }
  get(row, key) {
    if (Reflect.has(row, key)) {
      return row[key];
    }
    const idx = row[kKeys2].indexOf(key);
    if (idx !== -1) {
      const val = instance10.visit(Reflect.get(row, kVals2), idx);
      Reflect.set(row, key, val);
      return val;
    }
  }
  set(row, key, val) {
    const idx = row[kKeys2].indexOf(key);
    if (idx !== -1) {
      instance9.visit(Reflect.get(row, kVals2), idx, val);
      return Reflect.set(row, key, val);
    } else if (Reflect.has(row, key)) {
      return Reflect.set(row, key, val);
    }
    return false;
  }
};
Object.defineProperties(MapRow2.prototype, {
  [Symbol.toStringTag]: { enumerable: false, configurable: false, value: "Row" },
  [kKeys2]: { writable: true, enumerable: false, configurable: false, value: null },
  [kVals2]: { writable: true, enumerable: false, configurable: false, value: null }
});

// ../../node_modules/apache-arrow/util/vector.mjs
function clampIndex2(source, index2, then) {
  const length4 = source.length;
  const adjust = index2 > -1 ? index2 : length4 + index2 % length4;
  return then ? then(source, adjust) : adjust;
}
var tmp2;
function clampRange2(source, begin, end, then) {
  const { length: len = 0 } = source;
  let lhs = typeof begin !== "number" ? 0 : begin;
  let rhs = typeof end !== "number" ? len : end;
  lhs < 0 && (lhs = (lhs % len + len) % len);
  rhs < 0 && (rhs = (rhs % len + len) % len);
  rhs < lhs && (tmp2 = lhs, lhs = rhs, rhs = tmp2);
  rhs > len && (rhs = len);
  return then ? then(source, lhs, rhs) : [lhs, rhs];
}
var isNaNFast2 = (value) => value !== value;
function createElementComparator2(search2) {
  const typeofSearch = typeof search2;
  if (typeofSearch !== "object" || search2 === null) {
    if (isNaNFast2(search2)) {
      return isNaNFast2;
    }
    return (value) => value === search2;
  }
  if (search2 instanceof Date) {
    const valueOfSearch = search2.valueOf();
    return (value) => value instanceof Date ? value.valueOf() === valueOfSearch : false;
  }
  if (ArrayBuffer.isView(search2)) {
    return (value) => value ? compareArrayLike2(search2, value) : false;
  }
  if (search2 instanceof Map) {
    return createMapComparator2(search2);
  }
  if (Array.isArray(search2)) {
    return createArrayLikeComparator2(search2);
  }
  if (search2 instanceof Vector2) {
    return createVectorComparator2(search2);
  }
  return createObjectComparator2(search2, true);
}
function createArrayLikeComparator2(lhs) {
  const comparators = [];
  for (let i2 = -1, n = lhs.length; ++i2 < n; ) {
    comparators[i2] = createElementComparator2(lhs[i2]);
  }
  return createSubElementsComparator2(comparators);
}
function createMapComparator2(lhs) {
  let i2 = -1;
  const comparators = [];
  for (const v3 of lhs.values())
    comparators[++i2] = createElementComparator2(v3);
  return createSubElementsComparator2(comparators);
}
function createVectorComparator2(lhs) {
  const comparators = [];
  for (let i2 = -1, n = lhs.length; ++i2 < n; ) {
    comparators[i2] = createElementComparator2(lhs.get(i2));
  }
  return createSubElementsComparator2(comparators);
}
function createObjectComparator2(lhs, allowEmpty = false) {
  const keys = Object.keys(lhs);
  if (!allowEmpty && keys.length === 0) {
    return () => false;
  }
  const comparators = [];
  for (let i2 = -1, n = keys.length; ++i2 < n; ) {
    comparators[i2] = createElementComparator2(lhs[keys[i2]]);
  }
  return createSubElementsComparator2(comparators, keys);
}
function createSubElementsComparator2(comparators, keys) {
  return (rhs) => {
    if (!rhs || typeof rhs !== "object") {
      return false;
    }
    switch (rhs.constructor) {
      case Array:
        return compareArray2(comparators, rhs);
      case Map:
        return compareObject2(comparators, rhs, rhs.keys());
      case MapRow2:
      case StructRow2:
      case Object:
      case void 0:
        return compareObject2(comparators, rhs, keys || Object.keys(rhs));
    }
    return rhs instanceof Vector2 ? compareVector2(comparators, rhs) : false;
  };
}
function compareArray2(comparators, arr) {
  const n = comparators.length;
  if (arr.length !== n) {
    return false;
  }
  for (let i2 = -1; ++i2 < n; ) {
    if (!comparators[i2](arr[i2])) {
      return false;
    }
  }
  return true;
}
function compareVector2(comparators, vec2) {
  const n = comparators.length;
  if (vec2.length !== n) {
    return false;
  }
  for (let i2 = -1; ++i2 < n; ) {
    if (!comparators[i2](vec2.get(i2))) {
      return false;
    }
  }
  return true;
}
function compareObject2(comparators, obj, keys) {
  const lKeyItr = keys[Symbol.iterator]();
  const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();
  const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();
  let i2 = 0;
  const n = comparators.length;
  let rVal = rValItr.next();
  let lKey = lKeyItr.next();
  let rKey = rKeyItr.next();
  for (; i2 < n && !lKey.done && !rKey.done && !rVal.done; ++i2, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {
    if (lKey.value !== rKey.value || !comparators[i2](rVal.value)) {
      break;
    }
  }
  if (i2 === n && lKey.done && rKey.done && rVal.done) {
    return true;
  }
  lKeyItr.return && lKeyItr.return();
  rKeyItr.return && rKeyItr.return();
  rValItr.return && rValItr.return();
  return false;
}

// ../../node_modules/apache-arrow/util/bit.mjs
var bit_exports2 = {};
__export(bit_exports2, {
  BitIterator: () => BitIterator2,
  getBit: () => getBit2,
  getBool: () => getBool4,
  packBools: () => packBools2,
  popcnt_array: () => popcnt_array2,
  popcnt_bit_range: () => popcnt_bit_range2,
  popcnt_uint32: () => popcnt_uint322,
  setBool: () => setBool4,
  truncateBitmap: () => truncateBitmap2
});
function getBool4(_data, _index, byte, bit) {
  return (byte & 1 << bit) !== 0;
}
function getBit2(_data, _index, byte, bit) {
  return (byte & 1 << bit) >> bit;
}
function setBool4(bytes, index2, value) {
  return value ? !!(bytes[index2 >> 3] |= 1 << index2 % 8) || true : !(bytes[index2 >> 3] &= ~(1 << index2 % 8)) && false;
}
function truncateBitmap2(offset2, length4, bitmap) {
  const alignedSize = bitmap.byteLength + 7 & ~7;
  if (offset2 > 0 || bitmap.byteLength < alignedSize) {
    const bytes = new Uint8Array(alignedSize);
    bytes.set(offset2 % 8 === 0 ? bitmap.subarray(offset2 >> 3) : (
      // Otherwise iterate each bit from the offset and return a new one
      packBools2(new BitIterator2(bitmap, offset2, length4, null, getBool4)).subarray(0, alignedSize)
    ));
    return bytes;
  }
  return bitmap;
}
function packBools2(values2) {
  const xs = [];
  let i2 = 0, bit = 0, byte = 0;
  for (const value of values2) {
    value && (byte |= 1 << bit);
    if (++bit === 8) {
      xs[i2++] = byte;
      byte = bit = 0;
    }
  }
  if (i2 === 0 || bit > 0) {
    xs[i2++] = byte;
  }
  const b2 = new Uint8Array(xs.length + 7 & ~7);
  b2.set(xs);
  return b2;
}
var BitIterator2 = class {
  constructor(bytes, begin, length4, context, get3) {
    this.bytes = bytes;
    this.length = length4;
    this.context = context;
    this.get = get3;
    this.bit = begin % 8;
    this.byteIndex = begin >> 3;
    this.byte = bytes[this.byteIndex++];
    this.index = 0;
  }
  next() {
    if (this.index < this.length) {
      if (this.bit === 8) {
        this.bit = 0;
        this.byte = this.bytes[this.byteIndex++];
      }
      return {
        value: this.get(this.context, this.index++, this.byte, this.bit++)
      };
    }
    return { done: true, value: null };
  }
  [Symbol.iterator]() {
    return this;
  }
};
function popcnt_bit_range2(data, lhs, rhs) {
  if (rhs - lhs <= 0) {
    return 0;
  }
  if (rhs - lhs < 8) {
    let sum6 = 0;
    for (const bit of new BitIterator2(data, lhs, rhs - lhs, data, getBit2)) {
      sum6 += bit;
    }
    return sum6;
  }
  const rhsInside = rhs >> 3 << 3;
  const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);
  return (
    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8
    popcnt_bit_range2(data, lhs, lhsInside) + // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8
    popcnt_bit_range2(data, rhsInside, rhs) + // Get the popcnt of all bits between the left and right hand sides' multiples of 8
    popcnt_array2(data, lhsInside >> 3, rhsInside - lhsInside >> 3)
  );
}
function popcnt_array2(arr, byteOffset, byteLength) {
  let cnt = 0, pos = Math.trunc(byteOffset);
  const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;
  while (len - pos >= 4) {
    cnt += popcnt_uint322(view.getUint32(pos));
    pos += 4;
  }
  while (len - pos >= 2) {
    cnt += popcnt_uint322(view.getUint16(pos));
    pos += 2;
  }
  while (len - pos >= 1) {
    cnt += popcnt_uint322(view.getUint8(pos));
    pos += 1;
  }
  return cnt;
}
function popcnt_uint322(uint32) {
  let i2 = Math.trunc(uint32);
  i2 = i2 - (i2 >>> 1 & 1431655765);
  i2 = (i2 & 858993459) + (i2 >>> 2 & 858993459);
  return (i2 + (i2 >>> 4) & 252645135) * 16843009 >>> 24;
}

// ../../node_modules/apache-arrow/data.mjs
var kUnknownNullCount2 = -1;
var Data2 = class _Data {
  constructor(type2, offset2, length4, nullCount, buffers, children2 = [], dictionary) {
    this.type = type2;
    this.children = children2;
    this.dictionary = dictionary;
    this.offset = Math.floor(Math.max(offset2 || 0, 0));
    this.length = Math.floor(Math.max(length4 || 0, 0));
    this._nullCount = Math.floor(Math.max(nullCount || 0, -1));
    let buffer;
    if (buffers instanceof _Data) {
      this.stride = buffers.stride;
      this.values = buffers.values;
      this.typeIds = buffers.typeIds;
      this.nullBitmap = buffers.nullBitmap;
      this.valueOffsets = buffers.valueOffsets;
    } else {
      this.stride = strideForType2(type2);
      if (buffers) {
        (buffer = buffers[0]) && (this.valueOffsets = buffer);
        (buffer = buffers[1]) && (this.values = buffer);
        (buffer = buffers[2]) && (this.nullBitmap = buffer);
        (buffer = buffers[3]) && (this.typeIds = buffer);
      }
    }
    this.nullable = this._nullCount !== 0 && this.nullBitmap && this.nullBitmap.byteLength > 0;
  }
  get typeId() {
    return this.type.typeId;
  }
  get ArrayType() {
    return this.type.ArrayType;
  }
  get buffers() {
    return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];
  }
  get byteLength() {
    let byteLength = 0;
    const { valueOffsets, values: values2, nullBitmap, typeIds } = this;
    valueOffsets && (byteLength += valueOffsets.byteLength);
    values2 && (byteLength += values2.byteLength);
    nullBitmap && (byteLength += nullBitmap.byteLength);
    typeIds && (byteLength += typeIds.byteLength);
    return this.children.reduce((byteLength2, child) => byteLength2 + child.byteLength, byteLength);
  }
  get nullCount() {
    let nullCount = this._nullCount;
    let nullBitmap;
    if (nullCount <= kUnknownNullCount2 && (nullBitmap = this.nullBitmap)) {
      this._nullCount = nullCount = this.length - popcnt_bit_range2(nullBitmap, this.offset, this.offset + this.length);
    }
    return nullCount;
  }
  getValid(index2) {
    if (this.nullable && this.nullCount > 0) {
      const pos = this.offset + index2;
      const val = this.nullBitmap[pos >> 3];
      return (val & 1 << pos % 8) !== 0;
    }
    return true;
  }
  setValid(index2, value) {
    if (!this.nullable) {
      return value;
    }
    if (!this.nullBitmap || this.nullBitmap.byteLength <= index2 >> 3) {
      const { nullBitmap: nullBitmap2 } = this._changeLengthAndBackfillNullBitmap(this.length);
      Object.assign(this, { nullBitmap: nullBitmap2, _nullCount: 0 });
    }
    const { nullBitmap, offset: offset2 } = this;
    const pos = offset2 + index2 >> 3;
    const bit = (offset2 + index2) % 8;
    const val = nullBitmap[pos] >> bit & 1;
    value ? val === 0 && (nullBitmap[pos] |= 1 << bit, this._nullCount = this.nullCount + 1) : val === 1 && (nullBitmap[pos] &= ~(1 << bit), this._nullCount = this.nullCount - 1);
    return value;
  }
  clone(type2 = this.type, offset2 = this.offset, length4 = this.length, nullCount = this._nullCount, buffers = this, children2 = this.children) {
    return new _Data(type2, offset2, length4, nullCount, buffers, children2, this.dictionary);
  }
  slice(offset2, length4) {
    const { stride, typeId, children: children2 } = this;
    const nullCount = +(this._nullCount === 0) - 1;
    const childStride = typeId === 16 ? stride : 1;
    const buffers = this._sliceBuffers(offset2, length4, stride, typeId);
    return this.clone(
      this.type,
      this.offset + offset2,
      length4,
      nullCount,
      buffers,
      // Don't slice children if we have value offsets (the variable-width types)
      children2.length === 0 || this.valueOffsets ? children2 : this._sliceChildren(children2, childStride * offset2, childStride * length4)
    );
  }
  _changeLengthAndBackfillNullBitmap(newLength) {
    if (this.typeId === Type3.Null) {
      return this.clone(this.type, 0, newLength, 0);
    }
    const { length: length4, nullCount } = this;
    const bitmap = new Uint8Array((newLength + 63 & ~63) >> 3).fill(255, 0, length4 >> 3);
    bitmap[length4 >> 3] = (1 << length4 - (length4 & ~7)) - 1;
    if (nullCount > 0) {
      bitmap.set(truncateBitmap2(this.offset, length4, this.nullBitmap), 0);
    }
    const buffers = this.buffers;
    buffers[BufferType2.VALIDITY] = bitmap;
    return this.clone(this.type, 0, newLength, nullCount + (newLength - length4), buffers);
  }
  _sliceBuffers(offset2, length4, stride, typeId) {
    let arr;
    const { buffers } = this;
    (arr = buffers[BufferType2.TYPE]) && (buffers[BufferType2.TYPE] = arr.subarray(offset2, offset2 + length4));
    (arr = buffers[BufferType2.OFFSET]) && (buffers[BufferType2.OFFSET] = arr.subarray(offset2, offset2 + length4 + 1)) || // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes
    (arr = buffers[BufferType2.DATA]) && (buffers[BufferType2.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset2, stride * (offset2 + length4)));
    return buffers;
  }
  _sliceChildren(children2, offset2, length4) {
    return children2.map((child) => child.slice(offset2, length4));
  }
};
Data2.prototype.children = Object.freeze([]);
var MakeDataVisitor2 = class _MakeDataVisitor extends Visitor2 {
  visit(props) {
    return this.getVisitFn(props["type"]).call(this, props);
  }
  visitNull(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["length"]: length4 = 0 } = props;
    return new Data2(type2, offset2, length4, 0);
  }
  visitBool(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const data = toArrayBufferView2(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length >> 3, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitInt(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const data = toArrayBufferView2(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitFloat(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const data = toArrayBufferView2(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitUtf8(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const data = toUint8Array2(props["data"]);
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const valueOffsets = toInt32Array2(props["valueOffsets"]);
    const { ["length"]: length4 = valueOffsets.length - 1, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [valueOffsets, data, nullBitmap]);
  }
  visitBinary(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const data = toUint8Array2(props["data"]);
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const valueOffsets = toInt32Array2(props["valueOffsets"]);
    const { ["length"]: length4 = valueOffsets.length - 1, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [valueOffsets, data, nullBitmap]);
  }
  visitFixedSizeBinary(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const data = toArrayBufferView2(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType2(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitDate(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const data = toArrayBufferView2(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType2(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitTimestamp(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const data = toArrayBufferView2(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType2(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitTime(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const data = toArrayBufferView2(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType2(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitDecimal(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const data = toArrayBufferView2(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType2(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitList(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["child"]: child } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const valueOffsets = toInt32Array2(props["valueOffsets"]);
    const { ["length"]: length4 = valueOffsets.length - 1, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [valueOffsets, void 0, nullBitmap], [child]);
  }
  visitStruct(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["children"]: children2 = [] } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const { length: length4 = children2.reduce((len, { length: length5 }) => Math.max(len, length5), 0), nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, void 0, nullBitmap], children2);
  }
  visitUnion(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["children"]: children2 = [] } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const typeIds = toArrayBufferView2(type2.ArrayType, props["typeIds"]);
    const { ["length"]: length4 = typeIds.length, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    if (DataType2.isSparseUnion(type2)) {
      return new Data2(type2, offset2, length4, nullCount, [void 0, void 0, nullBitmap, typeIds], children2);
    }
    const valueOffsets = toInt32Array2(props["valueOffsets"]);
    return new Data2(type2, offset2, length4, nullCount, [valueOffsets, void 0, nullBitmap, typeIds], children2);
  }
  visitDictionary(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const data = toArrayBufferView2(type2.indices.ArrayType, props["data"]);
    const { ["dictionary"]: dictionary = new Vector2([new _MakeDataVisitor().visit({ type: type2.dictionary })]) } = props;
    const { ["length"]: length4 = data.length, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, data, nullBitmap], [], dictionary);
  }
  visitInterval(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0 } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const data = toArrayBufferView2(type2.ArrayType, props["data"]);
    const { ["length"]: length4 = data.length / strideForType2(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, data, nullBitmap]);
  }
  visitFixedSizeList(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["child"]: child = new _MakeDataVisitor().visit({ type: type2.valueType }) } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const { ["length"]: length4 = child.length / strideForType2(type2), ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [void 0, void 0, nullBitmap], [child]);
  }
  visitMap(props) {
    const { ["type"]: type2, ["offset"]: offset2 = 0, ["child"]: child = new _MakeDataVisitor().visit({ type: type2.childType }) } = props;
    const nullBitmap = toUint8Array2(props["nullBitmap"]);
    const valueOffsets = toInt32Array2(props["valueOffsets"]);
    const { ["length"]: length4 = valueOffsets.length - 1, ["nullCount"]: nullCount = props["nullBitmap"] ? -1 : 0 } = props;
    return new Data2(type2, offset2, length4, nullCount, [valueOffsets, void 0, nullBitmap], [child]);
  }
};
function makeData2(props) {
  return new MakeDataVisitor2().visit(props);
}

// ../../node_modules/apache-arrow/util/chunk.mjs
var ChunkedIterator2 = class {
  constructor(numChunks = 0, getChunkIterator) {
    this.numChunks = numChunks;
    this.getChunkIterator = getChunkIterator;
    this.chunkIndex = 0;
    this.chunkIterator = this.getChunkIterator(0);
  }
  next() {
    while (this.chunkIndex < this.numChunks) {
      const next = this.chunkIterator.next();
      if (!next.done) {
        return next;
      }
      if (++this.chunkIndex < this.numChunks) {
        this.chunkIterator = this.getChunkIterator(this.chunkIndex);
      }
    }
    return { done: true, value: null };
  }
  [Symbol.iterator]() {
    return this;
  }
};
function computeChunkNullCounts2(chunks) {
  return chunks.reduce((nullCount, chunk) => nullCount + chunk.nullCount, 0);
}
function computeChunkOffsets2(chunks) {
  return chunks.reduce((offsets, chunk, index2) => {
    offsets[index2 + 1] = offsets[index2] + chunk.length;
    return offsets;
  }, new Uint32Array(chunks.length + 1));
}
function sliceChunks2(chunks, offsets, begin, end) {
  const slices = [];
  for (let i2 = -1, n = chunks.length; ++i2 < n; ) {
    const chunk = chunks[i2];
    const offset2 = offsets[i2];
    const { length: length4 } = chunk;
    if (offset2 >= end) {
      break;
    }
    if (begin >= offset2 + length4) {
      continue;
    }
    if (offset2 >= begin && offset2 + length4 <= end) {
      slices.push(chunk);
      continue;
    }
    const from2 = Math.max(0, begin - offset2);
    const to = Math.min(end - offset2, length4);
    slices.push(chunk.slice(from2, to - from2));
  }
  if (slices.length === 0) {
    slices.push(chunks[0].slice(0, 0));
  }
  return slices;
}
function binarySearch2(chunks, offsets, idx, fn) {
  let lhs = 0, mid2 = 0, rhs = offsets.length - 1;
  do {
    if (lhs >= rhs - 1) {
      return idx < offsets[rhs] ? fn(chunks, lhs, idx - offsets[lhs]) : null;
    }
    mid2 = lhs + Math.trunc((rhs - lhs) * 0.5);
    idx < offsets[mid2] ? rhs = mid2 : lhs = mid2;
  } while (lhs < rhs);
}
function isChunkedValid2(data, index2) {
  return data.getValid(index2);
}
function wrapChunkedCall12(fn) {
  function chunkedFn(chunks, i2, j2) {
    return fn(chunks[i2], j2);
  }
  return function(index2) {
    const data = this.data;
    return binarySearch2(data, this._offsets, index2, chunkedFn);
  };
}
function wrapChunkedCall22(fn) {
  let _2;
  function chunkedFn(chunks, i2, j2) {
    return fn(chunks[i2], j2, _2);
  }
  return function(index2, value) {
    const data = this.data;
    _2 = value;
    const result = binarySearch2(data, this._offsets, index2, chunkedFn);
    _2 = void 0;
    return result;
  };
}
function wrapChunkedIndexOf2(indexOf2) {
  let _1;
  function chunkedIndexOf(data, chunkIndex, fromIndex) {
    let begin = fromIndex, index2 = 0, total = 0;
    for (let i2 = chunkIndex - 1, n = data.length; ++i2 < n; ) {
      const chunk = data[i2];
      if (~(index2 = indexOf2(chunk, _1, begin))) {
        return total + index2;
      }
      begin = 0;
      total += chunk.length;
    }
    return -1;
  }
  return function(element, offset2) {
    _1 = element;
    const data = this.data;
    const result = typeof offset2 !== "number" ? chunkedIndexOf(data, 0, 0) : binarySearch2(data, this._offsets, offset2, chunkedIndexOf);
    _1 = void 0;
    return result;
  };
}

// ../../node_modules/apache-arrow/visitor/indexof.mjs
var IndexOfVisitor2 = class extends Visitor2 {
};
function nullIndexOf2(data, searchElement) {
  return searchElement === null && data.length > 0 ? 0 : -1;
}
function indexOfNull2(data, fromIndex) {
  const { nullBitmap } = data;
  if (!nullBitmap || data.nullCount <= 0) {
    return -1;
  }
  let i2 = 0;
  for (const isValid of new BitIterator2(nullBitmap, data.offset + (fromIndex || 0), data.length, nullBitmap, getBool4)) {
    if (!isValid) {
      return i2;
    }
    ++i2;
  }
  return -1;
}
function indexOfValue2(data, searchElement, fromIndex) {
  if (searchElement === void 0) {
    return -1;
  }
  if (searchElement === null) {
    return indexOfNull2(data, fromIndex);
  }
  const get3 = instance10.getVisitFn(data);
  const compare = createElementComparator2(searchElement);
  for (let i2 = (fromIndex || 0) - 1, n = data.length; ++i2 < n; ) {
    if (compare(get3(data, i2))) {
      return i2;
    }
  }
  return -1;
}
function indexOfUnion2(data, searchElement, fromIndex) {
  const get3 = instance10.getVisitFn(data);
  const compare = createElementComparator2(searchElement);
  for (let i2 = (fromIndex || 0) - 1, n = data.length; ++i2 < n; ) {
    if (compare(get3(data, i2))) {
      return i2;
    }
  }
  return -1;
}
IndexOfVisitor2.prototype.visitNull = nullIndexOf2;
IndexOfVisitor2.prototype.visitBool = indexOfValue2;
IndexOfVisitor2.prototype.visitInt = indexOfValue2;
IndexOfVisitor2.prototype.visitInt8 = indexOfValue2;
IndexOfVisitor2.prototype.visitInt16 = indexOfValue2;
IndexOfVisitor2.prototype.visitInt32 = indexOfValue2;
IndexOfVisitor2.prototype.visitInt64 = indexOfValue2;
IndexOfVisitor2.prototype.visitUint8 = indexOfValue2;
IndexOfVisitor2.prototype.visitUint16 = indexOfValue2;
IndexOfVisitor2.prototype.visitUint32 = indexOfValue2;
IndexOfVisitor2.prototype.visitUint64 = indexOfValue2;
IndexOfVisitor2.prototype.visitFloat = indexOfValue2;
IndexOfVisitor2.prototype.visitFloat16 = indexOfValue2;
IndexOfVisitor2.prototype.visitFloat32 = indexOfValue2;
IndexOfVisitor2.prototype.visitFloat64 = indexOfValue2;
IndexOfVisitor2.prototype.visitUtf8 = indexOfValue2;
IndexOfVisitor2.prototype.visitBinary = indexOfValue2;
IndexOfVisitor2.prototype.visitFixedSizeBinary = indexOfValue2;
IndexOfVisitor2.prototype.visitDate = indexOfValue2;
IndexOfVisitor2.prototype.visitDateDay = indexOfValue2;
IndexOfVisitor2.prototype.visitDateMillisecond = indexOfValue2;
IndexOfVisitor2.prototype.visitTimestamp = indexOfValue2;
IndexOfVisitor2.prototype.visitTimestampSecond = indexOfValue2;
IndexOfVisitor2.prototype.visitTimestampMillisecond = indexOfValue2;
IndexOfVisitor2.prototype.visitTimestampMicrosecond = indexOfValue2;
IndexOfVisitor2.prototype.visitTimestampNanosecond = indexOfValue2;
IndexOfVisitor2.prototype.visitTime = indexOfValue2;
IndexOfVisitor2.prototype.visitTimeSecond = indexOfValue2;
IndexOfVisitor2.prototype.visitTimeMillisecond = indexOfValue2;
IndexOfVisitor2.prototype.visitTimeMicrosecond = indexOfValue2;
IndexOfVisitor2.prototype.visitTimeNanosecond = indexOfValue2;
IndexOfVisitor2.prototype.visitDecimal = indexOfValue2;
IndexOfVisitor2.prototype.visitList = indexOfValue2;
IndexOfVisitor2.prototype.visitStruct = indexOfValue2;
IndexOfVisitor2.prototype.visitUnion = indexOfValue2;
IndexOfVisitor2.prototype.visitDenseUnion = indexOfUnion2;
IndexOfVisitor2.prototype.visitSparseUnion = indexOfUnion2;
IndexOfVisitor2.prototype.visitDictionary = indexOfValue2;
IndexOfVisitor2.prototype.visitInterval = indexOfValue2;
IndexOfVisitor2.prototype.visitIntervalDayTime = indexOfValue2;
IndexOfVisitor2.prototype.visitIntervalYearMonth = indexOfValue2;
IndexOfVisitor2.prototype.visitFixedSizeList = indexOfValue2;
IndexOfVisitor2.prototype.visitMap = indexOfValue2;
var instance11 = new IndexOfVisitor2();

// ../../node_modules/apache-arrow/visitor/iterator.mjs
var IteratorVisitor2 = class extends Visitor2 {
};
function vectorIterator2(vector3) {
  const { type: type2 } = vector3;
  if (vector3.nullCount === 0 && vector3.stride === 1 && (type2.typeId === Type3.Timestamp || type2 instanceof Int_2 && type2.bitWidth !== 64 || type2 instanceof Time_2 && type2.bitWidth !== 64 || type2 instanceof Float2 && type2.precision !== Precision3.HALF)) {
    return new ChunkedIterator2(vector3.data.length, (chunkIndex) => {
      const data = vector3.data[chunkIndex];
      return data.values.subarray(0, data.length)[Symbol.iterator]();
    });
  }
  let offset2 = 0;
  return new ChunkedIterator2(vector3.data.length, (chunkIndex) => {
    const data = vector3.data[chunkIndex];
    const length4 = data.length;
    const inner = vector3.slice(offset2, offset2 + length4);
    offset2 += length4;
    return new VectorIterator2(inner);
  });
}
var VectorIterator2 = class {
  constructor(vector3) {
    this.vector = vector3;
    this.index = 0;
  }
  next() {
    if (this.index < this.vector.length) {
      return {
        value: this.vector.get(this.index++)
      };
    }
    return { done: true, value: null };
  }
  [Symbol.iterator]() {
    return this;
  }
};
IteratorVisitor2.prototype.visitNull = vectorIterator2;
IteratorVisitor2.prototype.visitBool = vectorIterator2;
IteratorVisitor2.prototype.visitInt = vectorIterator2;
IteratorVisitor2.prototype.visitInt8 = vectorIterator2;
IteratorVisitor2.prototype.visitInt16 = vectorIterator2;
IteratorVisitor2.prototype.visitInt32 = vectorIterator2;
IteratorVisitor2.prototype.visitInt64 = vectorIterator2;
IteratorVisitor2.prototype.visitUint8 = vectorIterator2;
IteratorVisitor2.prototype.visitUint16 = vectorIterator2;
IteratorVisitor2.prototype.visitUint32 = vectorIterator2;
IteratorVisitor2.prototype.visitUint64 = vectorIterator2;
IteratorVisitor2.prototype.visitFloat = vectorIterator2;
IteratorVisitor2.prototype.visitFloat16 = vectorIterator2;
IteratorVisitor2.prototype.visitFloat32 = vectorIterator2;
IteratorVisitor2.prototype.visitFloat64 = vectorIterator2;
IteratorVisitor2.prototype.visitUtf8 = vectorIterator2;
IteratorVisitor2.prototype.visitBinary = vectorIterator2;
IteratorVisitor2.prototype.visitFixedSizeBinary = vectorIterator2;
IteratorVisitor2.prototype.visitDate = vectorIterator2;
IteratorVisitor2.prototype.visitDateDay = vectorIterator2;
IteratorVisitor2.prototype.visitDateMillisecond = vectorIterator2;
IteratorVisitor2.prototype.visitTimestamp = vectorIterator2;
IteratorVisitor2.prototype.visitTimestampSecond = vectorIterator2;
IteratorVisitor2.prototype.visitTimestampMillisecond = vectorIterator2;
IteratorVisitor2.prototype.visitTimestampMicrosecond = vectorIterator2;
IteratorVisitor2.prototype.visitTimestampNanosecond = vectorIterator2;
IteratorVisitor2.prototype.visitTime = vectorIterator2;
IteratorVisitor2.prototype.visitTimeSecond = vectorIterator2;
IteratorVisitor2.prototype.visitTimeMillisecond = vectorIterator2;
IteratorVisitor2.prototype.visitTimeMicrosecond = vectorIterator2;
IteratorVisitor2.prototype.visitTimeNanosecond = vectorIterator2;
IteratorVisitor2.prototype.visitDecimal = vectorIterator2;
IteratorVisitor2.prototype.visitList = vectorIterator2;
IteratorVisitor2.prototype.visitStruct = vectorIterator2;
IteratorVisitor2.prototype.visitUnion = vectorIterator2;
IteratorVisitor2.prototype.visitDenseUnion = vectorIterator2;
IteratorVisitor2.prototype.visitSparseUnion = vectorIterator2;
IteratorVisitor2.prototype.visitDictionary = vectorIterator2;
IteratorVisitor2.prototype.visitInterval = vectorIterator2;
IteratorVisitor2.prototype.visitIntervalDayTime = vectorIterator2;
IteratorVisitor2.prototype.visitIntervalYearMonth = vectorIterator2;
IteratorVisitor2.prototype.visitFixedSizeList = vectorIterator2;
IteratorVisitor2.prototype.visitMap = vectorIterator2;
var instance12 = new IteratorVisitor2();

// ../../node_modules/apache-arrow/visitor/bytelength.mjs
var sum3 = (x3, y3) => x3 + y3;
var GetByteLengthVisitor2 = class extends Visitor2 {
  visitNull(____, _2) {
    return 0;
  }
  visitInt(data, _2) {
    return data.type.bitWidth / 8;
  }
  visitFloat(data, _2) {
    return data.type.ArrayType.BYTES_PER_ELEMENT;
  }
  visitBool(____, _2) {
    return 1 / 8;
  }
  visitDecimal(data, _2) {
    return data.type.bitWidth / 8;
  }
  visitDate(data, _2) {
    return (data.type.unit + 1) * 4;
  }
  visitTime(data, _2) {
    return data.type.bitWidth / 8;
  }
  visitTimestamp(data, _2) {
    return data.type.unit === TimeUnit3.SECOND ? 4 : 8;
  }
  visitInterval(data, _2) {
    return (data.type.unit + 1) * 4;
  }
  visitStruct(data, i2) {
    return data.children.reduce((total, child) => total + instance13.visit(child, i2), 0);
  }
  visitFixedSizeBinary(data, _2) {
    return data.type.byteWidth;
  }
  visitMap(data, i2) {
    return 8 + data.children.reduce((total, child) => total + instance13.visit(child, i2), 0);
  }
  visitDictionary(data, i2) {
    var _a9;
    return data.type.indices.bitWidth / 8 + (((_a9 = data.dictionary) === null || _a9 === void 0 ? void 0 : _a9.getByteLength(data.values[i2])) || 0);
  }
};
var getUtf8ByteLength2 = ({ valueOffsets }, index2) => {
  return 8 + (valueOffsets[index2 + 1] - valueOffsets[index2]);
};
var getBinaryByteLength2 = ({ valueOffsets }, index2) => {
  return 8 + (valueOffsets[index2 + 1] - valueOffsets[index2]);
};
var getListByteLength2 = ({ valueOffsets, stride, children: children2 }, index2) => {
  const child = children2[0];
  const { [index2 * stride]: start2 } = valueOffsets;
  const { [index2 * stride + 1]: end } = valueOffsets;
  const visit2 = instance13.getVisitFn(child.type);
  const slice5 = child.slice(start2, end - start2);
  let size = 8;
  for (let idx = -1, len = end - start2; ++idx < len; ) {
    size += visit2(slice5, idx);
  }
  return size;
};
var getFixedSizeListByteLength2 = ({ stride, children: children2 }, index2) => {
  const child = children2[0];
  const slice5 = child.slice(index2 * stride, stride);
  const visit2 = instance13.getVisitFn(child.type);
  let size = 0;
  for (let idx = -1, len = slice5.length; ++idx < len; ) {
    size += visit2(slice5, idx);
  }
  return size;
};
var getUnionByteLength2 = (data, index2) => {
  return data.type.mode === UnionMode3.Dense ? getDenseUnionByteLength2(data, index2) : getSparseUnionByteLength2(data, index2);
};
var getDenseUnionByteLength2 = ({ type: type2, children: children2, typeIds, valueOffsets }, index2) => {
  const childIndex = type2.typeIdToChildIndex[typeIds[index2]];
  return 8 + instance13.visit(children2[childIndex], valueOffsets[index2]);
};
var getSparseUnionByteLength2 = ({ children: children2 }, index2) => {
  return 4 + instance13.visitMany(children2, children2.map(() => index2)).reduce(sum3, 0);
};
GetByteLengthVisitor2.prototype.visitUtf8 = getUtf8ByteLength2;
GetByteLengthVisitor2.prototype.visitBinary = getBinaryByteLength2;
GetByteLengthVisitor2.prototype.visitList = getListByteLength2;
GetByteLengthVisitor2.prototype.visitFixedSizeList = getFixedSizeListByteLength2;
GetByteLengthVisitor2.prototype.visitUnion = getUnionByteLength2;
GetByteLengthVisitor2.prototype.visitDenseUnion = getDenseUnionByteLength2;
GetByteLengthVisitor2.prototype.visitSparseUnion = getSparseUnionByteLength2;
var instance13 = new GetByteLengthVisitor2();

// ../../node_modules/apache-arrow/vector.mjs
var _a6;
var visitorsByTypeId2 = {};
var vectorPrototypesByTypeId2 = {};
var Vector2 = class _Vector {
  constructor(input2) {
    var _b3, _c3, _d3;
    const data = input2[0] instanceof _Vector ? input2.flatMap((x3) => x3.data) : input2;
    if (data.length === 0 || data.some((x3) => !(x3 instanceof Data2))) {
      throw new TypeError("Vector constructor expects an Array of Data instances.");
    }
    const type2 = (_b3 = data[0]) === null || _b3 === void 0 ? void 0 : _b3.type;
    switch (data.length) {
      case 0:
        this._offsets = [0];
        break;
      case 1: {
        const { get: get3, set: set3, indexOf: indexOf2, byteLength } = visitorsByTypeId2[type2.typeId];
        const unchunkedData = data[0];
        this.isValid = (index2) => isChunkedValid2(unchunkedData, index2);
        this.get = (index2) => get3(unchunkedData, index2);
        this.set = (index2, value) => set3(unchunkedData, index2, value);
        this.indexOf = (index2) => indexOf2(unchunkedData, index2);
        this.getByteLength = (index2) => byteLength(unchunkedData, index2);
        this._offsets = [0, unchunkedData.length];
        break;
      }
      default:
        Object.setPrototypeOf(this, vectorPrototypesByTypeId2[type2.typeId]);
        this._offsets = computeChunkOffsets2(data);
        break;
    }
    this.data = data;
    this.type = type2;
    this.stride = strideForType2(type2);
    this.numChildren = (_d3 = (_c3 = type2.children) === null || _c3 === void 0 ? void 0 : _c3.length) !== null && _d3 !== void 0 ? _d3 : 0;
    this.length = this._offsets[this._offsets.length - 1];
  }
  /**
   * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.
   */
  get byteLength() {
    if (this._byteLength === -1) {
      this._byteLength = this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);
    }
    return this._byteLength;
  }
  /**
   * The number of null elements in this Vector.
   */
  get nullCount() {
    if (this._nullCount === -1) {
      this._nullCount = computeChunkNullCounts2(this.data);
    }
    return this._nullCount;
  }
  /**
   * The Array or TypedAray constructor used for the JS representation
   *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.
   */
  get ArrayType() {
    return this.type.ArrayType;
  }
  /**
   * The name that should be printed when the Vector is logged in a message.
   */
  get [Symbol.toStringTag]() {
    return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;
  }
  /**
   * The name of this Vector.
   */
  get VectorName() {
    return `${Type3[this.type.typeId]}Vector`;
  }
  /**
   * Check whether an element is null.
   * @param index The index at which to read the validity bitmap.
   */
  // @ts-ignore
  isValid(index2) {
    return false;
  }
  /**
   * Get an element value by position.
   * @param index The index of the element to read.
   */
  // @ts-ignore
  get(index2) {
    return null;
  }
  /**
   * Set an element value by position.
   * @param index The index of the element to write.
   * @param value The value to set.
   */
  // @ts-ignore
  set(index2, value) {
    return;
  }
  /**
   * Retrieve the index of the first occurrence of a value in an Vector.
   * @param element The value to locate in the Vector.
   * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.
   */
  // @ts-ignore
  indexOf(element, offset2) {
    return -1;
  }
  includes(element, offset2) {
    return this.indexOf(element, offset2) > 0;
  }
  /**
   * Get the size in bytes of an element by index.
   * @param index The index at which to get the byteLength.
   */
  // @ts-ignore
  getByteLength(index2) {
    return 0;
  }
  /**
   * Iterator for the Vector's elements.
   */
  [Symbol.iterator]() {
    return instance12.visit(this);
  }
  /**
   * Combines two or more Vectors of the same type.
   * @param others Additional Vectors to add to the end of this Vector.
   */
  concat(...others) {
    return new _Vector(this.data.concat(others.flatMap((x3) => x3.data).flat(Number.POSITIVE_INFINITY)));
  }
  /**
   * Return a zero-copy sub-section of this Vector.
   * @param start The beginning of the specified portion of the Vector.
   * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.
   */
  slice(begin, end) {
    return new _Vector(clampRange2(this, begin, end, ({ data, _offsets }, begin2, end2) => sliceChunks2(data, _offsets, begin2, end2)));
  }
  toJSON() {
    return [...this];
  }
  /**
   * Return a JavaScript Array or TypedArray of the Vector's elements.
   *
   * @note If this Vector contains a single Data chunk and the Vector's type is a
   *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this
   *  method returns a zero-copy slice of the underlying TypedArray values. If there's
   *  more than one chunk, the resulting TypedArray will be a copy of the data from each
   *  chunk's underlying TypedArray values.
   *
   * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.
   */
  toArray() {
    const { type: type2, data, length: length4, stride, ArrayType } = this;
    switch (type2.typeId) {
      case Type3.Int:
      case Type3.Float:
      case Type3.Decimal:
      case Type3.Time:
      case Type3.Timestamp:
        switch (data.length) {
          case 0:
            return new ArrayType();
          case 1:
            return data[0].values.subarray(0, length4 * stride);
          default:
            return data.reduce((memo, { values: values2, length: chunk_length }) => {
              memo.array.set(values2.subarray(0, chunk_length * stride), memo.offset);
              memo.offset += chunk_length * stride;
              return memo;
            }, { array: new ArrayType(length4 * stride), offset: 0 }).array;
        }
    }
    return [...this];
  }
  /**
   * Returns a string representation of the Vector.
   *
   * @returns A string representation of the Vector.
   */
  toString() {
    return `[${[...this].join(",")}]`;
  }
  /**
   * Returns a child Vector by name, or null if this Vector has no child with the given name.
   * @param name The name of the child to retrieve.
   */
  getChild(name2) {
    var _b3;
    return this.getChildAt((_b3 = this.type.children) === null || _b3 === void 0 ? void 0 : _b3.findIndex((f2) => f2.name === name2));
  }
  /**
   * Returns a child Vector by index, or null if this Vector has no child at the supplied index.
   * @param index The index of the child to retrieve.
   */
  getChildAt(index2) {
    if (index2 > -1 && index2 < this.numChildren) {
      return new _Vector(this.data.map(({ children: children2 }) => children2[index2]));
    }
    return null;
  }
  get isMemoized() {
    if (DataType2.isDictionary(this.type)) {
      return this.data[0].dictionary.isMemoized;
    }
    return false;
  }
  /**
   * Adds memoization to the Vector's {@link get} method. For dictionary
   * vectors, this method return a vector that memoizes only the dictionary
   * values.
   *
   * Memoization is very useful when decoding a value is expensive such as
   * Uft8. The memoization creates a cache of the size of the Vector and
   * therfore increases memory usage.
   *
   * @returns A new vector that memoizes calls to {@link get}.
   */
  memoize() {
    if (DataType2.isDictionary(this.type)) {
      const dictionary = new MemoizedVector2(this.data[0].dictionary);
      const newData = this.data.map((data) => {
        const cloned = data.clone();
        cloned.dictionary = dictionary;
        return cloned;
      });
      return new _Vector(newData);
    }
    return new MemoizedVector2(this);
  }
  /**
   * Returns a vector without memoization of the {@link get} method. If this
   * vector is not memoized, this method returns this vector.
   *
   * @returns A a vector without memoization.
   */
  unmemoize() {
    if (DataType2.isDictionary(this.type) && this.isMemoized) {
      const dictionary = this.data[0].dictionary.unmemoize();
      const newData = this.data.map((data) => {
        const newData2 = data.clone();
        newData2.dictionary = dictionary;
        return newData2;
      });
      return new _Vector(newData);
    }
    return this;
  }
};
_a6 = Symbol.toStringTag;
Vector2[_a6] = ((proto) => {
  proto.type = DataType2.prototype;
  proto.data = [];
  proto.length = 0;
  proto.stride = 1;
  proto.numChildren = 0;
  proto._nullCount = -1;
  proto._byteLength = -1;
  proto._offsets = new Uint32Array([0]);
  proto[Symbol.isConcatSpreadable] = true;
  const typeIds = Object.keys(Type3).map((T2) => Type3[T2]).filter((T2) => typeof T2 === "number" && T2 !== Type3.NONE);
  for (const typeId of typeIds) {
    const get3 = instance10.getVisitFnByTypeId(typeId);
    const set3 = instance9.getVisitFnByTypeId(typeId);
    const indexOf2 = instance11.getVisitFnByTypeId(typeId);
    const byteLength = instance13.getVisitFnByTypeId(typeId);
    visitorsByTypeId2[typeId] = { get: get3, set: set3, indexOf: indexOf2, byteLength };
    vectorPrototypesByTypeId2[typeId] = Object.create(proto, {
      ["isValid"]: { value: wrapChunkedCall12(isChunkedValid2) },
      ["get"]: { value: wrapChunkedCall12(instance10.getVisitFnByTypeId(typeId)) },
      ["set"]: { value: wrapChunkedCall22(instance9.getVisitFnByTypeId(typeId)) },
      ["indexOf"]: { value: wrapChunkedIndexOf2(instance11.getVisitFnByTypeId(typeId)) },
      ["getByteLength"]: { value: wrapChunkedCall12(instance13.getVisitFnByTypeId(typeId)) }
    });
  }
  return "Vector";
})(Vector2.prototype);
var MemoizedVector2 = class _MemoizedVector extends Vector2 {
  constructor(vector3) {
    super(vector3.data);
    const get3 = this.get;
    const set3 = this.set;
    const slice5 = this.slice;
    const cache = new Array(this.length);
    Object.defineProperty(this, "get", {
      value(index2) {
        const cachedValue = cache[index2];
        if (cachedValue !== void 0) {
          return cachedValue;
        }
        const value = get3.call(this, index2);
        cache[index2] = value;
        return value;
      }
    });
    Object.defineProperty(this, "set", {
      value(index2, value) {
        set3.call(this, index2, value);
        cache[index2] = value;
      }
    });
    Object.defineProperty(this, "slice", {
      value: (begin, end) => new _MemoizedVector(slice5.call(this, begin, end))
    });
    Object.defineProperty(this, "isMemoized", { value: true });
    Object.defineProperty(this, "unmemoize", {
      value: () => new Vector2(this.data)
    });
    Object.defineProperty(this, "memoize", {
      value: () => this
    });
  }
};

// ../../node_modules/apache-arrow/builder/valid.mjs
function createIsValidFunction2(nullValues) {
  if (!nullValues || nullValues.length <= 0) {
    return function isValid(value) {
      return true;
    };
  }
  let fnBody = "";
  const noNaNs = nullValues.filter((x3) => x3 === x3);
  if (noNaNs.length > 0) {
    fnBody = `
    switch (x) {${noNaNs.map((x3) => `
        case ${valueToCase2(x3)}:`).join("")}
            return false;
    }`;
  }
  if (nullValues.length !== noNaNs.length) {
    fnBody = `if (x !== x) return false;
${fnBody}`;
  }
  return new Function(`x`, `${fnBody}
return true;`);
}
function valueToCase2(x3) {
  if (typeof x3 !== "bigint") {
    return valueToString2(x3);
  } else if (BigIntAvailable) {
    return `${valueToString2(x3)}n`;
  }
  return `"${valueToString2(x3)}"`;
}

// ../../node_modules/apache-arrow/builder/buffer.mjs
var roundLengthUpToNearest64Bytes2 = (len, BPE) => (Math.ceil(len) * BPE + 63 & ~63 || 64) / BPE;
var sliceOrExtendArray2 = (arr, len = 0) => arr.length >= len ? arr.subarray(0, len) : memcpy2(new arr.constructor(len), arr, 0);
var BufferBuilder2 = class {
  constructor(buffer, stride = 1) {
    this.buffer = buffer;
    this.stride = stride;
    this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;
    this.ArrayType = buffer.constructor;
    this._resize(this.length = Math.ceil(buffer.length / stride));
  }
  get byteLength() {
    return Math.ceil(this.length * this.stride) * this.BYTES_PER_ELEMENT;
  }
  get reservedLength() {
    return this.buffer.length / this.stride;
  }
  get reservedByteLength() {
    return this.buffer.byteLength;
  }
  // @ts-ignore
  set(index2, value) {
    return this;
  }
  append(value) {
    return this.set(this.length, value);
  }
  reserve(extra) {
    if (extra > 0) {
      this.length += extra;
      const stride = this.stride;
      const length4 = this.length * stride;
      const reserved = this.buffer.length;
      if (length4 >= reserved) {
        this._resize(reserved === 0 ? roundLengthUpToNearest64Bytes2(length4 * 1, this.BYTES_PER_ELEMENT) : roundLengthUpToNearest64Bytes2(length4 * 2, this.BYTES_PER_ELEMENT));
      }
    }
    return this;
  }
  flush(length4 = this.length) {
    length4 = roundLengthUpToNearest64Bytes2(length4 * this.stride, this.BYTES_PER_ELEMENT);
    const array3 = sliceOrExtendArray2(this.buffer, length4);
    this.clear();
    return array3;
  }
  clear() {
    this.length = 0;
    this._resize(0);
    return this;
  }
  _resize(newLength) {
    return this.buffer = memcpy2(new this.ArrayType(newLength), this.buffer);
  }
};
BufferBuilder2.prototype.offset = 0;
var DataBufferBuilder2 = class extends BufferBuilder2 {
  last() {
    return this.get(this.length - 1);
  }
  get(index2) {
    return this.buffer[index2];
  }
  set(index2, value) {
    this.reserve(index2 - this.length + 1);
    this.buffer[index2 * this.stride] = value;
    return this;
  }
};
var BitmapBufferBuilder2 = class extends DataBufferBuilder2 {
  constructor(data = new Uint8Array(0)) {
    super(data, 1 / 8);
    this.numValid = 0;
  }
  get numInvalid() {
    return this.length - this.numValid;
  }
  get(idx) {
    return this.buffer[idx >> 3] >> idx % 8 & 1;
  }
  set(idx, val) {
    const { buffer } = this.reserve(idx - this.length + 1);
    const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;
    val ? cur === 0 && (buffer[byte] |= 1 << bit, ++this.numValid) : cur === 1 && (buffer[byte] &= ~(1 << bit), --this.numValid);
    return this;
  }
  clear() {
    this.numValid = 0;
    return super.clear();
  }
};
var OffsetsBufferBuilder2 = class extends DataBufferBuilder2 {
  constructor(data = new Int32Array(1)) {
    super(data, 1);
  }
  append(value) {
    return this.set(this.length - 1, value);
  }
  set(index2, value) {
    const offset2 = this.length - 1;
    const buffer = this.reserve(index2 - offset2 + 1).buffer;
    if (offset2 < index2++) {
      buffer.fill(buffer[offset2], offset2, index2);
    }
    buffer[index2] = buffer[index2 - 1] + value;
    return this;
  }
  flush(length4 = this.length - 1) {
    if (length4 > this.length) {
      this.set(length4 - 1, 0);
    }
    return super.flush(length4 + 1);
  }
};

// ../../node_modules/apache-arrow/builder.mjs
var Builder5 = class {
  /**
   * Construct a builder with the given Arrow DataType with optional null values,
   * which will be interpreted as "null" when set or appended to the `Builder`.
   * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.
   */
  constructor({ "type": type2, "nullValues": nulls }) {
    this.length = 0;
    this.finished = false;
    this.type = type2;
    this.children = [];
    this.nullValues = nulls;
    this.stride = strideForType2(type2);
    this._nulls = new BitmapBufferBuilder2();
    if (nulls && nulls.length > 0) {
      this._isValid = createIsValidFunction2(nulls);
    }
  }
  /** @nocollapse */
  // @ts-ignore
  static throughNode(options) {
    throw new Error(`"throughNode" not available in this environment`);
  }
  /** @nocollapse */
  // @ts-ignore
  static throughDOM(options) {
    throw new Error(`"throughDOM" not available in this environment`);
  }
  /**
   * Flush the `Builder` and return a `Vector<T>`.
   * @returns {Vector<T>} A `Vector<T>` of the flushed values.
   */
  toVector() {
    return new Vector2([this.flush()]);
  }
  get ArrayType() {
    return this.type.ArrayType;
  }
  get nullCount() {
    return this._nulls.numInvalid;
  }
  get numChildren() {
    return this.children.length;
  }
  /**
   * @returns The aggregate length (in bytes) of the values that have been written.
   */
  get byteLength() {
    let size = 0;
    const { _offsets, _values, _nulls, _typeIds, children: children2 } = this;
    _offsets && (size += _offsets.byteLength);
    _values && (size += _values.byteLength);
    _nulls && (size += _nulls.byteLength);
    _typeIds && (size += _typeIds.byteLength);
    return children2.reduce((size2, child) => size2 + child.byteLength, size);
  }
  /**
   * @returns The aggregate number of rows that have been reserved to write new values.
   */
  get reservedLength() {
    return this._nulls.reservedLength;
  }
  /**
   * @returns The aggregate length (in bytes) that has been reserved to write new values.
   */
  get reservedByteLength() {
    let size = 0;
    this._offsets && (size += this._offsets.reservedByteLength);
    this._values && (size += this._values.reservedByteLength);
    this._nulls && (size += this._nulls.reservedByteLength);
    this._typeIds && (size += this._typeIds.reservedByteLength);
    return this.children.reduce((size2, child) => size2 + child.reservedByteLength, size);
  }
  get valueOffsets() {
    return this._offsets ? this._offsets.buffer : null;
  }
  get values() {
    return this._values ? this._values.buffer : null;
  }
  get nullBitmap() {
    return this._nulls ? this._nulls.buffer : null;
  }
  get typeIds() {
    return this._typeIds ? this._typeIds.buffer : null;
  }
  /**
   * Appends a value (or null) to this `Builder`.
   * This is equivalent to `builder.set(builder.length, value)`.
   * @param {T['TValue'] | TNull } value The value to append.
   */
  append(value) {
    return this.set(this.length, value);
  }
  /**
   * Validates whether a value is valid (true), or null (false)
   * @param {T['TValue'] | TNull } value The value to compare against null the value representations
   */
  isValid(value) {
    return this._isValid(value);
  }
  /**
   * Write a value (or null-value sentinel) at the supplied index.
   * If the value matches one of the null-value representations, a 1-bit is
   * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to
   * the null `BitmapBufferBuilder`, and the value is passed to
   * `Builder.prototype.setValue()`.
   * @param {number} index The index of the value to write.
   * @param {T['TValue'] | TNull } value The value to write at the supplied index.
   * @returns {this} The updated `Builder` instance.
   */
  set(index2, value) {
    if (this.setValid(index2, this.isValid(value))) {
      this.setValue(index2, value);
    }
    return this;
  }
  /**
   * Write a value to the underlying buffers at the supplied index, bypassing
   * the null-value check. This is a low-level method that
   * @param {number} index
   * @param {T['TValue'] | TNull } value
   */
  setValue(index2, value) {
    this._setValue(this, index2, value);
  }
  setValid(index2, valid2) {
    this.length = this._nulls.set(index2, +valid2).length;
    return valid2;
  }
  // @ts-ignore
  addChild(child, name2 = `${this.numChildren}`) {
    throw new Error(`Cannot append children to non-nested type "${this.type}"`);
  }
  /**
   * Retrieve the child `Builder` at the supplied `index`, or null if no child
   * exists at that index.
   * @param {number} index The index of the child `Builder` to retrieve.
   * @returns {Builder | null} The child Builder at the supplied index or null.
   */
  getChildAt(index2) {
    return this.children[index2] || null;
  }
  /**
   * Commit all the values that have been written to their underlying
   * ArrayBuffers, including any child Builders if applicable, and reset
   * the internal `Builder` state.
   * @returns A `Data<T>` of the buffers and children representing the values written.
   */
  flush() {
    let data;
    let typeIds;
    let nullBitmap;
    let valueOffsets;
    const { type: type2, length: length4, nullCount, _typeIds, _offsets, _values, _nulls } = this;
    if (typeIds = _typeIds === null || _typeIds === void 0 ? void 0 : _typeIds.flush(length4)) {
      valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length4);
    } else if (valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length4)) {
      data = _values === null || _values === void 0 ? void 0 : _values.flush(_offsets.last());
    } else {
      data = _values === null || _values === void 0 ? void 0 : _values.flush(length4);
    }
    if (nullCount > 0) {
      nullBitmap = _nulls === null || _nulls === void 0 ? void 0 : _nulls.flush(length4);
    }
    const children2 = this.children.map((child) => child.flush());
    this.clear();
    return makeData2({
      type: type2,
      length: length4,
      nullCount,
      children: children2,
      "child": children2[0],
      data,
      typeIds,
      nullBitmap,
      valueOffsets
    });
  }
  /**
   * Finalize this `Builder`, and child builders if applicable.
   * @returns {this} The finalized `Builder` instance.
   */
  finish() {
    this.finished = true;
    for (const child of this.children)
      child.finish();
    return this;
  }
  /**
   * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.
   * @returns {this} The cleared `Builder` instance.
   */
  clear() {
    var _a9, _b3, _c3, _d3;
    this.length = 0;
    (_a9 = this._nulls) === null || _a9 === void 0 ? void 0 : _a9.clear();
    (_b3 = this._values) === null || _b3 === void 0 ? void 0 : _b3.clear();
    (_c3 = this._offsets) === null || _c3 === void 0 ? void 0 : _c3.clear();
    (_d3 = this._typeIds) === null || _d3 === void 0 ? void 0 : _d3.clear();
    for (const child of this.children)
      child.clear();
    return this;
  }
};
Builder5.prototype.length = 1;
Builder5.prototype.stride = 1;
Builder5.prototype.children = null;
Builder5.prototype.finished = false;
Builder5.prototype.nullValues = null;
Builder5.prototype._isValid = () => true;
var FixedWidthBuilder2 = class extends Builder5 {
  constructor(opts) {
    super(opts);
    this._values = new DataBufferBuilder2(new this.ArrayType(0), this.stride);
  }
  setValue(index2, value) {
    const values2 = this._values;
    values2.reserve(index2 - values2.length + 1);
    return super.setValue(index2, value);
  }
};
var VariableWidthBuilder2 = class extends Builder5 {
  constructor(opts) {
    super(opts);
    this._pendingLength = 0;
    this._offsets = new OffsetsBufferBuilder2();
  }
  setValue(index2, value) {
    const pending = this._pending || (this._pending = /* @__PURE__ */ new Map());
    const current = pending.get(index2);
    current && (this._pendingLength -= current.length);
    this._pendingLength += value instanceof MapRow2 ? value[kKeys2].length : value.length;
    pending.set(index2, value);
  }
  setValid(index2, isValid) {
    if (!super.setValid(index2, isValid)) {
      (this._pending || (this._pending = /* @__PURE__ */ new Map())).set(index2, void 0);
      return false;
    }
    return true;
  }
  clear() {
    this._pendingLength = 0;
    this._pending = void 0;
    return super.clear();
  }
  flush() {
    this._flush();
    return super.flush();
  }
  finish() {
    this._flush();
    return super.finish();
  }
  _flush() {
    const pending = this._pending;
    const pendingLength = this._pendingLength;
    this._pendingLength = 0;
    this._pending = void 0;
    if (pending && pending.size > 0) {
      this._flushPending(pending, pendingLength);
    }
    return this;
  }
};

// ../../node_modules/apache-arrow/fb/block.mjs
var Block2 = class {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  /**
   * Index to the start of the RecordBlock (note this is past the Message header)
   */
  offset() {
    return this.bb.readInt64(this.bb_pos);
  }
  /**
   * Length of the metadata
   */
  metaDataLength() {
    return this.bb.readInt32(this.bb_pos + 8);
  }
  /**
   * Length of the data (this is aligned so there can be a gap between this and
   * the metadata).
   */
  bodyLength() {
    return this.bb.readInt64(this.bb_pos + 16);
  }
  static sizeOf() {
    return 24;
  }
  static createBlock(builder, offset2, metaDataLength, bodyLength) {
    builder.prep(8, 24);
    builder.writeInt64(bodyLength);
    builder.pad(4);
    builder.writeInt32(metaDataLength);
    builder.writeInt64(offset2);
    return builder.offset();
  }
};

// ../../node_modules/flatbuffers/mjs/constants.js
var SIZEOF_SHORT2 = 2;
var SIZEOF_INT2 = 4;
var FILE_IDENTIFIER_LENGTH2 = 4;
var SIZE_PREFIX_LENGTH2 = 4;

// ../../node_modules/flatbuffers/mjs/utils.js
var int322 = new Int32Array(2);
var float322 = new Float32Array(int322.buffer);
var float642 = new Float64Array(int322.buffer);
var isLittleEndian2 = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;

// ../../node_modules/flatbuffers/mjs/long.js
var Long = class _Long {
  constructor(low, high) {
    this.low = low | 0;
    this.high = high | 0;
  }
  static create(low, high) {
    return low == 0 && high == 0 ? _Long.ZERO : new _Long(low, high);
  }
  toFloat64() {
    return (this.low >>> 0) + this.high * 4294967296;
  }
  equals(other) {
    return this.low == other.low && this.high == other.high;
  }
};
Long.ZERO = new Long(0, 0);

// ../../node_modules/flatbuffers/mjs/encoding.js
var Encoding2;
(function(Encoding3) {
  Encoding3[Encoding3["UTF8_BYTES"] = 1] = "UTF8_BYTES";
  Encoding3[Encoding3["UTF16_STRING"] = 2] = "UTF16_STRING";
})(Encoding2 || (Encoding2 = {}));

// ../../node_modules/flatbuffers/mjs/byte-buffer.js
var ByteBuffer4 = class _ByteBuffer {
  /**
   * Create a new ByteBuffer with a given array of bytes (`Uint8Array`)
   */
  constructor(bytes_) {
    this.bytes_ = bytes_;
    this.position_ = 0;
  }
  /**
   * Create and allocate a new ByteBuffer with a given size.
   */
  static allocate(byte_size) {
    return new _ByteBuffer(new Uint8Array(byte_size));
  }
  clear() {
    this.position_ = 0;
  }
  /**
   * Get the underlying `Uint8Array`.
   */
  bytes() {
    return this.bytes_;
  }
  /**
   * Get the buffer's position.
   */
  position() {
    return this.position_;
  }
  /**
   * Set the buffer's position.
   */
  setPosition(position3) {
    this.position_ = position3;
  }
  /**
   * Get the buffer's capacity.
   */
  capacity() {
    return this.bytes_.length;
  }
  readInt8(offset2) {
    return this.readUint8(offset2) << 24 >> 24;
  }
  readUint8(offset2) {
    return this.bytes_[offset2];
  }
  readInt16(offset2) {
    return this.readUint16(offset2) << 16 >> 16;
  }
  readUint16(offset2) {
    return this.bytes_[offset2] | this.bytes_[offset2 + 1] << 8;
  }
  readInt32(offset2) {
    return this.bytes_[offset2] | this.bytes_[offset2 + 1] << 8 | this.bytes_[offset2 + 2] << 16 | this.bytes_[offset2 + 3] << 24;
  }
  readUint32(offset2) {
    return this.readInt32(offset2) >>> 0;
  }
  readInt64(offset2) {
    return new Long(this.readInt32(offset2), this.readInt32(offset2 + 4));
  }
  readUint64(offset2) {
    return new Long(this.readUint32(offset2), this.readUint32(offset2 + 4));
  }
  readFloat32(offset2) {
    int322[0] = this.readInt32(offset2);
    return float322[0];
  }
  readFloat64(offset2) {
    int322[isLittleEndian2 ? 0 : 1] = this.readInt32(offset2);
    int322[isLittleEndian2 ? 1 : 0] = this.readInt32(offset2 + 4);
    return float642[0];
  }
  writeInt8(offset2, value) {
    this.bytes_[offset2] = value;
  }
  writeUint8(offset2, value) {
    this.bytes_[offset2] = value;
  }
  writeInt16(offset2, value) {
    this.bytes_[offset2] = value;
    this.bytes_[offset2 + 1] = value >> 8;
  }
  writeUint16(offset2, value) {
    this.bytes_[offset2] = value;
    this.bytes_[offset2 + 1] = value >> 8;
  }
  writeInt32(offset2, value) {
    this.bytes_[offset2] = value;
    this.bytes_[offset2 + 1] = value >> 8;
    this.bytes_[offset2 + 2] = value >> 16;
    this.bytes_[offset2 + 3] = value >> 24;
  }
  writeUint32(offset2, value) {
    this.bytes_[offset2] = value;
    this.bytes_[offset2 + 1] = value >> 8;
    this.bytes_[offset2 + 2] = value >> 16;
    this.bytes_[offset2 + 3] = value >> 24;
  }
  writeInt64(offset2, value) {
    this.writeInt32(offset2, value.low);
    this.writeInt32(offset2 + 4, value.high);
  }
  writeUint64(offset2, value) {
    this.writeUint32(offset2, value.low);
    this.writeUint32(offset2 + 4, value.high);
  }
  writeFloat32(offset2, value) {
    float322[0] = value;
    this.writeInt32(offset2, int322[0]);
  }
  writeFloat64(offset2, value) {
    float642[0] = value;
    this.writeInt32(offset2, int322[isLittleEndian2 ? 0 : 1]);
    this.writeInt32(offset2 + 4, int322[isLittleEndian2 ? 1 : 0]);
  }
  /**
   * Return the file identifier.   Behavior is undefined for FlatBuffers whose
   * schema does not include a file_identifier (likely points at padding or the
   * start of a the root vtable).
   */
  getBufferIdentifier() {
    if (this.bytes_.length < this.position_ + SIZEOF_INT2 + FILE_IDENTIFIER_LENGTH2) {
      throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");
    }
    let result = "";
    for (let i2 = 0; i2 < FILE_IDENTIFIER_LENGTH2; i2++) {
      result += String.fromCharCode(this.readInt8(this.position_ + SIZEOF_INT2 + i2));
    }
    return result;
  }
  /**
   * Look up a field in the vtable, return an offset into the object, or 0 if the
   * field is not present.
   */
  __offset(bb_pos, vtable_offset) {
    const vtable = bb_pos - this.readInt32(bb_pos);
    return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;
  }
  /**
   * Initialize any Table-derived type to point to the union at the given offset.
   */
  __union(t, offset2) {
    t.bb_pos = offset2 + this.readInt32(offset2);
    t.bb = this;
    return t;
  }
  /**
   * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.
   * This allocates a new string and converts to wide chars upon each access.
   *
   * To avoid the conversion to UTF-16, pass Encoding.UTF8_BYTES as
   * the "optionalEncoding" argument. This is useful for avoiding conversion to
   * and from UTF-16 when the data will just be packaged back up in another
   * FlatBuffer later on.
   *
   * @param offset
   * @param opt_encoding Defaults to UTF16_STRING
   */
  __string(offset2, opt_encoding) {
    offset2 += this.readInt32(offset2);
    const length4 = this.readInt32(offset2);
    let result = "";
    let i2 = 0;
    offset2 += SIZEOF_INT2;
    if (opt_encoding === Encoding2.UTF8_BYTES) {
      return this.bytes_.subarray(offset2, offset2 + length4);
    }
    while (i2 < length4) {
      let codePoint;
      const a2 = this.readUint8(offset2 + i2++);
      if (a2 < 192) {
        codePoint = a2;
      } else {
        const b2 = this.readUint8(offset2 + i2++);
        if (a2 < 224) {
          codePoint = (a2 & 31) << 6 | b2 & 63;
        } else {
          const c4 = this.readUint8(offset2 + i2++);
          if (a2 < 240) {
            codePoint = (a2 & 15) << 12 | (b2 & 63) << 6 | c4 & 63;
          } else {
            const d = this.readUint8(offset2 + i2++);
            codePoint = (a2 & 7) << 18 | (b2 & 63) << 12 | (c4 & 63) << 6 | d & 63;
          }
        }
      }
      if (codePoint < 65536) {
        result += String.fromCharCode(codePoint);
      } else {
        codePoint -= 65536;
        result += String.fromCharCode((codePoint >> 10) + 55296, (codePoint & (1 << 10) - 1) + 56320);
      }
    }
    return result;
  }
  /**
   * Handle unions that can contain string as its member, if a Table-derived type then initialize it,
   * if a string then return a new one
   *
   * WARNING: strings are immutable in JS so we can't change the string that the user gave us, this
   * makes the behaviour of __union_with_string different compared to __union
   */
  __union_with_string(o, offset2) {
    if (typeof o === "string") {
      return this.__string(offset2);
    }
    return this.__union(o, offset2);
  }
  /**
   * Retrieve the relative offset stored at "offset"
   */
  __indirect(offset2) {
    return offset2 + this.readInt32(offset2);
  }
  /**
   * Get the start of data of a vector whose offset is stored at "offset" in this object.
   */
  __vector(offset2) {
    return offset2 + this.readInt32(offset2) + SIZEOF_INT2;
  }
  /**
   * Get the length of a vector whose offset is stored at "offset" in this object.
   */
  __vector_len(offset2) {
    return this.readInt32(offset2 + this.readInt32(offset2));
  }
  __has_identifier(ident) {
    if (ident.length != FILE_IDENTIFIER_LENGTH2) {
      throw new Error("FlatBuffers: file identifier must be length " + FILE_IDENTIFIER_LENGTH2);
    }
    for (let i2 = 0; i2 < FILE_IDENTIFIER_LENGTH2; i2++) {
      if (ident.charCodeAt(i2) != this.readInt8(this.position() + SIZEOF_INT2 + i2)) {
        return false;
      }
    }
    return true;
  }
  /**
   * A helper function to avoid generated code depending on this file directly.
   */
  createLong(low, high) {
    return Long.create(low, high);
  }
  /**
   * A helper function for generating list for obj api
   */
  createScalarList(listAccessor, listLength) {
    const ret = [];
    for (let i2 = 0; i2 < listLength; ++i2) {
      if (listAccessor(i2) !== null) {
        ret.push(listAccessor(i2));
      }
    }
    return ret;
  }
  /**
   * A helper function for generating list for obj api
   * @param listAccessor function that accepts an index and return data at that index
   * @param listLength listLength
   * @param res result list
   */
  createObjList(listAccessor, listLength) {
    const ret = [];
    for (let i2 = 0; i2 < listLength; ++i2) {
      const val = listAccessor(i2);
      if (val !== null) {
        ret.push(val.unpack());
      }
    }
    return ret;
  }
};

// ../../node_modules/flatbuffers/mjs/builder.js
var Builder6 = class _Builder {
  /**
   * Create a FlatBufferBuilder.
   */
  constructor(opt_initial_size) {
    this.minalign = 1;
    this.vtable = null;
    this.vtable_in_use = 0;
    this.isNested = false;
    this.object_start = 0;
    this.vtables = [];
    this.vector_num_elems = 0;
    this.force_defaults = false;
    this.string_maps = null;
    let initial_size;
    if (!opt_initial_size) {
      initial_size = 1024;
    } else {
      initial_size = opt_initial_size;
    }
    this.bb = ByteBuffer4.allocate(initial_size);
    this.space = initial_size;
  }
  clear() {
    this.bb.clear();
    this.space = this.bb.capacity();
    this.minalign = 1;
    this.vtable = null;
    this.vtable_in_use = 0;
    this.isNested = false;
    this.object_start = 0;
    this.vtables = [];
    this.vector_num_elems = 0;
    this.force_defaults = false;
    this.string_maps = null;
  }
  /**
   * In order to save space, fields that are set to their default value
   * don't get serialized into the buffer. Forcing defaults provides a
   * way to manually disable this optimization.
   *
   * @param forceDefaults true always serializes default values
   */
  forceDefaults(forceDefaults) {
    this.force_defaults = forceDefaults;
  }
  /**
   * Get the ByteBuffer representing the FlatBuffer. Only call this after you've
   * called finish(). The actual data starts at the ByteBuffer's current position,
   * not necessarily at 0.
   */
  dataBuffer() {
    return this.bb;
  }
  /**
   * Get the bytes representing the FlatBuffer. Only call this after you've
   * called finish().
   */
  asUint8Array() {
    return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
  }
  /**
   * Prepare to write an element of `size` after `additional_bytes` have been
   * written, e.g. if you write a string, you need to align such the int length
   * field is aligned to 4 bytes, and the string data follows it directly. If all
   * you need to do is alignment, `additional_bytes` will be 0.
   *
   * @param size This is the of the new element to write
   * @param additional_bytes The padding size
   */
  prep(size, additional_bytes) {
    if (size > this.minalign) {
      this.minalign = size;
    }
    const align_size = ~(this.bb.capacity() - this.space + additional_bytes) + 1 & size - 1;
    while (this.space < align_size + size + additional_bytes) {
      const old_buf_size = this.bb.capacity();
      this.bb = _Builder.growByteBuffer(this.bb);
      this.space += this.bb.capacity() - old_buf_size;
    }
    this.pad(align_size);
  }
  pad(byte_size) {
    for (let i2 = 0; i2 < byte_size; i2++) {
      this.bb.writeInt8(--this.space, 0);
    }
  }
  writeInt8(value) {
    this.bb.writeInt8(this.space -= 1, value);
  }
  writeInt16(value) {
    this.bb.writeInt16(this.space -= 2, value);
  }
  writeInt32(value) {
    this.bb.writeInt32(this.space -= 4, value);
  }
  writeInt64(value) {
    this.bb.writeInt64(this.space -= 8, value);
  }
  writeFloat32(value) {
    this.bb.writeFloat32(this.space -= 4, value);
  }
  writeFloat64(value) {
    this.bb.writeFloat64(this.space -= 8, value);
  }
  /**
   * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `int8` to add the the buffer.
   */
  addInt8(value) {
    this.prep(1, 0);
    this.writeInt8(value);
  }
  /**
   * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `int16` to add the the buffer.
   */
  addInt16(value) {
    this.prep(2, 0);
    this.writeInt16(value);
  }
  /**
   * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `int32` to add the the buffer.
   */
  addInt32(value) {
    this.prep(4, 0);
    this.writeInt32(value);
  }
  /**
   * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `int64` to add the the buffer.
   */
  addInt64(value) {
    this.prep(8, 0);
    this.writeInt64(value);
  }
  /**
   * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `float32` to add the the buffer.
   */
  addFloat32(value) {
    this.prep(4, 0);
    this.writeFloat32(value);
  }
  /**
   * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).
   * @param value The `float64` to add the the buffer.
   */
  addFloat64(value) {
    this.prep(8, 0);
    this.writeFloat64(value);
  }
  addFieldInt8(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addInt8(value);
      this.slot(voffset);
    }
  }
  addFieldInt16(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addInt16(value);
      this.slot(voffset);
    }
  }
  addFieldInt32(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addInt32(value);
      this.slot(voffset);
    }
  }
  addFieldInt64(voffset, value, defaultValue) {
    if (this.force_defaults || !value.equals(defaultValue)) {
      this.addInt64(value);
      this.slot(voffset);
    }
  }
  addFieldFloat32(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addFloat32(value);
      this.slot(voffset);
    }
  }
  addFieldFloat64(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addFloat64(value);
      this.slot(voffset);
    }
  }
  addFieldOffset(voffset, value, defaultValue) {
    if (this.force_defaults || value != defaultValue) {
      this.addOffset(value);
      this.slot(voffset);
    }
  }
  /**
   * Structs are stored inline, so nothing additional is being added. `d` is always 0.
   */
  addFieldStruct(voffset, value, defaultValue) {
    if (value != defaultValue) {
      this.nested(value);
      this.slot(voffset);
    }
  }
  /**
   * Structures are always stored inline, they need to be created right
   * where they're used.  You'll get this assertion failure if you
   * created it elsewhere.
   */
  nested(obj) {
    if (obj != this.offset()) {
      throw new Error("FlatBuffers: struct must be serialized inline.");
    }
  }
  /**
   * Should not be creating any other object, string or vector
   * while an object is being constructed
   */
  notNested() {
    if (this.isNested) {
      throw new Error("FlatBuffers: object serialization must not be nested.");
    }
  }
  /**
   * Set the current vtable at `voffset` to the current location in the buffer.
   */
  slot(voffset) {
    if (this.vtable !== null)
      this.vtable[voffset] = this.offset();
  }
  /**
   * @returns Offset relative to the end of the buffer.
   */
  offset() {
    return this.bb.capacity() - this.space;
  }
  /**
   * Doubles the size of the backing ByteBuffer and copies the old data towards
   * the end of the new buffer (since we build the buffer backwards).
   *
   * @param bb The current buffer with the existing data
   * @returns A new byte buffer with the old data copied
   * to it. The data is located at the end of the buffer.
   *
   * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass
   * it a uint8Array we need to suppress the type check:
   * @suppress {checkTypes}
   */
  static growByteBuffer(bb2) {
    const old_buf_size = bb2.capacity();
    if (old_buf_size & 3221225472) {
      throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");
    }
    const new_buf_size = old_buf_size << 1;
    const nbb = ByteBuffer4.allocate(new_buf_size);
    nbb.setPosition(new_buf_size - old_buf_size);
    nbb.bytes().set(bb2.bytes(), new_buf_size - old_buf_size);
    return nbb;
  }
  /**
   * Adds on offset, relative to where it will be written.
   *
   * @param offset The offset to add.
   */
  addOffset(offset2) {
    this.prep(SIZEOF_INT2, 0);
    this.writeInt32(this.offset() - offset2 + SIZEOF_INT2);
  }
  /**
   * Start encoding a new object in the buffer.  Users will not usually need to
   * call this directly. The FlatBuffers compiler will generate helper methods
   * that call this method internally.
   */
  startObject(numfields) {
    this.notNested();
    if (this.vtable == null) {
      this.vtable = [];
    }
    this.vtable_in_use = numfields;
    for (let i2 = 0; i2 < numfields; i2++) {
      this.vtable[i2] = 0;
    }
    this.isNested = true;
    this.object_start = this.offset();
  }
  /**
   * Finish off writing the object that is under construction.
   *
   * @returns The offset to the object inside `dataBuffer`
   */
  endObject() {
    if (this.vtable == null || !this.isNested) {
      throw new Error("FlatBuffers: endObject called without startObject");
    }
    this.addInt32(0);
    const vtableloc = this.offset();
    let i2 = this.vtable_in_use - 1;
    for (; i2 >= 0 && this.vtable[i2] == 0; i2--) {
    }
    const trimmed_size = i2 + 1;
    for (; i2 >= 0; i2--) {
      this.addInt16(this.vtable[i2] != 0 ? vtableloc - this.vtable[i2] : 0);
    }
    const standard_fields = 2;
    this.addInt16(vtableloc - this.object_start);
    const len = (trimmed_size + standard_fields) * SIZEOF_SHORT2;
    this.addInt16(len);
    let existing_vtable = 0;
    const vt1 = this.space;
    outer_loop:
      for (i2 = 0; i2 < this.vtables.length; i2++) {
        const vt2 = this.bb.capacity() - this.vtables[i2];
        if (len == this.bb.readInt16(vt2)) {
          for (let j2 = SIZEOF_SHORT2; j2 < len; j2 += SIZEOF_SHORT2) {
            if (this.bb.readInt16(vt1 + j2) != this.bb.readInt16(vt2 + j2)) {
              continue outer_loop;
            }
          }
          existing_vtable = this.vtables[i2];
          break;
        }
      }
    if (existing_vtable) {
      this.space = this.bb.capacity() - vtableloc;
      this.bb.writeInt32(this.space, existing_vtable - vtableloc);
    } else {
      this.vtables.push(this.offset());
      this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);
    }
    this.isNested = false;
    return vtableloc;
  }
  /**
   * Finalize a buffer, poiting to the given `root_table`.
   */
  finish(root_table, opt_file_identifier, opt_size_prefix) {
    const size_prefix = opt_size_prefix ? SIZE_PREFIX_LENGTH2 : 0;
    if (opt_file_identifier) {
      const file_identifier = opt_file_identifier;
      this.prep(this.minalign, SIZEOF_INT2 + FILE_IDENTIFIER_LENGTH2 + size_prefix);
      if (file_identifier.length != FILE_IDENTIFIER_LENGTH2) {
        throw new Error("FlatBuffers: file identifier must be length " + FILE_IDENTIFIER_LENGTH2);
      }
      for (let i2 = FILE_IDENTIFIER_LENGTH2 - 1; i2 >= 0; i2--) {
        this.writeInt8(file_identifier.charCodeAt(i2));
      }
    }
    this.prep(this.minalign, SIZEOF_INT2 + size_prefix);
    this.addOffset(root_table);
    if (size_prefix) {
      this.addInt32(this.bb.capacity() - this.space);
    }
    this.bb.setPosition(this.space);
  }
  /**
   * Finalize a size prefixed buffer, pointing to the given `root_table`.
   */
  finishSizePrefixed(root_table, opt_file_identifier) {
    this.finish(root_table, opt_file_identifier, true);
  }
  /**
   * This checks a required field has been set in a given table that has
   * just been constructed.
   */
  requiredField(table2, field2) {
    const table_start = this.bb.capacity() - table2;
    const vtable_start = table_start - this.bb.readInt32(table_start);
    const ok = this.bb.readInt16(vtable_start + field2) != 0;
    if (!ok) {
      throw new Error("FlatBuffers: field " + field2 + " must be set");
    }
  }
  /**
   * Start a new array/vector of objects.  Users usually will not call
   * this directly. The FlatBuffers compiler will create a start/end
   * method for vector types in generated code.
   *
   * @param elem_size The size of each element in the array
   * @param num_elems The number of elements in the array
   * @param alignment The alignment of the array
   */
  startVector(elem_size, num_elems, alignment) {
    this.notNested();
    this.vector_num_elems = num_elems;
    this.prep(SIZEOF_INT2, elem_size * num_elems);
    this.prep(alignment, elem_size * num_elems);
  }
  /**
   * Finish off the creation of an array and all its elements. The array must be
   * created with `startVector`.
   *
   * @returns The offset at which the newly created array
   * starts.
   */
  endVector() {
    this.writeInt32(this.vector_num_elems);
    return this.offset();
  }
  /**
   * Encode the string `s` in the buffer using UTF-8. If the string passed has
   * already been seen, we return the offset of the already written string
   *
   * @param s The string to encode
   * @return The offset in the buffer where the encoded string starts
   */
  createSharedString(s2) {
    if (!s2) {
      return 0;
    }
    if (!this.string_maps) {
      this.string_maps = /* @__PURE__ */ new Map();
    }
    if (this.string_maps.has(s2)) {
      return this.string_maps.get(s2);
    }
    const offset2 = this.createString(s2);
    this.string_maps.set(s2, offset2);
    return offset2;
  }
  /**
   * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed
   * instead of a string, it is assumed to contain valid UTF-8 encoded data.
   *
   * @param s The string to encode
   * @return The offset in the buffer where the encoded string starts
   */
  createString(s2) {
    if (!s2) {
      return 0;
    }
    let utf8;
    if (s2 instanceof Uint8Array) {
      utf8 = s2;
    } else {
      utf8 = [];
      let i2 = 0;
      while (i2 < s2.length) {
        let codePoint;
        const a2 = s2.charCodeAt(i2++);
        if (a2 < 55296 || a2 >= 56320) {
          codePoint = a2;
        } else {
          const b2 = s2.charCodeAt(i2++);
          codePoint = (a2 << 10) + b2 + (65536 - (55296 << 10) - 56320);
        }
        if (codePoint < 128) {
          utf8.push(codePoint);
        } else {
          if (codePoint < 2048) {
            utf8.push(codePoint >> 6 & 31 | 192);
          } else {
            if (codePoint < 65536) {
              utf8.push(codePoint >> 12 & 15 | 224);
            } else {
              utf8.push(codePoint >> 18 & 7 | 240, codePoint >> 12 & 63 | 128);
            }
            utf8.push(codePoint >> 6 & 63 | 128);
          }
          utf8.push(codePoint & 63 | 128);
        }
      }
    }
    this.addInt8(0);
    this.startVector(1, utf8.length, 1);
    this.bb.setPosition(this.space -= utf8.length);
    for (let i2 = 0, offset2 = this.space, bytes = this.bb.bytes(); i2 < utf8.length; i2++) {
      bytes[offset2++] = utf8[i2];
    }
    return this.endVector();
  }
  /**
   * A helper function to avoid generated code depending on this file directly.
   */
  createLong(low, high) {
    return Long.create(low, high);
  }
  /**
   * A helper function to pack an object
   *
   * @returns offset of obj
   */
  createObjectOffset(obj) {
    if (obj === null) {
      return 0;
    }
    if (typeof obj === "string") {
      return this.createString(obj);
    } else {
      return obj.pack(this);
    }
  }
  /**
   * A helper function to pack a list of object
   *
   * @returns list of offsets of each non null object
   */
  createObjectOffsetList(list) {
    const ret = [];
    for (let i2 = 0; i2 < list.length; ++i2) {
      const val = list[i2];
      if (val !== null) {
        ret.push(this.createObjectOffset(val));
      } else {
        throw new Error("FlatBuffers: Argument for createObjectOffsetList cannot contain null.");
      }
    }
    return ret;
  }
  createStructOffsetList(list, startFunc) {
    startFunc(this, list.length);
    this.createObjectOffsetList(list);
    return this.endVector();
  }
};

// ../../node_modules/apache-arrow/fb/key-value.mjs
var KeyValue2 = class _KeyValue {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsKeyValue(bb2, obj) {
    return (obj || new _KeyValue()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsKeyValue(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _KeyValue()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  key(optionalEncoding) {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.__string(this.bb_pos + offset2, optionalEncoding) : null;
  }
  value(optionalEncoding) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.__string(this.bb_pos + offset2, optionalEncoding) : null;
  }
  static startKeyValue(builder) {
    builder.startObject(2);
  }
  static addKey(builder, keyOffset) {
    builder.addFieldOffset(0, keyOffset, 0);
  }
  static addValue(builder, valueOffset) {
    builder.addFieldOffset(1, valueOffset, 0);
  }
  static endKeyValue(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createKeyValue(builder, keyOffset, valueOffset) {
    _KeyValue.startKeyValue(builder);
    _KeyValue.addKey(builder, keyOffset);
    _KeyValue.addValue(builder, valueOffset);
    return _KeyValue.endKeyValue(builder);
  }
};

// ../../node_modules/apache-arrow/fb/metadata-version.mjs
var MetadataVersion4;
(function(MetadataVersion5) {
  MetadataVersion5[MetadataVersion5["V1"] = 0] = "V1";
  MetadataVersion5[MetadataVersion5["V2"] = 1] = "V2";
  MetadataVersion5[MetadataVersion5["V3"] = 2] = "V3";
  MetadataVersion5[MetadataVersion5["V4"] = 3] = "V4";
  MetadataVersion5[MetadataVersion5["V5"] = 4] = "V5";
})(MetadataVersion4 || (MetadataVersion4 = {}));

// ../../node_modules/apache-arrow/fb/endianness.mjs
var Endianness2;
(function(Endianness3) {
  Endianness3[Endianness3["Little"] = 0] = "Little";
  Endianness3[Endianness3["Big"] = 1] = "Big";
})(Endianness2 || (Endianness2 = {}));

// ../../node_modules/apache-arrow/fb/dictionary-kind.mjs
var DictionaryKind2;
(function(DictionaryKind3) {
  DictionaryKind3[DictionaryKind3["DenseArray"] = 0] = "DenseArray";
})(DictionaryKind2 || (DictionaryKind2 = {}));

// ../../node_modules/apache-arrow/fb/int.mjs
var Int2 = class _Int {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsInt(bb2, obj) {
    return (obj || new _Int()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsInt(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Int()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  bitWidth() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 0;
  }
  isSigned() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? !!this.bb.readInt8(this.bb_pos + offset2) : false;
  }
  static startInt(builder) {
    builder.startObject(2);
  }
  static addBitWidth(builder, bitWidth) {
    builder.addFieldInt32(0, bitWidth, 0);
  }
  static addIsSigned(builder, isSigned) {
    builder.addFieldInt8(1, +isSigned, 0);
  }
  static endInt(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createInt(builder, bitWidth, isSigned) {
    _Int.startInt(builder);
    _Int.addBitWidth(builder, bitWidth);
    _Int.addIsSigned(builder, isSigned);
    return _Int.endInt(builder);
  }
};

// ../../node_modules/apache-arrow/fb/dictionary-encoding.mjs
var DictionaryEncoding2 = class _DictionaryEncoding {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsDictionaryEncoding(bb2, obj) {
    return (obj || new _DictionaryEncoding()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsDictionaryEncoding(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _DictionaryEncoding()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * The known dictionary id in the application where this data is used. In
   * the file or streaming formats, the dictionary ids are found in the
   * DictionaryBatch messages
   */
  id() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt64(this.bb_pos + offset2) : this.bb.createLong(0, 0);
  }
  /**
   * The dictionary indices are constrained to be non-negative integers. If
   * this field is null, the indices must be signed int32. To maximize
   * cross-language compatibility and performance, implementations are
   * recommended to prefer signed integer types over unsigned integer types
   * and to avoid uint64 indices unless they are required by an application.
   */
  indexType(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? (obj || new Int2()).__init(this.bb.__indirect(this.bb_pos + offset2), this.bb) : null;
  }
  /**
   * By default, dictionaries are not ordered, or the order does not have
   * semantic meaning. In some statistical, applications, dictionary-encoding
   * is used to represent ordered categorical data, and we provide a way to
   * preserve that metadata here
   */
  isOrdered() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? !!this.bb.readInt8(this.bb_pos + offset2) : false;
  }
  dictionaryKind() {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : DictionaryKind2.DenseArray;
  }
  static startDictionaryEncoding(builder) {
    builder.startObject(4);
  }
  static addId(builder, id2) {
    builder.addFieldInt64(0, id2, builder.createLong(0, 0));
  }
  static addIndexType(builder, indexTypeOffset) {
    builder.addFieldOffset(1, indexTypeOffset, 0);
  }
  static addIsOrdered(builder, isOrdered2) {
    builder.addFieldInt8(2, +isOrdered2, 0);
  }
  static addDictionaryKind(builder, dictionaryKind) {
    builder.addFieldInt16(3, dictionaryKind, DictionaryKind2.DenseArray);
  }
  static endDictionaryEncoding(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
};

// ../../node_modules/apache-arrow/fb/binary.mjs
var Binary4 = class _Binary {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsBinary(bb2, obj) {
    return (obj || new _Binary()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsBinary(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Binary()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startBinary(builder) {
    builder.startObject(0);
  }
  static endBinary(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createBinary(builder) {
    _Binary.startBinary(builder);
    return _Binary.endBinary(builder);
  }
};

// ../../node_modules/apache-arrow/fb/bool.mjs
var Bool4 = class _Bool {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsBool(bb2, obj) {
    return (obj || new _Bool()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsBool(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Bool()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startBool(builder) {
    builder.startObject(0);
  }
  static endBool(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createBool(builder) {
    _Bool.startBool(builder);
    return _Bool.endBool(builder);
  }
};

// ../../node_modules/apache-arrow/fb/date-unit.mjs
var DateUnit4;
(function(DateUnit5) {
  DateUnit5[DateUnit5["DAY"] = 0] = "DAY";
  DateUnit5[DateUnit5["MILLISECOND"] = 1] = "MILLISECOND";
})(DateUnit4 || (DateUnit4 = {}));

// ../../node_modules/apache-arrow/fb/date.mjs
var Date3 = class _Date {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsDate(bb2, obj) {
    return (obj || new _Date()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsDate(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Date()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  unit() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : DateUnit4.MILLISECOND;
  }
  static startDate(builder) {
    builder.startObject(1);
  }
  static addUnit(builder, unit3) {
    builder.addFieldInt16(0, unit3, DateUnit4.MILLISECOND);
  }
  static endDate(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createDate(builder, unit3) {
    _Date.startDate(builder);
    _Date.addUnit(builder, unit3);
    return _Date.endDate(builder);
  }
};

// ../../node_modules/apache-arrow/fb/decimal.mjs
var Decimal4 = class _Decimal {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsDecimal(bb2, obj) {
    return (obj || new _Decimal()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsDecimal(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Decimal()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * Total number of decimal digits
   */
  precision() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 0;
  }
  /**
   * Number of digits after the decimal point "."
   */
  scale() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 0;
  }
  /**
   * Number of bits per value. The only accepted widths are 128 and 256.
   * We use bitWidth for consistency with Int::bitWidth.
   */
  bitWidth() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 128;
  }
  static startDecimal(builder) {
    builder.startObject(3);
  }
  static addPrecision(builder, precision) {
    builder.addFieldInt32(0, precision, 0);
  }
  static addScale(builder, scale3) {
    builder.addFieldInt32(1, scale3, 0);
  }
  static addBitWidth(builder, bitWidth) {
    builder.addFieldInt32(2, bitWidth, 128);
  }
  static endDecimal(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createDecimal(builder, precision, scale3, bitWidth) {
    _Decimal.startDecimal(builder);
    _Decimal.addPrecision(builder, precision);
    _Decimal.addScale(builder, scale3);
    _Decimal.addBitWidth(builder, bitWidth);
    return _Decimal.endDecimal(builder);
  }
};

// ../../node_modules/apache-arrow/fb/time-unit.mjs
var TimeUnit4;
(function(TimeUnit5) {
  TimeUnit5[TimeUnit5["SECOND"] = 0] = "SECOND";
  TimeUnit5[TimeUnit5["MILLISECOND"] = 1] = "MILLISECOND";
  TimeUnit5[TimeUnit5["MICROSECOND"] = 2] = "MICROSECOND";
  TimeUnit5[TimeUnit5["NANOSECOND"] = 3] = "NANOSECOND";
})(TimeUnit4 || (TimeUnit4 = {}));

// ../../node_modules/apache-arrow/fb/fixed-size-binary.mjs
var FixedSizeBinary4 = class _FixedSizeBinary {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsFixedSizeBinary(bb2, obj) {
    return (obj || new _FixedSizeBinary()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsFixedSizeBinary(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _FixedSizeBinary()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * Number of bytes per value
   */
  byteWidth() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 0;
  }
  static startFixedSizeBinary(builder) {
    builder.startObject(1);
  }
  static addByteWidth(builder, byteWidth) {
    builder.addFieldInt32(0, byteWidth, 0);
  }
  static endFixedSizeBinary(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createFixedSizeBinary(builder, byteWidth) {
    _FixedSizeBinary.startFixedSizeBinary(builder);
    _FixedSizeBinary.addByteWidth(builder, byteWidth);
    return _FixedSizeBinary.endFixedSizeBinary(builder);
  }
};

// ../../node_modules/apache-arrow/fb/fixed-size-list.mjs
var FixedSizeList4 = class _FixedSizeList {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsFixedSizeList(bb2, obj) {
    return (obj || new _FixedSizeList()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsFixedSizeList(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _FixedSizeList()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * Number of list items per value
   */
  listSize() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 0;
  }
  static startFixedSizeList(builder) {
    builder.startObject(1);
  }
  static addListSize(builder, listSize) {
    builder.addFieldInt32(0, listSize, 0);
  }
  static endFixedSizeList(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createFixedSizeList(builder, listSize) {
    _FixedSizeList.startFixedSizeList(builder);
    _FixedSizeList.addListSize(builder, listSize);
    return _FixedSizeList.endFixedSizeList(builder);
  }
};

// ../../node_modules/apache-arrow/fb/precision.mjs
var Precision4;
(function(Precision5) {
  Precision5[Precision5["HALF"] = 0] = "HALF";
  Precision5[Precision5["SINGLE"] = 1] = "SINGLE";
  Precision5[Precision5["DOUBLE"] = 2] = "DOUBLE";
})(Precision4 || (Precision4 = {}));

// ../../node_modules/apache-arrow/fb/floating-point.mjs
var FloatingPoint2 = class _FloatingPoint {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsFloatingPoint(bb2, obj) {
    return (obj || new _FloatingPoint()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsFloatingPoint(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _FloatingPoint()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  precision() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : Precision4.HALF;
  }
  static startFloatingPoint(builder) {
    builder.startObject(1);
  }
  static addPrecision(builder, precision) {
    builder.addFieldInt16(0, precision, Precision4.HALF);
  }
  static endFloatingPoint(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createFloatingPoint(builder, precision) {
    _FloatingPoint.startFloatingPoint(builder);
    _FloatingPoint.addPrecision(builder, precision);
    return _FloatingPoint.endFloatingPoint(builder);
  }
};

// ../../node_modules/apache-arrow/fb/interval-unit.mjs
var IntervalUnit4;
(function(IntervalUnit5) {
  IntervalUnit5[IntervalUnit5["YEAR_MONTH"] = 0] = "YEAR_MONTH";
  IntervalUnit5[IntervalUnit5["DAY_TIME"] = 1] = "DAY_TIME";
  IntervalUnit5[IntervalUnit5["MONTH_DAY_NANO"] = 2] = "MONTH_DAY_NANO";
})(IntervalUnit4 || (IntervalUnit4 = {}));

// ../../node_modules/apache-arrow/fb/interval.mjs
var Interval2 = class _Interval {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsInterval(bb2, obj) {
    return (obj || new _Interval()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsInterval(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Interval()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  unit() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : IntervalUnit4.YEAR_MONTH;
  }
  static startInterval(builder) {
    builder.startObject(1);
  }
  static addUnit(builder, unit3) {
    builder.addFieldInt16(0, unit3, IntervalUnit4.YEAR_MONTH);
  }
  static endInterval(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createInterval(builder, unit3) {
    _Interval.startInterval(builder);
    _Interval.addUnit(builder, unit3);
    return _Interval.endInterval(builder);
  }
};

// ../../node_modules/apache-arrow/fb/list.mjs
var List4 = class _List {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsList(bb2, obj) {
    return (obj || new _List()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsList(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _List()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startList(builder) {
    builder.startObject(0);
  }
  static endList(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createList(builder) {
    _List.startList(builder);
    return _List.endList(builder);
  }
};

// ../../node_modules/apache-arrow/fb/map.mjs
var Map3 = class _Map {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsMap(bb2, obj) {
    return (obj || new _Map()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsMap(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Map()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * Set to true if the keys within each value are sorted
   */
  keysSorted() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? !!this.bb.readInt8(this.bb_pos + offset2) : false;
  }
  static startMap(builder) {
    builder.startObject(1);
  }
  static addKeysSorted(builder, keysSorted) {
    builder.addFieldInt8(0, +keysSorted, 0);
  }
  static endMap(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createMap(builder, keysSorted) {
    _Map.startMap(builder);
    _Map.addKeysSorted(builder, keysSorted);
    return _Map.endMap(builder);
  }
};

// ../../node_modules/apache-arrow/fb/null.mjs
var Null4 = class _Null {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsNull(bb2, obj) {
    return (obj || new _Null()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsNull(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Null()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startNull(builder) {
    builder.startObject(0);
  }
  static endNull(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createNull(builder) {
    _Null.startNull(builder);
    return _Null.endNull(builder);
  }
};

// ../../node_modules/apache-arrow/fb/struct_.mjs
var Struct_2 = class _Struct_ {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsStruct_(bb2, obj) {
    return (obj || new _Struct_()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsStruct_(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Struct_()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startStruct_(builder) {
    builder.startObject(0);
  }
  static endStruct_(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createStruct_(builder) {
    _Struct_.startStruct_(builder);
    return _Struct_.endStruct_(builder);
  }
};

// ../../node_modules/apache-arrow/fb/time.mjs
var Time2 = class _Time {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsTime(bb2, obj) {
    return (obj || new _Time()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsTime(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Time()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  unit() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : TimeUnit4.MILLISECOND;
  }
  bitWidth() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.readInt32(this.bb_pos + offset2) : 32;
  }
  static startTime(builder) {
    builder.startObject(2);
  }
  static addUnit(builder, unit3) {
    builder.addFieldInt16(0, unit3, TimeUnit4.MILLISECOND);
  }
  static addBitWidth(builder, bitWidth) {
    builder.addFieldInt32(1, bitWidth, 32);
  }
  static endTime(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createTime(builder, unit3, bitWidth) {
    _Time.startTime(builder);
    _Time.addUnit(builder, unit3);
    _Time.addBitWidth(builder, bitWidth);
    return _Time.endTime(builder);
  }
};

// ../../node_modules/apache-arrow/fb/timestamp.mjs
var Timestamp2 = class _Timestamp {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsTimestamp(bb2, obj) {
    return (obj || new _Timestamp()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsTimestamp(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Timestamp()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  unit() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : TimeUnit4.SECOND;
  }
  timezone(optionalEncoding) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.__string(this.bb_pos + offset2, optionalEncoding) : null;
  }
  static startTimestamp(builder) {
    builder.startObject(2);
  }
  static addUnit(builder, unit3) {
    builder.addFieldInt16(0, unit3, TimeUnit4.SECOND);
  }
  static addTimezone(builder, timezoneOffset) {
    builder.addFieldOffset(1, timezoneOffset, 0);
  }
  static endTimestamp(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createTimestamp(builder, unit3, timezoneOffset) {
    _Timestamp.startTimestamp(builder);
    _Timestamp.addUnit(builder, unit3);
    _Timestamp.addTimezone(builder, timezoneOffset);
    return _Timestamp.endTimestamp(builder);
  }
};

// ../../node_modules/apache-arrow/fb/union-mode.mjs
var UnionMode4;
(function(UnionMode5) {
  UnionMode5[UnionMode5["Sparse"] = 0] = "Sparse";
  UnionMode5[UnionMode5["Dense"] = 1] = "Dense";
})(UnionMode4 || (UnionMode4 = {}));

// ../../node_modules/apache-arrow/fb/union.mjs
var Union2 = class _Union {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsUnion(bb2, obj) {
    return (obj || new _Union()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsUnion(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Union()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  mode() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : UnionMode4.Sparse;
  }
  typeIds(index2) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset2) + index2 * 4) : 0;
  }
  typeIdsLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  typeIdsArray() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset2), this.bb.__vector_len(this.bb_pos + offset2)) : null;
  }
  static startUnion(builder) {
    builder.startObject(2);
  }
  static addMode(builder, mode3) {
    builder.addFieldInt16(0, mode3, UnionMode4.Sparse);
  }
  static addTypeIds(builder, typeIdsOffset) {
    builder.addFieldOffset(1, typeIdsOffset, 0);
  }
  static createTypeIdsVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addInt32(data[i2]);
    }
    return builder.endVector();
  }
  static startTypeIdsVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static endUnion(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createUnion(builder, mode3, typeIdsOffset) {
    _Union.startUnion(builder);
    _Union.addMode(builder, mode3);
    _Union.addTypeIds(builder, typeIdsOffset);
    return _Union.endUnion(builder);
  }
};

// ../../node_modules/apache-arrow/fb/utf8.mjs
var Utf84 = class _Utf8 {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsUtf8(bb2, obj) {
    return (obj || new _Utf8()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsUtf8(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Utf8()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static startUtf8(builder) {
    builder.startObject(0);
  }
  static endUtf8(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createUtf8(builder) {
    _Utf8.startUtf8(builder);
    return _Utf8.endUtf8(builder);
  }
};

// ../../node_modules/apache-arrow/fb/type.mjs
var Type4;
(function(Type5) {
  Type5[Type5["NONE"] = 0] = "NONE";
  Type5[Type5["Null"] = 1] = "Null";
  Type5[Type5["Int"] = 2] = "Int";
  Type5[Type5["FloatingPoint"] = 3] = "FloatingPoint";
  Type5[Type5["Binary"] = 4] = "Binary";
  Type5[Type5["Utf8"] = 5] = "Utf8";
  Type5[Type5["Bool"] = 6] = "Bool";
  Type5[Type5["Decimal"] = 7] = "Decimal";
  Type5[Type5["Date"] = 8] = "Date";
  Type5[Type5["Time"] = 9] = "Time";
  Type5[Type5["Timestamp"] = 10] = "Timestamp";
  Type5[Type5["Interval"] = 11] = "Interval";
  Type5[Type5["List"] = 12] = "List";
  Type5[Type5["Struct_"] = 13] = "Struct_";
  Type5[Type5["Union"] = 14] = "Union";
  Type5[Type5["FixedSizeBinary"] = 15] = "FixedSizeBinary";
  Type5[Type5["FixedSizeList"] = 16] = "FixedSizeList";
  Type5[Type5["Map"] = 17] = "Map";
  Type5[Type5["Duration"] = 18] = "Duration";
  Type5[Type5["LargeBinary"] = 19] = "LargeBinary";
  Type5[Type5["LargeUtf8"] = 20] = "LargeUtf8";
  Type5[Type5["LargeList"] = 21] = "LargeList";
})(Type4 || (Type4 = {}));

// ../../node_modules/apache-arrow/fb/field.mjs
var Field3 = class _Field {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsField(bb2, obj) {
    return (obj || new _Field()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsField(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Field()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  name(optionalEncoding) {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.__string(this.bb_pos + offset2, optionalEncoding) : null;
  }
  /**
   * Whether or not this field can contain nulls. Should be true in general.
   */
  nullable() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? !!this.bb.readInt8(this.bb_pos + offset2) : false;
  }
  typeType() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.readUint8(this.bb_pos + offset2) : Type4.NONE;
  }
  /**
   * This is the type of the decoded value if the field is dictionary encoded.
   */
  // @ts-ignore
  type(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.__union(obj, this.bb_pos + offset2) : null;
  }
  /**
   * Present only if the field is dictionary encoded.
   */
  dictionary(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 12);
    return offset2 ? (obj || new DictionaryEncoding2()).__init(this.bb.__indirect(this.bb_pos + offset2), this.bb) : null;
  }
  /**
   * children apply only to nested data types like Struct, List and Union. For
   * primitive types children will have length 0.
   */
  children(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 14);
    return offset2 ? (obj || new _Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  childrenLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 14);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  /**
   * User-defined metadata
   */
  customMetadata(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 16);
    return offset2 ? (obj || new KeyValue2()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  customMetadataLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 16);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  static startField(builder) {
    builder.startObject(7);
  }
  static addName(builder, nameOffset) {
    builder.addFieldOffset(0, nameOffset, 0);
  }
  static addNullable(builder, nullable) {
    builder.addFieldInt8(1, +nullable, 0);
  }
  static addTypeType(builder, typeType) {
    builder.addFieldInt8(2, typeType, Type4.NONE);
  }
  static addType(builder, typeOffset) {
    builder.addFieldOffset(3, typeOffset, 0);
  }
  static addDictionary(builder, dictionaryOffset) {
    builder.addFieldOffset(4, dictionaryOffset, 0);
  }
  static addChildren(builder, childrenOffset) {
    builder.addFieldOffset(5, childrenOffset, 0);
  }
  static createChildrenVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startChildrenVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addCustomMetadata(builder, customMetadataOffset) {
    builder.addFieldOffset(6, customMetadataOffset, 0);
  }
  static createCustomMetadataVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startCustomMetadataVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static endField(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
};

// ../../node_modules/apache-arrow/fb/schema.mjs
var Schema3 = class _Schema {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsSchema(bb2, obj) {
    return (obj || new _Schema()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsSchema(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Schema()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * endianness of the buffer
   * it is Little Endian by default
   * if endianness doesn't match the underlying system then the vectors need to be converted
   */
  endianness() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : Endianness2.Little;
  }
  fields(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? (obj || new Field3()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  fieldsLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  customMetadata(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? (obj || new KeyValue2()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  customMetadataLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  /**
   * Features used in the stream/file.
   */
  features(index2) {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset2) + index2 * 8) : this.bb.createLong(0, 0);
  }
  featuresLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  static startSchema(builder) {
    builder.startObject(4);
  }
  static addEndianness(builder, endianness) {
    builder.addFieldInt16(0, endianness, Endianness2.Little);
  }
  static addFields(builder, fieldsOffset) {
    builder.addFieldOffset(1, fieldsOffset, 0);
  }
  static createFieldsVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startFieldsVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addCustomMetadata(builder, customMetadataOffset) {
    builder.addFieldOffset(2, customMetadataOffset, 0);
  }
  static createCustomMetadataVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startCustomMetadataVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addFeatures(builder, featuresOffset) {
    builder.addFieldOffset(3, featuresOffset, 0);
  }
  static createFeaturesVector(builder, data) {
    builder.startVector(8, data.length, 8);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addInt64(data[i2]);
    }
    return builder.endVector();
  }
  static startFeaturesVector(builder, numElems) {
    builder.startVector(8, numElems, 8);
  }
  static endSchema(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static finishSchemaBuffer(builder, offset2) {
    builder.finish(offset2);
  }
  static finishSizePrefixedSchemaBuffer(builder, offset2) {
    builder.finish(offset2, void 0, true);
  }
  static createSchema(builder, endianness, fieldsOffset, customMetadataOffset, featuresOffset) {
    _Schema.startSchema(builder);
    _Schema.addEndianness(builder, endianness);
    _Schema.addFields(builder, fieldsOffset);
    _Schema.addCustomMetadata(builder, customMetadataOffset);
    _Schema.addFeatures(builder, featuresOffset);
    return _Schema.endSchema(builder);
  }
};

// ../../node_modules/apache-arrow/fb/footer.mjs
var Footer2 = class _Footer {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsFooter(bb2, obj) {
    return (obj || new _Footer()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsFooter(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Footer()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  version() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : MetadataVersion4.V1;
  }
  schema(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? (obj || new Schema3()).__init(this.bb.__indirect(this.bb_pos + offset2), this.bb) : null;
  }
  dictionaries(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? (obj || new Block2()).__init(this.bb.__vector(this.bb_pos + offset2) + index2 * 24, this.bb) : null;
  }
  dictionariesLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  recordBatches(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? (obj || new Block2()).__init(this.bb.__vector(this.bb_pos + offset2) + index2 * 24, this.bb) : null;
  }
  recordBatchesLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  /**
   * User-defined metadata
   */
  customMetadata(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 12);
    return offset2 ? (obj || new KeyValue2()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  customMetadataLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 12);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  static startFooter(builder) {
    builder.startObject(5);
  }
  static addVersion(builder, version) {
    builder.addFieldInt16(0, version, MetadataVersion4.V1);
  }
  static addSchema(builder, schemaOffset) {
    builder.addFieldOffset(1, schemaOffset, 0);
  }
  static addDictionaries(builder, dictionariesOffset) {
    builder.addFieldOffset(2, dictionariesOffset, 0);
  }
  static startDictionariesVector(builder, numElems) {
    builder.startVector(24, numElems, 8);
  }
  static addRecordBatches(builder, recordBatchesOffset) {
    builder.addFieldOffset(3, recordBatchesOffset, 0);
  }
  static startRecordBatchesVector(builder, numElems) {
    builder.startVector(24, numElems, 8);
  }
  static addCustomMetadata(builder, customMetadataOffset) {
    builder.addFieldOffset(4, customMetadataOffset, 0);
  }
  static createCustomMetadataVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startCustomMetadataVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static endFooter(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static finishFooterBuffer(builder, offset2) {
    builder.finish(offset2);
  }
  static finishSizePrefixedFooterBuffer(builder, offset2) {
    builder.finish(offset2, void 0, true);
  }
};

// ../../node_modules/apache-arrow/schema.mjs
var Schema4 = class _Schema {
  constructor(fields = [], metadata, dictionaries) {
    this.fields = fields || [];
    this.metadata = metadata || /* @__PURE__ */ new Map();
    if (!dictionaries) {
      dictionaries = generateDictionaryMap2(fields);
    }
    this.dictionaries = dictionaries;
  }
  get [Symbol.toStringTag]() {
    return "Schema";
  }
  get names() {
    return this.fields.map((f2) => f2.name);
  }
  toString() {
    return `Schema<{ ${this.fields.map((f2, i2) => `${i2}: ${f2}`).join(", ")} }>`;
  }
  /**
   * Construct a new Schema containing only specified fields.
   *
   * @param fieldNames Names of fields to keep.
   * @returns A new Schema of fields matching the specified names.
   */
  select(fieldNames) {
    const names = new Set(fieldNames);
    const fields = this.fields.filter((f2) => names.has(f2.name));
    return new _Schema(fields, this.metadata);
  }
  /**
   * Construct a new Schema containing only fields at the specified indices.
   *
   * @param fieldIndices Indices of fields to keep.
   * @returns A new Schema of fields at the specified indices.
   */
  selectAt(fieldIndices) {
    const fields = fieldIndices.map((i2) => this.fields[i2]).filter(Boolean);
    return new _Schema(fields, this.metadata);
  }
  assign(...args) {
    const other = args[0] instanceof _Schema ? args[0] : Array.isArray(args[0]) ? new _Schema(args[0]) : new _Schema(args);
    const curFields = [...this.fields];
    const metadata = mergeMaps2(mergeMaps2(/* @__PURE__ */ new Map(), this.metadata), other.metadata);
    const newFields = other.fields.filter((f2) => {
      const i2 = curFields.findIndex((f3) => f3.name === f2.name);
      return ~i2 ? (curFields[i2] = f2.clone({
        metadata: mergeMaps2(mergeMaps2(/* @__PURE__ */ new Map(), curFields[i2].metadata), f2.metadata)
      })) && false : true;
    });
    const newDictionaries = generateDictionaryMap2(newFields, /* @__PURE__ */ new Map());
    return new _Schema([...curFields, ...newFields], metadata, new Map([...this.dictionaries, ...newDictionaries]));
  }
};
Schema4.prototype.fields = null;
Schema4.prototype.metadata = null;
Schema4.prototype.dictionaries = null;
var Field4 = class _Field {
  constructor(name2, type2, nullable = false, metadata) {
    this.name = name2;
    this.type = type2;
    this.nullable = nullable;
    this.metadata = metadata || /* @__PURE__ */ new Map();
  }
  /** @nocollapse */
  static new(...args) {
    let [name2, type2, nullable, metadata] = args;
    if (args[0] && typeof args[0] === "object") {
      ({ name: name2 } = args[0]);
      type2 === void 0 && (type2 = args[0].type);
      nullable === void 0 && (nullable = args[0].nullable);
      metadata === void 0 && (metadata = args[0].metadata);
    }
    return new _Field(`${name2}`, type2, nullable, metadata);
  }
  get typeId() {
    return this.type.typeId;
  }
  get [Symbol.toStringTag]() {
    return "Field";
  }
  toString() {
    return `${this.name}: ${this.type}`;
  }
  clone(...args) {
    let [name2, type2, nullable, metadata] = args;
    !args[0] || typeof args[0] !== "object" ? [name2 = this.name, type2 = this.type, nullable = this.nullable, metadata = this.metadata] = args : { name: name2 = this.name, type: type2 = this.type, nullable = this.nullable, metadata = this.metadata } = args[0];
    return _Field.new(name2, type2, nullable, metadata);
  }
};
Field4.prototype.type = null;
Field4.prototype.name = null;
Field4.prototype.nullable = null;
Field4.prototype.metadata = null;
function mergeMaps2(m1, m2) {
  return new Map([...m1 || /* @__PURE__ */ new Map(), ...m2 || /* @__PURE__ */ new Map()]);
}
function generateDictionaryMap2(fields, dictionaries = /* @__PURE__ */ new Map()) {
  for (let i2 = -1, n = fields.length; ++i2 < n; ) {
    const field2 = fields[i2];
    const type2 = field2.type;
    if (DataType2.isDictionary(type2)) {
      if (!dictionaries.has(type2.id)) {
        dictionaries.set(type2.id, type2.dictionary);
      } else if (dictionaries.get(type2.id) !== type2.dictionary) {
        throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);
      }
    }
    if (type2.children && type2.children.length > 0) {
      generateDictionaryMap2(type2.children, dictionaries);
    }
  }
  return dictionaries;
}

// ../../node_modules/apache-arrow/ipc/metadata/file.mjs
var Long2 = Long;
var Builder7 = Builder6;
var ByteBuffer5 = ByteBuffer4;
var Footer_2 = class {
  constructor(schema, version = MetadataVersion3.V4, recordBatches, dictionaryBatches) {
    this.schema = schema;
    this.version = version;
    recordBatches && (this._recordBatches = recordBatches);
    dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);
  }
  /** @nocollapse */
  static decode(buf) {
    buf = new ByteBuffer5(toUint8Array2(buf));
    const footer = Footer2.getRootAsFooter(buf);
    const schema = Schema4.decode(footer.schema());
    return new OffHeapFooter2(schema, footer);
  }
  /** @nocollapse */
  static encode(footer) {
    const b2 = new Builder7();
    const schemaOffset = Schema4.encode(b2, footer.schema);
    Footer2.startRecordBatchesVector(b2, footer.numRecordBatches);
    for (const rb of [...footer.recordBatches()].slice().reverse()) {
      FileBlock2.encode(b2, rb);
    }
    const recordBatchesOffset = b2.endVector();
    Footer2.startDictionariesVector(b2, footer.numDictionaries);
    for (const db of [...footer.dictionaryBatches()].slice().reverse()) {
      FileBlock2.encode(b2, db);
    }
    const dictionaryBatchesOffset = b2.endVector();
    Footer2.startFooter(b2);
    Footer2.addSchema(b2, schemaOffset);
    Footer2.addVersion(b2, MetadataVersion3.V4);
    Footer2.addRecordBatches(b2, recordBatchesOffset);
    Footer2.addDictionaries(b2, dictionaryBatchesOffset);
    Footer2.finishFooterBuffer(b2, Footer2.endFooter(b2));
    return b2.asUint8Array();
  }
  get numRecordBatches() {
    return this._recordBatches.length;
  }
  get numDictionaries() {
    return this._dictionaryBatches.length;
  }
  *recordBatches() {
    for (let block, i2 = -1, n = this.numRecordBatches; ++i2 < n; ) {
      if (block = this.getRecordBatch(i2)) {
        yield block;
      }
    }
  }
  *dictionaryBatches() {
    for (let block, i2 = -1, n = this.numDictionaries; ++i2 < n; ) {
      if (block = this.getDictionaryBatch(i2)) {
        yield block;
      }
    }
  }
  getRecordBatch(index2) {
    return index2 >= 0 && index2 < this.numRecordBatches && this._recordBatches[index2] || null;
  }
  getDictionaryBatch(index2) {
    return index2 >= 0 && index2 < this.numDictionaries && this._dictionaryBatches[index2] || null;
  }
};
var OffHeapFooter2 = class extends Footer_2 {
  constructor(schema, _footer) {
    super(schema, _footer.version());
    this._footer = _footer;
  }
  get numRecordBatches() {
    return this._footer.recordBatchesLength();
  }
  get numDictionaries() {
    return this._footer.dictionariesLength();
  }
  getRecordBatch(index2) {
    if (index2 >= 0 && index2 < this.numRecordBatches) {
      const fileBlock = this._footer.recordBatches(index2);
      if (fileBlock) {
        return FileBlock2.decode(fileBlock);
      }
    }
    return null;
  }
  getDictionaryBatch(index2) {
    if (index2 >= 0 && index2 < this.numDictionaries) {
      const fileBlock = this._footer.dictionaries(index2);
      if (fileBlock) {
        return FileBlock2.decode(fileBlock);
      }
    }
    return null;
  }
};
var FileBlock2 = class _FileBlock {
  constructor(metaDataLength, bodyLength, offset2) {
    this.metaDataLength = metaDataLength;
    this.offset = typeof offset2 === "number" ? offset2 : offset2.low;
    this.bodyLength = typeof bodyLength === "number" ? bodyLength : bodyLength.low;
  }
  /** @nocollapse */
  static decode(block) {
    return new _FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());
  }
  /** @nocollapse */
  static encode(b2, fileBlock) {
    const { metaDataLength } = fileBlock;
    const offset2 = new Long2(fileBlock.offset, 0);
    const bodyLength = new Long2(fileBlock.bodyLength, 0);
    return Block2.createBlock(b2, offset2, metaDataLength, bodyLength);
  }
};

// ../../node_modules/apache-arrow/io/interfaces.mjs
var ITERATOR_DONE2 = Object.freeze({ done: true, value: void 0 });
var ArrowJSON2 = class {
  constructor(_json) {
    this._json = _json;
  }
  get schema() {
    return this._json["schema"];
  }
  get batches() {
    return this._json["batches"] || [];
  }
  get dictionaries() {
    return this._json["dictionaries"] || [];
  }
};
var ReadableInterop2 = class {
  tee() {
    return this._getDOMStream().tee();
  }
  pipe(writable, options) {
    return this._getNodeStream().pipe(writable, options);
  }
  pipeTo(writable, options) {
    return this._getDOMStream().pipeTo(writable, options);
  }
  pipeThrough(duplex, options) {
    return this._getDOMStream().pipeThrough(duplex, options);
  }
  _getDOMStream() {
    return this._DOMStream || (this._DOMStream = this.toDOMStream());
  }
  _getNodeStream() {
    return this._nodeStream || (this._nodeStream = this.toNodeStream());
  }
};
var AsyncQueue2 = class extends ReadableInterop2 {
  constructor() {
    super();
    this._values = [];
    this.resolvers = [];
    this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);
  }
  get closed() {
    return this._closedPromise;
  }
  cancel(reason) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.return(reason);
    });
  }
  write(value) {
    if (this._ensureOpen()) {
      this.resolvers.length <= 0 ? this._values.push(value) : this.resolvers.shift().resolve({ done: false, value });
    }
  }
  abort(value) {
    if (this._closedPromiseResolve) {
      this.resolvers.length <= 0 ? this._error = { error: value } : this.resolvers.shift().reject({ done: true, value });
    }
  }
  close() {
    if (this._closedPromiseResolve) {
      const { resolvers } = this;
      while (resolvers.length > 0) {
        resolvers.shift().resolve(ITERATOR_DONE2);
      }
      this._closedPromiseResolve();
      this._closedPromiseResolve = void 0;
    }
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  toDOMStream(options) {
    return adapters_default2.toDOMStream(this._closedPromiseResolve || this._error ? this : this._values, options);
  }
  toNodeStream(options) {
    return adapters_default2.toNodeStream(this._closedPromiseResolve || this._error ? this : this._values, options);
  }
  throw(_2) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.abort(_2);
      return ITERATOR_DONE2;
    });
  }
  return(_2) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.close();
      return ITERATOR_DONE2;
    });
  }
  read(size) {
    return __awaiter(this, void 0, void 0, function* () {
      return (yield this.next(size, "read")).value;
    });
  }
  peek(size) {
    return __awaiter(this, void 0, void 0, function* () {
      return (yield this.next(size, "peek")).value;
    });
  }
  next(..._args) {
    if (this._values.length > 0) {
      return Promise.resolve({ done: false, value: this._values.shift() });
    } else if (this._error) {
      return Promise.reject({ done: true, value: this._error.error });
    } else if (!this._closedPromiseResolve) {
      return Promise.resolve(ITERATOR_DONE2);
    } else {
      return new Promise((resolve, reject) => {
        this.resolvers.push({ resolve, reject });
      });
    }
  }
  _ensureOpen() {
    if (this._closedPromiseResolve) {
      return true;
    }
    throw new Error(`AsyncQueue is closed`);
  }
};

// ../../node_modules/apache-arrow/io/stream.mjs
var AsyncByteQueue2 = class extends AsyncQueue2 {
  write(value) {
    if ((value = toUint8Array2(value)).byteLength > 0) {
      return super.write(value);
    }
  }
  toString(sync = false) {
    return sync ? decodeUtf82(this.toUint8Array(true)) : this.toUint8Array(false).then(decodeUtf82);
  }
  toUint8Array(sync = false) {
    return sync ? joinUint8Arrays2(this._values)[0] : (() => __awaiter(this, void 0, void 0, function* () {
      var e_1, _a9;
      const buffers = [];
      let byteLength = 0;
      try {
        for (var _b3 = __asyncValues(this), _c3; _c3 = yield _b3.next(), !_c3.done; ) {
          const chunk = _c3.value;
          buffers.push(chunk);
          byteLength += chunk.byteLength;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c3 && !_c3.done && (_a9 = _b3.return))
            yield _a9.call(_b3);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return joinUint8Arrays2(buffers, byteLength)[0];
    }))();
  }
};
var ByteStream2 = class {
  constructor(source) {
    if (source) {
      this.source = new ByteStreamSource2(adapters_default2.fromIterable(source));
    }
  }
  [Symbol.iterator]() {
    return this;
  }
  next(value) {
    return this.source.next(value);
  }
  throw(value) {
    return this.source.throw(value);
  }
  return(value) {
    return this.source.return(value);
  }
  peek(size) {
    return this.source.peek(size);
  }
  read(size) {
    return this.source.read(size);
  }
};
var AsyncByteStream2 = class _AsyncByteStream {
  constructor(source) {
    if (source instanceof _AsyncByteStream) {
      this.source = source.source;
    } else if (source instanceof AsyncByteQueue2) {
      this.source = new AsyncByteStreamSource2(adapters_default2.fromAsyncIterable(source));
    } else if (isReadableNodeStream2(source)) {
      this.source = new AsyncByteStreamSource2(adapters_default2.fromNodeStream(source));
    } else if (isReadableDOMStream2(source)) {
      this.source = new AsyncByteStreamSource2(adapters_default2.fromDOMStream(source));
    } else if (isFetchResponse2(source)) {
      this.source = new AsyncByteStreamSource2(adapters_default2.fromDOMStream(source.body));
    } else if (isIterable2(source)) {
      this.source = new AsyncByteStreamSource2(adapters_default2.fromIterable(source));
    } else if (isPromise2(source)) {
      this.source = new AsyncByteStreamSource2(adapters_default2.fromAsyncIterable(source));
    } else if (isAsyncIterable2(source)) {
      this.source = new AsyncByteStreamSource2(adapters_default2.fromAsyncIterable(source));
    }
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  next(value) {
    return this.source.next(value);
  }
  throw(value) {
    return this.source.throw(value);
  }
  return(value) {
    return this.source.return(value);
  }
  get closed() {
    return this.source.closed;
  }
  cancel(reason) {
    return this.source.cancel(reason);
  }
  peek(size) {
    return this.source.peek(size);
  }
  read(size) {
    return this.source.read(size);
  }
};
var ByteStreamSource2 = class {
  constructor(source) {
    this.source = source;
  }
  cancel(reason) {
    this.return(reason);
  }
  peek(size) {
    return this.next(size, "peek").value;
  }
  read(size) {
    return this.next(size, "read").value;
  }
  next(size, cmd = "read") {
    return this.source.next({ cmd, size });
  }
  throw(value) {
    return Object.create(this.source.throw && this.source.throw(value) || ITERATOR_DONE2);
  }
  return(value) {
    return Object.create(this.source.return && this.source.return(value) || ITERATOR_DONE2);
  }
};
var AsyncByteStreamSource2 = class {
  constructor(source) {
    this.source = source;
    this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);
  }
  cancel(reason) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.return(reason);
    });
  }
  get closed() {
    return this._closedPromise;
  }
  read(size) {
    return __awaiter(this, void 0, void 0, function* () {
      return (yield this.next(size, "read")).value;
    });
  }
  peek(size) {
    return __awaiter(this, void 0, void 0, function* () {
      return (yield this.next(size, "peek")).value;
    });
  }
  next(size, cmd = "read") {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.source.next({ cmd, size });
    });
  }
  throw(value) {
    return __awaiter(this, void 0, void 0, function* () {
      const result = this.source.throw && (yield this.source.throw(value)) || ITERATOR_DONE2;
      this._closedPromiseResolve && this._closedPromiseResolve();
      this._closedPromiseResolve = void 0;
      return Object.create(result);
    });
  }
  return(value) {
    return __awaiter(this, void 0, void 0, function* () {
      const result = this.source.return && (yield this.source.return(value)) || ITERATOR_DONE2;
      this._closedPromiseResolve && this._closedPromiseResolve();
      this._closedPromiseResolve = void 0;
      return Object.create(result);
    });
  }
};

// ../../node_modules/apache-arrow/io/file.mjs
var RandomAccessFile2 = class extends ByteStream2 {
  constructor(buffer, byteLength) {
    super();
    this.position = 0;
    this.buffer = toUint8Array2(buffer);
    this.size = typeof byteLength === "undefined" ? this.buffer.byteLength : byteLength;
  }
  readInt32(position3) {
    const { buffer, byteOffset } = this.readAt(position3, 4);
    return new DataView(buffer, byteOffset).getInt32(0, true);
  }
  seek(position3) {
    this.position = Math.min(position3, this.size);
    return position3 < this.size;
  }
  read(nBytes) {
    const { buffer, size, position: position3 } = this;
    if (buffer && position3 < size) {
      if (typeof nBytes !== "number") {
        nBytes = Number.POSITIVE_INFINITY;
      }
      this.position = Math.min(size, position3 + Math.min(size - position3, nBytes));
      return buffer.subarray(position3, this.position);
    }
    return null;
  }
  readAt(position3, nBytes) {
    const buf = this.buffer;
    const end = Math.min(this.size, position3 + nBytes);
    return buf ? buf.subarray(position3, end) : new Uint8Array(nBytes);
  }
  close() {
    this.buffer && (this.buffer = null);
  }
  throw(value) {
    this.close();
    return { done: true, value };
  }
  return(value) {
    this.close();
    return { done: true, value };
  }
};
var AsyncRandomAccessFile2 = class extends AsyncByteStream2 {
  constructor(file, byteLength) {
    super();
    this.position = 0;
    this._handle = file;
    if (typeof byteLength === "number") {
      this.size = byteLength;
    } else {
      this._pending = (() => __awaiter(this, void 0, void 0, function* () {
        this.size = (yield file.stat()).size;
        delete this._pending;
      }))();
    }
  }
  readInt32(position3) {
    return __awaiter(this, void 0, void 0, function* () {
      const { buffer, byteOffset } = yield this.readAt(position3, 4);
      return new DataView(buffer, byteOffset).getInt32(0, true);
    });
  }
  seek(position3) {
    return __awaiter(this, void 0, void 0, function* () {
      this._pending && (yield this._pending);
      this.position = Math.min(position3, this.size);
      return position3 < this.size;
    });
  }
  read(nBytes) {
    return __awaiter(this, void 0, void 0, function* () {
      this._pending && (yield this._pending);
      const { _handle: file, size, position: position3 } = this;
      if (file && position3 < size) {
        if (typeof nBytes !== "number") {
          nBytes = Number.POSITIVE_INFINITY;
        }
        let pos = position3, offset2 = 0, bytesRead = 0;
        const end = Math.min(size, pos + Math.min(size - pos, nBytes));
        const buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));
        while ((pos += bytesRead) < end && (offset2 += bytesRead) < buffer.byteLength) {
          ({ bytesRead } = yield file.read(buffer, offset2, buffer.byteLength - offset2, pos));
        }
        return buffer;
      }
      return null;
    });
  }
  readAt(position3, nBytes) {
    return __awaiter(this, void 0, void 0, function* () {
      this._pending && (yield this._pending);
      const { _handle: file, size } = this;
      if (file && position3 + nBytes < size) {
        const end = Math.min(size, position3 + nBytes);
        const buffer = new Uint8Array(end - position3);
        return (yield file.read(buffer, 0, nBytes, position3)).buffer;
      }
      return new Uint8Array(nBytes);
    });
  }
  close() {
    return __awaiter(this, void 0, void 0, function* () {
      const f2 = this._handle;
      this._handle = null;
      f2 && (yield f2.close());
    });
  }
  throw(value) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.close();
      return { done: true, value };
    });
  }
  return(value) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.close();
      return { done: true, value };
    });
  }
};

// ../../node_modules/apache-arrow/util/int.mjs
var int_exports2 = {};
__export(int_exports2, {
  BaseInt64: () => BaseInt642,
  Int128: () => Int1282,
  Int64: () => Int644,
  Uint64: () => Uint644
});
var carryBit162 = 1 << 16;
function intAsHex2(value) {
  if (value < 0) {
    value = 4294967295 + value + 1;
  }
  return `0x${value.toString(16)}`;
}
var kInt32DecimalDigits2 = 8;
var kPowersOfTen2 = [
  1,
  10,
  100,
  1e3,
  1e4,
  1e5,
  1e6,
  1e7,
  1e8
];
var BaseInt642 = class {
  constructor(buffer) {
    this.buffer = buffer;
  }
  high() {
    return this.buffer[1];
  }
  low() {
    return this.buffer[0];
  }
  _times(other) {
    const L2 = new Uint32Array([
      this.buffer[1] >>> 16,
      this.buffer[1] & 65535,
      this.buffer[0] >>> 16,
      this.buffer[0] & 65535
    ]);
    const R = new Uint32Array([
      other.buffer[1] >>> 16,
      other.buffer[1] & 65535,
      other.buffer[0] >>> 16,
      other.buffer[0] & 65535
    ]);
    let product2 = L2[3] * R[3];
    this.buffer[0] = product2 & 65535;
    let sum6 = product2 >>> 16;
    product2 = L2[2] * R[3];
    sum6 += product2;
    product2 = L2[3] * R[2] >>> 0;
    sum6 += product2;
    this.buffer[0] += sum6 << 16;
    this.buffer[1] = sum6 >>> 0 < product2 ? carryBit162 : 0;
    this.buffer[1] += sum6 >>> 16;
    this.buffer[1] += L2[1] * R[3] + L2[2] * R[2] + L2[3] * R[1];
    this.buffer[1] += L2[0] * R[3] + L2[1] * R[2] + L2[2] * R[1] + L2[3] * R[0] << 16;
    return this;
  }
  _plus(other) {
    const sum6 = this.buffer[0] + other.buffer[0] >>> 0;
    this.buffer[1] += other.buffer[1];
    if (sum6 < this.buffer[0] >>> 0) {
      ++this.buffer[1];
    }
    this.buffer[0] = sum6;
  }
  lessThan(other) {
    return this.buffer[1] < other.buffer[1] || this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0];
  }
  equals(other) {
    return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];
  }
  greaterThan(other) {
    return other.lessThan(this);
  }
  hex() {
    return `${intAsHex2(this.buffer[1])} ${intAsHex2(this.buffer[0])}`;
  }
};
var Uint644 = class _Uint64 extends BaseInt642 {
  times(other) {
    this._times(other);
    return this;
  }
  plus(other) {
    this._plus(other);
    return this;
  }
  /** @nocollapse */
  static from(val, out_buffer = new Uint32Array(2)) {
    return _Uint64.fromString(typeof val === "string" ? val : val.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromNumber(num, out_buffer = new Uint32Array(2)) {
    return _Uint64.fromString(num.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromString(str, out_buffer = new Uint32Array(2)) {
    const length4 = str.length;
    const out = new _Uint64(out_buffer);
    for (let posn = 0; posn < length4; ) {
      const group3 = kInt32DecimalDigits2 < length4 - posn ? kInt32DecimalDigits2 : length4 - posn;
      const chunk = new _Uint64(new Uint32Array([Number.parseInt(str.slice(posn, posn + group3), 10), 0]));
      const multiple = new _Uint64(new Uint32Array([kPowersOfTen2[group3], 0]));
      out.times(multiple);
      out.plus(chunk);
      posn += group3;
    }
    return out;
  }
  /** @nocollapse */
  static convertArray(values2) {
    const data = new Uint32Array(values2.length * 2);
    for (let i2 = -1, n = values2.length; ++i2 < n; ) {
      _Uint64.from(values2[i2], new Uint32Array(data.buffer, data.byteOffset + 2 * i2 * 4, 2));
    }
    return data;
  }
  /** @nocollapse */
  static multiply(left2, right2) {
    const rtrn = new _Uint64(new Uint32Array(left2.buffer));
    return rtrn.times(right2);
  }
  /** @nocollapse */
  static add(left2, right2) {
    const rtrn = new _Uint64(new Uint32Array(left2.buffer));
    return rtrn.plus(right2);
  }
};
var Int644 = class _Int64 extends BaseInt642 {
  negate() {
    this.buffer[0] = ~this.buffer[0] + 1;
    this.buffer[1] = ~this.buffer[1];
    if (this.buffer[0] == 0) {
      ++this.buffer[1];
    }
    return this;
  }
  times(other) {
    this._times(other);
    return this;
  }
  plus(other) {
    this._plus(other);
    return this;
  }
  lessThan(other) {
    const this_high = this.buffer[1] << 0;
    const other_high = other.buffer[1] << 0;
    return this_high < other_high || this_high === other_high && this.buffer[0] < other.buffer[0];
  }
  /** @nocollapse */
  static from(val, out_buffer = new Uint32Array(2)) {
    return _Int64.fromString(typeof val === "string" ? val : val.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromNumber(num, out_buffer = new Uint32Array(2)) {
    return _Int64.fromString(num.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromString(str, out_buffer = new Uint32Array(2)) {
    const negate2 = str.startsWith("-");
    const length4 = str.length;
    const out = new _Int64(out_buffer);
    for (let posn = negate2 ? 1 : 0; posn < length4; ) {
      const group3 = kInt32DecimalDigits2 < length4 - posn ? kInt32DecimalDigits2 : length4 - posn;
      const chunk = new _Int64(new Uint32Array([Number.parseInt(str.slice(posn, posn + group3), 10), 0]));
      const multiple = new _Int64(new Uint32Array([kPowersOfTen2[group3], 0]));
      out.times(multiple);
      out.plus(chunk);
      posn += group3;
    }
    return negate2 ? out.negate() : out;
  }
  /** @nocollapse */
  static convertArray(values2) {
    const data = new Uint32Array(values2.length * 2);
    for (let i2 = -1, n = values2.length; ++i2 < n; ) {
      _Int64.from(values2[i2], new Uint32Array(data.buffer, data.byteOffset + 2 * i2 * 4, 2));
    }
    return data;
  }
  /** @nocollapse */
  static multiply(left2, right2) {
    const rtrn = new _Int64(new Uint32Array(left2.buffer));
    return rtrn.times(right2);
  }
  /** @nocollapse */
  static add(left2, right2) {
    const rtrn = new _Int64(new Uint32Array(left2.buffer));
    return rtrn.plus(right2);
  }
};
var Int1282 = class _Int128 {
  constructor(buffer) {
    this.buffer = buffer;
  }
  high() {
    return new Int644(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
  }
  low() {
    return new Int644(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));
  }
  negate() {
    this.buffer[0] = ~this.buffer[0] + 1;
    this.buffer[1] = ~this.buffer[1];
    this.buffer[2] = ~this.buffer[2];
    this.buffer[3] = ~this.buffer[3];
    if (this.buffer[0] == 0) {
      ++this.buffer[1];
    }
    if (this.buffer[1] == 0) {
      ++this.buffer[2];
    }
    if (this.buffer[2] == 0) {
      ++this.buffer[3];
    }
    return this;
  }
  times(other) {
    const L0 = new Uint644(new Uint32Array([this.buffer[3], 0]));
    const L1 = new Uint644(new Uint32Array([this.buffer[2], 0]));
    const L2 = new Uint644(new Uint32Array([this.buffer[1], 0]));
    const L3 = new Uint644(new Uint32Array([this.buffer[0], 0]));
    const R0 = new Uint644(new Uint32Array([other.buffer[3], 0]));
    const R1 = new Uint644(new Uint32Array([other.buffer[2], 0]));
    const R2 = new Uint644(new Uint32Array([other.buffer[1], 0]));
    const R3 = new Uint644(new Uint32Array([other.buffer[0], 0]));
    let product2 = Uint644.multiply(L3, R3);
    this.buffer[0] = product2.low();
    const sum6 = new Uint644(new Uint32Array([product2.high(), 0]));
    product2 = Uint644.multiply(L2, R3);
    sum6.plus(product2);
    product2 = Uint644.multiply(L3, R2);
    sum6.plus(product2);
    this.buffer[1] = sum6.low();
    this.buffer[3] = sum6.lessThan(product2) ? 1 : 0;
    this.buffer[2] = sum6.high();
    const high = new Uint644(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
    high.plus(Uint644.multiply(L1, R3)).plus(Uint644.multiply(L2, R2)).plus(Uint644.multiply(L3, R1));
    this.buffer[3] += Uint644.multiply(L0, R3).plus(Uint644.multiply(L1, R2)).plus(Uint644.multiply(L2, R1)).plus(Uint644.multiply(L3, R0)).low();
    return this;
  }
  plus(other) {
    const sums = new Uint32Array(4);
    sums[3] = this.buffer[3] + other.buffer[3] >>> 0;
    sums[2] = this.buffer[2] + other.buffer[2] >>> 0;
    sums[1] = this.buffer[1] + other.buffer[1] >>> 0;
    sums[0] = this.buffer[0] + other.buffer[0] >>> 0;
    if (sums[0] < this.buffer[0] >>> 0) {
      ++sums[1];
    }
    if (sums[1] < this.buffer[1] >>> 0) {
      ++sums[2];
    }
    if (sums[2] < this.buffer[2] >>> 0) {
      ++sums[3];
    }
    this.buffer[3] = sums[3];
    this.buffer[2] = sums[2];
    this.buffer[1] = sums[1];
    this.buffer[0] = sums[0];
    return this;
  }
  hex() {
    return `${intAsHex2(this.buffer[3])} ${intAsHex2(this.buffer[2])} ${intAsHex2(this.buffer[1])} ${intAsHex2(this.buffer[0])}`;
  }
  /** @nocollapse */
  static multiply(left2, right2) {
    const rtrn = new _Int128(new Uint32Array(left2.buffer));
    return rtrn.times(right2);
  }
  /** @nocollapse */
  static add(left2, right2) {
    const rtrn = new _Int128(new Uint32Array(left2.buffer));
    return rtrn.plus(right2);
  }
  /** @nocollapse */
  static from(val, out_buffer = new Uint32Array(4)) {
    return _Int128.fromString(typeof val === "string" ? val : val.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromNumber(num, out_buffer = new Uint32Array(4)) {
    return _Int128.fromString(num.toString(), out_buffer);
  }
  /** @nocollapse */
  static fromString(str, out_buffer = new Uint32Array(4)) {
    const negate2 = str.startsWith("-");
    const length4 = str.length;
    const out = new _Int128(out_buffer);
    for (let posn = negate2 ? 1 : 0; posn < length4; ) {
      const group3 = kInt32DecimalDigits2 < length4 - posn ? kInt32DecimalDigits2 : length4 - posn;
      const chunk = new _Int128(new Uint32Array([Number.parseInt(str.slice(posn, posn + group3), 10), 0, 0, 0]));
      const multiple = new _Int128(new Uint32Array([kPowersOfTen2[group3], 0, 0, 0]));
      out.times(multiple);
      out.plus(chunk);
      posn += group3;
    }
    return negate2 ? out.negate() : out;
  }
  /** @nocollapse */
  static convertArray(values2) {
    const data = new Uint32Array(values2.length * 4);
    for (let i2 = -1, n = values2.length; ++i2 < n; ) {
      _Int128.from(values2[i2], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i2, 4));
    }
    return data;
  }
};

// ../../node_modules/apache-arrow/visitor/vectorloader.mjs
var VectorLoader2 = class extends Visitor2 {
  constructor(bytes, nodes, buffers, dictionaries) {
    super();
    this.nodesIndex = -1;
    this.buffersIndex = -1;
    this.bytes = bytes;
    this.nodes = nodes;
    this.buffers = buffers;
    this.dictionaries = dictionaries;
  }
  visit(node) {
    return super.visit(node instanceof Field4 ? node.type : node);
  }
  visitNull(type2, { length: length4 } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4 });
  }
  visitBool(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitInt(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitFloat(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitUtf8(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), valueOffsets: this.readOffsets(type2), data: this.readData(type2) });
  }
  visitBinary(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), valueOffsets: this.readOffsets(type2), data: this.readData(type2) });
  }
  visitFixedSizeBinary(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitDate(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitTimestamp(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitTime(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitDecimal(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitList(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), valueOffsets: this.readOffsets(type2), "child": this.visit(type2.children[0]) });
  }
  visitStruct(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), children: this.visitMany(type2.children) });
  }
  visitUnion(type2) {
    return type2.mode === UnionMode3.Sparse ? this.visitSparseUnion(type2) : this.visitDenseUnion(type2);
  }
  visitDenseUnion(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), typeIds: this.readTypeIds(type2), valueOffsets: this.readOffsets(type2), children: this.visitMany(type2.children) });
  }
  visitSparseUnion(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), typeIds: this.readTypeIds(type2), children: this.visitMany(type2.children) });
  }
  visitDictionary(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2.indices), dictionary: this.readDictionary(type2) });
  }
  visitInterval(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), data: this.readData(type2) });
  }
  visitFixedSizeList(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), "child": this.visit(type2.children[0]) });
  }
  visitMap(type2, { length: length4, nullCount } = this.nextFieldNode()) {
    return makeData2({ type: type2, length: length4, nullCount, nullBitmap: this.readNullBitmap(type2, nullCount), valueOffsets: this.readOffsets(type2), "child": this.visit(type2.children[0]) });
  }
  nextFieldNode() {
    return this.nodes[++this.nodesIndex];
  }
  nextBufferRange() {
    return this.buffers[++this.buffersIndex];
  }
  readNullBitmap(type2, nullCount, buffer = this.nextBufferRange()) {
    return nullCount > 0 && this.readData(type2, buffer) || new Uint8Array(0);
  }
  readOffsets(type2, buffer) {
    return this.readData(type2, buffer);
  }
  readTypeIds(type2, buffer) {
    return this.readData(type2, buffer);
  }
  readData(_type, { length: length4, offset: offset2 } = this.nextBufferRange()) {
    return this.bytes.subarray(offset2, offset2 + length4);
  }
  readDictionary(type2) {
    return this.dictionaries.get(type2.id);
  }
};
var JSONVectorLoader2 = class extends VectorLoader2 {
  constructor(sources, nodes, buffers, dictionaries) {
    super(new Uint8Array(0), nodes, buffers, dictionaries);
    this.sources = sources;
  }
  readNullBitmap(_type, nullCount, { offset: offset2 } = this.nextBufferRange()) {
    return nullCount <= 0 ? new Uint8Array(0) : packBools2(this.sources[offset2]);
  }
  readOffsets(_type, { offset: offset2 } = this.nextBufferRange()) {
    return toArrayBufferView2(Uint8Array, toArrayBufferView2(Int32Array, this.sources[offset2]));
  }
  readTypeIds(type2, { offset: offset2 } = this.nextBufferRange()) {
    return toArrayBufferView2(Uint8Array, toArrayBufferView2(type2.ArrayType, this.sources[offset2]));
  }
  readData(type2, { offset: offset2 } = this.nextBufferRange()) {
    const { sources } = this;
    if (DataType2.isTimestamp(type2)) {
      return toArrayBufferView2(Uint8Array, Int644.convertArray(sources[offset2]));
    } else if ((DataType2.isInt(type2) || DataType2.isTime(type2)) && type2.bitWidth === 64) {
      return toArrayBufferView2(Uint8Array, Int644.convertArray(sources[offset2]));
    } else if (DataType2.isDate(type2) && type2.unit === DateUnit3.MILLISECOND) {
      return toArrayBufferView2(Uint8Array, Int644.convertArray(sources[offset2]));
    } else if (DataType2.isDecimal(type2)) {
      return toArrayBufferView2(Uint8Array, Int1282.convertArray(sources[offset2]));
    } else if (DataType2.isBinary(type2) || DataType2.isFixedSizeBinary(type2)) {
      return binaryDataFromJSON2(sources[offset2]);
    } else if (DataType2.isBool(type2)) {
      return packBools2(sources[offset2]);
    } else if (DataType2.isUtf8(type2)) {
      return encodeUtf82(sources[offset2].join(""));
    }
    return toArrayBufferView2(Uint8Array, toArrayBufferView2(type2.ArrayType, sources[offset2].map((x3) => +x3)));
  }
};
function binaryDataFromJSON2(values2) {
  const joined = values2.join("");
  const data = new Uint8Array(joined.length / 2);
  for (let i2 = 0; i2 < joined.length; i2 += 2) {
    data[i2 >> 1] = Number.parseInt(joined.slice(i2, i2 + 2), 16);
  }
  return data;
}

// ../../node_modules/apache-arrow/builder/binary.mjs
var BinaryBuilder2 = class extends VariableWidthBuilder2 {
  constructor(opts) {
    super(opts);
    this._values = new BufferBuilder2(new Uint8Array(0));
  }
  get byteLength() {
    let size = this._pendingLength + this.length * 4;
    this._offsets && (size += this._offsets.byteLength);
    this._values && (size += this._values.byteLength);
    this._nulls && (size += this._nulls.byteLength);
    return size;
  }
  setValue(index2, value) {
    return super.setValue(index2, toUint8Array2(value));
  }
  _flushPending(pending, pendingLength) {
    const offsets = this._offsets;
    const data = this._values.reserve(pendingLength).buffer;
    let offset2 = 0;
    for (const [index2, value] of pending) {
      if (value === void 0) {
        offsets.set(index2, 0);
      } else {
        const length4 = value.length;
        data.set(value, offset2);
        offsets.set(index2, length4);
        offset2 += length4;
      }
    }
  }
};

// ../../node_modules/apache-arrow/builder/bool.mjs
var BoolBuilder2 = class extends Builder5 {
  constructor(options) {
    super(options);
    this._values = new BitmapBufferBuilder2();
  }
  setValue(index2, value) {
    this._values.set(index2, +value);
  }
};

// ../../node_modules/apache-arrow/builder/date.mjs
var DateBuilder2 = class extends FixedWidthBuilder2 {
};
DateBuilder2.prototype._setValue = setDate2;
var DateDayBuilder2 = class extends DateBuilder2 {
};
DateDayBuilder2.prototype._setValue = setDateDay2;
var DateMillisecondBuilder2 = class extends DateBuilder2 {
};
DateMillisecondBuilder2.prototype._setValue = setDateMillisecond2;

// ../../node_modules/apache-arrow/builder/decimal.mjs
var DecimalBuilder2 = class extends FixedWidthBuilder2 {
};
DecimalBuilder2.prototype._setValue = setDecimal2;

// ../../node_modules/apache-arrow/builder/dictionary.mjs
var DictionaryBuilder2 = class extends Builder5 {
  constructor({ "type": type2, "nullValues": nulls, "dictionaryHashFunction": hashFn }) {
    super({ type: new Dictionary2(type2.dictionary, type2.indices, type2.id, type2.isOrdered) });
    this._nulls = null;
    this._dictionaryOffset = 0;
    this._keysToIndices = /* @__PURE__ */ Object.create(null);
    this.indices = makeBuilder2({ "type": this.type.indices, "nullValues": nulls });
    this.dictionary = makeBuilder2({ "type": this.type.dictionary, "nullValues": null });
    if (typeof hashFn === "function") {
      this.valueToKey = hashFn;
    }
  }
  get values() {
    return this.indices.values;
  }
  get nullCount() {
    return this.indices.nullCount;
  }
  get nullBitmap() {
    return this.indices.nullBitmap;
  }
  get byteLength() {
    return this.indices.byteLength + this.dictionary.byteLength;
  }
  get reservedLength() {
    return this.indices.reservedLength + this.dictionary.reservedLength;
  }
  get reservedByteLength() {
    return this.indices.reservedByteLength + this.dictionary.reservedByteLength;
  }
  isValid(value) {
    return this.indices.isValid(value);
  }
  setValid(index2, valid2) {
    const indices = this.indices;
    valid2 = indices.setValid(index2, valid2);
    this.length = indices.length;
    return valid2;
  }
  setValue(index2, value) {
    const keysToIndices = this._keysToIndices;
    const key = this.valueToKey(value);
    let idx = keysToIndices[key];
    if (idx === void 0) {
      keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;
    }
    return this.indices.setValue(index2, idx);
  }
  flush() {
    const type2 = this.type;
    const prev = this._dictionary;
    const curr = this.dictionary.toVector();
    const data = this.indices.flush().clone(type2);
    data.dictionary = prev ? prev.concat(curr) : curr;
    this.finished || (this._dictionaryOffset += curr.length);
    this._dictionary = data.dictionary;
    this.clear();
    return data;
  }
  finish() {
    this.indices.finish();
    this.dictionary.finish();
    this._dictionaryOffset = 0;
    this._keysToIndices = /* @__PURE__ */ Object.create(null);
    return super.finish();
  }
  clear() {
    this.indices.clear();
    this.dictionary.clear();
    return super.clear();
  }
  valueToKey(val) {
    return typeof val === "string" ? val : `${val}`;
  }
};

// ../../node_modules/apache-arrow/builder/fixedsizebinary.mjs
var FixedSizeBinaryBuilder2 = class extends FixedWidthBuilder2 {
};
FixedSizeBinaryBuilder2.prototype._setValue = setFixedSizeBinary2;

// ../../node_modules/apache-arrow/builder/fixedsizelist.mjs
var FixedSizeListBuilder2 = class extends Builder5 {
  setValue(index2, value) {
    const [child] = this.children;
    const start2 = index2 * this.stride;
    for (let i2 = -1, n = value.length; ++i2 < n; ) {
      child.set(start2 + i2, value[i2]);
    }
  }
  addChild(child, name2 = "0") {
    if (this.numChildren > 0) {
      throw new Error("FixedSizeListBuilder can only have one child.");
    }
    const childIndex = this.children.push(child);
    this.type = new FixedSizeList3(this.type.listSize, new Field4(name2, child.type, true));
    return childIndex;
  }
};

// ../../node_modules/apache-arrow/builder/float.mjs
var FloatBuilder2 = class extends FixedWidthBuilder2 {
  setValue(index2, value) {
    this._values.set(index2, value);
  }
};
var Float16Builder2 = class extends FloatBuilder2 {
  setValue(index2, value) {
    super.setValue(index2, float64ToUint162(value));
  }
};
var Float32Builder2 = class extends FloatBuilder2 {
};
var Float64Builder2 = class extends FloatBuilder2 {
};

// ../../node_modules/apache-arrow/builder/interval.mjs
var IntervalBuilder2 = class extends FixedWidthBuilder2 {
};
IntervalBuilder2.prototype._setValue = setIntervalValue2;
var IntervalDayTimeBuilder2 = class extends IntervalBuilder2 {
};
IntervalDayTimeBuilder2.prototype._setValue = setIntervalDayTime2;
var IntervalYearMonthBuilder2 = class extends IntervalBuilder2 {
};
IntervalYearMonthBuilder2.prototype._setValue = setIntervalYearMonth2;

// ../../node_modules/apache-arrow/builder/int.mjs
var IntBuilder2 = class extends FixedWidthBuilder2 {
  setValue(index2, value) {
    this._values.set(index2, value);
  }
};
var Int8Builder2 = class extends IntBuilder2 {
};
var Int16Builder2 = class extends IntBuilder2 {
};
var Int32Builder2 = class extends IntBuilder2 {
};
var Int64Builder2 = class extends IntBuilder2 {
};
var Uint8Builder2 = class extends IntBuilder2 {
};
var Uint16Builder2 = class extends IntBuilder2 {
};
var Uint32Builder2 = class extends IntBuilder2 {
};
var Uint64Builder2 = class extends IntBuilder2 {
};

// ../../node_modules/apache-arrow/builder/list.mjs
var ListBuilder2 = class extends VariableWidthBuilder2 {
  constructor(opts) {
    super(opts);
    this._offsets = new OffsetsBufferBuilder2();
  }
  addChild(child, name2 = "0") {
    if (this.numChildren > 0) {
      throw new Error("ListBuilder can only have one child.");
    }
    this.children[this.numChildren] = child;
    this.type = new List3(new Field4(name2, child.type, true));
    return this.numChildren - 1;
  }
  _flushPending(pending) {
    const offsets = this._offsets;
    const [child] = this.children;
    for (const [index2, value] of pending) {
      if (typeof value === "undefined") {
        offsets.set(index2, 0);
      } else {
        const n = value.length;
        const start2 = offsets.set(index2, n).buffer[index2];
        for (let i2 = -1; ++i2 < n; ) {
          child.set(start2 + i2, value[i2]);
        }
      }
    }
  }
};

// ../../node_modules/apache-arrow/builder/map.mjs
var MapBuilder2 = class extends VariableWidthBuilder2 {
  set(index2, value) {
    return super.set(index2, value);
  }
  setValue(index2, value) {
    const row = value instanceof Map ? value : new Map(Object.entries(value));
    const pending = this._pending || (this._pending = /* @__PURE__ */ new Map());
    const current = pending.get(index2);
    current && (this._pendingLength -= current.size);
    this._pendingLength += row.size;
    pending.set(index2, row);
  }
  addChild(child, name2 = `${this.numChildren}`) {
    if (this.numChildren > 0) {
      throw new Error("ListBuilder can only have one child.");
    }
    this.children[this.numChildren] = child;
    this.type = new Map_2(new Field4(name2, child.type, true), this.type.keysSorted);
    return this.numChildren - 1;
  }
  _flushPending(pending) {
    const offsets = this._offsets;
    const [child] = this.children;
    for (const [index2, value] of pending) {
      if (value === void 0) {
        offsets.set(index2, 0);
      } else {
        let { [index2]: idx, [index2 + 1]: end } = offsets.set(index2, value.size).buffer;
        for (const val of value.entries()) {
          child.set(idx, val);
          if (++idx >= end)
            break;
        }
      }
    }
  }
};

// ../../node_modules/apache-arrow/builder/null.mjs
var NullBuilder2 = class extends Builder5 {
  // @ts-ignore
  setValue(index2, value) {
  }
  setValid(index2, valid2) {
    this.length = Math.max(index2 + 1, this.length);
    return valid2;
  }
};

// ../../node_modules/apache-arrow/builder/struct.mjs
var StructBuilder2 = class extends Builder5 {
  setValue(index2, value) {
    const { children: children2, type: type2 } = this;
    switch (Array.isArray(value) || value.constructor) {
      case true:
        return type2.children.forEach((_2, i2) => children2[i2].set(index2, value[i2]));
      case Map:
        return type2.children.forEach((f2, i2) => children2[i2].set(index2, value.get(f2.name)));
      default:
        return type2.children.forEach((f2, i2) => children2[i2].set(index2, value[f2.name]));
    }
  }
  /** @inheritdoc */
  setValid(index2, valid2) {
    if (!super.setValid(index2, valid2)) {
      this.children.forEach((child) => child.setValid(index2, valid2));
    }
    return valid2;
  }
  addChild(child, name2 = `${this.numChildren}`) {
    const childIndex = this.children.push(child);
    this.type = new Struct2([...this.type.children, new Field4(name2, child.type, true)]);
    return childIndex;
  }
};

// ../../node_modules/apache-arrow/builder/timestamp.mjs
var TimestampBuilder2 = class extends FixedWidthBuilder2 {
};
TimestampBuilder2.prototype._setValue = setTimestamp2;
var TimestampSecondBuilder2 = class extends TimestampBuilder2 {
};
TimestampSecondBuilder2.prototype._setValue = setTimestampSecond2;
var TimestampMillisecondBuilder2 = class extends TimestampBuilder2 {
};
TimestampMillisecondBuilder2.prototype._setValue = setTimestampMillisecond2;
var TimestampMicrosecondBuilder2 = class extends TimestampBuilder2 {
};
TimestampMicrosecondBuilder2.prototype._setValue = setTimestampMicrosecond2;
var TimestampNanosecondBuilder2 = class extends TimestampBuilder2 {
};
TimestampNanosecondBuilder2.prototype._setValue = setTimestampNanosecond2;

// ../../node_modules/apache-arrow/builder/time.mjs
var TimeBuilder2 = class extends FixedWidthBuilder2 {
};
TimeBuilder2.prototype._setValue = setTime2;
var TimeSecondBuilder2 = class extends TimeBuilder2 {
};
TimeSecondBuilder2.prototype._setValue = setTimeSecond2;
var TimeMillisecondBuilder2 = class extends TimeBuilder2 {
};
TimeMillisecondBuilder2.prototype._setValue = setTimeMillisecond2;
var TimeMicrosecondBuilder2 = class extends TimeBuilder2 {
};
TimeMicrosecondBuilder2.prototype._setValue = setTimeMicrosecond2;
var TimeNanosecondBuilder2 = class extends TimeBuilder2 {
};
TimeNanosecondBuilder2.prototype._setValue = setTimeNanosecond2;

// ../../node_modules/apache-arrow/builder/union.mjs
var UnionBuilder2 = class extends Builder5 {
  constructor(options) {
    super(options);
    this._typeIds = new DataBufferBuilder2(new Int8Array(0), 1);
    if (typeof options["valueToChildTypeId"] === "function") {
      this._valueToChildTypeId = options["valueToChildTypeId"];
    }
  }
  get typeIdToChildIndex() {
    return this.type.typeIdToChildIndex;
  }
  append(value, childTypeId) {
    return this.set(this.length, value, childTypeId);
  }
  set(index2, value, childTypeId) {
    if (childTypeId === void 0) {
      childTypeId = this._valueToChildTypeId(this, value, index2);
    }
    if (this.setValid(index2, this.isValid(value))) {
      this.setValue(index2, value, childTypeId);
    }
    return this;
  }
  setValue(index2, value, childTypeId) {
    this._typeIds.set(index2, childTypeId);
    const childIndex = this.type.typeIdToChildIndex[childTypeId];
    const child = this.children[childIndex];
    child === null || child === void 0 ? void 0 : child.set(index2, value);
  }
  addChild(child, name2 = `${this.children.length}`) {
    const childTypeId = this.children.push(child);
    const { type: { children: children2, mode: mode3, typeIds } } = this;
    const fields = [...children2, new Field4(name2, child.type)];
    this.type = new Union_2(mode3, [...typeIds, childTypeId], fields);
    return childTypeId;
  }
  /** @ignore */
  // @ts-ignore
  _valueToChildTypeId(builder, value, offset2) {
    throw new Error(`Cannot map UnionBuilder value to child typeId. Pass the \`childTypeId\` as the second argument to unionBuilder.append(), or supply a \`valueToChildTypeId\` function as part of the UnionBuilder constructor options.`);
  }
};
var SparseUnionBuilder2 = class extends UnionBuilder2 {
};
var DenseUnionBuilder2 = class extends UnionBuilder2 {
  constructor(options) {
    super(options);
    this._offsets = new DataBufferBuilder2(new Int32Array(0));
  }
  /** @ignore */
  setValue(index2, value, childTypeId) {
    const id2 = this._typeIds.set(index2, childTypeId).buffer[index2];
    const child = this.getChildAt(this.type.typeIdToChildIndex[id2]);
    const denseIndex = this._offsets.set(index2, child.length).buffer[index2];
    child === null || child === void 0 ? void 0 : child.set(denseIndex, value);
  }
};

// ../../node_modules/apache-arrow/builder/utf8.mjs
var Utf8Builder2 = class extends VariableWidthBuilder2 {
  constructor(opts) {
    super(opts);
    this._values = new BufferBuilder2(new Uint8Array(0));
  }
  get byteLength() {
    let size = this._pendingLength + this.length * 4;
    this._offsets && (size += this._offsets.byteLength);
    this._values && (size += this._values.byteLength);
    this._nulls && (size += this._nulls.byteLength);
    return size;
  }
  setValue(index2, value) {
    return super.setValue(index2, encodeUtf82(value));
  }
  // @ts-ignore
  _flushPending(pending, pendingLength) {
  }
};
Utf8Builder2.prototype._flushPending = BinaryBuilder2.prototype._flushPending;

// ../../node_modules/apache-arrow/visitor/builderctor.mjs
var GetBuilderCtor2 = class extends Visitor2 {
  visitNull() {
    return NullBuilder2;
  }
  visitBool() {
    return BoolBuilder2;
  }
  visitInt() {
    return IntBuilder2;
  }
  visitInt8() {
    return Int8Builder2;
  }
  visitInt16() {
    return Int16Builder2;
  }
  visitInt32() {
    return Int32Builder2;
  }
  visitInt64() {
    return Int64Builder2;
  }
  visitUint8() {
    return Uint8Builder2;
  }
  visitUint16() {
    return Uint16Builder2;
  }
  visitUint32() {
    return Uint32Builder2;
  }
  visitUint64() {
    return Uint64Builder2;
  }
  visitFloat() {
    return FloatBuilder2;
  }
  visitFloat16() {
    return Float16Builder2;
  }
  visitFloat32() {
    return Float32Builder2;
  }
  visitFloat64() {
    return Float64Builder2;
  }
  visitUtf8() {
    return Utf8Builder2;
  }
  visitBinary() {
    return BinaryBuilder2;
  }
  visitFixedSizeBinary() {
    return FixedSizeBinaryBuilder2;
  }
  visitDate() {
    return DateBuilder2;
  }
  visitDateDay() {
    return DateDayBuilder2;
  }
  visitDateMillisecond() {
    return DateMillisecondBuilder2;
  }
  visitTimestamp() {
    return TimestampBuilder2;
  }
  visitTimestampSecond() {
    return TimestampSecondBuilder2;
  }
  visitTimestampMillisecond() {
    return TimestampMillisecondBuilder2;
  }
  visitTimestampMicrosecond() {
    return TimestampMicrosecondBuilder2;
  }
  visitTimestampNanosecond() {
    return TimestampNanosecondBuilder2;
  }
  visitTime() {
    return TimeBuilder2;
  }
  visitTimeSecond() {
    return TimeSecondBuilder2;
  }
  visitTimeMillisecond() {
    return TimeMillisecondBuilder2;
  }
  visitTimeMicrosecond() {
    return TimeMicrosecondBuilder2;
  }
  visitTimeNanosecond() {
    return TimeNanosecondBuilder2;
  }
  visitDecimal() {
    return DecimalBuilder2;
  }
  visitList() {
    return ListBuilder2;
  }
  visitStruct() {
    return StructBuilder2;
  }
  visitUnion() {
    return UnionBuilder2;
  }
  visitDenseUnion() {
    return DenseUnionBuilder2;
  }
  visitSparseUnion() {
    return SparseUnionBuilder2;
  }
  visitDictionary() {
    return DictionaryBuilder2;
  }
  visitInterval() {
    return IntervalBuilder2;
  }
  visitIntervalDayTime() {
    return IntervalDayTimeBuilder2;
  }
  visitIntervalYearMonth() {
    return IntervalYearMonthBuilder2;
  }
  visitFixedSizeList() {
    return FixedSizeListBuilder2;
  }
  visitMap() {
    return MapBuilder2;
  }
};
var instance14 = new GetBuilderCtor2();

// ../../node_modules/apache-arrow/visitor/typecomparator.mjs
var TypeComparator2 = class extends Visitor2 {
  compareSchemas(schema, other) {
    return schema === other || other instanceof schema.constructor && this.compareManyFields(schema.fields, other.fields);
  }
  compareManyFields(fields, others) {
    return fields === others || Array.isArray(fields) && Array.isArray(others) && fields.length === others.length && fields.every((f2, i2) => this.compareFields(f2, others[i2]));
  }
  compareFields(field2, other) {
    return field2 === other || other instanceof field2.constructor && field2.name === other.name && field2.nullable === other.nullable && this.visit(field2.type, other.type);
  }
};
function compareConstructor2(type2, other) {
  return other instanceof type2.constructor;
}
function compareAny2(type2, other) {
  return type2 === other || compareConstructor2(type2, other);
}
function compareInt2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.bitWidth === other.bitWidth && type2.isSigned === other.isSigned;
}
function compareFloat2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.precision === other.precision;
}
function compareFixedSizeBinary2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.byteWidth === other.byteWidth;
}
function compareDate2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.unit === other.unit;
}
function compareTimestamp2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.unit === other.unit && type2.timezone === other.timezone;
}
function compareTime2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.unit === other.unit && type2.bitWidth === other.bitWidth;
}
function compareList2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.children.length === other.children.length && instance15.compareManyFields(type2.children, other.children);
}
function compareStruct2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.children.length === other.children.length && instance15.compareManyFields(type2.children, other.children);
}
function compareUnion2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.mode === other.mode && type2.typeIds.every((x3, i2) => x3 === other.typeIds[i2]) && instance15.compareManyFields(type2.children, other.children);
}
function compareDictionary2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.id === other.id && type2.isOrdered === other.isOrdered && instance15.visit(type2.indices, other.indices) && instance15.visit(type2.dictionary, other.dictionary);
}
function compareInterval2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.unit === other.unit;
}
function compareFixedSizeList2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.listSize === other.listSize && type2.children.length === other.children.length && instance15.compareManyFields(type2.children, other.children);
}
function compareMap2(type2, other) {
  return type2 === other || compareConstructor2(type2, other) && type2.keysSorted === other.keysSorted && type2.children.length === other.children.length && instance15.compareManyFields(type2.children, other.children);
}
TypeComparator2.prototype.visitNull = compareAny2;
TypeComparator2.prototype.visitBool = compareAny2;
TypeComparator2.prototype.visitInt = compareInt2;
TypeComparator2.prototype.visitInt8 = compareInt2;
TypeComparator2.prototype.visitInt16 = compareInt2;
TypeComparator2.prototype.visitInt32 = compareInt2;
TypeComparator2.prototype.visitInt64 = compareInt2;
TypeComparator2.prototype.visitUint8 = compareInt2;
TypeComparator2.prototype.visitUint16 = compareInt2;
TypeComparator2.prototype.visitUint32 = compareInt2;
TypeComparator2.prototype.visitUint64 = compareInt2;
TypeComparator2.prototype.visitFloat = compareFloat2;
TypeComparator2.prototype.visitFloat16 = compareFloat2;
TypeComparator2.prototype.visitFloat32 = compareFloat2;
TypeComparator2.prototype.visitFloat64 = compareFloat2;
TypeComparator2.prototype.visitUtf8 = compareAny2;
TypeComparator2.prototype.visitBinary = compareAny2;
TypeComparator2.prototype.visitFixedSizeBinary = compareFixedSizeBinary2;
TypeComparator2.prototype.visitDate = compareDate2;
TypeComparator2.prototype.visitDateDay = compareDate2;
TypeComparator2.prototype.visitDateMillisecond = compareDate2;
TypeComparator2.prototype.visitTimestamp = compareTimestamp2;
TypeComparator2.prototype.visitTimestampSecond = compareTimestamp2;
TypeComparator2.prototype.visitTimestampMillisecond = compareTimestamp2;
TypeComparator2.prototype.visitTimestampMicrosecond = compareTimestamp2;
TypeComparator2.prototype.visitTimestampNanosecond = compareTimestamp2;
TypeComparator2.prototype.visitTime = compareTime2;
TypeComparator2.prototype.visitTimeSecond = compareTime2;
TypeComparator2.prototype.visitTimeMillisecond = compareTime2;
TypeComparator2.prototype.visitTimeMicrosecond = compareTime2;
TypeComparator2.prototype.visitTimeNanosecond = compareTime2;
TypeComparator2.prototype.visitDecimal = compareAny2;
TypeComparator2.prototype.visitList = compareList2;
TypeComparator2.prototype.visitStruct = compareStruct2;
TypeComparator2.prototype.visitUnion = compareUnion2;
TypeComparator2.prototype.visitDenseUnion = compareUnion2;
TypeComparator2.prototype.visitSparseUnion = compareUnion2;
TypeComparator2.prototype.visitDictionary = compareDictionary2;
TypeComparator2.prototype.visitInterval = compareInterval2;
TypeComparator2.prototype.visitIntervalDayTime = compareInterval2;
TypeComparator2.prototype.visitIntervalYearMonth = compareInterval2;
TypeComparator2.prototype.visitFixedSizeList = compareFixedSizeList2;
TypeComparator2.prototype.visitMap = compareMap2;
var instance15 = new TypeComparator2();
function compareSchemas2(schema, other) {
  return instance15.compareSchemas(schema, other);
}
function compareFields2(field2, other) {
  return instance15.compareFields(field2, other);
}
function compareTypes2(type2, other) {
  return instance15.visit(type2, other);
}

// ../../node_modules/apache-arrow/factories.mjs
function makeBuilder2(options) {
  const type2 = options.type;
  const builder = new (instance14.getVisitFn(type2)())(options);
  if (type2.children && type2.children.length > 0) {
    const children2 = options["children"] || [];
    const defaultOptions = { "nullValues": options["nullValues"] };
    const getChildOptions = Array.isArray(children2) ? (_2, i2) => children2[i2] || defaultOptions : ({ name: name2 }) => children2[name2] || defaultOptions;
    for (const [index2, field2] of type2.children.entries()) {
      const { type: type3 } = field2;
      const opts = getChildOptions(field2, index2);
      builder.children.push(makeBuilder2(Object.assign(Object.assign({}, opts), { type: type3 })));
    }
  }
  return builder;
}

// ../../node_modules/apache-arrow/util/recordbatch.mjs
function distributeVectorsIntoRecordBatches2(schema, vecs) {
  return uniformlyDistributeChunksAcrossRecordBatches2(schema, vecs.map((v3) => v3.data.concat()));
}
function uniformlyDistributeChunksAcrossRecordBatches2(schema, cols) {
  const fields = [...schema.fields];
  const batches = [];
  const memo = { numBatches: cols.reduce((n, c4) => Math.max(n, c4.length), 0) };
  let numBatches = 0, batchLength = 0;
  let i2 = -1;
  const numColumns = cols.length;
  let child, children2 = [];
  while (memo.numBatches-- > 0) {
    for (batchLength = Number.POSITIVE_INFINITY, i2 = -1; ++i2 < numColumns; ) {
      children2[i2] = child = cols[i2].shift();
      batchLength = Math.min(batchLength, child ? child.length : batchLength);
    }
    if (Number.isFinite(batchLength)) {
      children2 = distributeChildren2(fields, batchLength, children2, cols, memo);
      if (batchLength > 0) {
        batches[numBatches++] = makeData2({
          type: new Struct2(fields),
          length: batchLength,
          nullCount: 0,
          children: children2.slice()
        });
      }
    }
  }
  return [
    schema = schema.assign(fields),
    batches.map((data) => new RecordBatch4(schema, data))
  ];
}
function distributeChildren2(fields, batchLength, children2, columns, memo) {
  var _a9;
  const nullBitmapSize = (batchLength + 63 & ~63) >> 3;
  for (let i2 = -1, n = columns.length; ++i2 < n; ) {
    const child = children2[i2];
    const length4 = child === null || child === void 0 ? void 0 : child.length;
    if (length4 >= batchLength) {
      if (length4 === batchLength) {
        children2[i2] = child;
      } else {
        children2[i2] = child.slice(0, batchLength);
        memo.numBatches = Math.max(memo.numBatches, columns[i2].unshift(child.slice(batchLength, length4 - batchLength)));
      }
    } else {
      const field2 = fields[i2];
      fields[i2] = field2.clone({ nullable: true });
      children2[i2] = (_a9 = child === null || child === void 0 ? void 0 : child._changeLengthAndBackfillNullBitmap(batchLength)) !== null && _a9 !== void 0 ? _a9 : makeData2({
        type: field2.type,
        length: batchLength,
        nullCount: batchLength,
        nullBitmap: new Uint8Array(nullBitmapSize)
      });
    }
  }
  return children2;
}

// ../../node_modules/apache-arrow/table.mjs
var _a7;
var Table2 = class _Table {
  constructor(...args) {
    var _b3, _c3;
    if (args.length === 0) {
      this.batches = [];
      this.schema = new Schema4([]);
      this._offsets = [0];
      return this;
    }
    let schema;
    let offsets;
    if (args[0] instanceof Schema4) {
      schema = args.shift();
    }
    if (args[args.length - 1] instanceof Uint32Array) {
      offsets = args.pop();
    }
    const unwrap = (x3) => {
      if (x3) {
        if (x3 instanceof RecordBatch4) {
          return [x3];
        } else if (x3 instanceof _Table) {
          return x3.batches;
        } else if (x3 instanceof Data2) {
          if (x3.type instanceof Struct2) {
            return [new RecordBatch4(new Schema4(x3.type.children), x3)];
          }
        } else if (Array.isArray(x3)) {
          return x3.flatMap((v3) => unwrap(v3));
        } else if (typeof x3[Symbol.iterator] === "function") {
          return [...x3].flatMap((v3) => unwrap(v3));
        } else if (typeof x3 === "object") {
          const keys = Object.keys(x3);
          const vecs = keys.map((k3) => new Vector2([x3[k3]]));
          const schema2 = new Schema4(keys.map((k3, i2) => new Field4(String(k3), vecs[i2].type)));
          const [, batches2] = distributeVectorsIntoRecordBatches2(schema2, vecs);
          return batches2.length === 0 ? [new RecordBatch4(x3)] : batches2;
        }
      }
      return [];
    };
    const batches = args.flatMap((v3) => unwrap(v3));
    schema = (_c3 = schema !== null && schema !== void 0 ? schema : (_b3 = batches[0]) === null || _b3 === void 0 ? void 0 : _b3.schema) !== null && _c3 !== void 0 ? _c3 : new Schema4([]);
    if (!(schema instanceof Schema4)) {
      throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");
    }
    for (const batch of batches) {
      if (!(batch instanceof RecordBatch4)) {
        throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");
      }
      if (!compareSchemas2(schema, batch.schema)) {
        throw new TypeError("Table and inner RecordBatch schemas must be equivalent.");
      }
    }
    this.schema = schema;
    this.batches = batches;
    this._offsets = offsets !== null && offsets !== void 0 ? offsets : computeChunkOffsets2(this.data);
  }
  /**
   * The contiguous {@link RecordBatch `RecordBatch`} chunks of the Table rows.
   */
  get data() {
    return this.batches.map(({ data }) => data);
  }
  /**
   * The number of columns in this Table.
   */
  get numCols() {
    return this.schema.fields.length;
  }
  /**
   * The number of rows in this Table.
   */
  get numRows() {
    return this.data.reduce((numRows, data) => numRows + data.length, 0);
  }
  /**
   * The number of null rows in this Table.
   */
  get nullCount() {
    if (this._nullCount === -1) {
      this._nullCount = computeChunkNullCounts2(this.data);
    }
    return this._nullCount;
  }
  /**
   * Check whether an element is null.
   *
   * @param index The index at which to read the validity bitmap.
   */
  // @ts-ignore
  isValid(index2) {
    return false;
  }
  /**
   * Get an element value by position.
   *
   * @param index The index of the element to read.
   */
  // @ts-ignore
  get(index2) {
    return null;
  }
  /**
   * Set an element value by position.
   *
   * @param index The index of the element to write.
   * @param value The value to set.
   */
  // @ts-ignore
  set(index2, value) {
    return;
  }
  /**
   * Retrieve the index of the first occurrence of a value in an Vector.
   *
   * @param element The value to locate in the Vector.
   * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.
   */
  // @ts-ignore
  indexOf(element, offset2) {
    return -1;
  }
  /**
   * Get the size in bytes of an element by index.
   * @param index The index at which to get the byteLength.
   */
  // @ts-ignore
  getByteLength(index2) {
    return 0;
  }
  /**
   * Iterator for rows in this Table.
   */
  [Symbol.iterator]() {
    if (this.batches.length > 0) {
      return instance12.visit(new Vector2(this.data));
    }
    return new Array(0)[Symbol.iterator]();
  }
  /**
   * Return a JavaScript Array of the Table rows.
   *
   * @returns An Array of Table rows.
   */
  toArray() {
    return [...this];
  }
  /**
   * Returns a string representation of the Table rows.
   *
   * @returns A string representation of the Table rows.
   */
  toString() {
    return `[
  ${this.toArray().join(",\n  ")}
]`;
  }
  /**
   * Combines two or more Tables of the same schema.
   *
   * @param others Additional Tables to add to the end of this Tables.
   */
  concat(...others) {
    const schema = this.schema;
    const data = this.data.concat(others.flatMap(({ data: data2 }) => data2));
    return new _Table(schema, data.map((data2) => new RecordBatch4(schema, data2)));
  }
  /**
   * Return a zero-copy sub-section of this Table.
   *
   * @param begin The beginning of the specified portion of the Table.
   * @param end The end of the specified portion of the Table. This is exclusive of the element at the index 'end'.
   */
  slice(begin, end) {
    const schema = this.schema;
    [begin, end] = clampRange2({ length: this.numRows }, begin, end);
    const data = sliceChunks2(this.data, this._offsets, begin, end);
    return new _Table(schema, data.map((chunk) => new RecordBatch4(schema, chunk)));
  }
  /**
   * Returns a child Vector by name, or null if this Vector has no child with the given name.
   *
   * @param name The name of the child to retrieve.
   */
  getChild(name2) {
    return this.getChildAt(this.schema.fields.findIndex((f2) => f2.name === name2));
  }
  /**
   * Returns a child Vector by index, or null if this Vector has no child at the supplied index.
   *
   * @param index The index of the child to retrieve.
   */
  getChildAt(index2) {
    if (index2 > -1 && index2 < this.schema.fields.length) {
      const data = this.data.map((data2) => data2.children[index2]);
      if (data.length === 0) {
        const { type: type2 } = this.schema.fields[index2];
        const empty4 = makeData2({ type: type2, length: 0, nullCount: 0 });
        data.push(empty4._changeLengthAndBackfillNullBitmap(this.numRows));
      }
      return new Vector2(data);
    }
    return null;
  }
  /**
   * Sets a child Vector by name.
   *
   * @param name The name of the child to overwrite.
   * @returns A new Table with the supplied child for the specified name.
   */
  setChild(name2, child) {
    var _b3;
    return this.setChildAt((_b3 = this.schema.fields) === null || _b3 === void 0 ? void 0 : _b3.findIndex((f2) => f2.name === name2), child);
  }
  setChildAt(index2, child) {
    let schema = this.schema;
    let batches = [...this.batches];
    if (index2 > -1 && index2 < this.numCols) {
      if (!child) {
        child = new Vector2([makeData2({ type: new Null3(), length: this.numRows })]);
      }
      const fields = schema.fields.slice();
      const field2 = fields[index2].clone({ type: child.type });
      const children2 = this.schema.fields.map((_2, i2) => this.getChildAt(i2));
      [fields[index2], children2[index2]] = [field2, child];
      [schema, batches] = distributeVectorsIntoRecordBatches2(schema, children2);
    }
    return new _Table(schema, batches);
  }
  /**
   * Construct a new Table containing only specified columns.
   *
   * @param columnNames Names of columns to keep.
   * @returns A new Table of columns matching the specified names.
   */
  select(columnNames) {
    const nameToIndex = this.schema.fields.reduce((m2, f2, i2) => m2.set(f2.name, i2), /* @__PURE__ */ new Map());
    return this.selectAt(columnNames.map((columnName) => nameToIndex.get(columnName)).filter((x3) => x3 > -1));
  }
  /**
   * Construct a new Table containing only columns at the specified indices.
   *
   * @param columnIndices Indices of columns to keep.
   * @returns A new Table of columns at the specified indices.
   */
  selectAt(columnIndices) {
    const schema = this.schema.selectAt(columnIndices);
    const data = this.batches.map((batch) => batch.selectAt(columnIndices));
    return new _Table(schema, data);
  }
  assign(other) {
    const fields = this.schema.fields;
    const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {
      const [indices2, oldToNew2] = memo;
      const i2 = fields.findIndex((f3) => f3.name === f2.name);
      ~i2 ? oldToNew2[i2] = newIdx : indices2.push(newIdx);
      return memo;
    }, [[], []]);
    const schema = this.schema.assign(other.schema);
    const columns = [
      ...fields.map((_2, i2) => [i2, oldToNew[i2]]).map(([i2, j2]) => j2 === void 0 ? this.getChildAt(i2) : other.getChildAt(j2)),
      ...indices.map((i2) => other.getChildAt(i2))
    ].filter(Boolean);
    return new _Table(...distributeVectorsIntoRecordBatches2(schema, columns));
  }
};
_a7 = Symbol.toStringTag;
Table2[_a7] = ((proto) => {
  proto.schema = null;
  proto.batches = [];
  proto._offsets = new Uint32Array([0]);
  proto._nullCount = -1;
  proto[Symbol.isConcatSpreadable] = true;
  proto["isValid"] = wrapChunkedCall12(isChunkedValid2);
  proto["get"] = wrapChunkedCall12(instance10.getVisitFn(Type3.Struct));
  proto["set"] = wrapChunkedCall22(instance9.getVisitFn(Type3.Struct));
  proto["indexOf"] = wrapChunkedIndexOf2(instance11.getVisitFn(Type3.Struct));
  proto["getByteLength"] = wrapChunkedCall12(instance13.getVisitFn(Type3.Struct));
  return "Table";
})(Table2.prototype);

// ../../node_modules/apache-arrow/recordbatch.mjs
var _a8;
var RecordBatch4 = class _RecordBatch {
  constructor(...args) {
    switch (args.length) {
      case 2: {
        [this.schema] = args;
        if (!(this.schema instanceof Schema4)) {
          throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");
        }
        [
          ,
          this.data = makeData2({
            nullCount: 0,
            type: new Struct2(this.schema.fields),
            children: this.schema.fields.map((f2) => makeData2({ type: f2.type, nullCount: 0 }))
          })
        ] = args;
        if (!(this.data instanceof Data2)) {
          throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");
        }
        [this.schema, this.data] = ensureSameLengthData2(this.schema, this.data.children);
        break;
      }
      case 1: {
        const [obj] = args;
        const { fields, children: children2, length: length4 } = Object.keys(obj).reduce((memo, name2, i2) => {
          memo.children[i2] = obj[name2];
          memo.length = Math.max(memo.length, obj[name2].length);
          memo.fields[i2] = Field4.new({ name: name2, type: obj[name2].type, nullable: true });
          return memo;
        }, {
          length: 0,
          fields: new Array(),
          children: new Array()
        });
        const schema = new Schema4(fields);
        const data = makeData2({ type: new Struct2(fields), length: length4, children: children2, nullCount: 0 });
        [this.schema, this.data] = ensureSameLengthData2(schema, data.children, length4);
        break;
      }
      default:
        throw new TypeError("RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.");
    }
  }
  get dictionaries() {
    return this._dictionaries || (this._dictionaries = collectDictionaries2(this.schema.fields, this.data.children));
  }
  /**
   * The number of columns in this RecordBatch.
   */
  get numCols() {
    return this.schema.fields.length;
  }
  /**
   * The number of rows in this RecordBatch.
   */
  get numRows() {
    return this.data.length;
  }
  /**
   * The number of null rows in this RecordBatch.
   */
  get nullCount() {
    return this.data.nullCount;
  }
  /**
   * Check whether an element is null.
   * @param index The index at which to read the validity bitmap.
   */
  isValid(index2) {
    return this.data.getValid(index2);
  }
  /**
   * Get a row by position.
   * @param index The index of the element to read.
   */
  get(index2) {
    return instance10.visit(this.data, index2);
  }
  /**
   * Set a row by position.
   * @param index The index of the element to write.
   * @param value The value to set.
   */
  set(index2, value) {
    return instance9.visit(this.data, index2, value);
  }
  /**
   * Retrieve the index of the first occurrence of a row in an RecordBatch.
   * @param element The row to locate in the RecordBatch.
   * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.
   */
  indexOf(element, offset2) {
    return instance11.visit(this.data, element, offset2);
  }
  /**
   * Get the size (in bytes) of a row by index.
   * @param index The row index for which to compute the byteLength.
   */
  getByteLength(index2) {
    return instance13.visit(this.data, index2);
  }
  /**
   * Iterator for rows in this RecordBatch.
   */
  [Symbol.iterator]() {
    return instance12.visit(new Vector2([this.data]));
  }
  /**
   * Return a JavaScript Array of the RecordBatch rows.
   * @returns An Array of RecordBatch rows.
   */
  toArray() {
    return [...this];
  }
  /**
   * Combines two or more RecordBatch of the same schema.
   * @param others Additional RecordBatch to add to the end of this RecordBatch.
   */
  concat(...others) {
    return new Table2(this.schema, [this, ...others]);
  }
  /**
   * Return a zero-copy sub-section of this RecordBatch.
   * @param start The beginning of the specified portion of the RecordBatch.
   * @param end The end of the specified portion of the RecordBatch. This is exclusive of the element at the index 'end'.
   */
  slice(begin, end) {
    const [slice5] = new Vector2([this.data]).slice(begin, end).data;
    return new _RecordBatch(this.schema, slice5);
  }
  /**
   * Returns a child Vector by name, or null if this Vector has no child with the given name.
   * @param name The name of the child to retrieve.
   */
  getChild(name2) {
    var _b3;
    return this.getChildAt((_b3 = this.schema.fields) === null || _b3 === void 0 ? void 0 : _b3.findIndex((f2) => f2.name === name2));
  }
  /**
   * Returns a child Vector by index, or null if this Vector has no child at the supplied index.
   * @param index The index of the child to retrieve.
   */
  getChildAt(index2) {
    if (index2 > -1 && index2 < this.schema.fields.length) {
      return new Vector2([this.data.children[index2]]);
    }
    return null;
  }
  /**
   * Sets a child Vector by name.
   * @param name The name of the child to overwrite.
   * @returns A new RecordBatch with the new child for the specified name.
   */
  setChild(name2, child) {
    var _b3;
    return this.setChildAt((_b3 = this.schema.fields) === null || _b3 === void 0 ? void 0 : _b3.findIndex((f2) => f2.name === name2), child);
  }
  setChildAt(index2, child) {
    let schema = this.schema;
    let data = this.data;
    if (index2 > -1 && index2 < this.numCols) {
      if (!child) {
        child = new Vector2([makeData2({ type: new Null3(), length: this.numRows })]);
      }
      const fields = schema.fields.slice();
      const children2 = data.children.slice();
      const field2 = fields[index2].clone({ type: child.type });
      [fields[index2], children2[index2]] = [field2, child.data[0]];
      schema = new Schema4(fields, new Map(this.schema.metadata));
      data = makeData2({ type: new Struct2(fields), children: children2 });
    }
    return new _RecordBatch(schema, data);
  }
  /**
   * Construct a new RecordBatch containing only specified columns.
   *
   * @param columnNames Names of columns to keep.
   * @returns A new RecordBatch of columns matching the specified names.
   */
  select(columnNames) {
    const schema = this.schema.select(columnNames);
    const type2 = new Struct2(schema.fields);
    const children2 = [];
    for (const name2 of columnNames) {
      const index2 = this.schema.fields.findIndex((f2) => f2.name === name2);
      if (~index2) {
        children2[index2] = this.data.children[index2];
      }
    }
    return new _RecordBatch(schema, makeData2({ type: type2, length: this.numRows, children: children2 }));
  }
  /**
   * Construct a new RecordBatch containing only columns at the specified indices.
   *
   * @param columnIndices Indices of columns to keep.
   * @returns A new RecordBatch of columns matching at the specified indices.
   */
  selectAt(columnIndices) {
    const schema = this.schema.selectAt(columnIndices);
    const children2 = columnIndices.map((i2) => this.data.children[i2]).filter(Boolean);
    const subset = makeData2({ type: new Struct2(schema.fields), length: this.numRows, children: children2 });
    return new _RecordBatch(schema, subset);
  }
};
_a8 = Symbol.toStringTag;
RecordBatch4[_a8] = ((proto) => {
  proto._nullCount = -1;
  proto[Symbol.isConcatSpreadable] = true;
  return "RecordBatch";
})(RecordBatch4.prototype);
function ensureSameLengthData2(schema, chunks, maxLength = chunks.reduce((max4, col) => Math.max(max4, col.length), 0)) {
  var _b3;
  const fields = [...schema.fields];
  const children2 = [...chunks];
  const nullBitmapSize = (maxLength + 63 & ~63) >> 3;
  for (const [idx, field2] of schema.fields.entries()) {
    const chunk = chunks[idx];
    if (!chunk || chunk.length !== maxLength) {
      fields[idx] = field2.clone({ nullable: true });
      children2[idx] = (_b3 = chunk === null || chunk === void 0 ? void 0 : chunk._changeLengthAndBackfillNullBitmap(maxLength)) !== null && _b3 !== void 0 ? _b3 : makeData2({
        type: field2.type,
        length: maxLength,
        nullCount: maxLength,
        nullBitmap: new Uint8Array(nullBitmapSize)
      });
    }
  }
  return [
    schema.assign(fields),
    makeData2({ type: new Struct2(fields), length: maxLength, children: children2 })
  ];
}
function collectDictionaries2(fields, children2, dictionaries = /* @__PURE__ */ new Map()) {
  for (let i2 = -1, n = fields.length; ++i2 < n; ) {
    const field2 = fields[i2];
    const type2 = field2.type;
    const data = children2[i2];
    if (DataType2.isDictionary(type2)) {
      if (!dictionaries.has(type2.id)) {
        if (data.dictionary) {
          dictionaries.set(type2.id, data.dictionary);
        }
      } else if (dictionaries.get(type2.id) !== data.dictionary) {
        throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);
      }
    }
    if (type2.children && type2.children.length > 0) {
      collectDictionaries2(type2.children, data.children, dictionaries);
    }
  }
  return dictionaries;
}
var _InternalEmptyPlaceholderRecordBatch2 = class extends RecordBatch4 {
  constructor(schema) {
    const children2 = schema.fields.map((f2) => makeData2({ type: f2.type }));
    const data = makeData2({ type: new Struct2(schema.fields), nullCount: 0, children: children2 });
    super(schema, data);
  }
};

// ../../node_modules/apache-arrow/fb/body-compression-method.mjs
var BodyCompressionMethod2;
(function(BodyCompressionMethod3) {
  BodyCompressionMethod3[BodyCompressionMethod3["BUFFER"] = 0] = "BUFFER";
})(BodyCompressionMethod2 || (BodyCompressionMethod2 = {}));

// ../../node_modules/apache-arrow/fb/compression-type.mjs
var CompressionType2;
(function(CompressionType3) {
  CompressionType3[CompressionType3["LZ4_FRAME"] = 0] = "LZ4_FRAME";
  CompressionType3[CompressionType3["ZSTD"] = 1] = "ZSTD";
})(CompressionType2 || (CompressionType2 = {}));

// ../../node_modules/apache-arrow/fb/body-compression.mjs
var BodyCompression2 = class _BodyCompression {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsBodyCompression(bb2, obj) {
    return (obj || new _BodyCompression()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsBodyCompression(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _BodyCompression()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * Compressor library.
   * For LZ4_FRAME, each compressed buffer must consist of a single frame.
   */
  codec() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt8(this.bb_pos + offset2) : CompressionType2.LZ4_FRAME;
  }
  /**
   * Indicates the way the record batch body was compressed
   */
  method() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.readInt8(this.bb_pos + offset2) : BodyCompressionMethod2.BUFFER;
  }
  static startBodyCompression(builder) {
    builder.startObject(2);
  }
  static addCodec(builder, codec) {
    builder.addFieldInt8(0, codec, CompressionType2.LZ4_FRAME);
  }
  static addMethod(builder, method) {
    builder.addFieldInt8(1, method, BodyCompressionMethod2.BUFFER);
  }
  static endBodyCompression(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static createBodyCompression(builder, codec, method) {
    _BodyCompression.startBodyCompression(builder);
    _BodyCompression.addCodec(builder, codec);
    _BodyCompression.addMethod(builder, method);
    return _BodyCompression.endBodyCompression(builder);
  }
};

// ../../node_modules/apache-arrow/fb/buffer.mjs
var Buffer3 = class {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  /**
   * The relative offset into the shared memory page where the bytes for this
   * buffer starts
   */
  offset() {
    return this.bb.readInt64(this.bb_pos);
  }
  /**
   * The absolute length (in bytes) of the memory buffer. The memory is found
   * from offset (inclusive) to offset + length (non-inclusive). When building
   * messages using the encapsulated IPC message, padding bytes may be written
   * after a buffer, but such padding bytes do not need to be accounted for in
   * the size here.
   */
  length() {
    return this.bb.readInt64(this.bb_pos + 8);
  }
  static sizeOf() {
    return 16;
  }
  static createBuffer(builder, offset2, length4) {
    builder.prep(8, 16);
    builder.writeInt64(length4);
    builder.writeInt64(offset2);
    return builder.offset();
  }
};

// ../../node_modules/apache-arrow/fb/field-node.mjs
var FieldNode3 = class {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  /**
   * The number of value slots in the Arrow array at this level of a nested
   * tree
   */
  length() {
    return this.bb.readInt64(this.bb_pos);
  }
  /**
   * The number of observed nulls. Fields with null_count == 0 may choose not
   * to write their physical validity bitmap out as a materialized buffer,
   * instead setting the length of the bitmap buffer to 0.
   */
  nullCount() {
    return this.bb.readInt64(this.bb_pos + 8);
  }
  static sizeOf() {
    return 16;
  }
  static createFieldNode(builder, length4, null_count) {
    builder.prep(8, 16);
    builder.writeInt64(null_count);
    builder.writeInt64(length4);
    return builder.offset();
  }
};

// ../../node_modules/apache-arrow/fb/record-batch.mjs
var RecordBatch5 = class _RecordBatch {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsRecordBatch(bb2, obj) {
    return (obj || new _RecordBatch()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsRecordBatch(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _RecordBatch()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  /**
   * number of records / rows. The arrays in the batch should all have this
   * length
   */
  length() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt64(this.bb_pos + offset2) : this.bb.createLong(0, 0);
  }
  /**
   * Nodes correspond to the pre-ordered flattened logical schema
   */
  nodes(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? (obj || new FieldNode3()).__init(this.bb.__vector(this.bb_pos + offset2) + index2 * 16, this.bb) : null;
  }
  nodesLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  /**
   * Buffers correspond to the pre-ordered flattened buffer tree
   *
   * The number of buffers appended to this list depends on the schema. For
   * example, most primitive arrays will have 2 buffers, 1 for the validity
   * bitmap and 1 for the values. For struct arrays, there will only be a
   * single buffer for the validity (nulls) bitmap
   */
  buffers(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? (obj || new Buffer3()).__init(this.bb.__vector(this.bb_pos + offset2) + index2 * 16, this.bb) : null;
  }
  buffersLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  /**
   * Optional compression of the message body
   */
  compression(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? (obj || new BodyCompression2()).__init(this.bb.__indirect(this.bb_pos + offset2), this.bb) : null;
  }
  static startRecordBatch(builder) {
    builder.startObject(4);
  }
  static addLength(builder, length4) {
    builder.addFieldInt64(0, length4, builder.createLong(0, 0));
  }
  static addNodes(builder, nodesOffset) {
    builder.addFieldOffset(1, nodesOffset, 0);
  }
  static startNodesVector(builder, numElems) {
    builder.startVector(16, numElems, 8);
  }
  static addBuffers(builder, buffersOffset) {
    builder.addFieldOffset(2, buffersOffset, 0);
  }
  static startBuffersVector(builder, numElems) {
    builder.startVector(16, numElems, 8);
  }
  static addCompression(builder, compressionOffset) {
    builder.addFieldOffset(3, compressionOffset, 0);
  }
  static endRecordBatch(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
};

// ../../node_modules/apache-arrow/fb/dictionary-batch.mjs
var DictionaryBatch3 = class _DictionaryBatch {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsDictionaryBatch(bb2, obj) {
    return (obj || new _DictionaryBatch()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsDictionaryBatch(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _DictionaryBatch()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  id() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt64(this.bb_pos + offset2) : this.bb.createLong(0, 0);
  }
  data(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? (obj || new RecordBatch5()).__init(this.bb.__indirect(this.bb_pos + offset2), this.bb) : null;
  }
  /**
   * If isDelta is true the values in the dictionary are to be appended to a
   * dictionary with the indicated id. If isDelta is false this dictionary
   * should replace the existing dictionary.
   */
  isDelta() {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? !!this.bb.readInt8(this.bb_pos + offset2) : false;
  }
  static startDictionaryBatch(builder) {
    builder.startObject(3);
  }
  static addId(builder, id2) {
    builder.addFieldInt64(0, id2, builder.createLong(0, 0));
  }
  static addData(builder, dataOffset) {
    builder.addFieldOffset(1, dataOffset, 0);
  }
  static addIsDelta(builder, isDelta) {
    builder.addFieldInt8(2, +isDelta, 0);
  }
  static endDictionaryBatch(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
};

// ../../node_modules/apache-arrow/fb/message-header.mjs
var MessageHeader4;
(function(MessageHeader5) {
  MessageHeader5[MessageHeader5["NONE"] = 0] = "NONE";
  MessageHeader5[MessageHeader5["Schema"] = 1] = "Schema";
  MessageHeader5[MessageHeader5["DictionaryBatch"] = 2] = "DictionaryBatch";
  MessageHeader5[MessageHeader5["RecordBatch"] = 3] = "RecordBatch";
  MessageHeader5[MessageHeader5["Tensor"] = 4] = "Tensor";
  MessageHeader5[MessageHeader5["SparseTensor"] = 5] = "SparseTensor";
})(MessageHeader4 || (MessageHeader4 = {}));

// ../../node_modules/apache-arrow/fb/message.mjs
var Message3 = class _Message {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i2, bb2) {
    this.bb_pos = i2;
    this.bb = bb2;
    return this;
  }
  static getRootAsMessage(bb2, obj) {
    return (obj || new _Message()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  static getSizePrefixedRootAsMessage(bb2, obj) {
    bb2.setPosition(bb2.position() + SIZE_PREFIX_LENGTH2);
    return (obj || new _Message()).__init(bb2.readInt32(bb2.position()) + bb2.position(), bb2);
  }
  version() {
    const offset2 = this.bb.__offset(this.bb_pos, 4);
    return offset2 ? this.bb.readInt16(this.bb_pos + offset2) : MetadataVersion4.V1;
  }
  headerType() {
    const offset2 = this.bb.__offset(this.bb_pos, 6);
    return offset2 ? this.bb.readUint8(this.bb_pos + offset2) : MessageHeader4.NONE;
  }
  // @ts-ignore
  header(obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 8);
    return offset2 ? this.bb.__union(obj, this.bb_pos + offset2) : null;
  }
  bodyLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 10);
    return offset2 ? this.bb.readInt64(this.bb_pos + offset2) : this.bb.createLong(0, 0);
  }
  customMetadata(index2, obj) {
    const offset2 = this.bb.__offset(this.bb_pos, 12);
    return offset2 ? (obj || new KeyValue2()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset2) + index2 * 4), this.bb) : null;
  }
  customMetadataLength() {
    const offset2 = this.bb.__offset(this.bb_pos, 12);
    return offset2 ? this.bb.__vector_len(this.bb_pos + offset2) : 0;
  }
  static startMessage(builder) {
    builder.startObject(5);
  }
  static addVersion(builder, version) {
    builder.addFieldInt16(0, version, MetadataVersion4.V1);
  }
  static addHeaderType(builder, headerType) {
    builder.addFieldInt8(1, headerType, MessageHeader4.NONE);
  }
  static addHeader(builder, headerOffset) {
    builder.addFieldOffset(2, headerOffset, 0);
  }
  static addBodyLength(builder, bodyLength) {
    builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));
  }
  static addCustomMetadata(builder, customMetadataOffset) {
    builder.addFieldOffset(4, customMetadataOffset, 0);
  }
  static createCustomMetadataVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i2 = data.length - 1; i2 >= 0; i2--) {
      builder.addOffset(data[i2]);
    }
    return builder.endVector();
  }
  static startCustomMetadataVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static endMessage(builder) {
    const offset2 = builder.endObject();
    return offset2;
  }
  static finishMessageBuffer(builder, offset2) {
    builder.finish(offset2);
  }
  static finishSizePrefixedMessageBuffer(builder, offset2) {
    builder.finish(offset2, void 0, true);
  }
  static createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {
    _Message.startMessage(builder);
    _Message.addVersion(builder, version);
    _Message.addHeaderType(builder, headerType);
    _Message.addHeader(builder, headerOffset);
    _Message.addBodyLength(builder, bodyLength);
    _Message.addCustomMetadata(builder, customMetadataOffset);
    return _Message.endMessage(builder);
  }
};

// ../../node_modules/apache-arrow/visitor/typeassembler.mjs
var Long3 = Long;
var TypeAssembler2 = class extends Visitor2 {
  visit(node, builder) {
    return node == null || builder == null ? void 0 : super.visit(node, builder);
  }
  visitNull(_node, b2) {
    Null4.startNull(b2);
    return Null4.endNull(b2);
  }
  visitInt(node, b2) {
    Int2.startInt(b2);
    Int2.addBitWidth(b2, node.bitWidth);
    Int2.addIsSigned(b2, node.isSigned);
    return Int2.endInt(b2);
  }
  visitFloat(node, b2) {
    FloatingPoint2.startFloatingPoint(b2);
    FloatingPoint2.addPrecision(b2, node.precision);
    return FloatingPoint2.endFloatingPoint(b2);
  }
  visitBinary(_node, b2) {
    Binary4.startBinary(b2);
    return Binary4.endBinary(b2);
  }
  visitBool(_node, b2) {
    Bool4.startBool(b2);
    return Bool4.endBool(b2);
  }
  visitUtf8(_node, b2) {
    Utf84.startUtf8(b2);
    return Utf84.endUtf8(b2);
  }
  visitDecimal(node, b2) {
    Decimal4.startDecimal(b2);
    Decimal4.addScale(b2, node.scale);
    Decimal4.addPrecision(b2, node.precision);
    Decimal4.addBitWidth(b2, node.bitWidth);
    return Decimal4.endDecimal(b2);
  }
  visitDate(node, b2) {
    Date3.startDate(b2);
    Date3.addUnit(b2, node.unit);
    return Date3.endDate(b2);
  }
  visitTime(node, b2) {
    Time2.startTime(b2);
    Time2.addUnit(b2, node.unit);
    Time2.addBitWidth(b2, node.bitWidth);
    return Time2.endTime(b2);
  }
  visitTimestamp(node, b2) {
    const timezone = node.timezone && b2.createString(node.timezone) || void 0;
    Timestamp2.startTimestamp(b2);
    Timestamp2.addUnit(b2, node.unit);
    if (timezone !== void 0) {
      Timestamp2.addTimezone(b2, timezone);
    }
    return Timestamp2.endTimestamp(b2);
  }
  visitInterval(node, b2) {
    Interval2.startInterval(b2);
    Interval2.addUnit(b2, node.unit);
    return Interval2.endInterval(b2);
  }
  visitList(_node, b2) {
    List4.startList(b2);
    return List4.endList(b2);
  }
  visitStruct(_node, b2) {
    Struct_2.startStruct_(b2);
    return Struct_2.endStruct_(b2);
  }
  visitUnion(node, b2) {
    Union2.startTypeIdsVector(b2, node.typeIds.length);
    const typeIds = Union2.createTypeIdsVector(b2, node.typeIds);
    Union2.startUnion(b2);
    Union2.addMode(b2, node.mode);
    Union2.addTypeIds(b2, typeIds);
    return Union2.endUnion(b2);
  }
  visitDictionary(node, b2) {
    const indexType = this.visit(node.indices, b2);
    DictionaryEncoding2.startDictionaryEncoding(b2);
    DictionaryEncoding2.addId(b2, new Long3(node.id, 0));
    DictionaryEncoding2.addIsOrdered(b2, node.isOrdered);
    if (indexType !== void 0) {
      DictionaryEncoding2.addIndexType(b2, indexType);
    }
    return DictionaryEncoding2.endDictionaryEncoding(b2);
  }
  visitFixedSizeBinary(node, b2) {
    FixedSizeBinary4.startFixedSizeBinary(b2);
    FixedSizeBinary4.addByteWidth(b2, node.byteWidth);
    return FixedSizeBinary4.endFixedSizeBinary(b2);
  }
  visitFixedSizeList(node, b2) {
    FixedSizeList4.startFixedSizeList(b2);
    FixedSizeList4.addListSize(b2, node.listSize);
    return FixedSizeList4.endFixedSizeList(b2);
  }
  visitMap(node, b2) {
    Map3.startMap(b2);
    Map3.addKeysSorted(b2, node.keysSorted);
    return Map3.endMap(b2);
  }
};
var instance16 = new TypeAssembler2();

// ../../node_modules/apache-arrow/ipc/metadata/json.mjs
function schemaFromJSON2(_schema, dictionaries = /* @__PURE__ */ new Map()) {
  return new Schema4(schemaFieldsFromJSON2(_schema, dictionaries), customMetadataFromJSON2(_schema["customMetadata"]), dictionaries);
}
function recordBatchFromJSON2(b2) {
  return new RecordBatch6(b2["count"], fieldNodesFromJSON2(b2["columns"]), buffersFromJSON2(b2["columns"]));
}
function dictionaryBatchFromJSON2(b2) {
  return new DictionaryBatch4(recordBatchFromJSON2(b2["data"]), b2["id"], b2["isDelta"]);
}
function schemaFieldsFromJSON2(_schema, dictionaries) {
  return (_schema["fields"] || []).filter(Boolean).map((f2) => Field4.fromJSON(f2, dictionaries));
}
function fieldChildrenFromJSON2(_field, dictionaries) {
  return (_field["children"] || []).filter(Boolean).map((f2) => Field4.fromJSON(f2, dictionaries));
}
function fieldNodesFromJSON2(xs) {
  return (xs || []).reduce((fieldNodes, column3) => [
    ...fieldNodes,
    new FieldNode4(column3["count"], nullCountFromJSON2(column3["VALIDITY"])),
    ...fieldNodesFromJSON2(column3["children"])
  ], []);
}
function buffersFromJSON2(xs, buffers = []) {
  for (let i2 = -1, n = (xs || []).length; ++i2 < n; ) {
    const column3 = xs[i2];
    column3["VALIDITY"] && buffers.push(new BufferRegion2(buffers.length, column3["VALIDITY"].length));
    column3["TYPE"] && buffers.push(new BufferRegion2(buffers.length, column3["TYPE"].length));
    column3["OFFSET"] && buffers.push(new BufferRegion2(buffers.length, column3["OFFSET"].length));
    column3["DATA"] && buffers.push(new BufferRegion2(buffers.length, column3["DATA"].length));
    buffers = buffersFromJSON2(column3["children"], buffers);
  }
  return buffers;
}
function nullCountFromJSON2(validity) {
  return (validity || []).reduce((sum6, val) => sum6 + +(val === 0), 0);
}
function fieldFromJSON2(_field, dictionaries) {
  let id2;
  let keys;
  let field2;
  let dictMeta;
  let type2;
  let dictType;
  if (!dictionaries || !(dictMeta = _field["dictionary"])) {
    type2 = typeFromJSON2(_field, fieldChildrenFromJSON2(_field, dictionaries));
    field2 = new Field4(_field["name"], type2, _field["nullable"], customMetadataFromJSON2(_field["customMetadata"]));
  } else if (!dictionaries.has(id2 = dictMeta["id"])) {
    keys = (keys = dictMeta["indexType"]) ? indexTypeFromJSON2(keys) : new Int322();
    dictionaries.set(id2, type2 = typeFromJSON2(_field, fieldChildrenFromJSON2(_field, dictionaries)));
    dictType = new Dictionary2(type2, keys, id2, dictMeta["isOrdered"]);
    field2 = new Field4(_field["name"], dictType, _field["nullable"], customMetadataFromJSON2(_field["customMetadata"]));
  } else {
    keys = (keys = dictMeta["indexType"]) ? indexTypeFromJSON2(keys) : new Int322();
    dictType = new Dictionary2(dictionaries.get(id2), keys, id2, dictMeta["isOrdered"]);
    field2 = new Field4(_field["name"], dictType, _field["nullable"], customMetadataFromJSON2(_field["customMetadata"]));
  }
  return field2 || null;
}
function customMetadataFromJSON2(_metadata) {
  return new Map(Object.entries(_metadata || {}));
}
function indexTypeFromJSON2(_type) {
  return new Int_2(_type["isSigned"], _type["bitWidth"]);
}
function typeFromJSON2(f2, children2) {
  const typeId = f2["type"]["name"];
  switch (typeId) {
    case "NONE":
      return new Null3();
    case "null":
      return new Null3();
    case "binary":
      return new Binary3();
    case "utf8":
      return new Utf83();
    case "bool":
      return new Bool3();
    case "list":
      return new List3((children2 || [])[0]);
    case "struct":
      return new Struct2(children2 || []);
    case "struct_":
      return new Struct2(children2 || []);
  }
  switch (typeId) {
    case "int": {
      const t = f2["type"];
      return new Int_2(t["isSigned"], t["bitWidth"]);
    }
    case "floatingpoint": {
      const t = f2["type"];
      return new Float2(Precision3[t["precision"]]);
    }
    case "decimal": {
      const t = f2["type"];
      return new Decimal3(t["scale"], t["precision"], t["bitWidth"]);
    }
    case "date": {
      const t = f2["type"];
      return new Date_2(DateUnit3[t["unit"]]);
    }
    case "time": {
      const t = f2["type"];
      return new Time_2(TimeUnit3[t["unit"]], t["bitWidth"]);
    }
    case "timestamp": {
      const t = f2["type"];
      return new Timestamp_2(TimeUnit3[t["unit"]], t["timezone"]);
    }
    case "interval": {
      const t = f2["type"];
      return new Interval_2(IntervalUnit3[t["unit"]]);
    }
    case "union": {
      const t = f2["type"];
      return new Union_2(UnionMode3[t["mode"]], t["typeIds"] || [], children2 || []);
    }
    case "fixedsizebinary": {
      const t = f2["type"];
      return new FixedSizeBinary3(t["byteWidth"]);
    }
    case "fixedsizelist": {
      const t = f2["type"];
      return new FixedSizeList3(t["listSize"], (children2 || [])[0]);
    }
    case "map": {
      const t = f2["type"];
      return new Map_2((children2 || [])[0], t["keysSorted"]);
    }
  }
  throw new Error(`Unrecognized type: "${typeId}"`);
}

// ../../node_modules/apache-arrow/ipc/metadata/message.mjs
var Long4 = Long;
var Builder8 = Builder6;
var ByteBuffer6 = ByteBuffer4;
var Message4 = class _Message {
  constructor(bodyLength, version, headerType, header) {
    this._version = version;
    this._headerType = headerType;
    this.body = new Uint8Array(0);
    header && (this._createHeader = () => header);
    this._bodyLength = typeof bodyLength === "number" ? bodyLength : bodyLength.low;
  }
  /** @nocollapse */
  static fromJSON(msg, headerType) {
    const message = new _Message(0, MetadataVersion3.V4, headerType);
    message._createHeader = messageHeaderFromJSON2(msg, headerType);
    return message;
  }
  /** @nocollapse */
  static decode(buf) {
    buf = new ByteBuffer6(toUint8Array2(buf));
    const _message = Message3.getRootAsMessage(buf);
    const bodyLength = _message.bodyLength();
    const version = _message.version();
    const headerType = _message.headerType();
    const message = new _Message(bodyLength, version, headerType);
    message._createHeader = decodeMessageHeader2(_message, headerType);
    return message;
  }
  /** @nocollapse */
  static encode(message) {
    const b2 = new Builder8();
    let headerOffset = -1;
    if (message.isSchema()) {
      headerOffset = Schema4.encode(b2, message.header());
    } else if (message.isRecordBatch()) {
      headerOffset = RecordBatch6.encode(b2, message.header());
    } else if (message.isDictionaryBatch()) {
      headerOffset = DictionaryBatch4.encode(b2, message.header());
    }
    Message3.startMessage(b2);
    Message3.addVersion(b2, MetadataVersion3.V4);
    Message3.addHeader(b2, headerOffset);
    Message3.addHeaderType(b2, message.headerType);
    Message3.addBodyLength(b2, new Long4(message.bodyLength, 0));
    Message3.finishMessageBuffer(b2, Message3.endMessage(b2));
    return b2.asUint8Array();
  }
  /** @nocollapse */
  static from(header, bodyLength = 0) {
    if (header instanceof Schema4) {
      return new _Message(0, MetadataVersion3.V4, MessageHeader3.Schema, header);
    }
    if (header instanceof RecordBatch6) {
      return new _Message(bodyLength, MetadataVersion3.V4, MessageHeader3.RecordBatch, header);
    }
    if (header instanceof DictionaryBatch4) {
      return new _Message(bodyLength, MetadataVersion3.V4, MessageHeader3.DictionaryBatch, header);
    }
    throw new Error(`Unrecognized Message header: ${header}`);
  }
  get type() {
    return this.headerType;
  }
  get version() {
    return this._version;
  }
  get headerType() {
    return this._headerType;
  }
  get bodyLength() {
    return this._bodyLength;
  }
  header() {
    return this._createHeader();
  }
  isSchema() {
    return this.headerType === MessageHeader3.Schema;
  }
  isRecordBatch() {
    return this.headerType === MessageHeader3.RecordBatch;
  }
  isDictionaryBatch() {
    return this.headerType === MessageHeader3.DictionaryBatch;
  }
};
var RecordBatch6 = class {
  constructor(length4, nodes, buffers) {
    this._nodes = nodes;
    this._buffers = buffers;
    this._length = typeof length4 === "number" ? length4 : length4.low;
  }
  get nodes() {
    return this._nodes;
  }
  get length() {
    return this._length;
  }
  get buffers() {
    return this._buffers;
  }
};
var DictionaryBatch4 = class {
  constructor(data, id2, isDelta = false) {
    this._data = data;
    this._isDelta = isDelta;
    this._id = typeof id2 === "number" ? id2 : id2.low;
  }
  get id() {
    return this._id;
  }
  get data() {
    return this._data;
  }
  get isDelta() {
    return this._isDelta;
  }
  get length() {
    return this.data.length;
  }
  get nodes() {
    return this.data.nodes;
  }
  get buffers() {
    return this.data.buffers;
  }
};
var BufferRegion2 = class {
  constructor(offset2, length4) {
    this.offset = typeof offset2 === "number" ? offset2 : offset2.low;
    this.length = typeof length4 === "number" ? length4 : length4.low;
  }
};
var FieldNode4 = class {
  constructor(length4, nullCount) {
    this.length = typeof length4 === "number" ? length4 : length4.low;
    this.nullCount = typeof nullCount === "number" ? nullCount : nullCount.low;
  }
};
function messageHeaderFromJSON2(message, type2) {
  return () => {
    switch (type2) {
      case MessageHeader3.Schema:
        return Schema4.fromJSON(message);
      case MessageHeader3.RecordBatch:
        return RecordBatch6.fromJSON(message);
      case MessageHeader3.DictionaryBatch:
        return DictionaryBatch4.fromJSON(message);
    }
    throw new Error(`Unrecognized Message type: { name: ${MessageHeader3[type2]}, type: ${type2} }`);
  };
}
function decodeMessageHeader2(message, type2) {
  return () => {
    switch (type2) {
      case MessageHeader3.Schema:
        return Schema4.decode(message.header(new Schema3()));
      case MessageHeader3.RecordBatch:
        return RecordBatch6.decode(message.header(new RecordBatch5()), message.version());
      case MessageHeader3.DictionaryBatch:
        return DictionaryBatch4.decode(message.header(new DictionaryBatch3()), message.version());
    }
    throw new Error(`Unrecognized Message type: { name: ${MessageHeader3[type2]}, type: ${type2} }`);
  };
}
Field4["encode"] = encodeField2;
Field4["decode"] = decodeField2;
Field4["fromJSON"] = fieldFromJSON2;
Schema4["encode"] = encodeSchema2;
Schema4["decode"] = decodeSchema2;
Schema4["fromJSON"] = schemaFromJSON2;
RecordBatch6["encode"] = encodeRecordBatch2;
RecordBatch6["decode"] = decodeRecordBatch2;
RecordBatch6["fromJSON"] = recordBatchFromJSON2;
DictionaryBatch4["encode"] = encodeDictionaryBatch2;
DictionaryBatch4["decode"] = decodeDictionaryBatch2;
DictionaryBatch4["fromJSON"] = dictionaryBatchFromJSON2;
FieldNode4["encode"] = encodeFieldNode2;
FieldNode4["decode"] = decodeFieldNode2;
BufferRegion2["encode"] = encodeBufferRegion2;
BufferRegion2["decode"] = decodeBufferRegion2;
function decodeSchema2(_schema, dictionaries = /* @__PURE__ */ new Map()) {
  const fields = decodeSchemaFields2(_schema, dictionaries);
  return new Schema4(fields, decodeCustomMetadata2(_schema), dictionaries);
}
function decodeRecordBatch2(batch, version = MetadataVersion3.V4) {
  if (batch.compression() !== null) {
    throw new Error("Record batch compression not implemented");
  }
  return new RecordBatch6(batch.length(), decodeFieldNodes2(batch), decodeBuffers2(batch, version));
}
function decodeDictionaryBatch2(batch, version = MetadataVersion3.V4) {
  return new DictionaryBatch4(RecordBatch6.decode(batch.data(), version), batch.id(), batch.isDelta());
}
function decodeBufferRegion2(b2) {
  return new BufferRegion2(b2.offset(), b2.length());
}
function decodeFieldNode2(f2) {
  return new FieldNode4(f2.length(), f2.nullCount());
}
function decodeFieldNodes2(batch) {
  const nodes = [];
  for (let f2, i2 = -1, j2 = -1, n = batch.nodesLength(); ++i2 < n; ) {
    if (f2 = batch.nodes(i2)) {
      nodes[++j2] = FieldNode4.decode(f2);
    }
  }
  return nodes;
}
function decodeBuffers2(batch, version) {
  const bufferRegions = [];
  for (let b2, i2 = -1, j2 = -1, n = batch.buffersLength(); ++i2 < n; ) {
    if (b2 = batch.buffers(i2)) {
      if (version < MetadataVersion3.V4) {
        b2.bb_pos += 8 * (i2 + 1);
      }
      bufferRegions[++j2] = BufferRegion2.decode(b2);
    }
  }
  return bufferRegions;
}
function decodeSchemaFields2(schema, dictionaries) {
  const fields = [];
  for (let f2, i2 = -1, j2 = -1, n = schema.fieldsLength(); ++i2 < n; ) {
    if (f2 = schema.fields(i2)) {
      fields[++j2] = Field4.decode(f2, dictionaries);
    }
  }
  return fields;
}
function decodeFieldChildren2(field2, dictionaries) {
  const children2 = [];
  for (let f2, i2 = -1, j2 = -1, n = field2.childrenLength(); ++i2 < n; ) {
    if (f2 = field2.children(i2)) {
      children2[++j2] = Field4.decode(f2, dictionaries);
    }
  }
  return children2;
}
function decodeField2(f2, dictionaries) {
  let id2;
  let field2;
  let type2;
  let keys;
  let dictType;
  let dictMeta;
  if (!dictionaries || !(dictMeta = f2.dictionary())) {
    type2 = decodeFieldType2(f2, decodeFieldChildren2(f2, dictionaries));
    field2 = new Field4(f2.name(), type2, f2.nullable(), decodeCustomMetadata2(f2));
  } else if (!dictionaries.has(id2 = dictMeta.id().low)) {
    keys = (keys = dictMeta.indexType()) ? decodeIndexType2(keys) : new Int322();
    dictionaries.set(id2, type2 = decodeFieldType2(f2, decodeFieldChildren2(f2, dictionaries)));
    dictType = new Dictionary2(type2, keys, id2, dictMeta.isOrdered());
    field2 = new Field4(f2.name(), dictType, f2.nullable(), decodeCustomMetadata2(f2));
  } else {
    keys = (keys = dictMeta.indexType()) ? decodeIndexType2(keys) : new Int322();
    dictType = new Dictionary2(dictionaries.get(id2), keys, id2, dictMeta.isOrdered());
    field2 = new Field4(f2.name(), dictType, f2.nullable(), decodeCustomMetadata2(f2));
  }
  return field2 || null;
}
function decodeCustomMetadata2(parent) {
  const data = /* @__PURE__ */ new Map();
  if (parent) {
    for (let entry, key, i2 = -1, n = Math.trunc(parent.customMetadataLength()); ++i2 < n; ) {
      if ((entry = parent.customMetadata(i2)) && (key = entry.key()) != null) {
        data.set(key, entry.value());
      }
    }
  }
  return data;
}
function decodeIndexType2(_type) {
  return new Int_2(_type.isSigned(), _type.bitWidth());
}
function decodeFieldType2(f2, children2) {
  const typeId = f2.typeType();
  switch (typeId) {
    case Type4["NONE"]:
      return new Null3();
    case Type4["Null"]:
      return new Null3();
    case Type4["Binary"]:
      return new Binary3();
    case Type4["Utf8"]:
      return new Utf83();
    case Type4["Bool"]:
      return new Bool3();
    case Type4["List"]:
      return new List3((children2 || [])[0]);
    case Type4["Struct_"]:
      return new Struct2(children2 || []);
  }
  switch (typeId) {
    case Type4["Int"]: {
      const t = f2.type(new Int2());
      return new Int_2(t.isSigned(), t.bitWidth());
    }
    case Type4["FloatingPoint"]: {
      const t = f2.type(new FloatingPoint2());
      return new Float2(t.precision());
    }
    case Type4["Decimal"]: {
      const t = f2.type(new Decimal4());
      return new Decimal3(t.scale(), t.precision(), t.bitWidth());
    }
    case Type4["Date"]: {
      const t = f2.type(new Date3());
      return new Date_2(t.unit());
    }
    case Type4["Time"]: {
      const t = f2.type(new Time2());
      return new Time_2(t.unit(), t.bitWidth());
    }
    case Type4["Timestamp"]: {
      const t = f2.type(new Timestamp2());
      return new Timestamp_2(t.unit(), t.timezone());
    }
    case Type4["Interval"]: {
      const t = f2.type(new Interval2());
      return new Interval_2(t.unit());
    }
    case Type4["Union"]: {
      const t = f2.type(new Union2());
      return new Union_2(t.mode(), t.typeIdsArray() || [], children2 || []);
    }
    case Type4["FixedSizeBinary"]: {
      const t = f2.type(new FixedSizeBinary4());
      return new FixedSizeBinary3(t.byteWidth());
    }
    case Type4["FixedSizeList"]: {
      const t = f2.type(new FixedSizeList4());
      return new FixedSizeList3(t.listSize(), (children2 || [])[0]);
    }
    case Type4["Map"]: {
      const t = f2.type(new Map3());
      return new Map_2((children2 || [])[0], t.keysSorted());
    }
  }
  throw new Error(`Unrecognized type: "${Type4[typeId]}" (${typeId})`);
}
function encodeSchema2(b2, schema) {
  const fieldOffsets = schema.fields.map((f2) => Field4.encode(b2, f2));
  Schema3.startFieldsVector(b2, fieldOffsets.length);
  const fieldsVectorOffset = Schema3.createFieldsVector(b2, fieldOffsets);
  const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : Schema3.createCustomMetadataVector(b2, [...schema.metadata].map(([k3, v3]) => {
    const key = b2.createString(`${k3}`);
    const val = b2.createString(`${v3}`);
    KeyValue2.startKeyValue(b2);
    KeyValue2.addKey(b2, key);
    KeyValue2.addValue(b2, val);
    return KeyValue2.endKeyValue(b2);
  }));
  Schema3.startSchema(b2);
  Schema3.addFields(b2, fieldsVectorOffset);
  Schema3.addEndianness(b2, platformIsLittleEndian2 ? Endianness2.Little : Endianness2.Big);
  if (metadataOffset !== -1) {
    Schema3.addCustomMetadata(b2, metadataOffset);
  }
  return Schema3.endSchema(b2);
}
function encodeField2(b2, field2) {
  let nameOffset = -1;
  let typeOffset = -1;
  let dictionaryOffset = -1;
  const type2 = field2.type;
  let typeId = field2.typeId;
  if (!DataType2.isDictionary(type2)) {
    typeOffset = instance16.visit(type2, b2);
  } else {
    typeId = type2.dictionary.typeId;
    dictionaryOffset = instance16.visit(type2, b2);
    typeOffset = instance16.visit(type2.dictionary, b2);
  }
  const childOffsets = (type2.children || []).map((f2) => Field4.encode(b2, f2));
  const childrenVectorOffset = Field3.createChildrenVector(b2, childOffsets);
  const metadataOffset = !(field2.metadata && field2.metadata.size > 0) ? -1 : Field3.createCustomMetadataVector(b2, [...field2.metadata].map(([k3, v3]) => {
    const key = b2.createString(`${k3}`);
    const val = b2.createString(`${v3}`);
    KeyValue2.startKeyValue(b2);
    KeyValue2.addKey(b2, key);
    KeyValue2.addValue(b2, val);
    return KeyValue2.endKeyValue(b2);
  }));
  if (field2.name) {
    nameOffset = b2.createString(field2.name);
  }
  Field3.startField(b2);
  Field3.addType(b2, typeOffset);
  Field3.addTypeType(b2, typeId);
  Field3.addChildren(b2, childrenVectorOffset);
  Field3.addNullable(b2, !!field2.nullable);
  if (nameOffset !== -1) {
    Field3.addName(b2, nameOffset);
  }
  if (dictionaryOffset !== -1) {
    Field3.addDictionary(b2, dictionaryOffset);
  }
  if (metadataOffset !== -1) {
    Field3.addCustomMetadata(b2, metadataOffset);
  }
  return Field3.endField(b2);
}
function encodeRecordBatch2(b2, recordBatch) {
  const nodes = recordBatch.nodes || [];
  const buffers = recordBatch.buffers || [];
  RecordBatch5.startNodesVector(b2, nodes.length);
  for (const n of nodes.slice().reverse())
    FieldNode4.encode(b2, n);
  const nodesVectorOffset = b2.endVector();
  RecordBatch5.startBuffersVector(b2, buffers.length);
  for (const b_ of buffers.slice().reverse())
    BufferRegion2.encode(b2, b_);
  const buffersVectorOffset = b2.endVector();
  RecordBatch5.startRecordBatch(b2);
  RecordBatch5.addLength(b2, new Long4(recordBatch.length, 0));
  RecordBatch5.addNodes(b2, nodesVectorOffset);
  RecordBatch5.addBuffers(b2, buffersVectorOffset);
  return RecordBatch5.endRecordBatch(b2);
}
function encodeDictionaryBatch2(b2, dictionaryBatch) {
  const dataOffset = RecordBatch6.encode(b2, dictionaryBatch.data);
  DictionaryBatch3.startDictionaryBatch(b2);
  DictionaryBatch3.addId(b2, new Long4(dictionaryBatch.id, 0));
  DictionaryBatch3.addIsDelta(b2, dictionaryBatch.isDelta);
  DictionaryBatch3.addData(b2, dataOffset);
  return DictionaryBatch3.endDictionaryBatch(b2);
}
function encodeFieldNode2(b2, node) {
  return FieldNode3.createFieldNode(b2, new Long4(node.length, 0), new Long4(node.nullCount, 0));
}
function encodeBufferRegion2(b2, node) {
  return Buffer3.createBuffer(b2, new Long4(node.offset, 0), new Long4(node.length, 0));
}
var platformIsLittleEndian2 = (() => {
  const buffer = new ArrayBuffer(2);
  new DataView(buffer).setInt16(
    0,
    256,
    true
    /* littleEndian */
  );
  return new Int16Array(buffer)[0] === 256;
})();

// ../../node_modules/apache-arrow/ipc/message.mjs
var invalidMessageType2 = (type2) => `Expected ${MessageHeader3[type2]} Message in stream, but was null or length 0.`;
var nullMessage2 = (type2) => `Header pointer of flatbuffer-encoded ${MessageHeader3[type2]} Message is null or length 0.`;
var invalidMessageMetadata2 = (expected, actual) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;
var invalidMessageBodyLength2 = (expected, actual) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;
var MessageReader2 = class {
  constructor(source) {
    this.source = source instanceof ByteStream2 ? source : new ByteStream2(source);
  }
  [Symbol.iterator]() {
    return this;
  }
  next() {
    let r;
    if ((r = this.readMetadataLength()).done) {
      return ITERATOR_DONE2;
    }
    if (r.value === -1 && (r = this.readMetadataLength()).done) {
      return ITERATOR_DONE2;
    }
    if ((r = this.readMetadata(r.value)).done) {
      return ITERATOR_DONE2;
    }
    return r;
  }
  throw(value) {
    return this.source.throw(value);
  }
  return(value) {
    return this.source.return(value);
  }
  readMessage(type2) {
    let r;
    if ((r = this.next()).done) {
      return null;
    }
    if (type2 != null && r.value.headerType !== type2) {
      throw new Error(invalidMessageType2(type2));
    }
    return r.value;
  }
  readMessageBody(bodyLength) {
    if (bodyLength <= 0) {
      return new Uint8Array(0);
    }
    const buf = toUint8Array2(this.source.read(bodyLength));
    if (buf.byteLength < bodyLength) {
      throw new Error(invalidMessageBodyLength2(bodyLength, buf.byteLength));
    }
    return (
      /* 1. */
      buf.byteOffset % 8 === 0 && /* 2. */
      buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice()
    );
  }
  readSchema(throwIfNull = false) {
    const type2 = MessageHeader3.Schema;
    const message = this.readMessage(type2);
    const schema = message === null || message === void 0 ? void 0 : message.header();
    if (throwIfNull && !schema) {
      throw new Error(nullMessage2(type2));
    }
    return schema;
  }
  readMetadataLength() {
    const buf = this.source.read(PADDING2);
    const bb2 = buf && new ByteBuffer4(buf);
    const len = (bb2 === null || bb2 === void 0 ? void 0 : bb2.readInt32(0)) || 0;
    return { done: len === 0, value: len };
  }
  readMetadata(metadataLength) {
    const buf = this.source.read(metadataLength);
    if (!buf) {
      return ITERATOR_DONE2;
    }
    if (buf.byteLength < metadataLength) {
      throw new Error(invalidMessageMetadata2(metadataLength, buf.byteLength));
    }
    return { done: false, value: Message4.decode(buf) };
  }
};
var AsyncMessageReader2 = class {
  constructor(source, byteLength) {
    this.source = source instanceof AsyncByteStream2 ? source : isFileHandle2(source) ? new AsyncRandomAccessFile2(source, byteLength) : new AsyncByteStream2(source);
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  next() {
    return __awaiter(this, void 0, void 0, function* () {
      let r;
      if ((r = yield this.readMetadataLength()).done) {
        return ITERATOR_DONE2;
      }
      if (r.value === -1 && (r = yield this.readMetadataLength()).done) {
        return ITERATOR_DONE2;
      }
      if ((r = yield this.readMetadata(r.value)).done) {
        return ITERATOR_DONE2;
      }
      return r;
    });
  }
  throw(value) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.source.throw(value);
    });
  }
  return(value) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.source.return(value);
    });
  }
  readMessage(type2) {
    return __awaiter(this, void 0, void 0, function* () {
      let r;
      if ((r = yield this.next()).done) {
        return null;
      }
      if (type2 != null && r.value.headerType !== type2) {
        throw new Error(invalidMessageType2(type2));
      }
      return r.value;
    });
  }
  readMessageBody(bodyLength) {
    return __awaiter(this, void 0, void 0, function* () {
      if (bodyLength <= 0) {
        return new Uint8Array(0);
      }
      const buf = toUint8Array2(yield this.source.read(bodyLength));
      if (buf.byteLength < bodyLength) {
        throw new Error(invalidMessageBodyLength2(bodyLength, buf.byteLength));
      }
      return (
        /* 1. */
        buf.byteOffset % 8 === 0 && /* 2. */
        buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice()
      );
    });
  }
  readSchema(throwIfNull = false) {
    return __awaiter(this, void 0, void 0, function* () {
      const type2 = MessageHeader3.Schema;
      const message = yield this.readMessage(type2);
      const schema = message === null || message === void 0 ? void 0 : message.header();
      if (throwIfNull && !schema) {
        throw new Error(nullMessage2(type2));
      }
      return schema;
    });
  }
  readMetadataLength() {
    return __awaiter(this, void 0, void 0, function* () {
      const buf = yield this.source.read(PADDING2);
      const bb2 = buf && new ByteBuffer4(buf);
      const len = (bb2 === null || bb2 === void 0 ? void 0 : bb2.readInt32(0)) || 0;
      return { done: len === 0, value: len };
    });
  }
  readMetadata(metadataLength) {
    return __awaiter(this, void 0, void 0, function* () {
      const buf = yield this.source.read(metadataLength);
      if (!buf) {
        return ITERATOR_DONE2;
      }
      if (buf.byteLength < metadataLength) {
        throw new Error(invalidMessageMetadata2(metadataLength, buf.byteLength));
      }
      return { done: false, value: Message4.decode(buf) };
    });
  }
};
var JSONMessageReader2 = class extends MessageReader2 {
  constructor(source) {
    super(new Uint8Array(0));
    this._schema = false;
    this._body = [];
    this._batchIndex = 0;
    this._dictionaryIndex = 0;
    this._json = source instanceof ArrowJSON2 ? source : new ArrowJSON2(source);
  }
  next() {
    const { _json } = this;
    if (!this._schema) {
      this._schema = true;
      const message = Message4.fromJSON(_json.schema, MessageHeader3.Schema);
      return { done: false, value: message };
    }
    if (this._dictionaryIndex < _json.dictionaries.length) {
      const batch = _json.dictionaries[this._dictionaryIndex++];
      this._body = batch["data"]["columns"];
      const message = Message4.fromJSON(batch, MessageHeader3.DictionaryBatch);
      return { done: false, value: message };
    }
    if (this._batchIndex < _json.batches.length) {
      const batch = _json.batches[this._batchIndex++];
      this._body = batch["columns"];
      const message = Message4.fromJSON(batch, MessageHeader3.RecordBatch);
      return { done: false, value: message };
    }
    this._body = [];
    return ITERATOR_DONE2;
  }
  readMessageBody(_bodyLength) {
    return flattenDataSources(this._body);
    function flattenDataSources(xs) {
      return (xs || []).reduce((buffers, column3) => [
        ...buffers,
        ...column3["VALIDITY"] && [column3["VALIDITY"]] || [],
        ...column3["TYPE"] && [column3["TYPE"]] || [],
        ...column3["OFFSET"] && [column3["OFFSET"]] || [],
        ...column3["DATA"] && [column3["DATA"]] || [],
        ...flattenDataSources(column3["children"])
      ], []);
    }
  }
  readMessage(type2) {
    let r;
    if ((r = this.next()).done) {
      return null;
    }
    if (type2 != null && r.value.headerType !== type2) {
      throw new Error(invalidMessageType2(type2));
    }
    return r.value;
  }
  readSchema() {
    const type2 = MessageHeader3.Schema;
    const message = this.readMessage(type2);
    const schema = message === null || message === void 0 ? void 0 : message.header();
    if (!message || !schema) {
      throw new Error(nullMessage2(type2));
    }
    return schema;
  }
};
var PADDING2 = 4;
var MAGIC_STR2 = "ARROW1";
var MAGIC2 = new Uint8Array(MAGIC_STR2.length);
for (let i2 = 0; i2 < MAGIC_STR2.length; i2 += 1) {
  MAGIC2[i2] = MAGIC_STR2.codePointAt(i2);
}
function checkForMagicArrowString2(buffer, index2 = 0) {
  for (let i2 = -1, n = MAGIC2.length; ++i2 < n; ) {
    if (MAGIC2[i2] !== buffer[index2 + i2]) {
      return false;
    }
  }
  return true;
}
var magicLength2 = MAGIC2.length;
var magicAndPadding2 = magicLength2 + PADDING2;
var magicX2AndPadding2 = magicLength2 * 2 + PADDING2;

// ../../node_modules/apache-arrow/ipc/reader.mjs
var RecordBatchReader2 = class _RecordBatchReader extends ReadableInterop2 {
  constructor(impl) {
    super();
    this._impl = impl;
  }
  get closed() {
    return this._impl.closed;
  }
  get schema() {
    return this._impl.schema;
  }
  get autoDestroy() {
    return this._impl.autoDestroy;
  }
  get dictionaries() {
    return this._impl.dictionaries;
  }
  get numDictionaries() {
    return this._impl.numDictionaries;
  }
  get numRecordBatches() {
    return this._impl.numRecordBatches;
  }
  get footer() {
    return this._impl.isFile() ? this._impl.footer : null;
  }
  isSync() {
    return this._impl.isSync();
  }
  isAsync() {
    return this._impl.isAsync();
  }
  isFile() {
    return this._impl.isFile();
  }
  isStream() {
    return this._impl.isStream();
  }
  next() {
    return this._impl.next();
  }
  throw(value) {
    return this._impl.throw(value);
  }
  return(value) {
    return this._impl.return(value);
  }
  cancel() {
    return this._impl.cancel();
  }
  reset(schema) {
    this._impl.reset(schema);
    this._DOMStream = void 0;
    this._nodeStream = void 0;
    return this;
  }
  open(options) {
    const opening = this._impl.open(options);
    return isPromise2(opening) ? opening.then(() => this) : this;
  }
  readRecordBatch(index2) {
    return this._impl.isFile() ? this._impl.readRecordBatch(index2) : null;
  }
  [Symbol.iterator]() {
    return this._impl[Symbol.iterator]();
  }
  [Symbol.asyncIterator]() {
    return this._impl[Symbol.asyncIterator]();
  }
  toDOMStream() {
    return adapters_default2.toDOMStream(this.isSync() ? { [Symbol.iterator]: () => this } : { [Symbol.asyncIterator]: () => this });
  }
  toNodeStream() {
    return adapters_default2.toNodeStream(this.isSync() ? { [Symbol.iterator]: () => this } : { [Symbol.asyncIterator]: () => this }, { objectMode: true });
  }
  /** @nocollapse */
  // @ts-ignore
  static throughNode(options) {
    throw new Error(`"throughNode" not available in this environment`);
  }
  /** @nocollapse */
  static throughDOM(writableStrategy, readableStrategy) {
    throw new Error(`"throughDOM" not available in this environment`);
  }
  /** @nocollapse */
  static from(source) {
    if (source instanceof _RecordBatchReader) {
      return source;
    } else if (isArrowJSON2(source)) {
      return fromArrowJSON2(source);
    } else if (isFileHandle2(source)) {
      return fromFileHandle2(source);
    } else if (isPromise2(source)) {
      return (() => __awaiter(this, void 0, void 0, function* () {
        return yield _RecordBatchReader.from(yield source);
      }))();
    } else if (isFetchResponse2(source) || isReadableDOMStream2(source) || isReadableNodeStream2(source) || isAsyncIterable2(source)) {
      return fromAsyncByteStream2(new AsyncByteStream2(source));
    }
    return fromByteStream2(new ByteStream2(source));
  }
  /** @nocollapse */
  static readAll(source) {
    if (source instanceof _RecordBatchReader) {
      return source.isSync() ? readAllSync2(source) : readAllAsync2(source);
    } else if (isArrowJSON2(source) || ArrayBuffer.isView(source) || isIterable2(source) || isIteratorResult2(source)) {
      return readAllSync2(source);
    }
    return readAllAsync2(source);
  }
};
var RecordBatchStreamReader2 = class extends RecordBatchReader2 {
  constructor(_impl) {
    super(_impl);
    this._impl = _impl;
  }
  readAll() {
    return [...this];
  }
  [Symbol.iterator]() {
    return this._impl[Symbol.iterator]();
  }
  [Symbol.asyncIterator]() {
    return __asyncGenerator(this, arguments, function* _a9() {
      yield __await(yield* __asyncDelegator(__asyncValues(this[Symbol.iterator]())));
    });
  }
};
var AsyncRecordBatchStreamReader2 = class extends RecordBatchReader2 {
  constructor(_impl) {
    super(_impl);
    this._impl = _impl;
  }
  readAll() {
    var e_1, _a9;
    return __awaiter(this, void 0, void 0, function* () {
      const batches = new Array();
      try {
        for (var _b3 = __asyncValues(this), _c3; _c3 = yield _b3.next(), !_c3.done; ) {
          const batch = _c3.value;
          batches.push(batch);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c3 && !_c3.done && (_a9 = _b3.return))
            yield _a9.call(_b3);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return batches;
    });
  }
  [Symbol.iterator]() {
    throw new Error(`AsyncRecordBatchStreamReader is not Iterable`);
  }
  [Symbol.asyncIterator]() {
    return this._impl[Symbol.asyncIterator]();
  }
};
var RecordBatchFileReader2 = class extends RecordBatchStreamReader2 {
  constructor(_impl) {
    super(_impl);
    this._impl = _impl;
  }
};
var AsyncRecordBatchFileReader2 = class extends AsyncRecordBatchStreamReader2 {
  constructor(_impl) {
    super(_impl);
    this._impl = _impl;
  }
};
var RecordBatchReaderImpl2 = class {
  constructor(dictionaries = /* @__PURE__ */ new Map()) {
    this.closed = false;
    this.autoDestroy = true;
    this._dictionaryIndex = 0;
    this._recordBatchIndex = 0;
    this.dictionaries = dictionaries;
  }
  get numDictionaries() {
    return this._dictionaryIndex;
  }
  get numRecordBatches() {
    return this._recordBatchIndex;
  }
  isSync() {
    return false;
  }
  isAsync() {
    return false;
  }
  isFile() {
    return false;
  }
  isStream() {
    return false;
  }
  reset(schema) {
    this._dictionaryIndex = 0;
    this._recordBatchIndex = 0;
    this.schema = schema;
    this.dictionaries = /* @__PURE__ */ new Map();
    return this;
  }
  _loadRecordBatch(header, body) {
    const children2 = this._loadVectors(header, body, this.schema.fields);
    const data = makeData2({ type: new Struct2(this.schema.fields), length: header.length, children: children2 });
    return new RecordBatch4(this.schema, data);
  }
  _loadDictionaryBatch(header, body) {
    const { id: id2, isDelta } = header;
    const { dictionaries, schema } = this;
    const dictionary = dictionaries.get(id2);
    if (isDelta || !dictionary) {
      const type2 = schema.dictionaries.get(id2);
      const data = this._loadVectors(header.data, body, [type2]);
      return (dictionary && isDelta ? dictionary.concat(new Vector2(data)) : new Vector2(data)).memoize();
    }
    return dictionary.memoize();
  }
  _loadVectors(header, body, types) {
    return new VectorLoader2(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
  }
};
var RecordBatchStreamReaderImpl2 = class extends RecordBatchReaderImpl2 {
  constructor(source, dictionaries) {
    super(dictionaries);
    this._reader = !isArrowJSON2(source) ? new MessageReader2(this._handle = source) : new JSONMessageReader2(this._handle = source);
  }
  isSync() {
    return true;
  }
  isStream() {
    return true;
  }
  [Symbol.iterator]() {
    return this;
  }
  cancel() {
    if (!this.closed && (this.closed = true)) {
      this.reset()._reader.return();
      this._reader = null;
      this.dictionaries = null;
    }
  }
  open(options) {
    if (!this.closed) {
      this.autoDestroy = shouldAutoDestroy2(this, options);
      if (!(this.schema || (this.schema = this._reader.readSchema()))) {
        this.cancel();
      }
    }
    return this;
  }
  throw(value) {
    if (!this.closed && this.autoDestroy && (this.closed = true)) {
      return this.reset()._reader.throw(value);
    }
    return ITERATOR_DONE2;
  }
  return(value) {
    if (!this.closed && this.autoDestroy && (this.closed = true)) {
      return this.reset()._reader.return(value);
    }
    return ITERATOR_DONE2;
  }
  next() {
    if (this.closed) {
      return ITERATOR_DONE2;
    }
    let message;
    const { _reader: reader } = this;
    while (message = this._readNextMessageAndValidate()) {
      if (message.isSchema()) {
        this.reset(message.header());
      } else if (message.isRecordBatch()) {
        this._recordBatchIndex++;
        const header = message.header();
        const buffer = reader.readMessageBody(message.bodyLength);
        const recordBatch = this._loadRecordBatch(header, buffer);
        return { done: false, value: recordBatch };
      } else if (message.isDictionaryBatch()) {
        this._dictionaryIndex++;
        const header = message.header();
        const buffer = reader.readMessageBody(message.bodyLength);
        const vector3 = this._loadDictionaryBatch(header, buffer);
        this.dictionaries.set(header.id, vector3);
      }
    }
    if (this.schema && this._recordBatchIndex === 0) {
      this._recordBatchIndex++;
      return { done: false, value: new _InternalEmptyPlaceholderRecordBatch2(this.schema) };
    }
    return this.return();
  }
  _readNextMessageAndValidate(type2) {
    return this._reader.readMessage(type2);
  }
};
var AsyncRecordBatchStreamReaderImpl2 = class extends RecordBatchReaderImpl2 {
  constructor(source, dictionaries) {
    super(dictionaries);
    this._reader = new AsyncMessageReader2(this._handle = source);
  }
  isAsync() {
    return true;
  }
  isStream() {
    return true;
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  cancel() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.closed && (this.closed = true)) {
        yield this.reset()._reader.return();
        this._reader = null;
        this.dictionaries = null;
      }
    });
  }
  open(options) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.closed) {
        this.autoDestroy = shouldAutoDestroy2(this, options);
        if (!(this.schema || (this.schema = yield this._reader.readSchema()))) {
          yield this.cancel();
        }
      }
      return this;
    });
  }
  throw(value) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.closed && this.autoDestroy && (this.closed = true)) {
        return yield this.reset()._reader.throw(value);
      }
      return ITERATOR_DONE2;
    });
  }
  return(value) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.closed && this.autoDestroy && (this.closed = true)) {
        return yield this.reset()._reader.return(value);
      }
      return ITERATOR_DONE2;
    });
  }
  next() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.closed) {
        return ITERATOR_DONE2;
      }
      let message;
      const { _reader: reader } = this;
      while (message = yield this._readNextMessageAndValidate()) {
        if (message.isSchema()) {
          yield this.reset(message.header());
        } else if (message.isRecordBatch()) {
          this._recordBatchIndex++;
          const header = message.header();
          const buffer = yield reader.readMessageBody(message.bodyLength);
          const recordBatch = this._loadRecordBatch(header, buffer);
          return { done: false, value: recordBatch };
        } else if (message.isDictionaryBatch()) {
          this._dictionaryIndex++;
          const header = message.header();
          const buffer = yield reader.readMessageBody(message.bodyLength);
          const vector3 = this._loadDictionaryBatch(header, buffer);
          this.dictionaries.set(header.id, vector3);
        }
      }
      if (this.schema && this._recordBatchIndex === 0) {
        this._recordBatchIndex++;
        return { done: false, value: new _InternalEmptyPlaceholderRecordBatch2(this.schema) };
      }
      return yield this.return();
    });
  }
  _readNextMessageAndValidate(type2) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this._reader.readMessage(type2);
    });
  }
};
var RecordBatchFileReaderImpl2 = class extends RecordBatchStreamReaderImpl2 {
  constructor(source, dictionaries) {
    super(source instanceof RandomAccessFile2 ? source : new RandomAccessFile2(source), dictionaries);
  }
  get footer() {
    return this._footer;
  }
  get numDictionaries() {
    return this._footer ? this._footer.numDictionaries : 0;
  }
  get numRecordBatches() {
    return this._footer ? this._footer.numRecordBatches : 0;
  }
  isSync() {
    return true;
  }
  isFile() {
    return true;
  }
  open(options) {
    if (!this.closed && !this._footer) {
      this.schema = (this._footer = this._readFooter()).schema;
      for (const block of this._footer.dictionaryBatches()) {
        block && this._readDictionaryBatch(this._dictionaryIndex++);
      }
    }
    return super.open(options);
  }
  readRecordBatch(index2) {
    var _a9;
    if (this.closed) {
      return null;
    }
    if (!this._footer) {
      this.open();
    }
    const block = (_a9 = this._footer) === null || _a9 === void 0 ? void 0 : _a9.getRecordBatch(index2);
    if (block && this._handle.seek(block.offset)) {
      const message = this._reader.readMessage(MessageHeader3.RecordBatch);
      if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {
        const header = message.header();
        const buffer = this._reader.readMessageBody(message.bodyLength);
        const recordBatch = this._loadRecordBatch(header, buffer);
        return recordBatch;
      }
    }
    return null;
  }
  _readDictionaryBatch(index2) {
    var _a9;
    const block = (_a9 = this._footer) === null || _a9 === void 0 ? void 0 : _a9.getDictionaryBatch(index2);
    if (block && this._handle.seek(block.offset)) {
      const message = this._reader.readMessage(MessageHeader3.DictionaryBatch);
      if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {
        const header = message.header();
        const buffer = this._reader.readMessageBody(message.bodyLength);
        const vector3 = this._loadDictionaryBatch(header, buffer);
        this.dictionaries.set(header.id, vector3);
      }
    }
  }
  _readFooter() {
    const { _handle } = this;
    const offset2 = _handle.size - magicAndPadding2;
    const length4 = _handle.readInt32(offset2);
    const buffer = _handle.readAt(offset2 - length4, length4);
    return Footer_2.decode(buffer);
  }
  _readNextMessageAndValidate(type2) {
    var _a9;
    if (!this._footer) {
      this.open();
    }
    if (this._footer && this._recordBatchIndex < this.numRecordBatches) {
      const block = (_a9 = this._footer) === null || _a9 === void 0 ? void 0 : _a9.getRecordBatch(this._recordBatchIndex);
      if (block && this._handle.seek(block.offset)) {
        return this._reader.readMessage(type2);
      }
    }
    return null;
  }
};
var AsyncRecordBatchFileReaderImpl2 = class extends AsyncRecordBatchStreamReaderImpl2 {
  constructor(source, ...rest) {
    const byteLength = typeof rest[0] !== "number" ? rest.shift() : void 0;
    const dictionaries = rest[0] instanceof Map ? rest.shift() : void 0;
    super(source instanceof AsyncRandomAccessFile2 ? source : new AsyncRandomAccessFile2(source, byteLength), dictionaries);
  }
  get footer() {
    return this._footer;
  }
  get numDictionaries() {
    return this._footer ? this._footer.numDictionaries : 0;
  }
  get numRecordBatches() {
    return this._footer ? this._footer.numRecordBatches : 0;
  }
  isFile() {
    return true;
  }
  isAsync() {
    return true;
  }
  open(options) {
    const _super = Object.create(null, {
      open: { get: () => super.open }
    });
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.closed && !this._footer) {
        this.schema = (this._footer = yield this._readFooter()).schema;
        for (const block of this._footer.dictionaryBatches()) {
          block && (yield this._readDictionaryBatch(this._dictionaryIndex++));
        }
      }
      return yield _super.open.call(this, options);
    });
  }
  readRecordBatch(index2) {
    var _a9;
    return __awaiter(this, void 0, void 0, function* () {
      if (this.closed) {
        return null;
      }
      if (!this._footer) {
        yield this.open();
      }
      const block = (_a9 = this._footer) === null || _a9 === void 0 ? void 0 : _a9.getRecordBatch(index2);
      if (block && (yield this._handle.seek(block.offset))) {
        const message = yield this._reader.readMessage(MessageHeader3.RecordBatch);
        if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {
          const header = message.header();
          const buffer = yield this._reader.readMessageBody(message.bodyLength);
          const recordBatch = this._loadRecordBatch(header, buffer);
          return recordBatch;
        }
      }
      return null;
    });
  }
  _readDictionaryBatch(index2) {
    var _a9;
    return __awaiter(this, void 0, void 0, function* () {
      const block = (_a9 = this._footer) === null || _a9 === void 0 ? void 0 : _a9.getDictionaryBatch(index2);
      if (block && (yield this._handle.seek(block.offset))) {
        const message = yield this._reader.readMessage(MessageHeader3.DictionaryBatch);
        if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {
          const header = message.header();
          const buffer = yield this._reader.readMessageBody(message.bodyLength);
          const vector3 = this._loadDictionaryBatch(header, buffer);
          this.dictionaries.set(header.id, vector3);
        }
      }
    });
  }
  _readFooter() {
    return __awaiter(this, void 0, void 0, function* () {
      const { _handle } = this;
      _handle._pending && (yield _handle._pending);
      const offset2 = _handle.size - magicAndPadding2;
      const length4 = yield _handle.readInt32(offset2);
      const buffer = yield _handle.readAt(offset2 - length4, length4);
      return Footer_2.decode(buffer);
    });
  }
  _readNextMessageAndValidate(type2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this._footer) {
        yield this.open();
      }
      if (this._footer && this._recordBatchIndex < this.numRecordBatches) {
        const block = this._footer.getRecordBatch(this._recordBatchIndex);
        if (block && (yield this._handle.seek(block.offset))) {
          return yield this._reader.readMessage(type2);
        }
      }
      return null;
    });
  }
};
var RecordBatchJSONReaderImpl2 = class extends RecordBatchStreamReaderImpl2 {
  constructor(source, dictionaries) {
    super(source, dictionaries);
  }
  _loadVectors(header, body, types) {
    return new JSONVectorLoader2(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
  }
};
function shouldAutoDestroy2(self, options) {
  return options && typeof options["autoDestroy"] === "boolean" ? options["autoDestroy"] : self["autoDestroy"];
}
function* readAllSync2(source) {
  const reader = RecordBatchReader2.from(source);
  try {
    if (!reader.open({ autoDestroy: false }).closed) {
      do {
        yield reader;
      } while (!reader.reset().open().closed);
    }
  } finally {
    reader.cancel();
  }
}
function readAllAsync2(source) {
  return __asyncGenerator(this, arguments, function* readAllAsync_1() {
    const reader = yield __await(RecordBatchReader2.from(source));
    try {
      if (!(yield __await(reader.open({ autoDestroy: false }))).closed) {
        do {
          yield yield __await(reader);
        } while (!(yield __await(reader.reset().open())).closed);
      }
    } finally {
      yield __await(reader.cancel());
    }
  });
}
function fromArrowJSON2(source) {
  return new RecordBatchStreamReader2(new RecordBatchJSONReaderImpl2(source));
}
function fromByteStream2(source) {
  const bytes = source.peek(magicLength2 + 7 & ~7);
  return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString2(bytes) ? new RecordBatchStreamReader2(new RecordBatchStreamReaderImpl2(source)) : new RecordBatchFileReader2(new RecordBatchFileReaderImpl2(source.read())) : new RecordBatchStreamReader2(new RecordBatchStreamReaderImpl2(/* @__PURE__ */ function* () {
  }()));
}
function fromAsyncByteStream2(source) {
  return __awaiter(this, void 0, void 0, function* () {
    const bytes = yield source.peek(magicLength2 + 7 & ~7);
    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString2(bytes) ? new AsyncRecordBatchStreamReader2(new AsyncRecordBatchStreamReaderImpl2(source)) : new RecordBatchFileReader2(new RecordBatchFileReaderImpl2(yield source.read())) : new AsyncRecordBatchStreamReader2(new AsyncRecordBatchStreamReaderImpl2(function() {
      return __asyncGenerator(this, arguments, function* () {
      });
    }()));
  });
}
function fromFileHandle2(source) {
  return __awaiter(this, void 0, void 0, function* () {
    const { size } = yield source.stat();
    const file = new AsyncRandomAccessFile2(source, size);
    if (size >= magicX2AndPadding2 && checkForMagicArrowString2(yield file.readAt(0, magicLength2 + 7 & ~7))) {
      return new AsyncRecordBatchFileReader2(new AsyncRecordBatchFileReaderImpl2(file));
    }
    return new AsyncRecordBatchStreamReader2(new AsyncRecordBatchStreamReaderImpl2(file));
  });
}

// ../../node_modules/apache-arrow/visitor/vectorassembler.mjs
var VectorAssembler2 = class _VectorAssembler extends Visitor2 {
  constructor() {
    super();
    this._byteLength = 0;
    this._nodes = [];
    this._buffers = [];
    this._bufferRegions = [];
  }
  /** @nocollapse */
  static assemble(...args) {
    const unwrap = (nodes) => nodes.flatMap((node) => Array.isArray(node) ? unwrap(node) : node instanceof RecordBatch4 ? node.data.children : node.data);
    const assembler = new _VectorAssembler();
    assembler.visitMany(unwrap(args));
    return assembler;
  }
  visit(data) {
    if (data instanceof Vector2) {
      this.visitMany(data.data);
      return this;
    }
    const { type: type2 } = data;
    if (!DataType2.isDictionary(type2)) {
      const { length: length4, nullCount } = data;
      if (length4 > 2147483647) {
        throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");
      }
      if (!DataType2.isNull(type2)) {
        addBuffer2.call(this, nullCount <= 0 ? new Uint8Array(0) : truncateBitmap2(data.offset, length4, data.nullBitmap));
      }
      this.nodes.push(new FieldNode4(length4, nullCount));
    }
    return super.visit(data);
  }
  visitNull(_null) {
    return this;
  }
  visitDictionary(data) {
    return this.visit(data.clone(data.type.indices));
  }
  get nodes() {
    return this._nodes;
  }
  get buffers() {
    return this._buffers;
  }
  get byteLength() {
    return this._byteLength;
  }
  get bufferRegions() {
    return this._bufferRegions;
  }
};
function addBuffer2(values2) {
  const byteLength = values2.byteLength + 7 & ~7;
  this.buffers.push(values2);
  this.bufferRegions.push(new BufferRegion2(this._byteLength, byteLength));
  this._byteLength += byteLength;
  return this;
}
function assembleUnion2(data) {
  const { type: type2, length: length4, typeIds, valueOffsets } = data;
  addBuffer2.call(this, typeIds);
  if (type2.mode === UnionMode3.Sparse) {
    return assembleNestedVector2.call(this, data);
  } else if (type2.mode === UnionMode3.Dense) {
    if (data.offset <= 0) {
      addBuffer2.call(this, valueOffsets);
      return assembleNestedVector2.call(this, data);
    } else {
      const maxChildTypeId = typeIds.reduce((x3, y3) => Math.max(x3, y3), typeIds[0]);
      const childLengths = new Int32Array(maxChildTypeId + 1);
      const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);
      const shiftedOffsets = new Int32Array(length4);
      const unshiftedOffsets = rebaseValueOffsets2(-valueOffsets[0], length4, valueOffsets);
      for (let typeId, shift, index2 = -1; ++index2 < length4; ) {
        if ((shift = childOffsets[typeId = typeIds[index2]]) === -1) {
          shift = childOffsets[typeId] = unshiftedOffsets[typeId];
        }
        shiftedOffsets[index2] = unshiftedOffsets[index2] - shift;
        ++childLengths[typeId];
      }
      addBuffer2.call(this, shiftedOffsets);
      for (let child, childIndex = -1, numChildren = type2.children.length; ++childIndex < numChildren; ) {
        if (child = data.children[childIndex]) {
          const typeId = type2.typeIds[childIndex];
          const childLength = Math.min(length4, childLengths[typeId]);
          this.visit(child.slice(childOffsets[typeId], childLength));
        }
      }
    }
  }
  return this;
}
function assembleBoolVector2(data) {
  let values2;
  if (data.nullCount >= data.length) {
    return addBuffer2.call(this, new Uint8Array(0));
  } else if ((values2 = data.values) instanceof Uint8Array) {
    return addBuffer2.call(this, truncateBitmap2(data.offset, data.length, values2));
  }
  return addBuffer2.call(this, packBools2(data.values));
}
function assembleFlatVector2(data) {
  return addBuffer2.call(this, data.values.subarray(0, data.length * data.stride));
}
function assembleFlatListVector2(data) {
  const { length: length4, values: values2, valueOffsets } = data;
  const firstOffset = valueOffsets[0];
  const lastOffset = valueOffsets[length4];
  const byteLength = Math.min(lastOffset - firstOffset, values2.byteLength - firstOffset);
  addBuffer2.call(this, rebaseValueOffsets2(-valueOffsets[0], length4, valueOffsets));
  addBuffer2.call(this, values2.subarray(firstOffset, firstOffset + byteLength));
  return this;
}
function assembleListVector2(data) {
  const { length: length4, valueOffsets } = data;
  if (valueOffsets) {
    addBuffer2.call(this, rebaseValueOffsets2(valueOffsets[0], length4, valueOffsets));
  }
  return this.visit(data.children[0]);
}
function assembleNestedVector2(data) {
  return this.visitMany(data.type.children.map((_2, i2) => data.children[i2]).filter(Boolean))[0];
}
VectorAssembler2.prototype.visitBool = assembleBoolVector2;
VectorAssembler2.prototype.visitInt = assembleFlatVector2;
VectorAssembler2.prototype.visitFloat = assembleFlatVector2;
VectorAssembler2.prototype.visitUtf8 = assembleFlatListVector2;
VectorAssembler2.prototype.visitBinary = assembleFlatListVector2;
VectorAssembler2.prototype.visitFixedSizeBinary = assembleFlatVector2;
VectorAssembler2.prototype.visitDate = assembleFlatVector2;
VectorAssembler2.prototype.visitTimestamp = assembleFlatVector2;
VectorAssembler2.prototype.visitTime = assembleFlatVector2;
VectorAssembler2.prototype.visitDecimal = assembleFlatVector2;
VectorAssembler2.prototype.visitList = assembleListVector2;
VectorAssembler2.prototype.visitStruct = assembleNestedVector2;
VectorAssembler2.prototype.visitUnion = assembleUnion2;
VectorAssembler2.prototype.visitInterval = assembleFlatVector2;
VectorAssembler2.prototype.visitFixedSizeList = assembleListVector2;
VectorAssembler2.prototype.visitMap = assembleListVector2;

// ../../node_modules/apache-arrow/ipc/writer.mjs
var RecordBatchWriter2 = class extends ReadableInterop2 {
  constructor(options) {
    super();
    this._position = 0;
    this._started = false;
    this._sink = new AsyncByteQueue2();
    this._schema = null;
    this._dictionaryBlocks = [];
    this._recordBatchBlocks = [];
    this._dictionaryDeltaOffsets = /* @__PURE__ */ new Map();
    isObject2(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });
    this._autoDestroy = typeof options.autoDestroy === "boolean" ? options.autoDestroy : true;
    this._writeLegacyIpcFormat = typeof options.writeLegacyIpcFormat === "boolean" ? options.writeLegacyIpcFormat : false;
  }
  /** @nocollapse */
  // @ts-ignore
  static throughNode(options) {
    throw new Error(`"throughNode" not available in this environment`);
  }
  /** @nocollapse */
  static throughDOM(writableStrategy, readableStrategy) {
    throw new Error(`"throughDOM" not available in this environment`);
  }
  toString(sync = false) {
    return this._sink.toString(sync);
  }
  toUint8Array(sync = false) {
    return this._sink.toUint8Array(sync);
  }
  writeAll(input2) {
    if (isPromise2(input2)) {
      return input2.then((x3) => this.writeAll(x3));
    } else if (isAsyncIterable2(input2)) {
      return writeAllAsync2(this, input2);
    }
    return writeAll2(this, input2);
  }
  get closed() {
    return this._sink.closed;
  }
  [Symbol.asyncIterator]() {
    return this._sink[Symbol.asyncIterator]();
  }
  toDOMStream(options) {
    return this._sink.toDOMStream(options);
  }
  toNodeStream(options) {
    return this._sink.toNodeStream(options);
  }
  close() {
    return this.reset()._sink.close();
  }
  abort(reason) {
    return this.reset()._sink.abort(reason);
  }
  finish() {
    this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);
    return this;
  }
  reset(sink = this._sink, schema = null) {
    if (sink === this._sink || sink instanceof AsyncByteQueue2) {
      this._sink = sink;
    } else {
      this._sink = new AsyncByteQueue2();
      if (sink && isWritableDOMStream2(sink)) {
        this.toDOMStream({ type: "bytes" }).pipeTo(sink);
      } else if (sink && isWritableNodeStream2(sink)) {
        this.toNodeStream({ objectMode: false }).pipe(sink);
      }
    }
    if (this._started && this._schema) {
      this._writeFooter(this._schema);
    }
    this._started = false;
    this._dictionaryBlocks = [];
    this._recordBatchBlocks = [];
    this._dictionaryDeltaOffsets = /* @__PURE__ */ new Map();
    if (!schema || !compareSchemas2(schema, this._schema)) {
      if (schema == null) {
        this._position = 0;
        this._schema = null;
      } else {
        this._started = true;
        this._schema = schema;
        this._writeSchema(schema);
      }
    }
    return this;
  }
  write(payload) {
    let schema = null;
    if (!this._sink) {
      throw new Error(`RecordBatchWriter is closed`);
    } else if (payload == null) {
      return this.finish() && void 0;
    } else if (payload instanceof Table2 && !(schema = payload.schema)) {
      return this.finish() && void 0;
    } else if (payload instanceof RecordBatch4 && !(schema = payload.schema)) {
      return this.finish() && void 0;
    }
    if (schema && !compareSchemas2(schema, this._schema)) {
      if (this._started && this._autoDestroy) {
        return this.close();
      }
      this.reset(this._sink, schema);
    }
    if (payload instanceof RecordBatch4) {
      if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch2)) {
        this._writeRecordBatch(payload);
      }
    } else if (payload instanceof Table2) {
      this.writeAll(payload.batches);
    } else if (isIterable2(payload)) {
      this.writeAll(payload);
    }
  }
  _writeMessage(message, alignment = 8) {
    const a2 = alignment - 1;
    const buffer = Message4.encode(message);
    const flatbufferSize = buffer.byteLength;
    const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;
    const alignedSize = flatbufferSize + prefixSize + a2 & ~a2;
    const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;
    if (message.headerType === MessageHeader3.RecordBatch) {
      this._recordBatchBlocks.push(new FileBlock2(alignedSize, message.bodyLength, this._position));
    } else if (message.headerType === MessageHeader3.DictionaryBatch) {
      this._dictionaryBlocks.push(new FileBlock2(alignedSize, message.bodyLength, this._position));
    }
    if (!this._writeLegacyIpcFormat) {
      this._write(Int32Array.of(-1));
    }
    this._write(Int32Array.of(alignedSize - prefixSize));
    if (flatbufferSize > 0) {
      this._write(buffer);
    }
    return this._writePadding(nPaddingBytes);
  }
  _write(chunk) {
    if (this._started) {
      const buffer = toUint8Array2(chunk);
      if (buffer && buffer.byteLength > 0) {
        this._sink.write(buffer);
        this._position += buffer.byteLength;
      }
    }
    return this;
  }
  _writeSchema(schema) {
    return this._writeMessage(Message4.from(schema));
  }
  // @ts-ignore
  _writeFooter(schema) {
    return this._writeLegacyIpcFormat ? this._write(Int32Array.of(0)) : this._write(Int32Array.of(-1, 0));
  }
  _writeMagic() {
    return this._write(MAGIC2);
  }
  _writePadding(nBytes) {
    return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;
  }
  _writeRecordBatch(batch) {
    const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler2.assemble(batch);
    const recordBatch = new RecordBatch6(batch.numRows, nodes, bufferRegions);
    const message = Message4.from(recordBatch, byteLength);
    return this._writeDictionaries(batch)._writeMessage(message)._writeBodyBuffers(buffers);
  }
  _writeDictionaryBatch(dictionary, id2, isDelta = false) {
    this._dictionaryDeltaOffsets.set(id2, dictionary.length + (this._dictionaryDeltaOffsets.get(id2) || 0));
    const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler2.assemble(new Vector2([dictionary]));
    const recordBatch = new RecordBatch6(dictionary.length, nodes, bufferRegions);
    const dictionaryBatch = new DictionaryBatch4(recordBatch, id2, isDelta);
    const message = Message4.from(dictionaryBatch, byteLength);
    return this._writeMessage(message)._writeBodyBuffers(buffers);
  }
  _writeBodyBuffers(buffers) {
    let buffer;
    let size, padding2;
    for (let i2 = -1, n = buffers.length; ++i2 < n; ) {
      if ((buffer = buffers[i2]) && (size = buffer.byteLength) > 0) {
        this._write(buffer);
        if ((padding2 = (size + 7 & ~7) - size) > 0) {
          this._writePadding(padding2);
        }
      }
    }
    return this;
  }
  _writeDictionaries(batch) {
    for (let [id2, dictionary] of batch.dictionaries) {
      let offset2 = this._dictionaryDeltaOffsets.get(id2) || 0;
      if (offset2 === 0 || (dictionary = dictionary === null || dictionary === void 0 ? void 0 : dictionary.slice(offset2)).length > 0) {
        for (const data of dictionary.data) {
          this._writeDictionaryBatch(data, id2, offset2 > 0);
          offset2 += data.length;
        }
      }
    }
    return this;
  }
};
var RecordBatchStreamWriter2 = class _RecordBatchStreamWriter extends RecordBatchWriter2 {
  /** @nocollapse */
  static writeAll(input2, options) {
    const writer = new _RecordBatchStreamWriter(options);
    if (isPromise2(input2)) {
      return input2.then((x3) => writer.writeAll(x3));
    } else if (isAsyncIterable2(input2)) {
      return writeAllAsync2(writer, input2);
    }
    return writeAll2(writer, input2);
  }
};
var RecordBatchFileWriter2 = class _RecordBatchFileWriter extends RecordBatchWriter2 {
  /** @nocollapse */
  static writeAll(input2) {
    const writer = new _RecordBatchFileWriter();
    if (isPromise2(input2)) {
      return input2.then((x3) => writer.writeAll(x3));
    } else if (isAsyncIterable2(input2)) {
      return writeAllAsync2(writer, input2);
    }
    return writeAll2(writer, input2);
  }
  constructor() {
    super();
    this._autoDestroy = true;
  }
  // @ts-ignore
  _writeSchema(schema) {
    return this._writeMagic()._writePadding(2);
  }
  _writeFooter(schema) {
    const buffer = Footer_2.encode(new Footer_2(schema, MetadataVersion3.V4, this._recordBatchBlocks, this._dictionaryBlocks));
    return super._writeFooter(schema)._write(buffer)._write(Int32Array.of(buffer.byteLength))._writeMagic();
  }
};
function writeAll2(writer, input2) {
  let chunks = input2;
  if (input2 instanceof Table2) {
    chunks = input2.batches;
    writer.reset(void 0, input2.schema);
  }
  for (const batch of chunks) {
    writer.write(batch);
  }
  return writer.finish();
}
function writeAllAsync2(writer, batches) {
  var batches_1, batches_1_1;
  var e_1, _a9;
  return __awaiter(this, void 0, void 0, function* () {
    try {
      for (batches_1 = __asyncValues(batches); batches_1_1 = yield batches_1.next(), !batches_1_1.done; ) {
        const batch = batches_1_1.value;
        writer.write(batch);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (batches_1_1 && !batches_1_1.done && (_a9 = batches_1.return))
          yield _a9.call(batches_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return writer.finish();
  });
}

// ../../node_modules/apache-arrow/io/whatwg/iterable.mjs
function toDOMStream2(source, options) {
  if (isAsyncIterable2(source)) {
    return asyncIterableAsReadableDOMStream2(source, options);
  }
  if (isIterable2(source)) {
    return iterableAsReadableDOMStream2(source, options);
  }
  throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);
}
function iterableAsReadableDOMStream2(source, options) {
  let it2 = null;
  const bm = (options === null || options === void 0 ? void 0 : options.type) === "bytes" || false;
  const hwm = (options === null || options === void 0 ? void 0 : options.highWaterMark) || Math.pow(2, 24);
  return new ReadableStream(Object.assign(Object.assign({}, options), {
    start(controller) {
      next(controller, it2 || (it2 = source[Symbol.iterator]()));
    },
    pull(controller) {
      it2 ? next(controller, it2) : controller.close();
    },
    cancel() {
      ((it2 === null || it2 === void 0 ? void 0 : it2.return) && it2.return() || true) && (it2 = null);
    }
  }), Object.assign({ highWaterMark: bm ? hwm : void 0 }, options));
  function next(controller, it3) {
    let buf;
    let r = null;
    let size = controller.desiredSize || null;
    while (!(r = it3.next(bm ? size : null)).done) {
      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array2(r.value))) {
        size != null && bm && (size = size - buf.byteLength + 1);
        r.value = buf;
      }
      controller.enqueue(r.value);
      if (size != null && --size <= 0) {
        return;
      }
    }
    controller.close();
  }
}
function asyncIterableAsReadableDOMStream2(source, options) {
  let it2 = null;
  const bm = (options === null || options === void 0 ? void 0 : options.type) === "bytes" || false;
  const hwm = (options === null || options === void 0 ? void 0 : options.highWaterMark) || Math.pow(2, 24);
  return new ReadableStream(Object.assign(Object.assign({}, options), {
    start(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        yield next(controller, it2 || (it2 = source[Symbol.asyncIterator]()));
      });
    },
    pull(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        it2 ? yield next(controller, it2) : controller.close();
      });
    },
    cancel() {
      return __awaiter(this, void 0, void 0, function* () {
        ((it2 === null || it2 === void 0 ? void 0 : it2.return) && (yield it2.return()) || true) && (it2 = null);
      });
    }
  }), Object.assign({ highWaterMark: bm ? hwm : void 0 }, options));
  function next(controller, it3) {
    return __awaiter(this, void 0, void 0, function* () {
      let buf;
      let r = null;
      let size = controller.desiredSize || null;
      while (!(r = yield it3.next(bm ? size : null)).done) {
        if (ArrayBuffer.isView(r.value) && (buf = toUint8Array2(r.value))) {
          size != null && bm && (size = size - buf.byteLength + 1);
          r.value = buf;
        }
        controller.enqueue(r.value);
        if (size != null && --size <= 0) {
          return;
        }
      }
      controller.close();
    });
  }
}

// ../../node_modules/apache-arrow/io/whatwg/builder.mjs
function builderThroughDOMStream2(options) {
  return new BuilderTransform2(options);
}
var BuilderTransform2 = class {
  constructor(options) {
    this._numChunks = 0;
    this._finished = false;
    this._bufferedSize = 0;
    const { ["readableStrategy"]: readableStrategy, ["writableStrategy"]: writableStrategy, ["queueingStrategy"]: queueingStrategy = "count" } = options, builderOptions = __rest(options, ["readableStrategy", "writableStrategy", "queueingStrategy"]);
    this._controller = null;
    this._builder = makeBuilder2(builderOptions);
    this._getSize = queueingStrategy !== "bytes" ? chunkLength2 : chunkByteLength2;
    const { ["highWaterMark"]: readableHighWaterMark = queueingStrategy === "bytes" ? Math.pow(2, 14) : 1e3 } = Object.assign({}, readableStrategy);
    const { ["highWaterMark"]: writableHighWaterMark = queueingStrategy === "bytes" ? Math.pow(2, 14) : 1e3 } = Object.assign({}, writableStrategy);
    this["readable"] = new ReadableStream({
      ["cancel"]: () => {
        this._builder.clear();
      },
      ["pull"]: (c4) => {
        this._maybeFlush(this._builder, this._controller = c4);
      },
      ["start"]: (c4) => {
        this._maybeFlush(this._builder, this._controller = c4);
      }
    }, {
      "highWaterMark": readableHighWaterMark,
      "size": queueingStrategy !== "bytes" ? chunkLength2 : chunkByteLength2
    });
    this["writable"] = new WritableStream({
      ["abort"]: () => {
        this._builder.clear();
      },
      ["write"]: () => {
        this._maybeFlush(this._builder, this._controller);
      },
      ["close"]: () => {
        this._maybeFlush(this._builder.finish(), this._controller);
      }
    }, {
      "highWaterMark": writableHighWaterMark,
      "size": (value) => this._writeValueAndReturnChunkSize(value)
    });
  }
  _writeValueAndReturnChunkSize(value) {
    const bufferedSize = this._bufferedSize;
    this._bufferedSize = this._getSize(this._builder.append(value));
    return this._bufferedSize - bufferedSize;
  }
  _maybeFlush(builder, controller) {
    if (controller == null) {
      return;
    }
    if (this._bufferedSize >= controller.desiredSize) {
      ++this._numChunks && this._enqueue(controller, builder.toVector());
    }
    if (builder.finished) {
      if (builder.length > 0 || this._numChunks === 0) {
        ++this._numChunks && this._enqueue(controller, builder.toVector());
      }
      if (!this._finished && (this._finished = true)) {
        this._enqueue(controller, null);
      }
    }
  }
  _enqueue(controller, chunk) {
    this._bufferedSize = 0;
    this._controller = null;
    chunk == null ? controller.close() : controller.enqueue(chunk);
  }
};
var chunkLength2 = (chunk) => {
  var _a9;
  return (_a9 = chunk === null || chunk === void 0 ? void 0 : chunk.length) !== null && _a9 !== void 0 ? _a9 : 0;
};
var chunkByteLength2 = (chunk) => {
  var _a9;
  return (_a9 = chunk === null || chunk === void 0 ? void 0 : chunk.byteLength) !== null && _a9 !== void 0 ? _a9 : 0;
};

// ../../node_modules/apache-arrow/io/whatwg/reader.mjs
function recordBatchReaderThroughDOMStream2(writableStrategy, readableStrategy) {
  const queue = new AsyncByteQueue2();
  let reader = null;
  const readable = new ReadableStream({
    cancel() {
      return __awaiter(this, void 0, void 0, function* () {
        yield queue.close();
      });
    },
    start(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        yield next(controller, reader || (reader = yield open()));
      });
    },
    pull(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        reader ? yield next(controller, reader) : controller.close();
      });
    }
  });
  return { writable: new WritableStream(queue, Object.assign({ "highWaterMark": Math.pow(2, 14) }, writableStrategy)), readable };
  function open() {
    return __awaiter(this, void 0, void 0, function* () {
      return yield (yield RecordBatchReader2.from(queue)).open(readableStrategy);
    });
  }
  function next(controller, reader2) {
    return __awaiter(this, void 0, void 0, function* () {
      let size = controller.desiredSize;
      let r = null;
      while (!(r = yield reader2.next()).done) {
        controller.enqueue(r.value);
        if (size != null && --size <= 0) {
          return;
        }
      }
      controller.close();
    });
  }
}

// ../../node_modules/apache-arrow/io/whatwg/writer.mjs
function recordBatchWriterThroughDOMStream2(writableStrategy, readableStrategy) {
  const writer = new this(writableStrategy);
  const reader = new AsyncByteStream2(writer);
  const readable = new ReadableStream({
    // type: 'bytes',
    cancel() {
      return __awaiter(this, void 0, void 0, function* () {
        yield reader.cancel();
      });
    },
    pull(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        yield next(controller);
      });
    },
    start(controller) {
      return __awaiter(this, void 0, void 0, function* () {
        yield next(controller);
      });
    }
  }, Object.assign({ "highWaterMark": Math.pow(2, 14) }, readableStrategy));
  return { writable: new WritableStream(writer, writableStrategy), readable };
  function next(controller) {
    return __awaiter(this, void 0, void 0, function* () {
      let buf = null;
      let size = controller.desiredSize;
      while (buf = yield reader.read(size || null)) {
        controller.enqueue(buf);
        if (size != null && (size -= buf.byteLength) <= 0) {
          return;
        }
      }
      controller.close();
    });
  }
}

// ../../node_modules/apache-arrow/ipc/serialization.mjs
function tableToIPC2(table2, type2 = "stream") {
  return (type2 === "stream" ? RecordBatchStreamWriter2 : RecordBatchFileWriter2).writeAll(table2).toUint8Array(true);
}

// ../../node_modules/apache-arrow/Arrow.mjs
var util2 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, bn_exports2), int_exports2), bit_exports2), math_exports2), buffer_exports2), vector_exports2), {
  compareSchemas: compareSchemas2,
  compareFields: compareFields2,
  compareTypes: compareTypes2
});

// ../../node_modules/apache-arrow/Arrow.dom.mjs
adapters_default2.toDOMStream = toDOMStream2;
Builder5["throughDOM"] = builderThroughDOMStream2;
RecordBatchReader2["throughDOM"] = recordBatchReaderThroughDOMStream2;
RecordBatchFileReader2["throughDOM"] = recordBatchReaderThroughDOMStream2;
RecordBatchStreamReader2["throughDOM"] = recordBatchReaderThroughDOMStream2;
RecordBatchWriter2["throughDOM"] = recordBatchWriterThroughDOMStream2;
RecordBatchFileWriter2["throughDOM"] = recordBatchWriterThroughDOMStream2;
RecordBatchStreamWriter2["throughDOM"] = recordBatchWriterThroughDOMStream2;

// ../../node_modules/@duckdb/duckdb-wasm/dist/duckdb-browser.mjs
var Y = Object.create;
var N = Object.defineProperty;
var H = Object.getOwnPropertyDescriptor;
var j = Object.getOwnPropertyNames;
var K = Object.getPrototypeOf;
var V = Object.prototype.hasOwnProperty;
var z = (s2, e) => () => (e || s2((e = { exports: {} }).exports, e), e.exports);
var J = (s2, e, r, t) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let n of j(e))
      !V.call(s2, n) && n !== r && N(s2, n, { get: () => e[n], enumerable: !(t = H(e, n)) || t.enumerable });
  return s2;
};
var $ = (s2, e, r) => (r = s2 != null ? Y(K(s2)) : {}, J(e || !s2 || !s2.__esModule ? N(r, "default", { value: s2, enumerable: true }) : r, s2));
var x = z((xe, G) => {
  G.exports = Worker;
});
var Z = ((n) => (n[n.UNDEFINED = 0] = "UNDEFINED", n[n.AUTOMATIC = 1] = "AUTOMATIC", n[n.READ_ONLY = 2] = "READ_ONLY", n[n.READ_WRITE = 3] = "READ_WRITE", n))(Z || {});
var X = ((c4) => (c4[c4.NONE = 0] = "NONE", c4[c4.DEBUG = 1] = "DEBUG", c4[c4.INFO = 2] = "INFO", c4[c4.WARNING = 3] = "WARNING", c4[c4.ERROR = 4] = "ERROR", c4))(X || {});
var ee = ((o) => (o[o.NONE = 0] = "NONE", o[o.CONNECT = 1] = "CONNECT", o[o.DISCONNECT = 2] = "DISCONNECT", o[o.OPEN = 3] = "OPEN", o[o.QUERY = 4] = "QUERY", o[o.INSTANTIATE = 5] = "INSTANTIATE", o))(ee || {});
var re = ((o) => (o[o.NONE = 0] = "NONE", o[o.OK = 1] = "OK", o[o.ERROR = 2] = "ERROR", o[o.START = 3] = "START", o[o.RUN = 4] = "RUN", o[o.CAPTURE = 5] = "CAPTURE", o))(re || {});
var te = ((c4) => (c4[c4.NONE = 0] = "NONE", c4[c4.WEB_WORKER = 1] = "WEB_WORKER", c4[c4.NODE_WORKER = 2] = "NODE_WORKER", c4[c4.BINDINGS = 3] = "BINDINGS", c4[c4.ASYNC_DUCKDB = 4] = "ASYNC_DUCKDB", c4))(te || {});
var A = class {
  log(e) {
  }
};
var P = class {
  constructor(e = 2) {
    this.level = e;
  }
  log(e) {
    e.level >= this.level && console.log(e);
  }
};
var se = ((e) => (e[e.SUCCESS = 0] = "SUCCESS", e))(se || {});
var E = class {
  constructor(e, r) {
    this._bindings = e, this._conn = r;
  }
  get bindings() {
    return this._bindings;
  }
  async close() {
    return this._bindings.disconnect(this._conn);
  }
  useUnsafe(e) {
    return e(this._bindings, this._conn);
  }
  async query(e) {
    this._bindings.logger.log({ timestamp: /* @__PURE__ */ new Date(), level: 2, origin: 4, topic: 4, event: 4, value: e });
    let r = await this._bindings.runQuery(this._conn, e), t = RecordBatchReader2.from(r);
    return console.assert(t.isSync(), "Reader is not sync"), console.assert(t.isFile(), "Reader is not file"), new Table2(t);
  }
  async send(e) {
    this._bindings.logger.log({ timestamp: /* @__PURE__ */ new Date(), level: 2, origin: 4, topic: 4, event: 4, value: e });
    let r = await this._bindings.startPendingQuery(this._conn, e);
    for (; r == null; )
      r = await this._bindings.pollPendingQuery(this._conn);
    let t = new p(this._bindings, this._conn, r), n = await RecordBatchReader2.from(t);
    return console.assert(n.isAsync()), console.assert(n.isStream()), n;
  }
  async cancelSent() {
    return await this._bindings.cancelPendingQuery(this._conn);
  }
  async getTableNames(e) {
    return await this._bindings.getTableNames(this._conn, e);
  }
  async prepare(e) {
    let r = await this._bindings.createPrepared(this._conn, e);
    return new b(this._bindings, this._conn, r);
  }
  async insertArrowTable(e, r) {
    let t = tableToIPC2(e, "stream");
    await this.insertArrowFromIPCStream(t, r);
  }
  async insertArrowFromIPCStream(e, r) {
    await this._bindings.insertArrowFromIPCStream(this._conn, e, r);
  }
  async insertCSVFromPath(e, r) {
    await this._bindings.insertCSVFromPath(this._conn, e, r);
  }
  async insertJSONFromPath(e, r) {
    await this._bindings.insertJSONFromPath(this._conn, e, r);
  }
};
var p = class {
  constructor(e, r, t) {
    this.db = e;
    this.conn = r;
    this.header = t;
    this._first = true, this._depleted = false, this._inFlight = null;
  }
  async next() {
    if (this._first)
      return this._first = false, { done: false, value: this.header };
    if (this._depleted)
      return { done: true, value: null };
    let e;
    return this._inFlight != null ? (e = await this._inFlight, this._inFlight = null) : e = await this.db.fetchQueryResults(this.conn), this._depleted = e.length == 0, this._depleted || (this._inFlight = this.db.fetchQueryResults(this.conn)), { done: this._depleted, value: e };
  }
  [Symbol.asyncIterator]() {
    return this;
  }
};
var b = class {
  constructor(e, r, t) {
    this.bindings = e, this.connectionId = r, this.statementId = t;
  }
  async close() {
    await this.bindings.closePrepared(this.connectionId, this.statementId);
  }
  async query(...e) {
    let r = await this.bindings.runPrepared(this.connectionId, this.statementId, e), t = RecordBatchReader2.from(r);
    return console.assert(t.isSync()), console.assert(t.isFile()), new Table2(t);
  }
  async send(...e) {
    let r = await this.bindings.sendPrepared(this.connectionId, this.statementId, e), t = new p(this.bindings, this.connectionId, r), n = await RecordBatchReader2.from(t);
    return console.assert(n.isAsync()), console.assert(n.isStream()), n;
  }
};
var L = ((d) => (d.CANCEL_PENDING_QUERY = "CANCEL_PENDING_QUERY", d.CLOSE_PREPARED = "CLOSE_PREPARED", d.COLLECT_FILE_STATISTICS = "COLLECT_FILE_STATISTICS", d.CONNECT = "CONNECT", d.COPY_FILE_TO_BUFFER = "COPY_FILE_TO_BUFFER", d.COPY_FILE_TO_PATH = "COPY_FILE_TO_PATH", d.CREATE_PREPARED = "CREATE_PREPARED", d.DISCONNECT = "DISCONNECT", d.DROP_FILE = "DROP_FILE", d.DROP_FILES = "DROP_FILES", d.EXPORT_FILE_STATISTICS = "EXPORT_FILE_STATISTICS", d.FETCH_QUERY_RESULTS = "FETCH_QUERY_RESULTS", d.FLUSH_FILES = "FLUSH_FILES", d.GET_FEATURE_FLAGS = "GET_FEATURE_FLAGS", d.GET_TABLE_NAMES = "GET_TABLE_NAMES", d.GET_VERSION = "GET_VERSION", d.GLOB_FILE_INFOS = "GLOB_FILE_INFOS", d.INSERT_ARROW_FROM_IPC_STREAM = "INSERT_ARROW_FROM_IPC_STREAM", d.INSERT_CSV_FROM_PATH = "IMPORT_CSV_FROM_PATH", d.INSERT_JSON_FROM_PATH = "IMPORT_JSON_FROM_PATH", d.INSTANTIATE = "INSTANTIATE", d.OPEN = "OPEN", d.PING = "PING", d.POLL_PENDING_QUERY = "POLL_PENDING_QUERY", d.REGISTER_FILE_BUFFER = "REGISTER_FILE_BUFFER", d.REGISTER_FILE_HANDLE = "REGISTER_FILE_HANDLE", d.REGISTER_FILE_URL = "REGISTER_FILE_URL", d.RESET = "RESET", d.RUN_PREPARED = "RUN_PREPARED", d.RUN_QUERY = "RUN_QUERY", d.SEND_PREPARED = "SEND_PREPARED", d.START_PENDING_QUERY = "START_PENDING_QUERY", d.TOKENIZE = "TOKENIZE", d))(L || {});
var D = ((u4) => (u4.CONNECTION_INFO = "CONNECTION_INFO", u4.ERROR = "ERROR", u4.FEATURE_FLAGS = "FEATURE_FLAGS", u4.FILE_BUFFER = "FILE_BUFFER", u4.FILE_INFOS = "FILE_INFOS", u4.FILE_SIZE = "FILE_SIZE", u4.FILE_STATISTICS = "FILE_STATISTICS", u4.INSTANTIATE_PROGRESS = "INSTANTIATE_PROGRESS", u4.LOG = "LOG", u4.OK = "OK", u4.PREPARED_STATEMENT_ID = "PREPARED_STATEMENT_ID", u4.QUERY_PLAN = "QUERY_PLAN", u4.QUERY_RESULT = "QUERY_RESULT", u4.QUERY_RESULT_CHUNK = "QUERY_RESULT_CHUNK", u4.QUERY_RESULT_HEADER = "QUERY_RESULT_HEADER", u4.QUERY_RESULT_HEADER_OR_NULL = "QUERY_RESULT_HEADER_OR_NULL", u4.REGISTERED_FILE = "REGISTERED_FILE", u4.SCRIPT_TOKENS = "SCRIPT_TOKENS", u4.SUCCESS = "SUCCESS", u4.TABLE_NAMES = "TABLE_NAMES", u4.VERSION_STRING = "VERSION_STRING", u4))(D || {});
var i = class {
  constructor(e, r) {
    this.promiseResolver = () => {
    };
    this.promiseRejecter = () => {
    };
    this.type = e, this.data = r, this.promise = new Promise((t, n) => {
      this.promiseResolver = t, this.promiseRejecter = n;
    });
  }
};
function m(s2) {
  switch (s2.typeId) {
    case Type3.Binary:
      return { sqlType: "binary" };
    case Type3.Bool:
      return { sqlType: "bool" };
    case Type3.Date:
      return { sqlType: "date" };
    case Type3.DateDay:
      return { sqlType: "date32[d]" };
    case Type3.DateMillisecond:
      return { sqlType: "date64[ms]" };
    case Type3.Decimal: {
      let e = s2;
      return { sqlType: "decimal", precision: e.precision, scale: e.scale };
    }
    case Type3.Float:
      return { sqlType: "float" };
    case Type3.Float16:
      return { sqlType: "float16" };
    case Type3.Float32:
      return { sqlType: "float32" };
    case Type3.Float64:
      return { sqlType: "float64" };
    case Type3.Int:
      return { sqlType: "int32" };
    case Type3.Int16:
      return { sqlType: "int16" };
    case Type3.Int32:
      return { sqlType: "int32" };
    case Type3.Int64:
      return { sqlType: "int64" };
    case Type3.Uint16:
      return { sqlType: "uint16" };
    case Type3.Uint32:
      return { sqlType: "uint32" };
    case Type3.Uint64:
      return { sqlType: "uint64" };
    case Type3.Uint8:
      return { sqlType: "uint8" };
    case Type3.IntervalDayTime:
      return { sqlType: "interval[dt]" };
    case Type3.IntervalYearMonth:
      return { sqlType: "interval[m]" };
    case Type3.List:
      return { sqlType: "list", valueType: m(s2.valueType) };
    case Type3.FixedSizeBinary:
      return { sqlType: "fixedsizebinary", byteWidth: s2.byteWidth };
    case Type3.Null:
      return { sqlType: "null" };
    case Type3.Utf8:
      return { sqlType: "utf8" };
    case Type3.Struct:
      return { sqlType: "struct", fields: s2.children.map((r) => T(r.name, r.type)) };
    case Type3.Map: {
      let e = s2;
      return { sqlType: "map", keyType: m(e.keyType), valueType: m(e.valueType) };
    }
    case Type3.Time:
      return { sqlType: "time[s]" };
    case Type3.TimeMicrosecond:
      return { sqlType: "time[us]" };
    case Type3.TimeMillisecond:
      return { sqlType: "time[ms]" };
    case Type3.TimeNanosecond:
      return { sqlType: "time[ns]" };
    case Type3.TimeSecond:
      return { sqlType: "time[s]" };
    case Type3.Timestamp:
      return { sqlType: "timestamp", timezone: s2.timezone || void 0 };
    case Type3.TimestampSecond:
      return { sqlType: "timestamp[s]", timezone: s2.timezone || void 0 };
    case Type3.TimestampMicrosecond:
      return { sqlType: "timestamp[us]", timezone: s2.timezone || void 0 };
    case Type3.TimestampNanosecond:
      return { sqlType: "timestamp[ns]", timezone: s2.timezone || void 0 };
    case Type3.TimestampMillisecond:
      return { sqlType: "timestamp[ms]", timezone: s2.timezone || void 0 };
  }
  throw new Error(`unsupported arrow type: ${s2.toString()}`);
}
function T(s2, e) {
  let r = m(e);
  return r.name = s2, r;
}
var ne = new TextEncoder();
var w = class {
  constructor(e, r = null) {
    this._onInstantiationProgress = [];
    this._worker = null;
    this._workerShutdownPromise = null;
    this._workerShutdownResolver = () => {
    };
    this._nextMessageId = 0;
    this._pendingRequests = /* @__PURE__ */ new Map();
    this._logger = e, this._onMessageHandler = this.onMessage.bind(this), this._onErrorHandler = this.onError.bind(this), this._onCloseHandler = this.onClose.bind(this), r != null && this.attach(r);
  }
  get logger() {
    return this._logger;
  }
  attach(e) {
    this._worker = e, this._worker.addEventListener("message", this._onMessageHandler), this._worker.addEventListener("error", this._onErrorHandler), this._worker.addEventListener("close", this._onCloseHandler), this._workerShutdownPromise = new Promise((r, t) => {
      this._workerShutdownResolver = r;
    });
  }
  detach() {
    !this._worker || (this._worker.removeEventListener("message", this._onMessageHandler), this._worker.removeEventListener("error", this._onErrorHandler), this._worker.removeEventListener("close", this._onCloseHandler), this._worker = null, this._workerShutdownResolver(null), this._workerShutdownPromise = null, this._workerShutdownResolver = () => {
    });
  }
  async terminate() {
    !this._worker || (this._worker.terminate(), this._worker = null, this._workerShutdownPromise = null, this._workerShutdownResolver = () => {
    });
  }
  async postTask(e, r = []) {
    if (!this._worker) {
      console.error("cannot send a message since the worker is not set!");
      return;
    }
    let t = this._nextMessageId++;
    return this._pendingRequests.set(t, e), this._worker.postMessage({ messageId: t, type: e.type, data: e.data }, r), await e.promise;
  }
  onMessage(e) {
    let r = e.data;
    switch (r.type) {
      case "LOG": {
        this._logger.log(r.data);
        return;
      }
      case "INSTANTIATE_PROGRESS": {
        for (let n of this._onInstantiationProgress)
          n(r.data);
        return;
      }
    }
    let t = this._pendingRequests.get(r.requestId);
    if (!t) {
      console.warn(`unassociated response: [${r.requestId}, ${r.type.toString()}]`);
      return;
    }
    if (this._pendingRequests.delete(r.requestId), r.type == "ERROR") {
      let n = new Error(r.data.message);
      n.name = r.data.name, n.stack = r.data.stack, t.promiseRejecter(n);
      return;
    }
    switch (t.type) {
      case "CLOSE_PREPARED":
      case "COLLECT_FILE_STATISTICS":
      case "COPY_FILE_TO_PATH":
      case "DISCONNECT":
      case "DROP_FILE":
      case "DROP_FILES":
      case "FLUSH_FILES":
      case "INSERT_ARROW_FROM_IPC_STREAM":
      case "IMPORT_CSV_FROM_PATH":
      case "IMPORT_JSON_FROM_PATH":
      case "OPEN":
      case "PING":
      case "REGISTER_FILE_BUFFER":
      case "REGISTER_FILE_HANDLE":
      case "REGISTER_FILE_URL":
      case "RESET":
        if (r.type == "OK") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "INSTANTIATE":
        if (this._onInstantiationProgress = [], r.type == "OK") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "GLOB_FILE_INFOS":
        if (r.type == "FILE_INFOS") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "GET_VERSION":
        if (r.type == "VERSION_STRING") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "GET_FEATURE_FLAGS":
        if (r.type == "FEATURE_FLAGS") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "GET_TABLE_NAMES":
        if (r.type == "TABLE_NAMES") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "TOKENIZE":
        if (r.type == "SCRIPT_TOKENS") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "COPY_FILE_TO_BUFFER":
        if (r.type == "FILE_BUFFER") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "EXPORT_FILE_STATISTICS":
        if (r.type == "FILE_STATISTICS") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "CONNECT":
        if (r.type == "CONNECTION_INFO") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "RUN_PREPARED":
      case "RUN_QUERY":
        if (r.type == "QUERY_RESULT") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "SEND_PREPARED":
        if (r.type == "QUERY_RESULT_HEADER") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "START_PENDING_QUERY":
        if (r.type == "QUERY_RESULT_HEADER_OR_NULL") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "POLL_PENDING_QUERY":
        if (r.type == "QUERY_RESULT_HEADER_OR_NULL") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "CANCEL_PENDING_QUERY":
        if (this._onInstantiationProgress = [], r.type == "SUCCESS") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "FETCH_QUERY_RESULTS":
        if (r.type == "QUERY_RESULT_CHUNK") {
          t.promiseResolver(r.data);
          return;
        }
        break;
      case "CREATE_PREPARED":
        if (r.type == "PREPARED_STATEMENT_ID") {
          t.promiseResolver(r.data);
          return;
        }
        break;
    }
    t.promiseRejecter(new Error(`unexpected response type: ${r.type.toString()}`));
  }
  onError(e) {
    console.error(e), console.error(`error in duckdb worker: ${e.message}`), this._pendingRequests.clear();
  }
  onClose() {
    if (this._workerShutdownResolver(null), this._pendingRequests.size != 0) {
      console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);
      return;
    }
    this._pendingRequests.clear();
  }
  async reset() {
    let e = new i("RESET", null);
    return await this.postTask(e);
  }
  async ping() {
    let e = new i("PING", null);
    await this.postTask(e);
  }
  async dropFile(e) {
    let r = new i("DROP_FILE", e);
    return await this.postTask(r);
  }
  async dropFiles() {
    let e = new i("DROP_FILES", null);
    return await this.postTask(e);
  }
  async flushFiles() {
    let e = new i("FLUSH_FILES", null);
    return await this.postTask(e);
  }
  async instantiate(e, r = null, t = (n) => {
  }) {
    this._onInstantiationProgress.push(t);
    let n = new i("INSTANTIATE", [e, r]);
    return await this.postTask(n);
  }
  async getVersion() {
    let e = new i("GET_VERSION", null);
    return await this.postTask(e);
  }
  async getFeatureFlags() {
    let e = new i("GET_FEATURE_FLAGS", null);
    return await this.postTask(e);
  }
  async open(e) {
    let r = new i("OPEN", e);
    await this.postTask(r);
  }
  async tokenize(e) {
    let r = new i("TOKENIZE", e);
    return await this.postTask(r);
  }
  async connectInternal() {
    let e = new i("CONNECT", null);
    return await this.postTask(e);
  }
  async connect() {
    let e = await this.connectInternal();
    return new E(this, e);
  }
  async disconnect(e) {
    let r = new i("DISCONNECT", e);
    await this.postTask(r);
  }
  async runQuery(e, r) {
    let t = new i("RUN_QUERY", [e, r]);
    return await this.postTask(t);
  }
  async startPendingQuery(e, r) {
    let t = new i("START_PENDING_QUERY", [e, r]);
    return await this.postTask(t);
  }
  async pollPendingQuery(e) {
    let r = new i("POLL_PENDING_QUERY", e);
    return await this.postTask(r);
  }
  async cancelPendingQuery(e) {
    let r = new i("CANCEL_PENDING_QUERY", e);
    return await this.postTask(r);
  }
  async fetchQueryResults(e) {
    let r = new i("FETCH_QUERY_RESULTS", e);
    return await this.postTask(r);
  }
  async getTableNames(e, r) {
    let t = new i("GET_TABLE_NAMES", [e, r]);
    return await this.postTask(t);
  }
  async createPrepared(e, r) {
    let t = new i("CREATE_PREPARED", [e, r]);
    return await this.postTask(t);
  }
  async closePrepared(e, r) {
    let t = new i("CLOSE_PREPARED", [e, r]);
    await this.postTask(t);
  }
  async runPrepared(e, r, t) {
    let n = new i("RUN_PREPARED", [e, r, t]);
    return await this.postTask(n);
  }
  async sendPrepared(e, r, t) {
    let n = new i("SEND_PREPARED", [e, r, t]);
    return await this.postTask(n);
  }
  async globFiles(e) {
    let r = new i("GLOB_FILE_INFOS", e);
    return await this.postTask(r);
  }
  async registerFileText(e, r) {
    let t = ne.encode(r);
    await this.registerFileBuffer(e, t);
  }
  async registerFileURL(e, r, t, n) {
    r === void 0 && (r = e);
    let c4 = new i("REGISTER_FILE_URL", [e, r, t, n]);
    await this.postTask(c4);
  }
  async registerEmptyFileBuffer(e) {
    let r = new i("REGISTER_FILE_BUFFER", [e, new Uint8Array()]);
    await this.postTask(r);
  }
  async registerFileBuffer(e, r) {
    let t = new i("REGISTER_FILE_BUFFER", [e, r]);
    await this.postTask(t, [r.buffer]);
  }
  async registerFileHandle(e, r, t, n) {
    let c4 = new i("REGISTER_FILE_HANDLE", [e, r, t, n]);
    await this.postTask(c4, []);
  }
  async collectFileStatistics(e, r) {
    let t = new i("COLLECT_FILE_STATISTICS", [e, r]);
    await this.postTask(t, []);
  }
  async exportFileStatistics(e) {
    let r = new i("EXPORT_FILE_STATISTICS", e);
    return await this.postTask(r, []);
  }
  async copyFileToBuffer(e) {
    let r = new i("COPY_FILE_TO_BUFFER", e);
    return await this.postTask(r);
  }
  async copyFileToPath(e, r) {
    let t = new i("COPY_FILE_TO_PATH", [e, r]);
    await this.postTask(t);
  }
  async insertArrowFromIPCStream(e, r, t) {
    if (r.length == 0)
      return;
    let n = new i("INSERT_ARROW_FROM_IPC_STREAM", [e, r, t]);
    await this.postTask(n, [r.buffer]);
  }
  async insertCSVFromPath(e, r, t) {
    if (t.columns !== void 0) {
      let c4 = [];
      for (let o in t.columns) {
        let R = t.columns[o];
        c4.push(T(o, R));
      }
      t.columnsFlat = c4, delete t.columns;
    }
    let n = new i("IMPORT_CSV_FROM_PATH", [e, r, t]);
    await this.postTask(n);
  }
  async insertJSONFromPath(e, r, t) {
    if (t.columns !== void 0) {
      let c4 = [];
      for (let o in t.columns) {
        let R = t.columns[o];
        c4.push(T(o, R));
      }
      t.columnsFlat = c4, delete t.columns;
    }
    let n = new i("IMPORT_JSON_FROM_PATH", [e, r, t]);
    await this.postTask(n);
  }
};
var F = async () => WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 14, 1, 12, 0, 65, 0, 65, 0, 65, 0, 252, 10, 0, 0, 11]));
var f = async () => WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 8, 1, 6, 0, 6, 64, 25, 11, 11]));
var U = async () => WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 123, 3, 2, 1, 0, 10, 10, 1, 8, 0, 65, 0, 253, 15, 253, 98, 11]));
var C = () => (async (s2) => {
  try {
    return typeof MessageChannel < "u" && new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(s2);
  } catch (e) {
    return false;
  }
})(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11]));
var _ = { name: "@duckdb/duckdb-wasm", version: "1.27.0", description: "DuckDB powered by WebAssembly", license: "MIT", repository: { type: "git", url: "https://github.com/duckdb/duckdb-wasm.git" }, keywords: ["sql", "duckdb", "relational", "database", "data", "query", "wasm", "analytics", "olap", "arrow", "parquet", "json", "csv"], dependencies: { "apache-arrow": "^11.0.0" }, devDependencies: { "@types/emscripten": "^1.39.6", "@types/jasmine": "^4.3.1", "@typescript-eslint/eslint-plugin": "^5.53.0", "@typescript-eslint/parser": "^5.49.0", esbuild: "^0.15.12", eslint: "^8.35.0", "eslint-plugin-jasmine": "^4.1.3", "eslint-plugin-react": "^7.32.2", "fast-glob": "^3.2.12", jasmine: "^4.5.0", "jasmine-core": "^5.0.0", "jasmine-spec-reporter": "^7.0.0", "js-sha256": "^0.9.0", karma: "^6.4.2", "karma-chrome-launcher": "^3.1.1", "karma-coverage": "^2.2.0", "karma-firefox-launcher": "^2.1.2", "karma-jasmine": "^5.1.0", "karma-jasmine-html-reporter": "^2.0.0", "karma-sourcemap-loader": "^0.3.8", "karma-spec-reporter": "^0.0.36", "make-dir": "^3.1.0", nyc: "^15.1.0", prettier: "^2.8.4", puppeteer: "^19.10.0", rimraf: "^4.3.0", s3rver: "^3.7.1", typedoc: "^0.24.8", typescript: "^4.8.4", "wasm-feature-detect": "^1.5.1", "web-worker": "^1.2.0" }, scripts: { "build:debug": "node bundle.mjs debug && tsc --emitDeclarationOnly", "build:release": "node bundle.mjs release && tsc --emitDeclarationOnly", docs: "typedoc", report: "node ./coverage.mjs", "test:node": "node --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs", "test:node:debug": "node --inspect-brk --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs", "test:node:coverage": "nyc -r json --report-dir ./coverage/node node --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs", "test:firefox": "karma start ./karma/tests-firefox.cjs", "test:chrome": "karma start ./karma/tests-chrome.cjs", "test:chrome:eh": "karma start ./karma/tests-chrome-eh.cjs", "test:chrome:coverage": "karma start ./karma/tests-chrome-coverage.cjs", "test:browser": "karma start ./karma/tests-all.cjs", "test:browser:debug": "karma start ./karma/tests-debug.cjs", test: "npm run test:chrome && npm run test:node", "test:coverage": "npm run test:chrome:coverage && npm run test:node:coverage && npm run report", lint: "eslint src test" }, files: ["dist", "!dist/types/test"], main: "dist/duckdb-browser.cjs", module: "dist/duckdb-browser.mjs", types: "dist/duckdb-browser.d.ts", jsdelivr: "dist/duckdb-browser.cjs", unpkg: "dist/duckdb-browser.mjs", sideEffects: false, browser: { fs: false, path: false, perf_hooks: false, os: false, worker_threads: false }, exports: { "./dist/duckdb-mvp.wasm": "./dist/duckdb-mvp.wasm", "./dist/duckdb-eh.wasm": "./dist/duckdb-eh.wasm", "./dist/duckdb-coi.wasm": "./dist/duckdb-coi.wasm", "./dist/duckdb-browser": "./dist/duckdb-browser.mjs", "./dist/duckdb-browser.cjs": "./dist/duckdb-browser.cjs", "./dist/duckdb-browser.mjs": "./dist/duckdb-browser.mjs", "./dist/duckdb-browser-blocking": "./dist/duckdb-browser-blocking.mjs", "./dist/duckdb-browser-blocking.mjs": "./dist/duckdb-browser-blocking.mjs", "./dist/duckdb-browser-blocking.cjs": "./dist/duckdb-browser-blocking.cjs", "./dist/duckdb-browser-coi.pthread.worker.js": "./dist/duckdb-browser-coi.pthread.worker.js", "./dist/duckdb-browser-coi.worker.js": "./dist/duckdb-browser-coi.worker.js", "./dist/duckdb-browser-eh.worker.js": "./dist/duckdb-browser-eh.worker.js", "./dist/duckdb-browser-mvp.worker.js": "./dist/duckdb-browser-mvp.worker.js", "./dist/duckdb-node": "./dist/duckdb-node.cjs", "./dist/duckdb-node.cjs": "./dist/duckdb-node.cjs", "./dist/duckdb-node-blocking": "./dist/duckdb-node-blocking.cjs", "./dist/duckdb-node-blocking.cjs": "./dist/duckdb-node-blocking.cjs", "./dist/duckdb-node-eh.worker.cjs": "./dist/duckdb-node-eh.worker.cjs", "./dist/duckdb-node-mvp.worker.cjs": "./dist/duckdb-node-mvp.worker.cjs", "./blocking": { browser: { types: "./dist/duckdb-browser-blocking.d.ts", import: "./dist/duckdb-browser-blocking.mjs", require: "./dist/duckdb-browser-blocking.cjs" }, node: { types: "./dist/duckdb-node-blocking.d.ts", require: "./dist/duckdb-node-blocking.cjs", import: "./dist/duckdb-node-blocking.cjs" }, types: "./dist/duckdb-browser-blocking.d.ts", import: "./dist/duckdb-browser-blocking.mjs", require: "./dist/duckdb-browser-blocking.cjs" }, ".": { browser: { types: "./dist/duckdb-browser.d.ts", import: "./dist/duckdb-browser.mjs", require: "./dist/duckdb-browser.cjs" }, node: { types: "./dist/duckdb-node.d.ts", import: "./dist/duckdb-node.cjs", require: "./dist/duckdb-node.cjs" }, types: "./dist/duckdb-browser.d.ts", import: "./dist/duckdb-browser.mjs", require: "./dist/duckdb-browser.cjs" } } };
var W = _.name;
var v = _.version;
var k = _.version.split(".");
var Oe = k[0];
var Fe = k[1];
var fe = k[2];
var B = () => typeof navigator > "u";
function Be() {
  let s2 = `https://cdn.jsdelivr.net/npm/${W}@${v}/dist/`;
  return { mvp: { mainModule: `${s2}duckdb-mvp.wasm`, mainWorker: `${s2}duckdb-browser-mvp.worker.js` }, eh: { mainModule: `${s2}duckdb-eh.wasm`, mainWorker: `${s2}duckdb-browser-eh.worker.js` } };
}
var I = null;
var y = null;
var g = null;
var S = null;
var h = null;
async function ae() {
  return I == null && (I = typeof BigInt64Array < "u"), y == null && (y = await f()), g == null && (g = await C()), S == null && (S = await U()), h == null && (h = await F()), { bigInt64Array: I, crossOriginIsolated: B() || globalThis.crossOriginIsolated || false, wasmExceptions: y, wasmSIMD: S, wasmThreads: g, wasmBulkMemory: h };
}
async function Me(s2) {
  let e = await ae();
  if (e.wasmExceptions) {
    if (e.wasmSIMD && e.wasmThreads && e.crossOriginIsolated && s2.coi)
      return { mainModule: s2.coi.mainModule, mainWorker: s2.coi.mainWorker, pthreadWorker: s2.coi.pthreadWorker };
    if (s2.eh)
      return { mainModule: s2.eh.mainModule, mainWorker: s2.eh.mainWorker, pthreadWorker: null };
  }
  return { mainModule: s2.mvp.mainModule, mainWorker: s2.mvp.mainWorker, pthreadWorker: null };
}
var Q = $(x());
function de() {
  let s2 = new TextDecoder();
  return (e) => (typeof SharedArrayBuffer < "u" && e.buffer instanceof SharedArrayBuffer && (e = new Uint8Array(e)), s2.decode(e));
}
var Ye = de();
var q = ((o) => (o[o.BUFFER = 0] = "BUFFER", o[o.NODE_FS = 1] = "NODE_FS", o[o.BROWSER_FILEREADER = 2] = "BROWSER_FILEREADER", o[o.BROWSER_FSACCESS = 3] = "BROWSER_FSACCESS", o[o.HTTP = 4] = "HTTP", o[o.S3 = 5] = "S3", o))(q || {});

// ../core/src/connectors/wasm.js
async function wasmConnector(options) {
  const db = await initDatabase(options);
  const con = await db.connect();
  return {
    db,
    con,
    query: async (query) => {
      const { type: type2, sql: sql2 } = query;
      const result = await con.query(sql2);
      return type2 === "exec" ? void 0 : type2 === "arrow" ? result : Array.from(result);
    }
  };
}
async function initDatabase({
  log: log3 = false
} = {}) {
  const JSDELIVR_BUNDLES = Be();
  const bundle = await Me(JSDELIVR_BUNDLES);
  const worker_url = URL.createObjectURL(
    new Blob([`importScripts("${bundle.mainWorker}");`], { type: "text/javascript" })
  );
  const worker = new Worker(worker_url);
  const logger = log3 ? new P() : new A();
  const db = new w(logger, worker);
  await db.instantiate(bundle.mainModule, bundle.pthreadWorker);
  URL.revokeObjectURL(worker_url);
  return db;
}

// ../core/src/util/synchronizer.js
function synchronizer() {
  const set3 = /* @__PURE__ */ new Set();
  let done;
  let promise = new Promise((resolve) => done = resolve);
  return {
    /**
     * Mark an item as pending.
     * @param {*} item An item to synchronize on.
     */
    pending(item) {
      set3.add(item);
    },
    /**
     * Mark a pending item as ready, indicating it is
     * ready for a synchronized update.
     * @param {*} item An item to synchronize on.
     * @returns {boolean} True if the synchronizer is ready to
     *  resolve, false otherwise.
     */
    ready(item) {
      set3.delete(item);
      return set3.size === 0;
    },
    /**
     * Resolve the current synchronization cycle, causing the synchronize
     * promise to resolve and thereby trigger downstream updates.
     */
    resolve() {
      promise = new Promise((resolve) => {
        done();
        done = resolve;
      });
    },
    /**
     * The promise for the current synchronization cycle.
     * @return {Promise} The synchronization promise.
     */
    get promise() {
      return promise;
    }
  };
}

// ../inputs/src/input.js
function input(InputClass, options) {
  const input2 = new InputClass(options);
  coordinator().connect(input2);
  return input2.element;
}

// ../inputs/src/Menu.js
var isObject3 = (v3) => {
  return v3 && typeof v3 === "object" && !Array.isArray(v3);
};
var menu = (options) => input(Menu, options);
var Menu = class extends MosaicClient {
  constructor({
    element,
    filterBy,
    from: from2,
    column: column3,
    label: label2 = column3,
    format: format3 = (x3) => x3,
    // TODO
    options,
    value,
    as
  } = {}) {
    super(filterBy);
    this.from = from2;
    this.column = column3;
    this.selection = as;
    this.format = format3;
    this.element = element ?? document.createElement("div");
    this.element.setAttribute("class", "input");
    this.element.value = this;
    const lab3 = document.createElement("label");
    lab3.innerText = label2 || column3;
    this.element.appendChild(lab3);
    this.select = document.createElement("select");
    if (options) {
      this.data = options.map((value2) => isObject3(value2) ? value2 : { value: value2 });
      this.update();
    }
    value = value ?? this.selection?.value ?? this.data?.[0]?.value;
    if (this.selection?.value === void 0)
      this.publish(value);
    this.element.appendChild(this.select);
    if (this.selection) {
      this.select.addEventListener("input", () => {
        this.publish(this.selectedValue() ?? null);
      });
      if (!isSelection(this.selection)) {
        this.selection.addEventListener("value", (value2) => {
          if (value2 !== this.select.value) {
            this.selectedValue(value2);
          }
        });
      }
    }
  }
  selectedValue(value) {
    if (arguments.length === 0) {
      const index2 = this.select.selectedIndex;
      return this.data[index2].value;
    } else {
      const index2 = this.data?.findIndex((opt) => opt.value === value);
      if (index2 >= 0) {
        this.select.selectedIndex = index2;
      } else {
        this.select.value = String(value);
      }
    }
  }
  reset() {
    this.select.selectedIndex = this.from ? 0 : -1;
  }
  publish(value) {
    const { selection: selection2, column: column3 } = this;
    if (isSelection(selection2)) {
      selection2.update({
        source: this,
        schema: { type: "point" },
        value,
        predicate: value ? eq(column3, literal(value)) : null
      });
    } else if (isParam(selection2)) {
      selection2.update(value);
    }
  }
  query(filter3 = []) {
    const { from: from2, column: column3 } = this;
    if (!from2)
      return null;
    return Query.from(from2).select({ value: column3 }).distinct().where(filter3).orderby(column3);
  }
  queryResult(data) {
    this.data = [{ value: "", label: "All" }, ...data];
    return this;
  }
  update() {
    const { data, format: format3, select: select2 } = this;
    select2.replaceChildren();
    for (const { value, label: label2 } of data) {
      const opt = document.createElement("option");
      opt.setAttribute("value", value);
      opt.innerText = label2 ?? format3(value);
      this.select.appendChild(opt);
    }
    if (this.selection) {
      this.selectedValue(this.selection?.value ?? "");
    }
    return this;
  }
};

// ../inputs/src/Search.js
var FUNCTIONS = { contains, prefix, suffix, regexp: regexp_matches };
var _id = 0;
var search = (options) => input(Search, options);
var Search = class extends MosaicClient {
  constructor({
    element,
    filterBy,
    from: from2,
    column: column3,
    label: label2,
    type: type2 = "contains",
    as
  } = {}) {
    super(filterBy);
    this.id = "search_" + ++_id;
    this.type = type2;
    this.from = from2;
    this.column = column3;
    this.selection = as;
    this.element = element ?? document.createElement("div");
    this.element.setAttribute("class", "input");
    this.element.value = this;
    if (label2) {
      const lab3 = document.createElement("label");
      lab3.setAttribute("for", this.id);
      lab3.innerText = label2;
      this.element.appendChild(lab3);
    }
    this.searchbox = document.createElement("input");
    this.searchbox.setAttribute("id", this.id);
    this.searchbox.setAttribute("type", "text");
    this.searchbox.setAttribute("placeholder", "Query");
    this.element.appendChild(this.searchbox);
    if (this.selection) {
      this.searchbox.addEventListener("input", () => {
        this.publish(this.searchbox.value || null);
      });
      if (!isSelection(this.selection)) {
        this.selection.addEventListener("value", (value) => {
          if (value !== this.searchbox.value) {
            this.searchbox.value = value;
          }
        });
      }
    }
  }
  reset() {
    this.searchbox.value = "";
  }
  publish(value) {
    const { selection: selection2, column: column3, type: type2 } = this;
    if (isSelection(selection2)) {
      selection2.update({
        source: this,
        schema: { type: type2 },
        value,
        predicate: value ? FUNCTIONS[type2](column3, literal(value)) : null
      });
    } else if (isParam(selection2)) {
      selection2.update(value);
    }
  }
  query(filter3 = []) {
    const { from: from2, column: column3 } = this;
    if (!from2)
      return null;
    return Query.from(from2).select({ list: column3 }).distinct().where(filter3);
  }
  queryResult(data) {
    this.data = data;
    return this;
  }
  update() {
    const list = document.createElement("datalist");
    const id2 = `${this.id}_list`;
    list.setAttribute("id", id2);
    for (const d of this.data) {
      const opt = document.createElement("option");
      opt.setAttribute("value", d.list);
      list.append(opt);
    }
    if (this.datalist)
      this.datalist.remove();
    this.element.appendChild(this.datalist = list);
    this.searchbox.setAttribute("list", id2);
    return this;
  }
};

// ../inputs/src/Slider.js
var _id2 = 0;
var slider = (options) => input(Slider, options);
var Slider = class extends MosaicClient {
  constructor({
    element,
    filterBy,
    as,
    min: min5,
    max: max4,
    step,
    from: from2,
    column: column3,
    label: label2 = column3,
    value = as?.value,
    width: width2
  } = {}) {
    super(filterBy);
    this.id = "slider_" + ++_id2;
    this.from = from2;
    this.column = column3 || "value";
    this.selection = as;
    this.min = min5;
    this.max = max4;
    this.step = step;
    this.element = element || document.createElement("div");
    this.element.setAttribute("class", "input");
    this.element.value = this;
    if (label2) {
      const lab3 = document.createElement("label");
      lab3.setAttribute("for", this.id);
      lab3.innerText = label2;
      this.element.appendChild(lab3);
    }
    this.slider = document.createElement("input");
    this.slider.setAttribute("id", this.id);
    this.slider.setAttribute("type", "range");
    if (width2 != null)
      this.slider.style.width = `${+width2}px`;
    if (min5 != null)
      this.slider.setAttribute("min", min5);
    if (max4 != null)
      this.slider.setAttribute("max", max4);
    if (step != null)
      this.slider.setAttribute("step", step);
    if (value != null) {
      this.slider.setAttribute("value", value);
      if (this.selection?.value === void 0)
        this.publish(value);
    }
    this.element.appendChild(this.slider);
    if (this.selection) {
      this.slider.addEventListener("input", () => {
        this.publish(+this.slider.value);
      });
      if (!isSelection(this.selection)) {
        this.selection.addEventListener("value", (value2) => {
          if (value2 !== +this.slider.value) {
            this.slider.value = value2;
          }
        });
      }
    }
  }
  query(filter3 = []) {
    const { from: from2, column: column3 } = this;
    if (!from2 || this.min != null && this.max != null)
      return null;
    return Query.select({ min: min(column3), max: max(column3) }).from(from2).where(filter3);
  }
  queryResult(data) {
    const { min: min5, max: max4 } = Array.from(data)[0];
    if (this.min == null)
      this.slider.setAttribute("min", min5);
    if (this.max == null)
      this.slider.setAttribute("max", max4);
    if (this.step == null)
      this.slider.setAttribute("step", (max4 - min5) / 500);
    return this;
  }
  publish(value) {
    const { selection: selection2, column: column3 } = this;
    if (isSelection(selection2)) {
      selection2.update({
        source: this,
        schema: { type: "point" },
        value,
        predicate: eq(column3, literal(value))
      });
    } else if (isParam(this.selection)) {
      selection2.update(value);
    }
  }
};

// ../../node_modules/isoformat/src/format.js
function format(date2, fallback) {
  if (!(date2 instanceof Date))
    date2 = /* @__PURE__ */ new Date(+date2);
  if (isNaN(date2))
    return typeof fallback === "function" ? fallback(date2) : fallback;
  const hours = date2.getUTCHours();
  const minutes = date2.getUTCMinutes();
  const seconds2 = date2.getUTCSeconds();
  const milliseconds2 = date2.getUTCMilliseconds();
  return `${formatYear(date2.getUTCFullYear(), 4)}-${pad(date2.getUTCMonth() + 1, 2)}-${pad(date2.getUTCDate(), 2)}${hours || minutes || seconds2 || milliseconds2 ? `T${pad(hours, 2)}:${pad(minutes, 2)}${seconds2 || milliseconds2 ? `:${pad(seconds2, 2)}${milliseconds2 ? `.${pad(milliseconds2, 3)}` : ``}` : ``}Z` : ``}`;
}
function formatYear(year) {
  return year < 0 ? `-${pad(-year, 6)}` : year > 9999 ? `+${pad(year, 6)}` : pad(year, 4);
}
function pad(value, width2) {
  return `${value}`.padStart(width2, "0");
}

// ../../node_modules/isoformat/src/parse.js
var re2 = /^(?:[-+]\d{2})?\d{4}(?:-\d{2}(?:-\d{2})?)?(?:T\d{2}:\d{2}(?::\d{2}(?:\.\d{3})?)?(?:Z|[-+]\d{2}:?\d{2})?)?$/;
function parse(string2, fallback) {
  if (!re2.test(string2 += ""))
    return typeof fallback === "function" ? fallback(string2) : fallback;
  return new Date(string2);
}

// ../inputs/src/util/format.js
var formatLocaleAuto = localize((locale3) => {
  const formatNumber3 = formatLocaleNumber(locale3);
  return (value) => value == null ? "" : typeof value === "number" ? formatNumber3(value) : value instanceof Date ? formatDate(value) : `${value}`;
});
var formatLocaleNumber = localize((locale3) => {
  return (value) => value === 0 ? "0" : value.toLocaleString(locale3);
});
var formatAuto = formatLocaleAuto();
var formatNumber = formatLocaleNumber();
function formatDate(date2) {
  return format(date2, "Invalid Date");
}
function localize(f2) {
  let key = localize, value;
  return (locale3 = "en") => locale3 === key ? value : value = f2(key = locale3);
}

// ../inputs/src/Table.js
var _id3 = -1;
var table = (options) => input(Table3, options);
var Table3 = class extends MosaicClient {
  constructor({
    element,
    filterBy,
    from: from2,
    columns = ["*"],
    align: align2 = {},
    format: format3,
    width: width2,
    maxWidth,
    height: height2 = 500,
    rowBatch = 100
  } = {}) {
    super(filterBy);
    this.id = `table-${++_id3}`;
    this.from = from2;
    this.columns = columns;
    this.format = format3;
    this.align = align2;
    this.widths = typeof width2 === "object" ? width2 : {};
    this.offset = 0;
    this.limit = +rowBatch;
    this.pending = false;
    this.sortHeader = null;
    this.sortColumn = null;
    this.sortDesc = false;
    this.element = element || document.createElement("div");
    this.element.setAttribute("id", this.id);
    this.element.value = this;
    if (typeof width2 === "number")
      this.element.style.width = `${width2}px`;
    if (maxWidth)
      this.element.style.maxWidth = `${maxWidth}px`;
    this.element.style.maxHeight = `${height2}px`;
    this.element.style.overflow = "auto";
    let prevScrollTop = -1;
    this.element.addEventListener("scroll", (evt) => {
      const { pending, loaded } = this;
      const { scrollHeight, scrollTop, clientHeight } = evt.target;
      const back = scrollTop < prevScrollTop;
      prevScrollTop = scrollTop;
      if (back || pending || loaded)
        return;
      if (scrollHeight - scrollTop < 2 * clientHeight) {
        this.pending = true;
        this.requestData(this.offset + this.limit);
      }
    });
    this.tbl = document.createElement("table");
    this.element.appendChild(this.tbl);
    this.head = document.createElement("thead");
    this.tbl.appendChild(this.head);
    this.body = document.createElement("tbody");
    this.tbl.appendChild(this.body);
    this.style = document.createElement("style");
    this.element.appendChild(this.style);
  }
  requestData(offset2 = 0) {
    this.offset = offset2;
    const query = this.query(this.filterBy?.predicate(this));
    this.requestQuery(query);
    coordinator().prefetch(query.clone().offset(offset2 + this.limit));
  }
  fields() {
    return this.columns.map((name2) => column(this.from, name2));
  }
  fieldInfo(info) {
    this.schema = info;
    const thead = this.head;
    thead.innerHTML = "";
    const tr = document.createElement("tr");
    for (const { column: column3 } of info) {
      const th = document.createElement("th");
      th.addEventListener("click", (evt) => this.sort(evt, column3));
      th.appendChild(document.createElement("span"));
      th.appendChild(document.createTextNode(column3));
      tr.appendChild(th);
    }
    thead.appendChild(tr);
    this.formats = formatof(this.format, info);
    this.style.innerText = tableCSS(
      this.id,
      alignof(this.align, info),
      widthof(this.widths, info)
    );
    return this;
  }
  query(filter3 = []) {
    const { from: from2, limit, offset: offset2, schema, sortColumn, sortDesc } = this;
    return Query.from(from2).select(schema.map((s2) => s2.column)).where(filter3).orderby(sortColumn ? sortDesc ? desc(sortColumn) : sortColumn : []).limit(limit).offset(offset2);
  }
  queryResult(data) {
    if (!this.pending) {
      this.loaded = false;
      this.body.replaceChildren();
    }
    this.data = data;
    return this;
  }
  update() {
    const { body, formats, data, schema, limit } = this;
    const nf = schema.length;
    let count4 = 0;
    for (const row of data) {
      ++count4;
      const tr = document.createElement("tr");
      for (let i2 = 0; i2 < nf; ++i2) {
        const value = row[schema[i2].column];
        const td = document.createElement("td");
        td.innerText = value == null ? "" : formats[i2](value);
        tr.appendChild(td);
      }
      body.appendChild(tr);
    }
    if (count4 < limit) {
      this.loaded = true;
    }
    this.pending = false;
    return this;
  }
  sort(event, column3) {
    if (column3 === this.sortColumn) {
      this.sortDesc = !this.sortDesc;
    } else {
      this.sortColumn = column3;
      this.sortDesc = false;
    }
    const th = event.currentTarget;
    const currentHeader = this.sortHeader;
    if (currentHeader === th && event.metaKey) {
      currentHeader.firstChild.textContent = "";
      this.sortHeader = null;
      this.sortColumn = null;
    } else {
      if (currentHeader)
        currentHeader.firstChild.textContent = "";
      this.sortHeader = th;
      th.firstChild.textContent = this.sortDesc ? "\u25BE" : "\u25B4";
    }
    this.requestData();
  }
};
function formatof(base = {}, schema, locale3) {
  return schema.map(({ column: column3, type: type2 }) => {
    if (column3 in base) {
      return base[column3];
    } else {
      switch (type2) {
        case "number":
          return formatLocaleNumber(locale3);
        case "date":
          return formatDate;
        default:
          return formatLocaleAuto(locale3);
      }
    }
  });
}
function alignof(base = {}, schema) {
  return schema.map(({ column: column3, type: type2 }) => {
    if (column3 in base) {
      return base[column3];
    } else if (type2 === "number") {
      return "right";
    } else {
      return "left";
    }
  });
}
function widthof(base = {}, schema) {
  return schema.map(({ column: column3 }) => base[column3]);
}
function tableCSS(id2, aligns, widths) {
  const styles2 = [];
  aligns.forEach((a2, i2) => {
    const w2 = +widths[i2];
    if (a2 !== "left" || w2) {
      const align2 = a2 !== "left" ? `text-align:${a2};` : "";
      const width2 = w2 ? `width:${w2}px;max-width:${w2}px;` : "";
      styles2.push(`#${id2} tr>:nth-child(${i2 + 1}) {${align2}${width2}}`);
    }
  });
  return styles2.join(" ");
}

// src/symbols.js
var Fixed = Symbol("Fixed");
var Transient = Symbol("Transient");
var Transform = Symbol("Transform");

// src/transforms/bin.js
var EXTENT = [
  "rectY-x",
  "rectX-y",
  "rect-x",
  "rect-y"
];
function hasExtent(channel, type2) {
  return EXTENT.includes(`${type2}-${channel}`);
}
function bin(field2, options = { steps: 25 }) {
  const fn = (mark2, channel) => {
    return hasExtent(channel, mark2.type) ? {
      [`${channel}1`]: binField(mark2, field2, options),
      [`${channel}2`]: binField(mark2, field2, { ...options, offset: 1 })
    } : {
      [channel]: binField(mark2, field2, options)
    };
  };
  fn[Transform] = true;
  return fn;
}
function binField(mark2, column3, options) {
  return {
    column: column3,
    label: column3,
    get stats() {
      return ["min", "max"];
    },
    get columns() {
      return [column3];
    },
    get basis() {
      return column3;
    },
    toString() {
      const { min: min5, max: max4 } = mark2.stats[column3];
      const b2 = bins(min5, max4, options);
      const col = asColumn(column3);
      const base = b2.min === 0 ? col : `(${col} - ${b2.min})`;
      const alpha = `${(b2.max - b2.min) / b2.steps}::DOUBLE`;
      const off = options.offset ? `${options.offset} + ` : "";
      return `${min5} + ${alpha} * (${off}FLOOR(${base} / ${alpha})::INTEGER)`;
    }
  };
}
function bins(min5, max4, options) {
  let { steps = 25, minstep = 0, nice: nice3 = true } = options;
  if (nice3 !== false) {
    const span = max4 - min5;
    const maxb = steps;
    const logb = Math.LN10;
    const level = Math.ceil(Math.log(maxb) / logb);
    let step = Math.max(
      minstep,
      Math.pow(10, Math.round(Math.log(span) / logb) - level)
    );
    while (Math.ceil(span / step) > maxb) {
      step *= 10;
    }
    const div = [5, 2];
    let v3;
    for (let i2 = 0, n = div.length; i2 < n; ++i2) {
      v3 = step / div[i2];
      if (v3 >= minstep && span / v3 <= maxb)
        step = v3;
    }
    v3 = Math.log(step);
    const precision = v3 >= 0 ? 0 : ~~(-v3 / logb) + 1;
    const eps2 = Math.pow(10, -precision - 1);
    v3 = Math.floor(min5 / step + eps2) * step;
    min5 = min5 < v3 ? v3 - step : v3;
    max4 = Math.ceil(max4 / step) * step;
    steps = Math.round((max4 - min5) / step);
  }
  return { min: min5, max: max4, steps };
}

// src/directives/attributes.js
var attributes_exports = {};
__export(attributes_exports, {
  align: () => align,
  aspectRatio: () => aspectRatio,
  attribute: () => attribute,
  attributes: () => attributes,
  axis: () => axis2,
  colorClamp: () => colorClamp,
  colorDomain: () => colorDomain,
  colorInterpolate: () => colorInterpolate,
  colorLabel: () => colorLabel,
  colorNice: () => colorNice,
  colorPivot: () => colorPivot,
  colorRange: () => colorRange,
  colorReverse: () => colorReverse,
  colorScale: () => colorScale,
  colorScheme: () => colorScheme,
  colorSymmetric: () => colorSymmetric,
  colorTickFormat: () => colorTickFormat,
  colorZero: () => colorZero,
  facetGrid: () => facetGrid,
  facetLabel: () => facetLabel,
  facetMargin: () => facetMargin,
  facetMarginBottom: () => facetMarginBottom,
  facetMarginLeft: () => facetMarginLeft,
  facetMarginRight: () => facetMarginRight,
  facetMarginTop: () => facetMarginTop,
  fxAlign: () => fxAlign,
  fxAriaDescription: () => fxAriaDescription,
  fxAriaLabel: () => fxAriaLabel,
  fxAxis: () => fxAxis,
  fxDomain: () => fxDomain,
  fxFontVariant: () => fxFontVariant,
  fxGrid: () => fxGrid,
  fxInset: () => fxInset,
  fxInsetLeft: () => fxInsetLeft,
  fxInsetRight: () => fxInsetRight,
  fxLabel: () => fxLabel,
  fxLabelAnchor: () => fxLabelAnchor,
  fxLabelOffset: () => fxLabelOffset,
  fxLine: () => fxLine,
  fxNice: () => fxNice,
  fxPadding: () => fxPadding,
  fxPaddingInner: () => fxPaddingInner,
  fxPaddingOuter: () => fxPaddingOuter,
  fxRange: () => fxRange,
  fxReverse: () => fxReverse,
  fxRound: () => fxRound,
  fxTickFormat: () => fxTickFormat,
  fxTickPadding: () => fxTickPadding,
  fxTickRotate: () => fxTickRotate,
  fxTickSize: () => fxTickSize,
  fxTickSpacing: () => fxTickSpacing,
  fxTicks: () => fxTicks,
  fyAlign: () => fyAlign,
  fyAriaDescription: () => fyAriaDescription,
  fyAriaLabel: () => fyAriaLabel,
  fyAxis: () => fyAxis,
  fyDomain: () => fyDomain,
  fyFontVariant: () => fyFontVariant,
  fyGrid: () => fyGrid,
  fyInset: () => fyInset,
  fyInsetBottom: () => fyInsetBottom,
  fyInsetTop: () => fyInsetTop,
  fyLabel: () => fyLabel,
  fyLabelAnchor: () => fyLabelAnchor,
  fyLabelOffset: () => fyLabelOffset,
  fyLine: () => fyLine,
  fyNice: () => fyNice,
  fyPadding: () => fyPadding,
  fyPaddingInner: () => fyPaddingInner,
  fyPaddingOuter: () => fyPaddingOuter,
  fyRange: () => fyRange,
  fyReverse: () => fyReverse,
  fyRound: () => fyRound,
  fyTickFormat: () => fyTickFormat,
  fyTickPadding: () => fyTickPadding,
  fyTickRotate: () => fyTickRotate,
  fyTickSize: () => fyTickSize,
  fyTickSpacing: () => fyTickSpacing,
  fyTicks: () => fyTicks,
  grid: () => grid,
  height: () => height,
  inset: () => inset,
  label: () => label,
  lengthClamp: () => lengthClamp,
  lengthDomain: () => lengthDomain,
  lengthNice: () => lengthNice,
  lengthRange: () => lengthRange,
  lengthScale: () => lengthScale,
  lengthZero: () => lengthZero,
  margin: () => margin,
  marginBottom: () => marginBottom,
  marginLeft: () => marginLeft,
  marginRight: () => marginRight,
  marginTop: () => marginTop,
  margins: () => margins,
  name: () => name,
  opacityClamp: () => opacityClamp,
  opacityDomain: () => opacityDomain,
  opacityLabel: () => opacityLabel,
  opacityNice: () => opacityNice,
  opacityRange: () => opacityRange,
  opacityReverse: () => opacityReverse,
  opacityScale: () => opacityScale,
  opacityTickFormat: () => opacityTickFormat,
  opacityZero: () => opacityZero,
  padding: () => padding,
  projectionClip: () => projectionClip,
  projectionDomain: () => projectionDomain,
  projectionInset: () => projectionInset,
  projectionInsetBottom: () => projectionInsetBottom,
  projectionInsetLeft: () => projectionInsetLeft,
  projectionInsetRight: () => projectionInsetRight,
  projectionInsetTop: () => projectionInsetTop,
  projectionParallels: () => projectionParallels,
  projectionPrecision: () => projectionPrecision,
  projectionRotate: () => projectionRotate,
  projectionType: () => projectionType,
  rClamp: () => rClamp,
  rDomain: () => rDomain,
  rNice: () => rNice,
  rRange: () => rRange,
  rScale: () => rScale,
  rZero: () => rZero,
  round: () => round2,
  style: () => style,
  width: () => width,
  xAlign: () => xAlign,
  xAriaDescription: () => xAriaDescription,
  xAriaLabel: () => xAriaLabel,
  xAxis: () => xAxis,
  xClamp: () => xClamp,
  xDomain: () => xDomain,
  xFontVariant: () => xFontVariant,
  xGrid: () => xGrid,
  xInset: () => xInset,
  xInsetLeft: () => xInsetLeft,
  xInsetRight: () => xInsetRight,
  xLabel: () => xLabel,
  xLabelAnchor: () => xLabelAnchor,
  xLabelOffset: () => xLabelOffset,
  xLine: () => xLine,
  xNice: () => xNice,
  xPadding: () => xPadding,
  xPaddingInner: () => xPaddingInner,
  xPaddingOuter: () => xPaddingOuter,
  xRange: () => xRange,
  xReverse: () => xReverse,
  xRound: () => xRound,
  xScale: () => xScale,
  xTickFormat: () => xTickFormat,
  xTickPadding: () => xTickPadding,
  xTickRotate: () => xTickRotate,
  xTickSize: () => xTickSize,
  xTickSpacing: () => xTickSpacing,
  xTicks: () => xTicks,
  xZero: () => xZero,
  xyDomain: () => xyDomain,
  yAlign: () => yAlign,
  yAriaDescription: () => yAriaDescription,
  yAriaLabel: () => yAriaLabel,
  yAxis: () => yAxis,
  yClamp: () => yClamp,
  yDomain: () => yDomain,
  yFontVariant: () => yFontVariant,
  yGrid: () => yGrid,
  yInset: () => yInset,
  yInsetBottom: () => yInsetBottom,
  yInsetTop: () => yInsetTop,
  yLabel: () => yLabel,
  yLabelAnchor: () => yLabelAnchor,
  yLabelOffset: () => yLabelOffset,
  yLine: () => yLine,
  yNice: () => yNice,
  yPadding: () => yPadding,
  yPaddingInner: () => yPaddingInner,
  yPaddingOuter: () => yPaddingOuter,
  yRange: () => yRange,
  yReverse: () => yReverse,
  yRound: () => yRound,
  yScale: () => yScale,
  yTickFormat: () => yTickFormat,
  yTickPadding: () => yTickPadding,
  yTickRotate: () => yTickRotate,
  yTickSize: () => yTickSize,
  yTickSpacing: () => yTickSpacing,
  yTicks: () => yTicks,
  yZero: () => yZero
});

// ../../node_modules/@observablehq/plot/src/index.js
var src_exports = {};
__export(src_exports, {
  Area: () => Area,
  Arrow: () => Arrow,
  BarX: () => BarX,
  BarY: () => BarY,
  Cell: () => Cell,
  Contour: () => Contour,
  Density: () => Density,
  Dot: () => Dot,
  Frame: () => Frame,
  Geo: () => Geo,
  Hexgrid: () => Hexgrid,
  Image: () => Image,
  Line: () => Line,
  Link: () => Link,
  Mark: () => Mark,
  Raster: () => Raster,
  Rect: () => Rect,
  RuleX: () => RuleX,
  RuleY: () => RuleY,
  Text: () => Text,
  TickX: () => TickX,
  TickY: () => TickY,
  Tip: () => Tip,
  Vector: () => Vector3,
  area: () => area,
  areaX: () => areaX,
  areaY: () => areaY,
  arrow: () => arrow,
  auto: () => auto,
  autoSpec: () => autoSpec,
  axisFx: () => axisFx,
  axisFy: () => axisFy,
  axisX: () => axisX,
  axisY: () => axisY,
  barX: () => barX,
  barY: () => barY,
  bin: () => bin2,
  binX: () => binX,
  binY: () => binY,
  boxX: () => boxX,
  boxY: () => boxY,
  cell: () => cell,
  cellX: () => cellX,
  cellY: () => cellY,
  centroid: () => centroid,
  circle: () => circle,
  cluster: () => cluster,
  column: () => column2,
  contour: () => contour,
  crosshair: () => crosshair,
  crosshairX: () => crosshairX,
  crosshairY: () => crosshairY,
  delaunayLink: () => delaunayLink,
  delaunayMesh: () => delaunayMesh,
  density: () => density,
  dodgeX: () => dodgeX,
  dodgeY: () => dodgeY,
  dot: () => dot,
  dotX: () => dotX,
  dotY: () => dotY,
  filter: () => filter2,
  formatIsoDate: () => formatIsoDate,
  formatMonth: () => formatMonth,
  formatWeekday: () => formatWeekday,
  frame: () => frame2,
  geo: () => geo,
  geoCentroid: () => geoCentroid,
  graticule: () => graticule2,
  gridFx: () => gridFx,
  gridFy: () => gridFy,
  gridX: () => gridX,
  gridY: () => gridY,
  group: () => group2,
  groupX: () => groupX,
  groupY: () => groupY,
  groupZ: () => groupZ,
  hexagon: () => hexagon,
  hexbin: () => hexbin,
  hexgrid: () => hexgrid,
  hull: () => hull,
  identity: () => identity7,
  image: () => image,
  indexOf: () => indexOf,
  initializer: () => initializer,
  interpolateNearest: () => interpolateNearest,
  interpolateNone: () => interpolateNone,
  interpolatorBarycentric: () => interpolatorBarycentric,
  interpolatorRandomWalk: () => interpolatorRandomWalk,
  legend: () => legend,
  line: () => line,
  lineX: () => lineX,
  lineY: () => lineY,
  linearRegressionX: () => linearRegressionX,
  linearRegressionY: () => linearRegressionY,
  link: () => link2,
  map: () => map3,
  mapX: () => mapX,
  mapY: () => mapY,
  marks: () => marks,
  normalize: () => normalize3,
  normalizeX: () => normalizeX,
  normalizeY: () => normalizeY,
  plot: () => plot,
  pointer: () => pointer,
  pointerX: () => pointerX,
  pointerY: () => pointerY,
  raster: () => raster,
  rect: () => rect,
  rectX: () => rectX,
  rectY: () => rectY,
  reverse: () => reverse2,
  ruleX: () => ruleX,
  ruleY: () => ruleY,
  scale: () => scale2,
  select: () => select,
  selectFirst: () => selectFirst,
  selectLast: () => selectLast,
  selectMaxX: () => selectMaxX,
  selectMaxY: () => selectMaxY,
  selectMinX: () => selectMinX,
  selectMinY: () => selectMinY,
  shuffle: () => shuffle,
  sort: () => sort2,
  sphere: () => sphere,
  spike: () => spike,
  stackX: () => stackX,
  stackX1: () => stackX1,
  stackX2: () => stackX2,
  stackY: () => stackY,
  stackY1: () => stackY1,
  stackY2: () => stackY2,
  text: () => text,
  textX: () => textX,
  textY: () => textY,
  tickX: () => tickX,
  tickY: () => tickY,
  tip: () => tip,
  transform: () => basic,
  tree: () => tree,
  treeLink: () => treeLink,
  treeNode: () => treeNode,
  valueof: () => valueof,
  vector: () => vector,
  vectorX: () => vectorX,
  vectorY: () => vectorY,
  voronoi: () => voronoi,
  voronoiMesh: () => voronoiMesh,
  window: () => window2,
  windowX: () => windowX,
  windowY: () => windowY
});

// ../../node_modules/d3-array/src/ascending.js
function ascending(a2, b2) {
  return a2 == null || b2 == null ? NaN : a2 < b2 ? -1 : a2 > b2 ? 1 : a2 >= b2 ? 0 : NaN;
}

// ../../node_modules/d3-array/src/descending.js
function descending(a2, b2) {
  return a2 == null || b2 == null ? NaN : b2 < a2 ? -1 : b2 > a2 ? 1 : b2 >= a2 ? 0 : NaN;
}

// ../../node_modules/d3-array/src/bisector.js
function bisector(f2) {
  let compare1, compare2, delta;
  if (f2.length !== 2) {
    compare1 = ascending;
    compare2 = (d, x3) => ascending(f2(d), x3);
    delta = (d, x3) => f2(d) - x3;
  } else {
    compare1 = f2 === ascending || f2 === descending ? f2 : zero;
    compare2 = f2;
    delta = f2;
  }
  function left2(a2, x3, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid2 = lo + hi >>> 1;
        if (compare2(a2[mid2], x3) < 0)
          lo = mid2 + 1;
        else
          hi = mid2;
      } while (lo < hi);
    }
    return lo;
  }
  function right2(a2, x3, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid2 = lo + hi >>> 1;
        if (compare2(a2[mid2], x3) <= 0)
          lo = mid2 + 1;
        else
          hi = mid2;
      } while (lo < hi);
    }
    return lo;
  }
  function center2(a2, x3, lo = 0, hi = a2.length) {
    const i2 = left2(a2, x3, lo, hi - 1);
    return i2 > lo && delta(a2[i2 - 1], x3) > -delta(a2[i2], x3) ? i2 - 1 : i2;
  }
  return { left: left2, center: center2, right: right2 };
}
function zero() {
  return 0;
}

// ../../node_modules/d3-array/src/number.js
function number(x3) {
  return x3 === null ? NaN : +x3;
}
function* numbers(values2, valueof2) {
  if (valueof2 === void 0) {
    for (let value of values2) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values2) {
      if ((value = valueof2(value, ++index2, values2)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}

// ../../node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;

// ../../node_modules/d3-array/src/blur.js
var blur2 = Blur2(blurf);
var blurImage = Blur2(blurfImage);
function Blur2(blur3) {
  return function(data, rx, ry = rx) {
    if (!((rx = +rx) >= 0))
      throw new RangeError("invalid rx");
    if (!((ry = +ry) >= 0))
      throw new RangeError("invalid ry");
    let { data: values2, width: width2, height: height2 } = data;
    if (!((width2 = Math.floor(width2)) >= 0))
      throw new RangeError("invalid width");
    if (!((height2 = Math.floor(height2 !== void 0 ? height2 : values2.length / width2)) >= 0))
      throw new RangeError("invalid height");
    if (!width2 || !height2 || !rx && !ry)
      return data;
    const blurx = rx && blur3(rx);
    const blury = ry && blur3(ry);
    const temp = values2.slice();
    if (blurx && blury) {
      blurh(blurx, temp, values2, width2, height2);
      blurh(blurx, values2, temp, width2, height2);
      blurh(blurx, temp, values2, width2, height2);
      blurv(blury, values2, temp, width2, height2);
      blurv(blury, temp, values2, width2, height2);
      blurv(blury, values2, temp, width2, height2);
    } else if (blurx) {
      blurh(blurx, values2, temp, width2, height2);
      blurh(blurx, temp, values2, width2, height2);
      blurh(blurx, values2, temp, width2, height2);
    } else if (blury) {
      blurv(blury, values2, temp, width2, height2);
      blurv(blury, temp, values2, width2, height2);
      blurv(blury, values2, temp, width2, height2);
    }
    return data;
  };
}
function blurh(blur3, T2, S2, w2, h2) {
  for (let y3 = 0, n = w2 * h2; y3 < n; ) {
    blur3(T2, S2, y3, y3 += w2, 1);
  }
}
function blurv(blur3, T2, S2, w2, h2) {
  for (let x3 = 0, n = w2 * h2; x3 < w2; ++x3) {
    blur3(T2, S2, x3, x3 + n, w2);
  }
}
function blurfImage(radius2) {
  const blur3 = blurf(radius2);
  return (T2, S2, start2, stop, step) => {
    start2 <<= 2, stop <<= 2, step <<= 2;
    blur3(T2, S2, start2 + 0, stop + 0, step);
    blur3(T2, S2, start2 + 1, stop + 1, step);
    blur3(T2, S2, start2 + 2, stop + 2, step);
    blur3(T2, S2, start2 + 3, stop + 3, step);
  };
}
function blurf(radius2) {
  const radius0 = Math.floor(radius2);
  if (radius0 === radius2)
    return bluri(radius2);
  const t = radius2 - radius0;
  const w2 = 2 * radius2 + 1;
  return (T2, S2, start2, stop, step) => {
    if (!((stop -= step) >= start2))
      return;
    let sum6 = radius0 * S2[start2];
    const s0 = step * radius0;
    const s1 = s0 + step;
    for (let i2 = start2, j2 = start2 + s0; i2 < j2; i2 += step) {
      sum6 += S2[Math.min(stop, i2)];
    }
    for (let i2 = start2, j2 = stop; i2 <= j2; i2 += step) {
      sum6 += S2[Math.min(stop, i2 + s0)];
      T2[i2] = (sum6 + t * (S2[Math.max(start2, i2 - s1)] + S2[Math.min(stop, i2 + s1)])) / w2;
      sum6 -= S2[Math.max(start2, i2 - s0)];
    }
  };
}
function bluri(radius2) {
  const w2 = 2 * radius2 + 1;
  return (T2, S2, start2, stop, step) => {
    if (!((stop -= step) >= start2))
      return;
    let sum6 = radius2 * S2[start2];
    const s2 = step * radius2;
    for (let i2 = start2, j2 = start2 + s2; i2 < j2; i2 += step) {
      sum6 += S2[Math.min(stop, i2)];
    }
    for (let i2 = start2, j2 = stop; i2 <= j2; i2 += step) {
      sum6 += S2[Math.min(stop, i2 + s2)];
      T2[i2] = sum6 / w2;
      sum6 -= S2[Math.max(start2, i2 - s2)];
    }
  };
}

// ../../node_modules/d3-array/src/count.js
function count2(values2, valueof2) {
  let count4 = 0;
  if (valueof2 === void 0) {
    for (let value of values2) {
      if (value != null && (value = +value) >= value) {
        ++count4;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values2) {
      if ((value = valueof2(value, ++index2, values2)) != null && (value = +value) >= value) {
        ++count4;
      }
    }
  }
  return count4;
}

// ../../node_modules/d3-array/src/cross.js
function length2(array3) {
  return array3.length | 0;
}
function empty(length4) {
  return !(length4 > 0);
}
function arrayify(values2) {
  return typeof values2 !== "object" || "length" in values2 ? values2 : Array.from(values2);
}
function reducer(reduce) {
  return (values2) => reduce(...values2);
}
function cross(...values2) {
  const reduce = typeof values2[values2.length - 1] === "function" && reducer(values2.pop());
  values2 = values2.map(arrayify);
  const lengths = values2.map(length2);
  const j2 = values2.length - 1;
  const index2 = new Array(j2 + 1).fill(0);
  const product2 = [];
  if (j2 < 0 || lengths.some(empty))
    return product2;
  while (true) {
    product2.push(index2.map((j3, i3) => values2[i3][j3]));
    let i2 = j2;
    while (++index2[i2] === lengths[i2]) {
      if (i2 === 0)
        return reduce ? product2.map(reduce) : product2;
      index2[i2--] = 0;
    }
  }
}

// ../../node_modules/d3-array/src/cumsum.js
function cumsum(values2, valueof2) {
  var sum6 = 0, index2 = 0;
  return Float64Array.from(values2, valueof2 === void 0 ? (v3) => sum6 += +v3 || 0 : (v3) => sum6 += +valueof2(v3, index2++, values2) || 0);
}

// ../../node_modules/d3-array/src/variance.js
function variance2(values2, valueof2) {
  let count4 = 0;
  let delta;
  let mean3 = 0;
  let sum6 = 0;
  if (valueof2 === void 0) {
    for (let value of values2) {
      if (value != null && (value = +value) >= value) {
        delta = value - mean3;
        mean3 += delta / ++count4;
        sum6 += delta * (value - mean3);
      }
    }
  } else {
    let index2 = -1;
    for (let value of values2) {
      if ((value = valueof2(value, ++index2, values2)) != null && (value = +value) >= value) {
        delta = value - mean3;
        mean3 += delta / ++count4;
        sum6 += delta * (value - mean3);
      }
    }
  }
  if (count4 > 1)
    return sum6 / (count4 - 1);
}

// ../../node_modules/d3-array/src/deviation.js
function deviation(values2, valueof2) {
  const v3 = variance2(values2, valueof2);
  return v3 ? Math.sqrt(v3) : v3;
}

// ../../node_modules/d3-array/src/extent.js
function extent(values2, valueof2) {
  let min5;
  let max4;
  if (valueof2 === void 0) {
    for (const value of values2) {
      if (value != null) {
        if (min5 === void 0) {
          if (value >= value)
            min5 = max4 = value;
        } else {
          if (min5 > value)
            min5 = value;
          if (max4 < value)
            max4 = value;
        }
      }
    }
  } else {
    let index2 = -1;
    for (let value of values2) {
      if ((value = valueof2(value, ++index2, values2)) != null) {
        if (min5 === void 0) {
          if (value >= value)
            min5 = max4 = value;
        } else {
          if (min5 > value)
            min5 = value;
          if (max4 < value)
            max4 = value;
        }
      }
    }
  }
  return [min5, max4];
}

// ../../node_modules/d3-array/src/fsum.js
var Adder = class {
  constructor() {
    this._partials = new Float64Array(32);
    this._n = 0;
  }
  add(x3) {
    const p2 = this._partials;
    let i2 = 0;
    for (let j2 = 0; j2 < this._n && j2 < 32; j2++) {
      const y3 = p2[j2], hi = x3 + y3, lo = Math.abs(x3) < Math.abs(y3) ? x3 - (hi - y3) : y3 - (hi - x3);
      if (lo)
        p2[i2++] = lo;
      x3 = hi;
    }
    p2[i2] = x3;
    this._n = i2 + 1;
    return this;
  }
  valueOf() {
    const p2 = this._partials;
    let n = this._n, x3, y3, lo, hi = 0;
    if (n > 0) {
      hi = p2[--n];
      while (n > 0) {
        x3 = hi;
        y3 = p2[--n];
        hi = x3 + y3;
        lo = y3 - (hi - x3);
        if (lo)
          break;
      }
      if (n > 0 && (lo < 0 && p2[n - 1] < 0 || lo > 0 && p2[n - 1] > 0)) {
        y3 = lo * 2;
        x3 = hi + y3;
        if (y3 == x3 - hi)
          hi = x3;
      }
    }
    return hi;
  }
};

// ../../node_modules/internmap/src/index.js
var InternMap = class extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
    if (entries != null)
      for (const [key2, value] of entries)
        this.set(key2, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
};
var InternSet = class extends Set {
  constructor(values2, key = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
    if (values2 != null)
      for (const value of values2)
        this.add(value);
  }
  has(value) {
    return super.has(intern_get(this, value));
  }
  add(value) {
    return super.add(intern_set(this, value));
  }
  delete(value) {
    return super.delete(intern_delete(this, value));
  }
};
function intern_get({ _intern, _key }, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key))
    return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

// ../../node_modules/d3-array/src/identity.js
function identity2(x3) {
  return x3;
}

// ../../node_modules/d3-array/src/group.js
function group(values2, ...keys) {
  return nest(values2, identity2, identity2, keys);
}
function rollup(values2, reduce, ...keys) {
  return nest(values2, identity2, reduce, keys);
}
function rollups(values2, reduce, ...keys) {
  return nest(values2, Array.from, reduce, keys);
}
function nest(values2, map4, reduce, keys) {
  return function regroup(values3, i2) {
    if (i2 >= keys.length)
      return reduce(values3);
    const groups2 = new InternMap();
    const keyof3 = keys[i2++];
    let index2 = -1;
    for (const value of values3) {
      const key = keyof3(value, ++index2, values3);
      const group3 = groups2.get(key);
      if (group3)
        group3.push(value);
      else
        groups2.set(key, [value]);
    }
    for (const [key, values4] of groups2) {
      groups2.set(key, regroup(values4, i2));
    }
    return map4(groups2);
  }(values2, 0);
}

// ../../node_modules/d3-array/src/permute.js
function permute(source, keys) {
  return Array.from(keys, (key) => source[key]);
}

// ../../node_modules/d3-array/src/sort.js
function sort(values2, ...F2) {
  if (typeof values2[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  values2 = Array.from(values2);
  let [f2] = F2;
  if (f2 && f2.length !== 2 || F2.length > 1) {
    const index2 = Uint32Array.from(values2, (d, i2) => i2);
    if (F2.length > 1) {
      F2 = F2.map((f3) => values2.map(f3));
      index2.sort((i2, j2) => {
        for (const f3 of F2) {
          const c4 = ascendingDefined(f3[i2], f3[j2]);
          if (c4)
            return c4;
        }
      });
    } else {
      f2 = values2.map(f2);
      index2.sort((i2, j2) => ascendingDefined(f2[i2], f2[j2]));
    }
    return permute(values2, index2);
  }
  return values2.sort(compareDefined(f2));
}
function compareDefined(compare = ascending) {
  if (compare === ascending)
    return ascendingDefined;
  if (typeof compare !== "function")
    throw new TypeError("compare is not a function");
  return (a2, b2) => {
    const x3 = compare(a2, b2);
    if (x3 || x3 === 0)
      return x3;
    return (compare(b2, b2) === 0) - (compare(a2, a2) === 0);
  };
}
function ascendingDefined(a2, b2) {
  return (a2 == null || !(a2 >= a2)) - (b2 == null || !(b2 >= b2)) || (a2 < b2 ? -1 : a2 > b2 ? 1 : 0);
}

// ../../node_modules/d3-array/src/groupSort.js
function groupSort(values2, reduce, key) {
  return (reduce.length !== 2 ? sort(rollup(values2, reduce, key), ([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)) : sort(group(values2, key), ([ak, av], [bk, bv]) => reduce(av, bv) || ascending(ak, bk))).map(([key2]) => key2);
}

// ../../node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start2, stop, count4) {
  const step = (stop - start2) / Math.max(0, count4), power = Math.floor(Math.log10(step)), error2 = step / Math.pow(10, power), factor = error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1;
  let i1, i2, inc2;
  if (power < 0) {
    inc2 = Math.pow(10, -power) / factor;
    i1 = Math.round(start2 * inc2);
    i2 = Math.round(stop * inc2);
    if (i1 / inc2 < start2)
      ++i1;
    if (i2 / inc2 > stop)
      --i2;
    inc2 = -inc2;
  } else {
    inc2 = Math.pow(10, power) * factor;
    i1 = Math.round(start2 / inc2);
    i2 = Math.round(stop / inc2);
    if (i1 * inc2 < start2)
      ++i1;
    if (i2 * inc2 > stop)
      --i2;
  }
  if (i2 < i1 && 0.5 <= count4 && count4 < 2)
    return tickSpec(start2, stop, count4 * 2);
  return [i1, i2, inc2];
}
function ticks(start2, stop, count4) {
  stop = +stop, start2 = +start2, count4 = +count4;
  if (!(count4 > 0))
    return [];
  if (start2 === stop)
    return [start2];
  const reverse3 = stop < start2, [i1, i2, inc2] = reverse3 ? tickSpec(stop, start2, count4) : tickSpec(start2, stop, count4);
  if (!(i2 >= i1))
    return [];
  const n = i2 - i1 + 1, ticks2 = new Array(n);
  if (reverse3) {
    if (inc2 < 0)
      for (let i3 = 0; i3 < n; ++i3)
        ticks2[i3] = (i2 - i3) / -inc2;
    else
      for (let i3 = 0; i3 < n; ++i3)
        ticks2[i3] = (i2 - i3) * inc2;
  } else {
    if (inc2 < 0)
      for (let i3 = 0; i3 < n; ++i3)
        ticks2[i3] = (i1 + i3) / -inc2;
    else
      for (let i3 = 0; i3 < n; ++i3)
        ticks2[i3] = (i1 + i3) * inc2;
  }
  return ticks2;
}
function tickIncrement(start2, stop, count4) {
  stop = +stop, start2 = +start2, count4 = +count4;
  return tickSpec(start2, stop, count4)[2];
}
function tickStep(start2, stop, count4) {
  stop = +stop, start2 = +start2, count4 = +count4;
  const reverse3 = stop < start2, inc2 = reverse3 ? tickIncrement(stop, start2, count4) : tickIncrement(start2, stop, count4);
  return (reverse3 ? -1 : 1) * (inc2 < 0 ? 1 / -inc2 : inc2);
}

// ../../node_modules/d3-array/src/nice.js
function nice(start2, stop, count4) {
  let prestep;
  while (true) {
    const step = tickIncrement(start2, stop, count4);
    if (step === prestep || step === 0 || !isFinite(step)) {
      return [start2, stop];
    } else if (step > 0) {
      start2 = Math.floor(start2 / step) * step;
      stop = Math.ceil(stop / step) * step;
    } else if (step < 0) {
      start2 = Math.ceil(start2 * step) / step;
      stop = Math.floor(stop * step) / step;
    }
    prestep = step;
  }
}

// ../../node_modules/d3-array/src/threshold/sturges.js
function thresholdSturges(values2) {
  return Math.max(1, Math.ceil(Math.log(count2(values2)) / Math.LN2) + 1);
}

// ../../node_modules/d3-array/src/max.js
function max2(values2, valueof2) {
  let max4;
  if (valueof2 === void 0) {
    for (const value of values2) {
      if (value != null && (max4 < value || max4 === void 0 && value >= value)) {
        max4 = value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values2) {
      if ((value = valueof2(value, ++index2, values2)) != null && (max4 < value || max4 === void 0 && value >= value)) {
        max4 = value;
      }
    }
  }
  return max4;
}

// ../../node_modules/d3-array/src/maxIndex.js
function maxIndex(values2, valueof2) {
  let max4;
  let maxIndex2 = -1;
  let index2 = -1;
  if (valueof2 === void 0) {
    for (const value of values2) {
      ++index2;
      if (value != null && (max4 < value || max4 === void 0 && value >= value)) {
        max4 = value, maxIndex2 = index2;
      }
    }
  } else {
    for (let value of values2) {
      if ((value = valueof2(value, ++index2, values2)) != null && (max4 < value || max4 === void 0 && value >= value)) {
        max4 = value, maxIndex2 = index2;
      }
    }
  }
  return maxIndex2;
}

// ../../node_modules/d3-array/src/min.js
function min2(values2, valueof2) {
  let min5;
  if (valueof2 === void 0) {
    for (const value of values2) {
      if (value != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values2) {
      if ((value = valueof2(value, ++index2, values2)) != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value;
      }
    }
  }
  return min5;
}

// ../../node_modules/d3-array/src/minIndex.js
function minIndex(values2, valueof2) {
  let min5;
  let minIndex2 = -1;
  let index2 = -1;
  if (valueof2 === void 0) {
    for (const value of values2) {
      ++index2;
      if (value != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value, minIndex2 = index2;
      }
    }
  } else {
    for (let value of values2) {
      if ((value = valueof2(value, ++index2, values2)) != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value, minIndex2 = index2;
      }
    }
  }
  return minIndex2;
}

// ../../node_modules/d3-array/src/quickselect.js
function quickselect(array3, k3, left2 = 0, right2 = Infinity, compare) {
  k3 = Math.floor(k3);
  left2 = Math.floor(Math.max(0, left2));
  right2 = Math.floor(Math.min(array3.length - 1, right2));
  if (!(left2 <= k3 && k3 <= right2))
    return array3;
  compare = compare === void 0 ? ascendingDefined : compareDefined(compare);
  while (right2 > left2) {
    if (right2 - left2 > 600) {
      const n = right2 - left2 + 1;
      const m2 = k3 - left2 + 1;
      const z2 = Math.log(n);
      const s2 = 0.5 * Math.exp(2 * z2 / 3);
      const sd = 0.5 * Math.sqrt(z2 * s2 * (n - s2) / n) * (m2 - n / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left2, Math.floor(k3 - m2 * s2 / n + sd));
      const newRight = Math.min(right2, Math.floor(k3 + (n - m2) * s2 / n + sd));
      quickselect(array3, k3, newLeft, newRight, compare);
    }
    const t = array3[k3];
    let i2 = left2;
    let j2 = right2;
    swap(array3, left2, k3);
    if (compare(array3[right2], t) > 0)
      swap(array3, left2, right2);
    while (i2 < j2) {
      swap(array3, i2, j2), ++i2, --j2;
      while (compare(array3[i2], t) < 0)
        ++i2;
      while (compare(array3[j2], t) > 0)
        --j2;
    }
    if (compare(array3[left2], t) === 0)
      swap(array3, left2, j2);
    else
      ++j2, swap(array3, j2, right2);
    if (j2 <= k3)
      left2 = j2 + 1;
    if (k3 <= j2)
      right2 = j2 - 1;
  }
  return array3;
}
function swap(array3, i2, j2) {
  const t = array3[i2];
  array3[i2] = array3[j2];
  array3[j2] = t;
}

// ../../node_modules/d3-array/src/greatest.js
function greatest(values2, compare = ascending) {
  let max4;
  let defined2 = false;
  if (compare.length === 1) {
    let maxValue;
    for (const element of values2) {
      const value = compare(element);
      if (defined2 ? ascending(value, maxValue) > 0 : ascending(value, value) === 0) {
        max4 = element;
        maxValue = value;
        defined2 = true;
      }
    }
  } else {
    for (const value of values2) {
      if (defined2 ? compare(value, max4) > 0 : compare(value, value) === 0) {
        max4 = value;
        defined2 = true;
      }
    }
  }
  return max4;
}

// ../../node_modules/d3-array/src/quantile.js
function quantile2(values2, p2, valueof2) {
  values2 = Float64Array.from(numbers(values2, valueof2));
  if (!(n = values2.length) || isNaN(p2 = +p2))
    return;
  if (p2 <= 0 || n < 2)
    return min2(values2);
  if (p2 >= 1)
    return max2(values2);
  var n, i2 = (n - 1) * p2, i0 = Math.floor(i2), value0 = max2(quickselect(values2, i0).subarray(0, i0 + 1)), value1 = min2(values2.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i2 - i0);
}
function quantileSorted(values2, p2, valueof2 = number) {
  if (!(n = values2.length) || isNaN(p2 = +p2))
    return;
  if (p2 <= 0 || n < 2)
    return +valueof2(values2[0], 0, values2);
  if (p2 >= 1)
    return +valueof2(values2[n - 1], n - 1, values2);
  var n, i2 = (n - 1) * p2, i0 = Math.floor(i2), value0 = +valueof2(values2[i0], i0, values2), value1 = +valueof2(values2[i0 + 1], i0 + 1, values2);
  return value0 + (value1 - value0) * (i2 - i0);
}

// ../../node_modules/d3-array/src/threshold/freedmanDiaconis.js
function thresholdFreedmanDiaconis(values2, min5, max4) {
  const c4 = count2(values2), d = quantile2(values2, 0.75) - quantile2(values2, 0.25);
  return c4 && d ? Math.ceil((max4 - min5) / (2 * d * Math.pow(c4, -1 / 3))) : 1;
}

// ../../node_modules/d3-array/src/threshold/scott.js
function thresholdScott(values2, min5, max4) {
  const c4 = count2(values2), d = deviation(values2);
  return c4 && d ? Math.ceil((max4 - min5) * Math.cbrt(c4) / (3.49 * d)) : 1;
}

// ../../node_modules/d3-array/src/mean.js
function mean2(values2, valueof2) {
  let count4 = 0;
  let sum6 = 0;
  if (valueof2 === void 0) {
    for (let value of values2) {
      if (value != null && (value = +value) >= value) {
        ++count4, sum6 += value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values2) {
      if ((value = valueof2(value, ++index2, values2)) != null && (value = +value) >= value) {
        ++count4, sum6 += value;
      }
    }
  }
  if (count4)
    return sum6 / count4;
}

// ../../node_modules/d3-array/src/median.js
function median2(values2, valueof2) {
  return quantile2(values2, 0.5, valueof2);
}

// ../../node_modules/d3-array/src/merge.js
function* flatten(arrays) {
  for (const array3 of arrays) {
    yield* array3;
  }
}
function merge(arrays) {
  return Array.from(flatten(arrays));
}

// ../../node_modules/d3-array/src/mode.js
function mode2(values2, valueof2) {
  const counts = new InternMap();
  if (valueof2 === void 0) {
    for (let value of values2) {
      if (value != null && value >= value) {
        counts.set(value, (counts.get(value) || 0) + 1);
      }
    }
  } else {
    let index2 = -1;
    for (let value of values2) {
      if ((value = valueof2(value, ++index2, values2)) != null && value >= value) {
        counts.set(value, (counts.get(value) || 0) + 1);
      }
    }
  }
  let modeValue;
  let modeCount = 0;
  for (const [value, count4] of counts) {
    if (count4 > modeCount) {
      modeCount = count4;
      modeValue = value;
    }
  }
  return modeValue;
}

// ../../node_modules/d3-array/src/range.js
function range(start2, stop, step) {
  start2 = +start2, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start2, start2 = 0, 1) : n < 3 ? 1 : +step;
  var i2 = -1, n = Math.max(0, Math.ceil((stop - start2) / step)) | 0, range3 = new Array(n);
  while (++i2 < n) {
    range3[i2] = start2 + i2 * step;
  }
  return range3;
}

// ../../node_modules/d3-array/src/rank.js
function rank2(values2, valueof2 = ascending) {
  if (typeof values2[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  let V2 = Array.from(values2);
  const R = new Float64Array(V2.length);
  if (valueof2.length !== 2)
    V2 = V2.map(valueof2), valueof2 = ascending;
  const compareIndex = (i2, j2) => valueof2(V2[i2], V2[j2]);
  let k3, r;
  values2 = Uint32Array.from(V2, (_2, i2) => i2);
  values2.sort(valueof2 === ascending ? (i2, j2) => ascendingDefined(V2[i2], V2[j2]) : compareDefined(compareIndex));
  values2.forEach((j2, i2) => {
    const c4 = compareIndex(j2, k3 === void 0 ? j2 : k3);
    if (c4 >= 0) {
      if (k3 === void 0 || c4 > 0)
        k3 = j2, r = i2;
      R[j2] = r;
    } else {
      R[j2] = NaN;
    }
  });
  return R;
}

// ../../node_modules/d3-array/src/least.js
function least(values2, compare = ascending) {
  let min5;
  let defined2 = false;
  if (compare.length === 1) {
    let minValue;
    for (const element of values2) {
      const value = compare(element);
      if (defined2 ? ascending(value, minValue) < 0 : ascending(value, value) === 0) {
        min5 = element;
        minValue = value;
        defined2 = true;
      }
    }
  } else {
    for (const value of values2) {
      if (defined2 ? compare(value, min5) < 0 : compare(value, value) === 0) {
        min5 = value;
        defined2 = true;
      }
    }
  }
  return min5;
}

// ../../node_modules/d3-array/src/sum.js
function sum4(values2, valueof2) {
  let sum6 = 0;
  if (valueof2 === void 0) {
    for (let value of values2) {
      if (value = +value) {
        sum6 += value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values2) {
      if (value = +valueof2(value, ++index2, values2)) {
        sum6 += value;
      }
    }
  }
  return sum6;
}

// ../../node_modules/d3-array/src/reverse.js
function reverse(values2) {
  if (typeof values2[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  return Array.from(values2).reverse();
}

// ../../node_modules/d3-axis/src/identity.js
function identity_default(x3) {
  return x3;
}

// ../../node_modules/d3-axis/src/axis.js
var top = 1;
var right = 2;
var bottom = 3;
var left = 4;
var epsilon = 1e-6;
function translateX(x3) {
  return "translate(" + x3 + ",0)";
}
function translateY(y3) {
  return "translate(0," + y3 + ")";
}
function number2(scale3) {
  return (d) => +scale3(d);
}
function center(scale3, offset2) {
  offset2 = Math.max(0, scale3.bandwidth() - offset2 * 2) / 2;
  if (scale3.round())
    offset2 = Math.round(offset2);
  return (d) => +scale3(d) + offset2;
}
function entering() {
  return !this.__axis;
}
function axis(orient, scale3) {
  var tickArguments = [], tickValues = null, tickFormat2 = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, offset2 = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5, k3 = orient === top || orient === left ? -1 : 1, x3 = orient === left || orient === right ? "x" : "y", transform3 = orient === top || orient === bottom ? translateX : translateY;
  function axis3(context) {
    var values2 = tickValues == null ? scale3.ticks ? scale3.ticks.apply(scale3, tickArguments) : scale3.domain() : tickValues, format3 = tickFormat2 == null ? scale3.tickFormat ? scale3.tickFormat.apply(scale3, tickArguments) : identity_default : tickFormat2, spacing = Math.max(tickSizeInner, 0) + tickPadding, range3 = scale3.range(), range0 = +range3[0] + offset2, range1 = +range3[range3.length - 1] + offset2, position3 = (scale3.bandwidth ? center : number2)(scale3.copy(), offset2), selection2 = context.selection ? context.selection() : context, path2 = selection2.selectAll(".domain").data([null]), tick = selection2.selectAll(".tick").data(values2, scale3).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line3 = tick.select("line"), text3 = tick.select("text");
    path2 = path2.merge(path2.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
    tick = tick.merge(tickEnter);
    line3 = line3.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x3 + "2", k3 * tickSizeInner));
    text3 = text3.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x3, k3 * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
    if (context !== selection2) {
      path2 = path2.transition(context);
      tick = tick.transition(context);
      line3 = line3.transition(context);
      text3 = text3.transition(context);
      tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function(d) {
        return isFinite(d = position3(d)) ? transform3(d + offset2) : this.getAttribute("transform");
      });
      tickEnter.attr("opacity", epsilon).attr("transform", function(d) {
        var p2 = this.parentNode.__axis;
        return transform3((p2 && isFinite(p2 = p2(d)) ? p2 : position3(d)) + offset2);
      });
    }
    tickExit.remove();
    path2.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k3 * tickSizeOuter + "," + range0 + "H" + offset2 + "V" + range1 + "H" + k3 * tickSizeOuter : "M" + offset2 + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k3 * tickSizeOuter + "V" + offset2 + "H" + range1 + "V" + k3 * tickSizeOuter : "M" + range0 + "," + offset2 + "H" + range1);
    tick.attr("opacity", 1).attr("transform", function(d) {
      return transform3(position3(d) + offset2);
    });
    line3.attr(x3 + "2", k3 * tickSizeInner);
    text3.attr(x3, k3 * spacing).text(format3);
    selection2.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
    selection2.each(function() {
      this.__axis = position3;
    });
  }
  axis3.scale = function(_2) {
    return arguments.length ? (scale3 = _2, axis3) : scale3;
  };
  axis3.ticks = function() {
    return tickArguments = Array.from(arguments), axis3;
  };
  axis3.tickArguments = function(_2) {
    return arguments.length ? (tickArguments = _2 == null ? [] : Array.from(_2), axis3) : tickArguments.slice();
  };
  axis3.tickValues = function(_2) {
    return arguments.length ? (tickValues = _2 == null ? null : Array.from(_2), axis3) : tickValues && tickValues.slice();
  };
  axis3.tickFormat = function(_2) {
    return arguments.length ? (tickFormat2 = _2, axis3) : tickFormat2;
  };
  axis3.tickSize = function(_2) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_2, axis3) : tickSizeInner;
  };
  axis3.tickSizeInner = function(_2) {
    return arguments.length ? (tickSizeInner = +_2, axis3) : tickSizeInner;
  };
  axis3.tickSizeOuter = function(_2) {
    return arguments.length ? (tickSizeOuter = +_2, axis3) : tickSizeOuter;
  };
  axis3.tickPadding = function(_2) {
    return arguments.length ? (tickPadding = +_2, axis3) : tickPadding;
  };
  axis3.offset = function(_2) {
    return arguments.length ? (offset2 = +_2, axis3) : offset2;
  };
  return axis3;
}
function axisBottom(scale3) {
  return axis(bottom, scale3);
}

// ../../node_modules/d3-dispatch/src/dispatch.js
var noop = { value: () => {
} };
function dispatch() {
  for (var i2 = 0, n = arguments.length, _2 = {}, t; i2 < n; ++i2) {
    if (!(t = arguments[i2] + "") || t in _2 || /[\s.]/.test(t))
      throw new Error("illegal type: " + t);
    _2[t] = [];
  }
  return new Dispatch(_2);
}
function Dispatch(_2) {
  this._ = _2;
}
function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name2 = "", i2 = t.indexOf(".");
    if (i2 >= 0)
      name2 = t.slice(i2 + 1), t = t.slice(0, i2);
    if (t && !types.hasOwnProperty(t))
      throw new Error("unknown type: " + t);
    return { type: t, name: name2 };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _2 = this._, T2 = parseTypenames(typename + "", _2), t, i2 = -1, n = T2.length;
    if (arguments.length < 2) {
      while (++i2 < n)
        if ((t = (typename = T2[i2]).type) && (t = get(_2[t], typename.name)))
          return t;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i2 < n) {
      if (t = (typename = T2[i2]).type)
        _2[t] = set(_2[t], typename.name, callback);
      else if (callback == null)
        for (t in _2)
          _2[t] = set(_2[t], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy4 = {}, _2 = this._;
    for (var t in _2)
      copy4[t] = _2[t].slice();
    return new Dispatch(copy4);
  },
  call: function(type2, that) {
    if ((n = arguments.length - 2) > 0)
      for (var args = new Array(n), i2 = 0, n, t; i2 < n; ++i2)
        args[i2] = arguments[i2 + 2];
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (t = this._[type2], i2 = 0, n = t.length; i2 < n; ++i2)
      t[i2].value.apply(that, args);
  },
  apply: function(type2, that, args) {
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (var t = this._[type2], i2 = 0, n = t.length; i2 < n; ++i2)
      t[i2].value.apply(that, args);
  }
};
function get(type2, name2) {
  for (var i2 = 0, n = type2.length, c4; i2 < n; ++i2) {
    if ((c4 = type2[i2]).name === name2) {
      return c4.value;
    }
  }
}
function set(type2, name2, callback) {
  for (var i2 = 0, n = type2.length; i2 < n; ++i2) {
    if (type2[i2].name === name2) {
      type2[i2] = noop, type2 = type2.slice(0, i2).concat(type2.slice(i2 + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name: name2, value: callback });
  return type2;
}
var dispatch_default = dispatch;

// ../../node_modules/d3-selection/src/namespaces.js
var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces_default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// ../../node_modules/d3-selection/src/namespace.js
function namespace_default(name2) {
  var prefix2 = name2 += "", i2 = prefix2.indexOf(":");
  if (i2 >= 0 && (prefix2 = name2.slice(0, i2)) !== "xmlns")
    name2 = name2.slice(i2 + 1);
  return namespaces_default.hasOwnProperty(prefix2) ? { space: namespaces_default[prefix2], local: name2 } : name2;
}

// ../../node_modules/d3-selection/src/creator.js
function creatorInherit(name2) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name2) : document2.createElementNS(uri, name2);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name2) {
  var fullname = namespace_default(name2);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

// ../../node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

// ../../node_modules/d3-selection/src/selection/select.js
function select_default(select2) {
  if (typeof select2 !== "function")
    select2 = selector_default(select2);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j2 = 0; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], n = group3.length, subgroup = subgroups[j2] = new Array(n), node, subnode, i2 = 0; i2 < n; ++i2) {
      if ((node = group3[i2]) && (subnode = select2.call(node, node.__data__, i2, group3))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i2] = subnode;
      }
    }
  }
  return new Selection2(subgroups, this._parents);
}

// ../../node_modules/d3-selection/src/array.js
function array(x3) {
  return x3 == null ? [] : Array.isArray(x3) ? x3 : Array.from(x3);
}

// ../../node_modules/d3-selection/src/selectorAll.js
function empty2() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty2 : function() {
    return this.querySelectorAll(selector);
  };
}

// ../../node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select2) {
  return function() {
    return array(select2.apply(this, arguments));
  };
}
function selectAll_default(select2) {
  if (typeof select2 === "function")
    select2 = arrayAll(select2);
  else
    select2 = selectorAll_default(select2);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = [], parents = [], j2 = 0; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], n = group3.length, node, i2 = 0; i2 < n; ++i2) {
      if (node = group3[i2]) {
        subgroups.push(select2.call(node, node.__data__, i2, group3));
        parents.push(node);
      }
    }
  }
  return new Selection2(subgroups, parents);
}

// ../../node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}

// ../../node_modules/d3-selection/src/selection/selectChild.js
var find = Array.prototype.find;
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

// ../../node_modules/d3-selection/src/selection/selectChildren.js
var filter = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}
function selectChildren_default(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

// ../../node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j2 = 0; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], n = group3.length, subgroup = subgroups[j2] = [], node, i2 = 0; i2 < n; ++i2) {
      if ((node = group3[i2]) && match.call(node, node.__data__, i2, group3)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection2(subgroups, this._parents);
}

// ../../node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update2) {
  return new Array(update2.length);
}

// ../../node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection2(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

// ../../node_modules/d3-selection/src/constant.js
function constant_default(x3) {
  return function() {
    return x3;
  };
}

// ../../node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group3, enter, update2, exit, data) {
  var i2 = 0, node, groupLength = group3.length, dataLength = data.length;
  for (; i2 < dataLength; ++i2) {
    if (node = group3[i2]) {
      node.__data__ = data[i2];
      update2[i2] = node;
    } else {
      enter[i2] = new EnterNode(parent, data[i2]);
    }
  }
  for (; i2 < groupLength; ++i2) {
    if (node = group3[i2]) {
      exit[i2] = node;
    }
  }
}
function bindKey(parent, group3, enter, update2, exit, data, key) {
  var i2, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group3.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i2 = 0; i2 < groupLength; ++i2) {
    if (node = group3[i2]) {
      keyValues[i2] = keyValue = key.call(node, node.__data__, i2, group3) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i2] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i2 = 0; i2 < dataLength; ++i2) {
    keyValue = key.call(parent, data[i2], i2, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update2[i2] = node;
      node.__data__ = data[i2];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i2] = new EnterNode(parent, data[i2]);
    }
  }
  for (i2 = 0; i2 < groupLength; ++i2) {
    if ((node = group3[i2]) && nodeByKeyValue.get(keyValues[i2]) === node) {
      exit[i2] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups2 = this._groups;
  if (typeof value !== "function")
    value = constant_default(value);
  for (var m2 = groups2.length, update2 = new Array(m2), enter = new Array(m2), exit = new Array(m2), j2 = 0; j2 < m2; ++j2) {
    var parent = parents[j2], group3 = groups2[j2], groupLength = group3.length, data = arraylike(value.call(parent, parent && parent.__data__, j2, parents)), dataLength = data.length, enterGroup = enter[j2] = new Array(dataLength), updateGroup = update2[j2] = new Array(dataLength), exitGroup = exit[j2] = new Array(groupLength);
    bind(parent, group3, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update2 = new Selection2(update2, parents);
  update2._enter = enter;
  update2._exit = exit;
  return update2;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}

// ../../node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection2(this._exit || this._groups.map(sparse_default), this._parents);
}

// ../../node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update2 = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update2 = onupdate(update2);
    if (update2)
      update2 = update2.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update2 ? enter.merge(update2).order() : update2;
}

// ../../node_modules/d3-selection/src/selection/merge.js
function merge_default(context) {
  var selection2 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j2 = 0; j2 < m2; ++j2) {
    for (var group0 = groups0[j2], group1 = groups1[j2], n = group0.length, merge2 = merges[j2] = new Array(n), node, i2 = 0; i2 < n; ++i2) {
      if (node = group0[i2] || group1[i2]) {
        merge2[i2] = node;
      }
    }
  }
  for (; j2 < m0; ++j2) {
    merges[j2] = groups0[j2];
  }
  return new Selection2(merges, this._parents);
}

// ../../node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups2 = this._groups, j2 = -1, m2 = groups2.length; ++j2 < m2; ) {
    for (var group3 = groups2[j2], i2 = group3.length - 1, next = group3[i2], node; --i2 >= 0; ) {
      if (node = group3[i2]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// ../../node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare)
    compare = ascending2;
  function compareNode(a2, b2) {
    return a2 && b2 ? compare(a2.__data__, b2.__data__) : !a2 - !b2;
  }
  for (var groups2 = this._groups, m2 = groups2.length, sortgroups = new Array(m2), j2 = 0; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], n = group3.length, sortgroup = sortgroups[j2] = new Array(n), node, i2 = 0; i2 < n; ++i2) {
      if (node = group3[i2]) {
        sortgroup[i2] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection2(sortgroups, this._parents).order();
}
function ascending2(a2, b2) {
  return a2 < b2 ? -1 : a2 > b2 ? 1 : a2 >= b2 ? 0 : NaN;
}

// ../../node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// ../../node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}

// ../../node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups2 = this._groups, j2 = 0, m2 = groups2.length; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], i2 = 0, n = group3.length; i2 < n; ++i2) {
      var node = group3[i2];
      if (node)
        return node;
    }
  }
  return null;
}

// ../../node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}

// ../../node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}

// ../../node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups2 = this._groups, j2 = 0, m2 = groups2.length; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], i2 = 0, n = group3.length, node; i2 < n; ++i2) {
      if (node = group3[i2])
        callback.call(node, node.__data__, i2, group3);
    }
  }
  return this;
}

// ../../node_modules/d3-selection/src/selection/attr.js
function attrRemove(name2) {
  return function() {
    this.removeAttribute(name2);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name2, value) {
  return function() {
    this.setAttribute(name2, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name2, value) {
  return function() {
    var v3 = value.apply(this, arguments);
    if (v3 == null)
      this.removeAttribute(name2);
    else
      this.setAttribute(name2, v3);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v3 = value.apply(this, arguments);
    if (v3 == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v3);
  };
}
function attr_default(name2, value) {
  var fullname = namespace_default(name2);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

// ../../node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// ../../node_modules/d3-selection/src/selection/style.js
function styleRemove(name2) {
  return function() {
    this.style.removeProperty(name2);
  };
}
function styleConstant(name2, value, priority) {
  return function() {
    this.style.setProperty(name2, value, priority);
  };
}
function styleFunction(name2, value, priority) {
  return function() {
    var v3 = value.apply(this, arguments);
    if (v3 == null)
      this.style.removeProperty(name2);
    else
      this.style.setProperty(name2, v3, priority);
  };
}
function style_default(name2, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name2, value, priority == null ? "" : priority)) : styleValue(this.node(), name2);
}
function styleValue(node, name2) {
  return node.style.getPropertyValue(name2) || window_default(node).getComputedStyle(node, null).getPropertyValue(name2);
}

// ../../node_modules/d3-selection/src/selection/property.js
function propertyRemove(name2) {
  return function() {
    delete this[name2];
  };
}
function propertyConstant(name2, value) {
  return function() {
    this[name2] = value;
  };
}
function propertyFunction(name2, value) {
  return function() {
    var v3 = value.apply(this, arguments);
    if (v3 == null)
      delete this[name2];
    else
      this[name2] = v3;
  };
}
function property_default(name2, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name2, value)) : this.node()[name2];
}

// ../../node_modules/d3-selection/src/selection/classed.js
function classArray(string2) {
  return string2.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name2) {
    var i2 = this._names.indexOf(name2);
    if (i2 < 0) {
      this._names.push(name2);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name2) {
    var i2 = this._names.indexOf(name2);
    if (i2 >= 0) {
      this._names.splice(i2, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name2) {
    return this._names.indexOf(name2) >= 0;
  }
};
function classedAdd(node, names) {
  var list = classList(node), i2 = -1, n = names.length;
  while (++i2 < n)
    list.add(names[i2]);
}
function classedRemove(node, names) {
  var list = classList(node), i2 = -1, n = names.length;
  while (++i2 < n)
    list.remove(names[i2]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name2, value) {
  var names = classArray(name2 + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i2 = -1, n = names.length;
    while (++i2 < n)
      if (!list.contains(names[i2]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

// ../../node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v3 = value.apply(this, arguments);
    this.textContent = v3 == null ? "" : v3;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

// ../../node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v3 = value.apply(this, arguments);
    this.innerHTML = v3 == null ? "" : v3;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

// ../../node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}

// ../../node_modules/d3-selection/src/selection/lower.js
function lower2() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower2);
}

// ../../node_modules/d3-selection/src/selection/append.js
function append_default(name2) {
  var create4 = typeof name2 === "function" ? name2 : creator_default(name2);
  return this.select(function() {
    return this.appendChild(create4.apply(this, arguments));
  });
}

// ../../node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name2, before) {
  var create4 = typeof name2 === "function" ? name2 : creator_default(name2), select2 = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create4.apply(this, arguments), select2.apply(this, arguments) || null);
  });
}

// ../../node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}

// ../../node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

// ../../node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// ../../node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames2(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name2 = "", i2 = t.indexOf(".");
    if (i2 >= 0)
      name2 = t.slice(i2 + 1), t = t.slice(0, i2);
    return { type: t, name: name2 };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on)
      return;
    for (var j2 = 0, i2 = -1, m2 = on.length, o; j2 < m2; ++j2) {
      if (o = on[j2], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i2] = o;
      }
    }
    if (++i2)
      on.length = i2;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on)
      for (var j2 = 0, m2 = on.length; j2 < m2; ++j2) {
        if ((o = on[j2]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o = { type: typename.type, name: typename.name, value, listener, options };
    if (!on)
      this.__on = [o];
    else
      on.push(o);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames2(typename + ""), i2, n = typenames.length, t;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on)
      for (var j2 = 0, m2 = on.length, o; j2 < m2; ++j2) {
        for (i2 = 0, o = on[j2]; i2 < n; ++i2) {
          if ((t = typenames[i2]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i2 = 0; i2 < n; ++i2)
    this.each(on(typenames[i2], value, options));
  return this;
}

// ../../node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window3 = window_default(node), event = window3.CustomEvent;
  if (typeof event === "function") {
    event = new event(type2, params);
  } else {
    event = window3.document.createEvent("Event");
    if (params)
      event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
    else
      event.initEvent(type2, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default2(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}

// ../../node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups2 = this._groups, j2 = 0, m2 = groups2.length; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], i2 = 0, n = group3.length, node; i2 < n; ++i2) {
      if (node = group3[i2])
        yield node;
    }
  }
}

// ../../node_modules/d3-selection/src/selection/index.js
var root = [null];
function Selection2(groups2, parents) {
  this._groups = groups2;
  this._parents = parents;
}
function selection() {
  return new Selection2([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection2.prototype = selection.prototype = {
  constructor: Selection2,
  select: select_default,
  selectAll: selectAll_default,
  selectChild: selectChild_default,
  selectChildren: selectChildren_default,
  filter: filter_default,
  data: data_default,
  enter: enter_default,
  exit: exit_default,
  join: join_default,
  merge: merge_default,
  selection: selection_selection,
  order: order_default,
  sort: sort_default,
  call: call_default,
  nodes: nodes_default,
  node: node_default,
  size: size_default,
  empty: empty_default,
  each: each_default,
  attr: attr_default,
  style: style_default,
  property: property_default,
  classed: classed_default,
  text: text_default,
  html: html_default,
  raise: raise_default,
  lower: lower_default,
  append: append_default,
  insert: insert_default,
  remove: remove_default,
  clone: clone_default,
  datum: datum_default,
  on: on_default,
  dispatch: dispatch_default2,
  [Symbol.iterator]: iterator_default
};
var selection_default = selection;

// ../../node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection2([[document.querySelector(selector)]], [document.documentElement]) : new Selection2([[selector]], root);
}

// ../../node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent)
    event = sourceEvent;
  return event;
}

// ../../node_modules/d3-selection/src/pointer.js
function pointer_default(event, node) {
  event = sourceEvent_default(event);
  if (node === void 0)
    node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point6 = svg.createSVGPoint();
      point6.x = event.clientX, point6.y = event.clientY;
      point6 = point6.matrixTransform(node.getScreenCTM().inverse());
      return [point6.x, point6.y];
    }
    if (node.getBoundingClientRect) {
      var rect3 = node.getBoundingClientRect();
      return [event.clientX - rect3.left - node.clientLeft, event.clientY - rect3.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}

// ../../node_modules/d3-drag/src/noevent.js
var nonpassivecapture = { capture: true, passive: false };
function noevent_default(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// ../../node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
  } else {
    root2.__noselect = root2.style.MozUserSelect;
    root2.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent_default, nonpassivecapture);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", null);
  } else {
    root2.style.MozUserSelect = root2.__noselect;
    delete root2.__noselect;
  }
}

// ../../node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// ../../node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m2, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m2 = reHex.exec(format3)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format3)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format3)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format3)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format3)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format3)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format3)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g2, b2, a2) {
  if (a2 <= 0)
    r = g2 = b2 = NaN;
  return new Rgb(r, g2, b2, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g2, b2, opacity2) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g2, b2, opacity2 == null ? 1 : opacity2);
}
function Rgb(r, g2, b2, opacity2) {
  this.r = +r;
  this.g = +g2;
  this.b = +b2;
  this.opacity = +opacity2;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a2 = clampa(this.opacity);
  return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
}
function clampa(opacity2) {
  return isNaN(opacity2) ? 1 : Math.max(0, Math.min(1, opacity2));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h2, s2, l, a2) {
  if (a2 <= 0)
    h2 = s2 = l = NaN;
  else if (l <= 0 || l >= 1)
    h2 = s2 = NaN;
  else if (s2 <= 0)
    h2 = NaN;
  return new Hsl(h2, s2, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g2 = o.g / 255, b2 = o.b / 255, min5 = Math.min(r, g2, b2), max4 = Math.max(r, g2, b2), h2 = NaN, s2 = max4 - min5, l = (max4 + min5) / 2;
  if (s2) {
    if (r === max4)
      h2 = (g2 - b2) / s2 + (g2 < b2) * 6;
    else if (g2 === max4)
      h2 = (b2 - r) / s2 + 2;
    else
      h2 = (r - g2) / s2 + 4;
    s2 /= l < 0.5 ? max4 + min5 : 2 - max4 - min5;
    h2 *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h2;
  }
  return new Hsl(h2, s2, l, o.opacity);
}
function hsl(h2, s2, l, opacity2) {
  return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s2, l, opacity2 == null ? 1 : opacity2);
}
function Hsl(h2, s2, l, opacity2) {
  this.h = +h2;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity2;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m2),
      hsl2rgb(h2, m1, m2),
      hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h2, m1, m2) {
  return (h2 < 60 ? m1 + (m2 - m1) * h2 / 60 : h2 < 180 ? m2 : h2 < 240 ? m1 + (m2 - m1) * (240 - h2) / 60 : m1) * 255;
}

// ../../node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// ../../node_modules/d3-color/src/lab.js
var K2 = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o) {
  if (o instanceof Lab)
    return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl)
    return hcl2lab(o);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = rgb2lrgb(o.r), g2 = rgb2lrgb(o.g), b2 = rgb2lrgb(o.b), y3 = xyz2lab((0.2225045 * r + 0.7168786 * g2 + 0.0606169 * b2) / Yn), x3, z2;
  if (r === g2 && g2 === b2)
    x3 = z2 = y3;
  else {
    x3 = xyz2lab((0.4360747 * r + 0.3850649 * g2 + 0.1430804 * b2) / Xn);
    z2 = xyz2lab((0.0139322 * r + 0.0971045 * g2 + 0.7141733 * b2) / Zn);
  }
  return new Lab(116 * y3 - 16, 500 * (x3 - y3), 200 * (y3 - z2), o.opacity);
}
function lab(l, a2, b2, opacity2) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a2, b2, opacity2 == null ? 1 : opacity2);
}
function Lab(l, a2, b2, opacity2) {
  this.l = +l;
  this.a = +a2;
  this.b = +b2;
  this.opacity = +opacity2;
}
define_default(Lab, lab, extend(Color, {
  brighter(k3) {
    return new Lab(this.l + K2 * (k3 == null ? 1 : k3), this.a, this.b, this.opacity);
  },
  darker(k3) {
    return new Lab(this.l - K2 * (k3 == null ? 1 : k3), this.a, this.b, this.opacity);
  },
  rgb() {
    var y3 = (this.l + 16) / 116, x3 = isNaN(this.a) ? y3 : y3 + this.a / 500, z2 = isNaN(this.b) ? y3 : y3 - this.b / 200;
    x3 = Xn * lab2xyz(x3);
    y3 = Yn * lab2xyz(y3);
    z2 = Zn * lab2xyz(z2);
    return new Rgb(
      lrgb2rgb(3.1338561 * x3 - 1.6168667 * y3 - 0.4906146 * z2),
      lrgb2rgb(-0.9787684 * x3 + 1.9161415 * y3 + 0.033454 * z2),
      lrgb2rgb(0.0719453 * x3 - 0.2289914 * y3 + 1.4052427 * z2),
      this.opacity
    );
  }
}));
function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}
function lrgb2rgb(x3) {
  return 255 * (x3 <= 31308e-7 ? 12.92 * x3 : 1.055 * Math.pow(x3, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x3) {
  return (x3 /= 255) <= 0.04045 ? x3 / 12.92 : Math.pow((x3 + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
  if (o instanceof Hcl)
    return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab))
    o = labConvert(o);
  if (o.a === 0 && o.b === 0)
    return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h2 = Math.atan2(o.b, o.a) * degrees;
  return new Hcl(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function hcl(h2, c4, l, opacity2) {
  return arguments.length === 1 ? hclConvert(h2) : new Hcl(h2, c4, l, opacity2 == null ? 1 : opacity2);
}
function Hcl(h2, c4, l, opacity2) {
  this.h = +h2;
  this.c = +c4;
  this.l = +l;
  this.opacity = +opacity2;
}
function hcl2lab(o) {
  if (isNaN(o.h))
    return new Lab(o.l, 0, 0, o.opacity);
  var h2 = o.h * radians;
  return new Lab(o.l, Math.cos(h2) * o.c, Math.sin(h2) * o.c, o.opacity);
}
define_default(Hcl, hcl, extend(Color, {
  brighter(k3) {
    return new Hcl(this.h, this.c, this.l + K2 * (k3 == null ? 1 : k3), this.opacity);
  },
  darker(k3) {
    return new Hcl(this.h, this.c, this.l - K2 * (k3 == null ? 1 : k3), this.opacity);
  },
  rgb() {
    return hcl2lab(this).rgb();
  }
}));

// ../../node_modules/d3-color/src/cubehelix.js
var A2 = -0.14861;
var B2 = 1.78277;
var C2 = -0.29227;
var D2 = -0.90649;
var E2 = 1.97294;
var ED = E2 * D2;
var EB = E2 * B2;
var BC_DA = B2 * C2 - D2 * A2;
function cubehelixConvert(o) {
  if (o instanceof Cubehelix)
    return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = o.r / 255, g2 = o.g / 255, b2 = o.b / 255, l = (BC_DA * b2 + ED * r - EB * g2) / (BC_DA + ED - EB), bl = b2 - l, k3 = (E2 * (g2 - l) - C2 * bl) / D2, s2 = Math.sqrt(k3 * k3 + bl * bl) / (E2 * l * (1 - l)), h2 = s2 ? Math.atan2(k3, bl) * degrees - 120 : NaN;
  return new Cubehelix(h2 < 0 ? h2 + 360 : h2, s2, l, o.opacity);
}
function cubehelix(h2, s2, l, opacity2) {
  return arguments.length === 1 ? cubehelixConvert(h2) : new Cubehelix(h2, s2, l, opacity2 == null ? 1 : opacity2);
}
function Cubehelix(h2, s2, l, opacity2) {
  this.h = +h2;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity2;
}
define_default(Cubehelix, cubehelix, extend(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Cubehelix(this.h, this.s, this.l * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Cubehelix(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a2 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h2), sinh2 = Math.sin(h2);
    return new Rgb(
      255 * (l + a2 * (A2 * cosh2 + B2 * sinh2)),
      255 * (l + a2 * (C2 * cosh2 + D2 * sinh2)),
      255 * (l + a2 * (E2 * cosh2)),
      this.opacity
    );
  }
}));

// ../../node_modules/d3-interpolate/src/basis.js
function basis(t13, v0, v1, v22, v3) {
  var t22 = t13 * t13, t32 = t22 * t13;
  return ((1 - 3 * t13 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t13 + 3 * t22 - 3 * t32) * v22 + t32 * v3) / 6;
}
function basis_default(values2) {
  var n = values2.length - 1;
  return function(t) {
    var i2 = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values2[i2], v22 = values2[i2 + 1], v0 = i2 > 0 ? values2[i2 - 1] : 2 * v1 - v22, v3 = i2 < n - 1 ? values2[i2 + 2] : 2 * v22 - v1;
    return basis((t - i2 / n) * n, v0, v1, v22, v3);
  };
}

// ../../node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values2) {
  var n = values2.length;
  return function(t) {
    var i2 = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values2[(i2 + n - 1) % n], v1 = values2[i2 % n], v22 = values2[(i2 + 1) % n], v3 = values2[(i2 + 2) % n];
    return basis((t - i2 / n) * n, v0, v1, v22, v3);
  };
}

// ../../node_modules/d3-interpolate/src/constant.js
var constant_default2 = (x3) => () => x3;

// ../../node_modules/d3-interpolate/src/color.js
function linear(a2, d) {
  return function(t) {
    return a2 + t * d;
  };
}
function exponential(a2, b2, y3) {
  return a2 = Math.pow(a2, y3), b2 = Math.pow(b2, y3) - a2, y3 = 1 / y3, function(t) {
    return Math.pow(a2 + t * b2, y3);
  };
}
function hue(a2, b2) {
  var d = b2 - a2;
  return d ? linear(a2, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default2(isNaN(a2) ? b2 : a2);
}
function gamma(y3) {
  return (y3 = +y3) === 1 ? nogamma : function(a2, b2) {
    return b2 - a2 ? exponential(a2, b2, y3) : constant_default2(isNaN(a2) ? b2 : a2);
  };
}
function nogamma(a2, b2) {
  var d = b2 - a2;
  return d ? linear(a2, d) : constant_default2(isNaN(a2) ? b2 : a2);
}

// ../../node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y3) {
  var color3 = gamma(y3);
  function rgb2(start2, end) {
    var r = color3((start2 = rgb(start2)).r, (end = rgb(end)).r), g2 = color3(start2.g, end.g), b2 = color3(start2.b, end.b), opacity2 = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.r = r(t);
      start2.g = g2(t);
      start2.b = b2(t);
      start2.opacity = opacity2(t);
      return start2 + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g2 = new Array(n), b2 = new Array(n), i2, color3;
    for (i2 = 0; i2 < n; ++i2) {
      color3 = rgb(colors[i2]);
      r[i2] = color3.r || 0;
      g2[i2] = color3.g || 0;
      b2[i2] = color3.b || 0;
    }
    r = spline(r);
    g2 = spline(g2);
    b2 = spline(b2);
    color3.opacity = 1;
    return function(t) {
      color3.r = r(t);
      color3.g = g2(t);
      color3.b = b2(t);
      return color3 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// ../../node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a2, b2) {
  if (!b2)
    b2 = [];
  var n = a2 ? Math.min(b2.length, a2.length) : 0, c4 = b2.slice(), i2;
  return function(t) {
    for (i2 = 0; i2 < n; ++i2)
      c4[i2] = a2[i2] * (1 - t) + b2[i2] * t;
    return c4;
  };
}
function isNumberArray(x3) {
  return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
}

// ../../node_modules/d3-interpolate/src/array.js
function genericArray(a2, b2) {
  var nb = b2 ? b2.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x3 = new Array(na), c4 = new Array(nb), i2;
  for (i2 = 0; i2 < na; ++i2)
    x3[i2] = value_default(a2[i2], b2[i2]);
  for (; i2 < nb; ++i2)
    c4[i2] = b2[i2];
  return function(t) {
    for (i2 = 0; i2 < na; ++i2)
      c4[i2] = x3[i2](t);
    return c4;
  };
}

// ../../node_modules/d3-interpolate/src/date.js
function date_default(a2, b2) {
  var d = /* @__PURE__ */ new Date();
  return a2 = +a2, b2 = +b2, function(t) {
    return d.setTime(a2 * (1 - t) + b2 * t), d;
  };
}

// ../../node_modules/d3-interpolate/src/number.js
function number_default(a2, b2) {
  return a2 = +a2, b2 = +b2, function(t) {
    return a2 * (1 - t) + b2 * t;
  };
}

// ../../node_modules/d3-interpolate/src/object.js
function object_default(a2, b2) {
  var i2 = {}, c4 = {}, k3;
  if (a2 === null || typeof a2 !== "object")
    a2 = {};
  if (b2 === null || typeof b2 !== "object")
    b2 = {};
  for (k3 in b2) {
    if (k3 in a2) {
      i2[k3] = value_default(a2[k3], b2[k3]);
    } else {
      c4[k3] = b2[k3];
    }
  }
  return function(t) {
    for (k3 in i2)
      c4[k3] = i2[k3](t);
    return c4;
  };
}

// ../../node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero2(b2) {
  return function() {
    return b2;
  };
}
function one(b2) {
  return function(t) {
    return b2(t) + "";
  };
}
function string_default(a2, b2) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i2 = -1, s2 = [], q2 = [];
  a2 = a2 + "", b2 = b2 + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b2))) {
    if ((bs = bm.index) > bi) {
      bs = b2.slice(bi, bs);
      if (s2[i2])
        s2[i2] += bs;
      else
        s2[++i2] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i2])
        s2[i2] += bm;
      else
        s2[++i2] = bm;
    } else {
      s2[++i2] = null;
      q2.push({ i: i2, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b2.length) {
    bs = b2.slice(bi);
    if (s2[i2])
      s2[i2] += bs;
    else
      s2[++i2] = bs;
  }
  return s2.length < 2 ? q2[0] ? one(q2[0].x) : zero2(b2) : (b2 = q2.length, function(t) {
    for (var i3 = 0, o; i3 < b2; ++i3)
      s2[(o = q2[i3]).i] = o.x(t);
    return s2.join("");
  });
}

// ../../node_modules/d3-interpolate/src/value.js
function value_default(a2, b2) {
  var t = typeof b2, c4;
  return b2 == null || t === "boolean" ? constant_default2(b2) : (t === "number" ? number_default : t === "string" ? (c4 = color(b2)) ? (b2 = c4, rgb_default) : string_default : b2 instanceof color ? rgb_default : b2 instanceof Date ? date_default : isNumberArray(b2) ? numberArray_default : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object_default : number_default)(a2, b2);
}

// ../../node_modules/d3-interpolate/src/round.js
function round_default(a2, b2) {
  return a2 = +a2, b2 = +b2, function(t) {
    return Math.round(a2 * (1 - t) + b2 * t);
  };
}

// ../../node_modules/d3-interpolate/src/transform/decompose.js
var degrees2 = 180 / Math.PI;
var identity3 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a2, b2, c4, d, e, f2) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b2 * b2))
    a2 /= scaleX, b2 /= scaleX;
  if (skewX = a2 * c4 + b2 * d)
    c4 -= a2 * skewX, d -= b2 * skewX;
  if (scaleY = Math.sqrt(c4 * c4 + d * d))
    c4 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b2 * c4)
    a2 = -a2, b2 = -b2, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f2,
    rotate: Math.atan2(b2, a2) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}

// ../../node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m2.isIdentity ? identity3 : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
}
function parseSvg(value) {
  if (value == null)
    return identity3;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity3;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// ../../node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse2, pxComma, pxParen, degParen) {
  function pop(s2) {
    return s2.length ? s2.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s2, q2) {
    if (xa !== xb || ya !== yb) {
      var i2 = s2.push("translate(", null, pxComma, null, pxParen);
      q2.push({ i: i2 - 4, x: number_default(xa, xb) }, { i: i2 - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b2, s2, q2) {
    if (a2 !== b2) {
      if (a2 - b2 > 180)
        b2 += 360;
      else if (b2 - a2 > 180)
        a2 += 360;
      q2.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default(a2, b2) });
    } else if (b2) {
      s2.push(pop(s2) + "rotate(" + b2 + degParen);
    }
  }
  function skewX(a2, b2, s2, q2) {
    if (a2 !== b2) {
      q2.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default(a2, b2) });
    } else if (b2) {
      s2.push(pop(s2) + "skewX(" + b2 + degParen);
    }
  }
  function scale3(xa, ya, xb, yb, s2, q2) {
    if (xa !== xb || ya !== yb) {
      var i2 = s2.push(pop(s2) + "scale(", null, ",", null, ")");
      q2.push({ i: i2 - 4, x: number_default(xa, xb) }, { i: i2 - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b2) {
    var s2 = [], q2 = [];
    a2 = parse2(a2), b2 = parse2(b2);
    translate(a2.translateX, a2.translateY, b2.translateX, b2.translateY, s2, q2);
    rotate(a2.rotate, b2.rotate, s2, q2);
    skewX(a2.skewX, b2.skewX, s2, q2);
    scale3(a2.scaleX, a2.scaleY, b2.scaleX, b2.scaleY, s2, q2);
    a2 = b2 = null;
    return function(t) {
      var i2 = -1, n = q2.length, o;
      while (++i2 < n)
        s2[(o = q2[i2]).i] = o.x(t);
      return s2.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// ../../node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x3) {
  return ((x3 = Math.exp(x3)) + 1 / x3) / 2;
}
function sinh(x3) {
  return ((x3 = Math.exp(x3)) - 1 / x3) / 2;
}
function tanh(x3) {
  return ((x3 = Math.exp(2 * x3)) - 1) / (x3 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom2(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i2, S2;
    if (d2 < epsilon2) {
      S2 = Math.log(w1 / w0) / rho;
      i2 = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S2)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S2 = (r1 - r0) / rho;
      i2 = function(t) {
        var s2 = t * S2, coshr0 = cosh(r0), u4 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s2 + r0) - sinh(r0));
        return [
          ux0 + u4 * dx,
          uy0 + u4 * dy,
          w0 * coshr0 / cosh(rho * s2 + r0)
        ];
      };
    }
    i2.duration = S2 * 1e3 * rho / Math.SQRT2;
    return i2;
  }
  zoom2.rho = function(_2) {
    var _1 = Math.max(1e-3, +_2), _22 = _1 * _1, _4 = _22 * _22;
    return zoomRho(_1, _22, _4);
  };
  return zoom2;
}(Math.SQRT2, 2, 4);

// ../../node_modules/d3-interpolate/src/hsl.js
function hsl2(hue2) {
  return function(start2, end) {
    var h2 = hue2((start2 = hsl(start2)).h, (end = hsl(end)).h), s2 = nogamma(start2.s, end.s), l = nogamma(start2.l, end.l), opacity2 = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.h = h2(t);
      start2.s = s2(t);
      start2.l = l(t);
      start2.opacity = opacity2(t);
      return start2 + "";
    };
  };
}
var hsl_default = hsl2(hue);
var hslLong = hsl2(nogamma);

// ../../node_modules/d3-interpolate/src/lab.js
function lab2(start2, end) {
  var l = nogamma((start2 = lab(start2)).l, (end = lab(end)).l), a2 = nogamma(start2.a, end.a), b2 = nogamma(start2.b, end.b), opacity2 = nogamma(start2.opacity, end.opacity);
  return function(t) {
    start2.l = l(t);
    start2.a = a2(t);
    start2.b = b2(t);
    start2.opacity = opacity2(t);
    return start2 + "";
  };
}

// ../../node_modules/d3-interpolate/src/hcl.js
function hcl2(hue2) {
  return function(start2, end) {
    var h2 = hue2((start2 = hcl(start2)).h, (end = hcl(end)).h), c4 = nogamma(start2.c, end.c), l = nogamma(start2.l, end.l), opacity2 = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.h = h2(t);
      start2.c = c4(t);
      start2.l = l(t);
      start2.opacity = opacity2(t);
      return start2 + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// ../../node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue2) {
  return function cubehelixGamma(y3) {
    y3 = +y3;
    function cubehelix3(start2, end) {
      var h2 = hue2((start2 = cubehelix(start2)).h, (end = cubehelix(end)).h), s2 = nogamma(start2.s, end.s), l = nogamma(start2.l, end.l), opacity2 = nogamma(start2.opacity, end.opacity);
      return function(t) {
        start2.h = h2(t);
        start2.s = s2(t);
        start2.l = l(Math.pow(t, y3));
        start2.opacity = opacity2(t);
        return start2 + "";
      };
    }
    cubehelix3.gamma = cubehelixGamma;
    return cubehelix3;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// ../../node_modules/d3-interpolate/src/piecewise.js
function piecewise(interpolate, values2) {
  if (values2 === void 0)
    values2 = interpolate, interpolate = value_default;
  var i2 = 0, n = values2.length - 1, v3 = values2[0], I2 = new Array(n < 0 ? 0 : n);
  while (i2 < n)
    I2[i2] = interpolate(v3, v3 = values2[++i2]);
  return function(t) {
    var i3 = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I2[i3](t - i3);
  };
}

// ../../node_modules/d3-interpolate/src/quantize.js
function quantize_default(interpolator, n) {
  var samples = new Array(n);
  for (var i2 = 0; i2 < n; ++i2)
    samples[i2] = interpolator(i2 / (n - 1));
  return samples;
}

// ../../node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f2) {
  setTimeout(f2, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time2) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time2 = (time2 == null ? now() : +time2) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time2;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time2) {
  var t = new Timer();
  t.restart(callback, delay, time2);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(void 0, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t03, t13 = taskHead, t22, time2 = Infinity;
  while (t13) {
    if (t13._call) {
      if (time2 > t13._time)
        time2 = t13._time;
      t03 = t13, t13 = t13._next;
    } else {
      t22 = t13._next, t13._next = null;
      t13 = t03 ? t03._next = t22 : taskHead = t22;
    }
  }
  taskTail = t03;
  sleep(time2);
}
function sleep(time2) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time2 - clockNow;
  if (delay > 24) {
    if (time2 < Infinity)
      timeout = setTimeout(wake, time2 - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// ../../node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time2) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time2);
  return t;
}

// ../../node_modules/d3-transition/src/transition/schedule.js
var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule_default(node, name2, id2, index2, group3, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create2(node, id2, {
    name: name2,
    index: index2,
    // For context during callback.
    group: group3,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule;
}
function set2(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > STARTED)
    throw new Error("too late; already running");
  return schedule;
}
function get2(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2]))
    throw new Error("transition not found");
  return schedule;
}
function create2(node, id2, self) {
  var schedules = node.__transition, tween;
  schedules[id2] = self;
  self.timer = timer(schedule, 0, self.time);
  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start2, self.delay, self.time);
    if (self.delay <= elapsed)
      start2(elapsed - self.delay);
  }
  function start2(elapsed) {
    var i2, j2, n, o;
    if (self.state !== SCHEDULED)
      return stop();
    for (i2 in schedules) {
      o = schedules[i2];
      if (o.name !== self.name)
        continue;
      if (o.state === STARTED)
        return timeout_default(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i2];
      } else if (+i2 < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i2];
      }
    }
    timeout_default(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING)
      return;
    self.state = STARTED;
    tween = new Array(n = self.tween.length);
    for (i2 = 0, j2 = -1; i2 < n; ++i2) {
      if (o = self.tween[i2].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j2] = o;
      }
    }
    tween.length = j2 + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i2 = -1, n = tween.length;
    while (++i2 < n) {
      tween[i2].call(node, t);
    }
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }
  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id2];
    for (var i2 in schedules)
      return;
    delete node.__transition;
  }
}

// ../../node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name2) {
  var schedules = node.__transition, schedule, active, empty4 = true, i2;
  if (!schedules)
    return;
  name2 = name2 == null ? null : name2 + "";
  for (i2 in schedules) {
    if ((schedule = schedules[i2]).name !== name2) {
      empty4 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i2];
  }
  if (empty4)
    delete node.__transition;
}

// ../../node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name2) {
  return this.each(function() {
    interrupt_default(this, name2);
  });
}

// ../../node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name2) {
  var tween0, tween1;
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i2 = 0, n = tween1.length; i2 < n; ++i2) {
        if (tween1[i2].name === name2) {
          tween1 = tween1.slice();
          tween1.splice(i2, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name2, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name: name2, value }, i2 = 0, n = tween1.length; i2 < n; ++i2) {
        if (tween1[i2].name === name2) {
          tween1[i2] = t;
          break;
        }
      }
      if (i2 === n)
        tween1.push(t);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name2, value) {
  var id2 = this._id;
  name2 += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id2).tween;
    for (var i2 = 0, n = tween.length, t; i2 < n; ++i2) {
      if ((t = tween[i2]).name === name2) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name2, value));
}
function tweenValue(transition2, name2, value) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set2(this, id2);
    (schedule.value || (schedule.value = {}))[name2] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id2).value[name2];
  };
}

// ../../node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a2, b2) {
  var c4;
  return (typeof b2 === "number" ? number_default : b2 instanceof color ? rgb_default : (c4 = color(b2)) ? (b2 = c4, rgb_default) : string_default)(a2, b2);
}

// ../../node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name2) {
  return function() {
    this.removeAttribute(name2);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name2, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name2);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name2, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name2);
    string0 = this.getAttribute(name2);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name2, value) {
  var fullname = namespace_default(name2), i2 = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name2, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i2, tweenValue(this, "attr." + name2, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i2, value));
}

// ../../node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name2, i2) {
  return function(t) {
    this.setAttribute(name2, i2.call(this, t));
  };
}
function attrInterpolateNS(fullname, i2) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i2.call(this, t));
  };
}
function attrTweenNS(fullname, value) {
  var t03, i0;
  function tween() {
    var i2 = value.apply(this, arguments);
    if (i2 !== i0)
      t03 = (i0 = i2) && attrInterpolateNS(fullname, i2);
    return t03;
  }
  tween._value = value;
  return tween;
}
function attrTween(name2, value) {
  var t03, i0;
  function tween() {
    var i2 = value.apply(this, arguments);
    if (i2 !== i0)
      t03 = (i0 = i2) && attrInterpolate(name2, i2);
    return t03;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name2, value) {
  var key = "attr." + name2;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace_default(name2);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

// ../../node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function delay_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
}

// ../../node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value) {
  return function() {
    set2(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set2(this, id2).duration = value;
  };
}
function duration_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
}

// ../../node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set2(this, id2).ease = value;
  };
}
function ease_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
}

// ../../node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id2, value) {
  return function() {
    var v3 = value.apply(this, arguments);
    if (typeof v3 !== "function")
      throw new Error();
    set2(this, id2).ease = v3;
  };
}
function easeVarying_default(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}

// ../../node_modules/d3-transition/src/transition/filter.js
function filter_default2(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j2 = 0; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], n = group3.length, subgroup = subgroups[j2] = [], node, i2 = 0; i2 < n; ++i2) {
      if ((node = group3[i2]) && match.call(node, node.__data__, i2, group3)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}

// ../../node_modules/d3-transition/src/transition/merge.js
function merge_default2(transition2) {
  if (transition2._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j2 = 0; j2 < m2; ++j2) {
    for (var group0 = groups0[j2], group1 = groups1[j2], n = group0.length, merge2 = merges[j2] = new Array(n), node, i2 = 0; i2 < n; ++i2) {
      if (node = group0[i2] || group1[i2]) {
        merge2[i2] = node;
      }
    }
  }
  for (; j2 < m0; ++j2) {
    merges[j2] = groups0[j2];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}

// ../../node_modules/d3-transition/src/transition/on.js
function start(name2) {
  return (name2 + "").trim().split(/^|\s+/).every(function(t) {
    var i2 = t.indexOf(".");
    if (i2 >= 0)
      t = t.slice(0, i2);
    return !t || t === "start";
  });
}
function onFunction(id2, name2, listener) {
  var on0, on1, sit = start(name2) ? init : set2;
  return function() {
    var schedule = sit(this, id2), on = schedule.on;
    if (on !== on0)
      (on1 = (on0 = on).copy()).on(name2, listener);
    schedule.on = on1;
  };
}
function on_default2(name2, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get2(this.node(), id2).on.on(name2) : this.each(onFunction(id2, name2, listener));
}

// ../../node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i2 in this.__transition)
      if (+i2 !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}

// ../../node_modules/d3-transition/src/transition/select.js
function select_default3(select2) {
  var name2 = this._name, id2 = this._id;
  if (typeof select2 !== "function")
    select2 = selector_default(select2);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j2 = 0; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], n = group3.length, subgroup = subgroups[j2] = new Array(n), node, subnode, i2 = 0; i2 < n; ++i2) {
      if ((node = group3[i2]) && (subnode = select2.call(node, node.__data__, i2, group3))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i2] = subnode;
        schedule_default(subgroup[i2], name2, id2, i2, subgroup, get2(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name2, id2);
}

// ../../node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default2(select2) {
  var name2 = this._name, id2 = this._id;
  if (typeof select2 !== "function")
    select2 = selectorAll_default(select2);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = [], parents = [], j2 = 0; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], n = group3.length, node, i2 = 0; i2 < n; ++i2) {
      if (node = group3[i2]) {
        for (var children2 = select2.call(node, node.__data__, i2, group3), child, inherit3 = get2(node, id2), k3 = 0, l = children2.length; k3 < l; ++k3) {
          if (child = children2[k3]) {
            schedule_default(child, name2, id2, k3, children2, inherit3);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name2, id2);
}

// ../../node_modules/d3-transition/src/transition/selection.js
var Selection3 = selection_default.prototype.constructor;
function selection_default2() {
  return new Selection3(this._groups, this._parents);
}

// ../../node_modules/d3-transition/src/transition/style.js
function styleNull(name2, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name2), string1 = (this.style.removeProperty(name2), styleValue(this, name2));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name2) {
  return function() {
    this.style.removeProperty(name2);
  };
}
function styleConstant2(name2, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name2);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name2, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name2), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name2), styleValue(this, name2));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name2) {
  var on0, on1, listener0, key = "style." + name2, event = "end." + key, remove2;
  return function() {
    var schedule = set2(this, id2), on = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name2)) : void 0;
    if (on !== on0 || listener0 !== listener)
      (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name2, value, priority) {
  var i2 = (name2 += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name2, styleNull(name2, i2)).on("end.style." + name2, styleRemove2(name2)) : typeof value === "function" ? this.styleTween(name2, styleFunction2(name2, i2, tweenValue(this, "style." + name2, value))).each(styleMaybeRemove(this._id, name2)) : this.styleTween(name2, styleConstant2(name2, i2, value), priority).on("end.style." + name2, null);
}

// ../../node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name2, i2, priority) {
  return function(t) {
    this.style.setProperty(name2, i2.call(this, t), priority);
  };
}
function styleTween(name2, value, priority) {
  var t, i0;
  function tween() {
    var i2 = value.apply(this, arguments);
    if (i2 !== i0)
      t = (i0 = i2) && styleInterpolate(name2, i2, priority);
    return t;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name2, value, priority) {
  var key = "style." + (name2 += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name2, value, priority == null ? "" : priority));
}

// ../../node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default2(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}

// ../../node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i2) {
  return function(t) {
    this.textContent = i2.call(this, t);
  };
}
function textTween(value) {
  var t03, i0;
  function tween() {
    var i2 = value.apply(this, arguments);
    if (i2 !== i0)
      t03 = (i0 = i2) && textInterpolate(i2);
    return t03;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}

// ../../node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name2 = this._name, id0 = this._id, id1 = newId();
  for (var groups2 = this._groups, m2 = groups2.length, j2 = 0; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], n = group3.length, node, i2 = 0; i2 < n; ++i2) {
      if (node = group3[i2]) {
        var inherit3 = get2(node, id0);
        schedule_default(node, name2, id1, i2, group3, {
          time: inherit3.time + inherit3.delay + inherit3.duration,
          delay: 0,
          duration: inherit3.duration,
          ease: inherit3.ease
        });
      }
    }
  }
  return new Transition(groups2, this._parents, name2, id1);
}

// ../../node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule = set2(this, id2), on = schedule.on;
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
    if (size === 0)
      resolve();
  });
}

// ../../node_modules/d3-transition/src/transition/index.js
var id = 0;
function Transition(groups2, parents, name2, id2) {
  this._groups = groups2;
  this._parents = parents;
  this._name = name2;
  this._id = id2;
}
function transition(name2) {
  return selection_default().transition(name2);
}
function newId() {
  return ++id;
}
var selection_prototype = selection_default.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: select_default3,
  selectAll: selectAll_default2,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: filter_default2,
  merge: merge_default2,
  selection: selection_default2,
  transition: transition_default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: on_default2,
  attr: attr_default2,
  attrTween: attrTween_default,
  style: style_default2,
  styleTween: styleTween_default,
  text: text_default2,
  textTween: textTween_default,
  remove: remove_default2,
  tween: tween_default,
  delay: delay_default,
  duration: duration_default,
  ease: ease_default,
  easeVarying: easeVarying_default,
  end: end_default,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

// ../../node_modules/d3-ease/src/cubic.js
function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

// ../../node_modules/d3-transition/src/selection/transition.js
var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function transition_default2(name2) {
  var id2, timing;
  if (name2 instanceof Transition) {
    id2 = name2._id, name2 = name2._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name2 = name2 == null ? null : name2 + "";
  }
  for (var groups2 = this._groups, m2 = groups2.length, j2 = 0; j2 < m2; ++j2) {
    for (var group3 = groups2[j2], n = group3.length, node, i2 = 0; i2 < n; ++i2) {
      if (node = group3[i2]) {
        schedule_default(node, name2, id2, i2, group3, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups2, this._parents, name2, id2);
}

// ../../node_modules/d3-transition/src/selection/index.js
selection_default.prototype.interrupt = interrupt_default2;
selection_default.prototype.transition = transition_default2;

// ../../node_modules/d3-brush/src/constant.js
var constant_default3 = (x3) => () => x3;

// ../../node_modules/d3-brush/src/event.js
function BrushEvent(type2, {
  sourceEvent,
  target,
  selection: selection2,
  mode: mode3,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    selection: { value: selection2, enumerable: true, configurable: true },
    mode: { value: mode3, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}

// ../../node_modules/d3-brush/src/noevent.js
function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent_default2(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// ../../node_modules/d3-brush/src/brush.js
var MODE_DRAG = { name: "drag" };
var MODE_SPACE = { name: "space" };
var MODE_HANDLE = { name: "handle" };
var MODE_CENTER = { name: "center" };
var { abs, max: max3, min: min3 } = Math;
function number1(e) {
  return [+e[0], +e[1]];
}
function number22(e) {
  return [number1(e[0]), number1(e[1])];
}
var X2 = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function(x3, e) {
    return x3 == null ? null : [[+x3[0], e[0][1]], [+x3[1], e[1][1]]];
  },
  output: function(xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y2 = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y3, e) {
    return y3 == null ? null : [[e[0][0], +y3[0]], [e[1][0], +y3[1]]];
  },
  output: function(xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function(xy) {
    return xy == null ? null : number22(xy);
  },
  output: function(xy) {
    return xy;
  }
};
var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};
var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};
var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};
var signsX = {
  overlay: 1,
  selection: 1,
  n: null,
  e: 1,
  s: null,
  w: -1,
  nw: -1,
  ne: 1,
  se: 1,
  sw: -1
};
var signsY = {
  overlay: 1,
  selection: 1,
  n: -1,
  e: null,
  s: 1,
  w: null,
  nw: -1,
  ne: -1,
  se: 1,
  sw: 1
};
function type(t) {
  return { type: t };
}
function defaultFilter(event) {
  return !event.ctrlKey && !event.button;
}
function defaultExtent() {
  var svg = this.ownerSVGElement || this;
  if (svg.hasAttribute("viewBox")) {
    svg = svg.viewBox.baseVal;
    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
  }
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function local(node) {
  while (!node.__brush)
    if (!(node = node.parentNode))
      return;
  return node.__brush;
}
function empty3(extent4) {
  return extent4[0][0] === extent4[1][0] || extent4[0][1] === extent4[1][1];
}
function brushX() {
  return brush(X2);
}
function brushY() {
  return brush(Y2);
}
function brush_default() {
  return brush(XY);
}
function brush(dim) {
  var extent4 = defaultExtent, filter3 = defaultFilter, touchable = defaultTouchable, keys = true, listeners = dispatch_default("start", "brush", "end"), handleSize = 6, touchending;
  function brush3(group3) {
    var overlay = group3.property("__brush", initialize).selectAll(".overlay").data([type("overlay")]);
    overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function() {
      var extent5 = local(this).extent;
      select_default2(this).attr("x", extent5[0][0]).attr("y", extent5[0][1]).attr("width", extent5[1][0] - extent5[0][0]).attr("height", extent5[1][1] - extent5[0][1]);
    });
    group3.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var handle = group3.selectAll(".handle").data(dim.handles, function(d) {
      return d.type;
    });
    handle.exit().remove();
    handle.enter().append("rect").attr("class", function(d) {
      return "handle handle--" + d.type;
    }).attr("cursor", function(d) {
      return cursors[d.type];
    });
    group3.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  brush3.move = function(group3, selection2, event) {
    if (group3.tween) {
      group3.on("start.brush", function(event2) {
        emitter(this, arguments).beforestart().start(event2);
      }).on("interrupt.brush end.brush", function(event2) {
        emitter(this, arguments).end(event2);
      }).tween("brush", function() {
        var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection2 === "function" ? selection2.apply(this, arguments) : selection2, state.extent), i2 = value_default(selection0, selection1);
        function tween(t) {
          state.selection = t === 1 && selection1 === null ? null : i2(t);
          redraw.call(that);
          emit.brush();
        }
        return selection0 !== null && selection1 !== null ? tween : tween(1);
      });
    } else {
      group3.each(function() {
        var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection2 === "function" ? selection2.apply(that, args) : selection2, state.extent), emit = emitter(that, args).beforestart();
        interrupt_default(that);
        state.selection = selection1 === null ? null : selection1;
        redraw.call(that);
        emit.start(event).brush(event).end(event);
      });
    }
  };
  brush3.clear = function(group3, event) {
    brush3.move(group3, null, event);
  };
  function redraw() {
    var group3 = select_default2(this), selection2 = local(this).selection;
    if (selection2) {
      group3.selectAll(".selection").style("display", null).attr("x", selection2[0][0]).attr("y", selection2[0][1]).attr("width", selection2[1][0] - selection2[0][0]).attr("height", selection2[1][1] - selection2[0][1]);
      group3.selectAll(".handle").style("display", null).attr("x", function(d) {
        return d.type[d.type.length - 1] === "e" ? selection2[1][0] - handleSize / 2 : selection2[0][0] - handleSize / 2;
      }).attr("y", function(d) {
        return d.type[0] === "s" ? selection2[1][1] - handleSize / 2 : selection2[0][1] - handleSize / 2;
      }).attr("width", function(d) {
        return d.type === "n" || d.type === "s" ? selection2[1][0] - selection2[0][0] + handleSize : handleSize;
      }).attr("height", function(d) {
        return d.type === "e" || d.type === "w" ? selection2[1][1] - selection2[0][1] + handleSize : handleSize;
      });
    } else {
      group3.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
  }
  function emitter(that, args, clean) {
    var emit = that.__brush.emitter;
    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
  }
  function Emitter(that, args, clean) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
    this.clean = clean;
  }
  Emitter.prototype = {
    beforestart: function() {
      if (++this.active === 1)
        this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function(event, mode3) {
      if (this.starting)
        this.starting = false, this.emit("start", event, mode3);
      else
        this.emit("brush", event);
      return this;
    },
    brush: function(event, mode3) {
      this.emit("brush", event, mode3);
      return this;
    },
    end: function(event, mode3) {
      if (--this.active === 0)
        delete this.state.emitter, this.emit("end", event, mode3);
      return this;
    },
    emit: function(type2, event, mode3) {
      var d = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new BrushEvent(type2, {
          sourceEvent: event,
          target: brush3,
          selection: dim.output(this.state.selection),
          mode: mode3,
          dispatch: listeners
        }),
        d
      );
    }
  };
  function started(event) {
    if (touchending && !event.touches)
      return;
    if (!filter3.apply(this, arguments))
      return;
    var that = this, type2 = event.target.__data__.type, mode3 = (keys && event.metaKey ? type2 = "overlay" : type2) === "selection" ? MODE_DRAG : keys && event.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y2 ? null : signsX[type2], signY = dim === X2 ? null : signsY[type2], state = local(that), extent5 = state.extent, selection2 = state.selection, W2 = extent5[0][0], w0, w1, N2 = extent5[0][1], n0, n1, E3 = extent5[1][0], e0, e1, S2 = extent5[1][1], s0, s1, dx = 0, dy = 0, moving, shifting = signX && signY && keys && event.shiftKey, lockX, lockY, points2 = Array.from(event.touches || [event], (t) => {
      const i2 = t.identifier;
      t = pointer_default(t, that);
      t.point0 = t.slice();
      t.identifier = i2;
      return t;
    });
    interrupt_default(that);
    var emit = emitter(that, arguments, true).beforestart();
    if (type2 === "overlay") {
      if (selection2)
        moving = true;
      const pts = [points2[0], points2[1] || points2[0]];
      state.selection = selection2 = [[
        w0 = dim === Y2 ? W2 : min3(pts[0][0], pts[1][0]),
        n0 = dim === X2 ? N2 : min3(pts[0][1], pts[1][1])
      ], [
        e0 = dim === Y2 ? E3 : max3(pts[0][0], pts[1][0]),
        s0 = dim === X2 ? S2 : max3(pts[0][1], pts[1][1])
      ]];
      if (points2.length > 1)
        move(event);
    } else {
      w0 = selection2[0][0];
      n0 = selection2[0][1];
      e0 = selection2[1][0];
      s0 = selection2[1][1];
    }
    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group3 = select_default2(that).attr("pointer-events", "none");
    var overlay = group3.selectAll(".overlay").attr("cursor", cursors[type2]);
    if (event.touches) {
      emit.moved = moved;
      emit.ended = ended;
    } else {
      var view = select_default2(event.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
      if (keys)
        view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
      nodrag_default(event.view);
    }
    redraw.call(that);
    emit.start(event, mode3.name);
    function moved(event2) {
      for (const p2 of event2.changedTouches || [event2]) {
        for (const d of points2)
          if (d.identifier === p2.identifier)
            d.cur = pointer_default(p2, that);
      }
      if (shifting && !lockX && !lockY && points2.length === 1) {
        const point6 = points2[0];
        if (abs(point6.cur[0] - point6[0]) > abs(point6.cur[1] - point6[1]))
          lockY = true;
        else
          lockX = true;
      }
      for (const point6 of points2)
        if (point6.cur)
          point6[0] = point6.cur[0], point6[1] = point6.cur[1];
      moving = true;
      noevent_default2(event2);
      move(event2);
    }
    function move(event2) {
      const point6 = points2[0], point0 = point6.point0;
      var t;
      dx = point6[0] - point0[0];
      dy = point6[1] - point0[1];
      switch (mode3) {
        case MODE_SPACE:
        case MODE_DRAG: {
          if (signX)
            dx = max3(W2 - w0, min3(E3 - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
          if (signY)
            dy = max3(N2 - n0, min3(S2 - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
          break;
        }
        case MODE_HANDLE: {
          if (points2[1]) {
            if (signX)
              w1 = max3(W2, min3(E3, points2[0][0])), e1 = max3(W2, min3(E3, points2[1][0])), signX = 1;
            if (signY)
              n1 = max3(N2, min3(S2, points2[0][1])), s1 = max3(N2, min3(S2, points2[1][1])), signY = 1;
          } else {
            if (signX < 0)
              dx = max3(W2 - w0, min3(E3 - w0, dx)), w1 = w0 + dx, e1 = e0;
            else if (signX > 0)
              dx = max3(W2 - e0, min3(E3 - e0, dx)), w1 = w0, e1 = e0 + dx;
            if (signY < 0)
              dy = max3(N2 - n0, min3(S2 - n0, dy)), n1 = n0 + dy, s1 = s0;
            else if (signY > 0)
              dy = max3(N2 - s0, min3(S2 - s0, dy)), n1 = n0, s1 = s0 + dy;
          }
          break;
        }
        case MODE_CENTER: {
          if (signX)
            w1 = max3(W2, min3(E3, w0 - dx * signX)), e1 = max3(W2, min3(E3, e0 + dx * signX));
          if (signY)
            n1 = max3(N2, min3(S2, n0 - dy * signY)), s1 = max3(N2, min3(S2, s0 + dy * signY));
          break;
        }
      }
      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type2 in flipX)
          overlay.attr("cursor", cursors[type2 = flipX[type2]]);
      }
      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type2 in flipY)
          overlay.attr("cursor", cursors[type2 = flipY[type2]]);
      }
      if (state.selection)
        selection2 = state.selection;
      if (lockX)
        w1 = selection2[0][0], e1 = selection2[1][0];
      if (lockY)
        n1 = selection2[0][1], s1 = selection2[1][1];
      if (selection2[0][0] !== w1 || selection2[0][1] !== n1 || selection2[1][0] !== e1 || selection2[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush(event2, mode3.name);
      }
    }
    function ended(event2) {
      nopropagation(event2);
      if (event2.touches) {
        if (event2.touches.length)
          return;
        if (touchending)
          clearTimeout(touchending);
        touchending = setTimeout(function() {
          touchending = null;
        }, 500);
      } else {
        yesdrag(event2.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }
      group3.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection)
        selection2 = state.selection;
      if (empty3(selection2))
        state.selection = null, redraw.call(that);
      emit.end(event2, mode3.name);
    }
    function keydowned(event2) {
      switch (event2.keyCode) {
        case 16: {
          shifting = signX && signY;
          break;
        }
        case 18: {
          if (mode3 === MODE_HANDLE) {
            if (signX)
              e0 = e1 - dx * signX, w0 = w1 + dx * signX;
            if (signY)
              s0 = s1 - dy * signY, n0 = n1 + dy * signY;
            mode3 = MODE_CENTER;
            move(event2);
          }
          break;
        }
        case 32: {
          if (mode3 === MODE_HANDLE || mode3 === MODE_CENTER) {
            if (signX < 0)
              e0 = e1 - dx;
            else if (signX > 0)
              w0 = w1 - dx;
            if (signY < 0)
              s0 = s1 - dy;
            else if (signY > 0)
              n0 = n1 - dy;
            mode3 = MODE_SPACE;
            overlay.attr("cursor", cursors.selection);
            move(event2);
          }
          break;
        }
        default:
          return;
      }
      noevent_default2(event2);
    }
    function keyupped(event2) {
      switch (event2.keyCode) {
        case 16: {
          if (shifting) {
            lockX = lockY = shifting = false;
            move(event2);
          }
          break;
        }
        case 18: {
          if (mode3 === MODE_CENTER) {
            if (signX < 0)
              e0 = e1;
            else if (signX > 0)
              w0 = w1;
            if (signY < 0)
              s0 = s1;
            else if (signY > 0)
              n0 = n1;
            mode3 = MODE_HANDLE;
            move(event2);
          }
          break;
        }
        case 32: {
          if (mode3 === MODE_SPACE) {
            if (event2.altKey) {
              if (signX)
                e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY)
                s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode3 = MODE_CENTER;
            } else {
              if (signX < 0)
                e0 = e1;
              else if (signX > 0)
                w0 = w1;
              if (signY < 0)
                s0 = s1;
              else if (signY > 0)
                n0 = n1;
              mode3 = MODE_HANDLE;
            }
            overlay.attr("cursor", cursors[type2]);
            move(event2);
          }
          break;
        }
        default:
          return;
      }
      noevent_default2(event2);
    }
  }
  function touchmoved(event) {
    emitter(this, arguments).moved(event);
  }
  function touchended(event) {
    emitter(this, arguments).ended(event);
  }
  function initialize() {
    var state = this.__brush || { selection: null };
    state.extent = number22(extent4.apply(this, arguments));
    state.dim = dim;
    return state;
  }
  brush3.extent = function(_2) {
    return arguments.length ? (extent4 = typeof _2 === "function" ? _2 : constant_default3(number22(_2)), brush3) : extent4;
  };
  brush3.filter = function(_2) {
    return arguments.length ? (filter3 = typeof _2 === "function" ? _2 : constant_default3(!!_2), brush3) : filter3;
  };
  brush3.touchable = function(_2) {
    return arguments.length ? (touchable = typeof _2 === "function" ? _2 : constant_default3(!!_2), brush3) : touchable;
  };
  brush3.handleSize = function(_2) {
    return arguments.length ? (handleSize = +_2, brush3) : handleSize;
  };
  brush3.keyModifiers = function(_2) {
    return arguments.length ? (keys = !!_2, brush3) : keys;
  };
  brush3.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush3 : value;
  };
  return brush3;
}

// ../../node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon3 = 1e-6;
var tauEpsilon = tau - epsilon3;
function append(strings) {
  this._ += strings[0];
  for (let i2 = 1, n = strings.length; i2 < n; ++i2) {
    this._ += arguments[i2] + strings[i2];
  }
}
function appendRound(digits) {
  let d = Math.floor(digits);
  if (!(d >= 0))
    throw new Error(`invalid digits: ${digits}`);
  if (d > 15)
    return append;
  const k3 = 10 ** d;
  return function(strings) {
    this._ += strings[0];
    for (let i2 = 1, n = strings.length; i2 < n; ++i2) {
      this._ += Math.round(arguments[i2] * k3) / k3 + strings[i2];
    }
  };
}
var Path = class {
  constructor(digits) {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
    this._append = digits == null ? append : appendRound(digits);
  }
  moveTo(x3, y3) {
    this._append`M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y3}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._append`Z`;
    }
  }
  lineTo(x3, y3) {
    this._append`L${this._x1 = +x3},${this._y1 = +y3}`;
  }
  quadraticCurveTo(x12, y12, x3, y3) {
    this._append`Q${+x12},${+y12},${this._x1 = +x3},${this._y1 = +y3}`;
  }
  bezierCurveTo(x12, y12, x22, y22, x3, y3) {
    this._append`C${+x12},${+y12},${+x22},${+y22},${this._x1 = +x3},${this._y1 = +y3}`;
  }
  arcTo(x12, y12, x22, y22, r) {
    x12 = +x12, y12 = +y12, x22 = +x22, y22 = +y22, r = +r;
    if (r < 0)
      throw new Error(`negative radius: ${r}`);
    let x06 = this._x1, y06 = this._y1, x21 = x22 - x12, y21 = y22 - y12, x01 = x06 - x12, y01 = y06 - y12, l01_2 = x01 * x01 + y01 * y01;
    if (this._x1 === null) {
      this._append`M${this._x1 = x12},${this._y1 = y12}`;
    } else if (!(l01_2 > epsilon3))
      ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon3) || !r) {
      this._append`L${this._x1 = x12},${this._y1 = y12}`;
    } else {
      let x20 = x22 - x06, y20 = y22 - y06, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon3) {
        this._append`L${x12 + t01 * x01},${y12 + t01 * y01}`;
      }
      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x12 + t21 * x21},${this._y1 = y12 + t21 * y21}`;
    }
  }
  arc(x3, y3, r, a0, a1, ccw) {
    x3 = +x3, y3 = +y3, r = +r, ccw = !!ccw;
    if (r < 0)
      throw new Error(`negative radius: ${r}`);
    let dx = r * Math.cos(a0), dy = r * Math.sin(a0), x06 = x3 + dx, y06 = y3 + dy, cw = 1 ^ ccw, da2 = ccw ? a0 - a1 : a1 - a0;
    if (this._x1 === null) {
      this._append`M${x06},${y06}`;
    } else if (Math.abs(this._x1 - x06) > epsilon3 || Math.abs(this._y1 - y06) > epsilon3) {
      this._append`L${x06},${y06}`;
    }
    if (!r)
      return;
    if (da2 < 0)
      da2 = da2 % tau + tau;
    if (da2 > tauEpsilon) {
      this._append`A${r},${r},0,1,${cw},${x3 - dx},${y3 - dy}A${r},${r},0,1,${cw},${this._x1 = x06},${this._y1 = y06}`;
    } else if (da2 > epsilon3) {
      this._append`A${r},${r},0,${+(da2 >= pi)},${cw},${this._x1 = x3 + r * Math.cos(a1)},${this._y1 = y3 + r * Math.sin(a1)}`;
    }
  }
  rect(x3, y3, w2, h2) {
    this._append`M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y3}h${w2 = +w2}v${+h2}h${-w2}Z`;
  }
  toString() {
    return this._;
  }
};
function path() {
  return new Path();
}
path.prototype = Path.prototype;
function pathRound(digits = 3) {
  return new Path(+digits);
}

// ../../node_modules/d3-contour/src/array.js
var array2 = Array.prototype;
var slice = array2.slice;

// ../../node_modules/d3-contour/src/ascending.js
function ascending_default(a2, b2) {
  return a2 - b2;
}

// ../../node_modules/d3-contour/src/area.js
function area_default(ring) {
  var i2 = 0, n = ring.length, area3 = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
  while (++i2 < n)
    area3 += ring[i2 - 1][1] * ring[i2][0] - ring[i2 - 1][0] * ring[i2][1];
  return area3;
}

// ../../node_modules/d3-contour/src/constant.js
var constant_default4 = (x3) => () => x3;

// ../../node_modules/d3-contour/src/contains.js
function contains_default(ring, hole) {
  var i2 = -1, n = hole.length, c4;
  while (++i2 < n)
    if (c4 = ringContains(ring, hole[i2]))
      return c4;
  return 0;
}
function ringContains(ring, point6) {
  var x3 = point6[0], y3 = point6[1], contains2 = -1;
  for (var i2 = 0, n = ring.length, j2 = n - 1; i2 < n; j2 = i2++) {
    var pi5 = ring[i2], xi = pi5[0], yi = pi5[1], pj = ring[j2], xj = pj[0], yj = pj[1];
    if (segmentContains(pi5, pj, point6))
      return 0;
    if (yi > y3 !== yj > y3 && x3 < (xj - xi) * (y3 - yi) / (yj - yi) + xi)
      contains2 = -contains2;
  }
  return contains2;
}
function segmentContains(a2, b2, c4) {
  var i2;
  return collinear(a2, b2, c4) && within(a2[i2 = +(a2[0] === b2[0])], c4[i2], b2[i2]);
}
function collinear(a2, b2, c4) {
  return (b2[0] - a2[0]) * (c4[1] - a2[1]) === (c4[0] - a2[0]) * (b2[1] - a2[1]);
}
function within(p2, q2, r) {
  return p2 <= q2 && q2 <= r || r <= q2 && q2 <= p2;
}

// ../../node_modules/d3-contour/src/noop.js
function noop_default() {
}

// ../../node_modules/d3-contour/src/contours.js
var cases = [
  [],
  [[[1, 1.5], [0.5, 1]]],
  [[[1.5, 1], [1, 1.5]]],
  [[[1.5, 1], [0.5, 1]]],
  [[[1, 0.5], [1.5, 1]]],
  [[[1, 1.5], [0.5, 1]], [[1, 0.5], [1.5, 1]]],
  [[[1, 0.5], [1, 1.5]]],
  [[[1, 0.5], [0.5, 1]]],
  [[[0.5, 1], [1, 0.5]]],
  [[[1, 1.5], [1, 0.5]]],
  [[[0.5, 1], [1, 0.5]], [[1.5, 1], [1, 1.5]]],
  [[[1.5, 1], [1, 0.5]]],
  [[[0.5, 1], [1.5, 1]]],
  [[[1, 1.5], [1.5, 1]]],
  [[[0.5, 1], [1, 1.5]]],
  []
];
function contours_default() {
  var dx = 1, dy = 1, threshold2 = thresholdSturges, smooth = smoothLinear;
  function contours(values2) {
    var tz = threshold2(values2);
    if (!Array.isArray(tz)) {
      const e = extent(values2, finite);
      tz = ticks(...nice(e[0], e[1], tz), tz);
      while (tz[tz.length - 1] >= e[1])
        tz.pop();
      while (tz[1] < e[0])
        tz.shift();
    } else {
      tz = tz.slice().sort(ascending_default);
    }
    return tz.map((value) => contour3(values2, value));
  }
  function contour3(values2, value) {
    const v3 = value == null ? NaN : +value;
    if (isNaN(v3))
      throw new Error(`invalid value: ${value}`);
    var polygons = [], holes = [];
    isorings(values2, v3, function(ring) {
      smooth(ring, values2, v3);
      if (area_default(ring) > 0)
        polygons.push([ring]);
      else
        holes.push(ring);
    });
    holes.forEach(function(hole) {
      for (var i2 = 0, n = polygons.length, polygon; i2 < n; ++i2) {
        if (contains_default((polygon = polygons[i2])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });
    return {
      type: "MultiPolygon",
      value,
      coordinates: polygons
    };
  }
  function isorings(values2, value, callback) {
    var fragmentByStart = new Array(), fragmentByEnd = new Array(), x3, y3, t03, t13, t22, t32;
    x3 = y3 = -1;
    t13 = above(values2[0], value);
    cases[t13 << 1].forEach(stitch);
    while (++x3 < dx - 1) {
      t03 = t13, t13 = above(values2[x3 + 1], value);
      cases[t03 | t13 << 1].forEach(stitch);
    }
    cases[t13 << 0].forEach(stitch);
    while (++y3 < dy - 1) {
      x3 = -1;
      t13 = above(values2[y3 * dx + dx], value);
      t22 = above(values2[y3 * dx], value);
      cases[t13 << 1 | t22 << 2].forEach(stitch);
      while (++x3 < dx - 1) {
        t03 = t13, t13 = above(values2[y3 * dx + dx + x3 + 1], value);
        t32 = t22, t22 = above(values2[y3 * dx + x3 + 1], value);
        cases[t03 | t13 << 1 | t22 << 2 | t32 << 3].forEach(stitch);
      }
      cases[t13 | t22 << 3].forEach(stitch);
    }
    x3 = -1;
    t22 = values2[y3 * dx] >= value;
    cases[t22 << 2].forEach(stitch);
    while (++x3 < dx - 1) {
      t32 = t22, t22 = above(values2[y3 * dx + x3 + 1], value);
      cases[t22 << 2 | t32 << 3].forEach(stitch);
    }
    cases[t22 << 3].forEach(stitch);
    function stitch(line3) {
      var start2 = [line3[0][0] + x3, line3[0][1] + y3], end = [line3[1][0] + x3, line3[1][1] + y3], startIndex = index2(start2), endIndex = index2(end), f2, g2;
      if (f2 = fragmentByEnd[startIndex]) {
        if (g2 = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f2.end];
          delete fragmentByStart[g2.start];
          if (f2 === g2) {
            f2.ring.push(end);
            callback(f2.ring);
          } else {
            fragmentByStart[f2.start] = fragmentByEnd[g2.end] = { start: f2.start, end: g2.end, ring: f2.ring.concat(g2.ring) };
          }
        } else {
          delete fragmentByEnd[f2.end];
          f2.ring.push(end);
          fragmentByEnd[f2.end = endIndex] = f2;
        }
      } else if (f2 = fragmentByStart[endIndex]) {
        if (g2 = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f2.start];
          delete fragmentByEnd[g2.end];
          if (f2 === g2) {
            f2.ring.push(end);
            callback(f2.ring);
          } else {
            fragmentByStart[g2.start] = fragmentByEnd[f2.end] = { start: g2.start, end: f2.end, ring: g2.ring.concat(f2.ring) };
          }
        } else {
          delete fragmentByStart[f2.start];
          f2.ring.unshift(start2);
          fragmentByStart[f2.start = startIndex] = f2;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = { start: startIndex, end: endIndex, ring: [start2, end] };
      }
    }
  }
  function index2(point6) {
    return point6[0] * 2 + point6[1] * (dx + 1) * 4;
  }
  function smoothLinear(ring, values2, value) {
    ring.forEach(function(point6) {
      var x3 = point6[0], y3 = point6[1], xt = x3 | 0, yt = y3 | 0, v1 = valid(values2[yt * dx + xt]);
      if (x3 > 0 && x3 < dx && xt === x3) {
        point6[0] = smooth1(x3, valid(values2[yt * dx + xt - 1]), v1, value);
      }
      if (y3 > 0 && y3 < dy && yt === y3) {
        point6[1] = smooth1(y3, valid(values2[(yt - 1) * dx + xt]), v1, value);
      }
    });
  }
  contours.contour = contour3;
  contours.size = function(_2) {
    if (!arguments.length)
      return [dx, dy];
    var _0 = Math.floor(_2[0]), _1 = Math.floor(_2[1]);
    if (!(_0 >= 0 && _1 >= 0))
      throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };
  contours.thresholds = function(_2) {
    return arguments.length ? (threshold2 = typeof _2 === "function" ? _2 : Array.isArray(_2) ? constant_default4(slice.call(_2)) : constant_default4(_2), contours) : threshold2;
  };
  contours.smooth = function(_2) {
    return arguments.length ? (smooth = _2 ? smoothLinear : noop_default, contours) : smooth === smoothLinear;
  };
  return contours;
}
function finite(x3) {
  return isFinite(x3) ? x3 : NaN;
}
function above(x3, value) {
  return x3 == null ? false : +x3 >= value;
}
function valid(v3) {
  return v3 == null || isNaN(v3 = +v3) ? -Infinity : v3;
}
function smooth1(x3, v0, v1, value) {
  const a2 = value - v0;
  const b2 = v1 - v0;
  const d = isFinite(a2) || isFinite(b2) ? a2 / b2 : Math.sign(a2) / Math.sign(b2);
  return isNaN(d) ? x3 : x3 + d - 0.5;
}

// ../../node_modules/d3-contour/src/density.js
function defaultX(d) {
  return d[0];
}
function defaultY(d) {
  return d[1];
}
function defaultWeight() {
  return 1;
}
function density_default() {
  var x3 = defaultX, y3 = defaultY, weight = defaultWeight, dx = 960, dy = 500, r = 20, k3 = 2, o = r * 3, n = dx + o * 2 >> k3, m2 = dy + o * 2 >> k3, threshold2 = constant_default4(20);
  function grid2(data) {
    var values2 = new Float32Array(n * m2), pow2k = Math.pow(2, -k3), i2 = -1;
    for (const d of data) {
      var xi = (x3(d, ++i2, data) + o) * pow2k, yi = (y3(d, i2, data) + o) * pow2k, wi = +weight(d, i2, data);
      if (wi && xi >= 0 && xi < n && yi >= 0 && yi < m2) {
        var x06 = Math.floor(xi), y06 = Math.floor(yi), xt = xi - x06 - 0.5, yt = yi - y06 - 0.5;
        values2[x06 + y06 * n] += (1 - xt) * (1 - yt) * wi;
        values2[x06 + 1 + y06 * n] += xt * (1 - yt) * wi;
        values2[x06 + 1 + (y06 + 1) * n] += xt * yt * wi;
        values2[x06 + (y06 + 1) * n] += (1 - xt) * yt * wi;
      }
    }
    blur2({ data: values2, width: n, height: m2 }, r * pow2k);
    return values2;
  }
  function density3(data) {
    var values2 = grid2(data), tz = threshold2(values2), pow4k = Math.pow(2, 2 * k3);
    if (!Array.isArray(tz)) {
      tz = ticks(Number.MIN_VALUE, max2(values2) / pow4k, tz);
    }
    return contours_default().size([n, m2]).thresholds(tz.map((d) => d * pow4k))(values2).map((c4, i2) => (c4.value = +tz[i2], transform3(c4)));
  }
  density3.contours = function(data) {
    var values2 = grid2(data), contours = contours_default().size([n, m2]), pow4k = Math.pow(2, 2 * k3), contour3 = (value) => {
      value = +value;
      var c4 = transform3(contours.contour(values2, value * pow4k));
      c4.value = value;
      return c4;
    };
    Object.defineProperty(contour3, "max", { get: () => max2(values2) / pow4k });
    return contour3;
  };
  function transform3(geometry) {
    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }
  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }
  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  }
  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k3) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k3) - o;
  }
  function resize() {
    o = r * 3;
    n = dx + o * 2 >> k3;
    m2 = dy + o * 2 >> k3;
    return density3;
  }
  density3.x = function(_2) {
    return arguments.length ? (x3 = typeof _2 === "function" ? _2 : constant_default4(+_2), density3) : x3;
  };
  density3.y = function(_2) {
    return arguments.length ? (y3 = typeof _2 === "function" ? _2 : constant_default4(+_2), density3) : y3;
  };
  density3.weight = function(_2) {
    return arguments.length ? (weight = typeof _2 === "function" ? _2 : constant_default4(+_2), density3) : weight;
  };
  density3.size = function(_2) {
    if (!arguments.length)
      return [dx, dy];
    var _0 = +_2[0], _1 = +_2[1];
    if (!(_0 >= 0 && _1 >= 0))
      throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };
  density3.cellSize = function(_2) {
    if (!arguments.length)
      return 1 << k3;
    if (!((_2 = +_2) >= 1))
      throw new Error("invalid cell size");
    return k3 = Math.floor(Math.log(_2) / Math.LN2), resize();
  };
  density3.thresholds = function(_2) {
    return arguments.length ? (threshold2 = typeof _2 === "function" ? _2 : Array.isArray(_2) ? constant_default4(slice.call(_2)) : constant_default4(_2), density3) : threshold2;
  };
  density3.bandwidth = function(_2) {
    if (!arguments.length)
      return Math.sqrt(r * (r + 1));
    if (!((_2 = +_2) >= 0))
      throw new Error("invalid bandwidth");
    return r = (Math.sqrt(4 * _2 * _2 + 1) - 1) / 2, resize();
  };
  return density3;
}

// ../../node_modules/robust-predicates/esm/util.js
var epsilon4 = 11102230246251565e-32;
var splitter = 134217729;
var resulterrbound = (3 + 8 * epsilon4) * epsilon4;
function sum5(elen, e, flen, f2, h2) {
  let Q2, Qnew, hh, bvirt;
  let enow = e[0];
  let fnow = f2[0];
  let eindex = 0;
  let findex = 0;
  if (fnow > enow === fnow > -enow) {
    Q2 = enow;
    enow = e[++eindex];
  } else {
    Q2 = fnow;
    fnow = f2[++findex];
  }
  let hindex = 0;
  if (eindex < elen && findex < flen) {
    if (fnow > enow === fnow > -enow) {
      Qnew = enow + Q2;
      hh = Q2 - (Qnew - enow);
      enow = e[++eindex];
    } else {
      Qnew = fnow + Q2;
      hh = Q2 - (Qnew - fnow);
      fnow = f2[++findex];
    }
    Q2 = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
    while (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = Q2 + enow;
        bvirt = Qnew - Q2;
        hh = Q2 - (Qnew - bvirt) + (enow - bvirt);
        enow = e[++eindex];
      } else {
        Qnew = Q2 + fnow;
        bvirt = Qnew - Q2;
        hh = Q2 - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f2[++findex];
      }
      Q2 = Qnew;
      if (hh !== 0) {
        h2[hindex++] = hh;
      }
    }
  }
  while (eindex < elen) {
    Qnew = Q2 + enow;
    bvirt = Qnew - Q2;
    hh = Q2 - (Qnew - bvirt) + (enow - bvirt);
    enow = e[++eindex];
    Q2 = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
  }
  while (findex < flen) {
    Qnew = Q2 + fnow;
    bvirt = Qnew - Q2;
    hh = Q2 - (Qnew - bvirt) + (fnow - bvirt);
    fnow = f2[++findex];
    Q2 = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
  }
  if (Q2 !== 0 || hindex === 0) {
    h2[hindex++] = Q2;
  }
  return hindex;
}
function estimate(elen, e) {
  let Q2 = e[0];
  for (let i2 = 1; i2 < elen; i2++)
    Q2 += e[i2];
  return Q2;
}
function vec(n) {
  return new Float64Array(n);
}

// ../../node_modules/robust-predicates/esm/orient2d.js
var ccwerrboundA = (3 + 16 * epsilon4) * epsilon4;
var ccwerrboundB = (2 + 12 * epsilon4) * epsilon4;
var ccwerrboundC = (9 + 64 * epsilon4) * epsilon4 * epsilon4;
var B3 = vec(4);
var C1 = vec(8);
var C22 = vec(12);
var D3 = vec(16);
var u = vec(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
  let acxtail, acytail, bcxtail, bcytail;
  let bvirt, c4, ahi, alo, bhi, blo, _i, _j3, _0, s1, s0, t13, t03, u33;
  const acx = ax - cx;
  const bcx = bx - cx;
  const acy = ay - cy;
  const bcy = by - cy;
  s1 = acx * bcy;
  c4 = splitter * acx;
  ahi = c4 - (c4 - acx);
  alo = acx - ahi;
  c4 = splitter * bcy;
  bhi = c4 - (c4 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcx;
  c4 = splitter * acy;
  ahi = c4 - (c4 - acy);
  alo = acy - ahi;
  c4 = splitter * bcx;
  bhi = c4 - (c4 - bcx);
  blo = bcx - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  B3[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j3 = s1 + _i;
  bvirt = _j3 - s1;
  _0 = s1 - (_j3 - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  B3[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u33 = _j3 + _i;
  bvirt = u33 - _j3;
  B3[2] = _j3 - (u33 - bvirt) + (_i - bvirt);
  B3[3] = u33;
  let det = estimate(4, B3);
  let errbound = ccwerrboundB * detsum;
  if (det >= errbound || -det >= errbound) {
    return det;
  }
  bvirt = ax - acx;
  acxtail = ax - (acx + bvirt) + (bvirt - cx);
  bvirt = bx - bcx;
  bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
  bvirt = ay - acy;
  acytail = ay - (acy + bvirt) + (bvirt - cy);
  bvirt = by - bcy;
  bcytail = by - (bcy + bvirt) + (bvirt - cy);
  if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
    return det;
  }
  errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
  det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
  if (det >= errbound || -det >= errbound)
    return det;
  s1 = acxtail * bcy;
  c4 = splitter * acxtail;
  ahi = c4 - (c4 - acxtail);
  alo = acxtail - ahi;
  c4 = splitter * bcy;
  bhi = c4 - (c4 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcx;
  c4 = splitter * acytail;
  ahi = c4 - (c4 - acytail);
  alo = acytail - ahi;
  c4 = splitter * bcx;
  bhi = c4 - (c4 - bcx);
  blo = bcx - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j3 = s1 + _i;
  bvirt = _j3 - s1;
  _0 = s1 - (_j3 - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u33 = _j3 + _i;
  bvirt = u33 - _j3;
  u[2] = _j3 - (u33 - bvirt) + (_i - bvirt);
  u[3] = u33;
  const C1len = sum5(4, B3, 4, u, C1);
  s1 = acx * bcytail;
  c4 = splitter * acx;
  ahi = c4 - (c4 - acx);
  alo = acx - ahi;
  c4 = splitter * bcytail;
  bhi = c4 - (c4 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcxtail;
  c4 = splitter * acy;
  ahi = c4 - (c4 - acy);
  alo = acy - ahi;
  c4 = splitter * bcxtail;
  bhi = c4 - (c4 - bcxtail);
  blo = bcxtail - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j3 = s1 + _i;
  bvirt = _j3 - s1;
  _0 = s1 - (_j3 - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u33 = _j3 + _i;
  bvirt = u33 - _j3;
  u[2] = _j3 - (u33 - bvirt) + (_i - bvirt);
  u[3] = u33;
  const C2len = sum5(C1len, C1, 4, u, C22);
  s1 = acxtail * bcytail;
  c4 = splitter * acxtail;
  ahi = c4 - (c4 - acxtail);
  alo = acxtail - ahi;
  c4 = splitter * bcytail;
  bhi = c4 - (c4 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcxtail;
  c4 = splitter * acytail;
  ahi = c4 - (c4 - acytail);
  alo = acytail - ahi;
  c4 = splitter * bcxtail;
  bhi = c4 - (c4 - bcxtail);
  blo = bcxtail - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j3 = s1 + _i;
  bvirt = _j3 - s1;
  _0 = s1 - (_j3 - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u33 = _j3 + _i;
  bvirt = u33 - _j3;
  u[2] = _j3 - (u33 - bvirt) + (_i - bvirt);
  u[3] = u33;
  const Dlen = sum5(C2len, C22, 4, u, D3);
  return D3[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
  const detleft = (ay - cy) * (bx - cx);
  const detright = (ax - cx) * (by - cy);
  const det = detleft - detright;
  if (detleft === 0 || detright === 0 || detleft > 0 !== detright > 0)
    return det;
  const detsum = Math.abs(detleft + detright);
  if (Math.abs(det) >= ccwerrboundA * detsum)
    return det;
  return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}

// ../../node_modules/robust-predicates/esm/orient3d.js
var o3derrboundA = (7 + 56 * epsilon4) * epsilon4;
var o3derrboundB = (3 + 28 * epsilon4) * epsilon4;
var o3derrboundC = (26 + 288 * epsilon4) * epsilon4 * epsilon4;
var bc = vec(4);
var ca = vec(4);
var ab = vec(4);
var at_b = vec(4);
var at_c = vec(4);
var bt_c = vec(4);
var bt_a = vec(4);
var ct_a = vec(4);
var ct_b = vec(4);
var bct = vec(8);
var cat = vec(8);
var abt = vec(8);
var u2 = vec(4);
var _8 = vec(8);
var _8b = vec(8);
var _16 = vec(8);
var _12 = vec(12);
var fin = vec(192);
var fin2 = vec(192);

// ../../node_modules/robust-predicates/esm/incircle.js
var iccerrboundA = (10 + 96 * epsilon4) * epsilon4;
var iccerrboundB = (4 + 48 * epsilon4) * epsilon4;
var iccerrboundC = (44 + 576 * epsilon4) * epsilon4 * epsilon4;
var bc2 = vec(4);
var ca2 = vec(4);
var ab2 = vec(4);
var aa = vec(4);
var bb = vec(4);
var cc = vec(4);
var u3 = vec(4);
var v2 = vec(4);
var axtbc = vec(8);
var aytbc = vec(8);
var bxtca = vec(8);
var bytca = vec(8);
var cxtab = vec(8);
var cytab = vec(8);
var abt2 = vec(8);
var bct2 = vec(8);
var cat2 = vec(8);
var abtt = vec(4);
var bctt = vec(4);
var catt = vec(4);
var _82 = vec(8);
var _162 = vec(16);
var _16b = vec(16);
var _16c = vec(16);
var _32 = vec(32);
var _32b = vec(32);
var _48 = vec(48);
var _64 = vec(64);
var fin3 = vec(1152);
var fin22 = vec(1152);

// ../../node_modules/robust-predicates/esm/insphere.js
var isperrboundA = (16 + 224 * epsilon4) * epsilon4;
var isperrboundB = (5 + 72 * epsilon4) * epsilon4;
var isperrboundC = (71 + 1408 * epsilon4) * epsilon4 * epsilon4;
var ab3 = vec(4);
var bc3 = vec(4);
var cd = vec(4);
var de2 = vec(4);
var ea = vec(4);
var ac = vec(4);
var bd = vec(4);
var ce = vec(4);
var da = vec(4);
var eb = vec(4);
var abc = vec(24);
var bcd = vec(24);
var cde = vec(24);
var dea = vec(24);
var eab = vec(24);
var abd = vec(24);
var bce = vec(24);
var cda = vec(24);
var deb = vec(24);
var eac = vec(24);
var adet = vec(1152);
var bdet = vec(1152);
var cdet = vec(1152);
var ddet = vec(1152);
var edet = vec(1152);
var abdet = vec(2304);
var cddet = vec(2304);
var cdedet = vec(3456);
var deter = vec(5760);
var _83 = vec(8);
var _8b2 = vec(8);
var _8c = vec(8);
var _163 = vec(16);
var _24 = vec(24);
var _482 = vec(48);
var _48b = vec(48);
var _96 = vec(96);
var _192 = vec(192);
var _384x = vec(384);
var _384y = vec(384);
var _384z = vec(384);
var _768 = vec(768);
var xdet = vec(96);
var ydet = vec(96);
var zdet = vec(96);
var fin4 = vec(1152);

// ../../node_modules/delaunator/index.js
var EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class _Delaunator {
  static from(points2, getX = defaultGetX, getY = defaultGetY) {
    const n = points2.length;
    const coords = new Float64Array(n * 2);
    for (let i2 = 0; i2 < n; i2++) {
      const p2 = points2[i2];
      coords[2 * i2] = getX(p2);
      coords[2 * i2 + 1] = getY(p2);
    }
    return new _Delaunator(coords);
  }
  constructor(coords) {
    const n = coords.length >> 1;
    if (n > 0 && typeof coords[0] !== "number")
      throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n));
    this._hullPrev = new Uint32Array(n);
    this._hullNext = new Uint32Array(n);
    this._hullTri = new Uint32Array(n);
    this._hullHash = new Int32Array(this._hashSize).fill(-1);
    this._ids = new Uint32Array(n);
    this._dists = new Float64Array(n);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY2 = -Infinity;
    for (let i3 = 0; i3 < n; i3++) {
      const x3 = coords[2 * i3];
      const y3 = coords[2 * i3 + 1];
      if (x3 < minX)
        minX = x3;
      if (y3 < minY)
        minY = y3;
      if (x3 > maxX)
        maxX = x3;
      if (y3 > maxY2)
        maxY2 = y3;
      this._ids[i3] = i3;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY2) / 2;
    let minDist = Infinity;
    let i0, i1, i2;
    for (let i3 = 0; i3 < n; i3++) {
      const d = dist(cx, cy, coords[2 * i3], coords[2 * i3 + 1]);
      if (d < minDist) {
        i0 = i3;
        minDist = d;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    minDist = Infinity;
    for (let i3 = 0; i3 < n; i3++) {
      if (i3 === i0)
        continue;
      const d = dist(i0x, i0y, coords[2 * i3], coords[2 * i3 + 1]);
      if (d < minDist && d > 0) {
        i1 = i3;
        minDist = d;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i3 = 0; i3 < n; i3++) {
      if (i3 === i0 || i3 === i1)
        continue;
      const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i3], coords[2 * i3 + 1]);
      if (r < minRadius) {
        i2 = i3;
        minRadius = r;
      }
    }
    let i2x = coords[2 * i2];
    let i2y = coords[2 * i2 + 1];
    if (minRadius === Infinity) {
      for (let i3 = 0; i3 < n; i3++) {
        this._dists[i3] = coords[2 * i3] - coords[0] || coords[2 * i3 + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n - 1);
      const hull3 = new Uint32Array(n);
      let j2 = 0;
      for (let i3 = 0, d0 = -Infinity; i3 < n; i3++) {
        const id2 = this._ids[i3];
        if (this._dists[id2] > d0) {
          hull3[j2++] = id2;
          d0 = this._dists[id2];
        }
      }
      this.hull = hull3.subarray(0, j2);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
      const i3 = i1;
      const x3 = i1x;
      const y3 = i1y;
      i1 = i2;
      i1x = i2x;
      i1y = i2y;
      i2 = i3;
      i2x = x3;
      i2y = y3;
    }
    const center2 = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center2.x;
    this._cy = center2.y;
    for (let i3 = 0; i3 < n; i3++) {
      this._dists[i3] = dist(coords[2 * i3], coords[2 * i3 + 1], center2.x, center2.y);
    }
    quicksort(this._ids, this._dists, 0, n - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i2] = i1;
    hullNext[i1] = hullPrev[i0] = i2;
    hullNext[i2] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i2] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i2;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i2, -1, -1, -1);
    for (let k3 = 0, xp, yp; k3 < this._ids.length; k3++) {
      const i3 = this._ids[k3];
      const x3 = coords[2 * i3];
      const y3 = coords[2 * i3 + 1];
      if (k3 > 0 && Math.abs(x3 - xp) <= EPSILON && Math.abs(y3 - yp) <= EPSILON)
        continue;
      xp = x3;
      yp = y3;
      if (i3 === i0 || i3 === i1 || i3 === i2)
        continue;
      let start2 = 0;
      for (let j2 = 0, key = this._hashKey(x3, y3); j2 < this._hashSize; j2++) {
        start2 = hullHash[(key + j2) % this._hashSize];
        if (start2 !== -1 && start2 !== hullNext[start2])
          break;
      }
      start2 = hullPrev[start2];
      let e = start2, q2;
      while (q2 = hullNext[e], orient2d(x3, y3, coords[2 * e], coords[2 * e + 1], coords[2 * q2], coords[2 * q2 + 1]) >= 0) {
        e = q2;
        if (e === start2) {
          e = -1;
          break;
        }
      }
      if (e === -1)
        continue;
      let t = this._addTriangle(e, i3, hullNext[e], -1, -1, hullTri[e]);
      hullTri[i3] = this._legalize(t + 2);
      hullTri[e] = t;
      hullSize++;
      let n2 = hullNext[e];
      while (q2 = hullNext[n2], orient2d(x3, y3, coords[2 * n2], coords[2 * n2 + 1], coords[2 * q2], coords[2 * q2 + 1]) < 0) {
        t = this._addTriangle(n2, i3, q2, hullTri[i3], -1, hullTri[n2]);
        hullTri[i3] = this._legalize(t + 2);
        hullNext[n2] = n2;
        hullSize--;
        n2 = q2;
      }
      if (e === start2) {
        while (q2 = hullPrev[e], orient2d(x3, y3, coords[2 * q2], coords[2 * q2 + 1], coords[2 * e], coords[2 * e + 1]) < 0) {
          t = this._addTriangle(q2, i3, e, -1, hullTri[e], hullTri[q2]);
          this._legalize(t + 2);
          hullTri[q2] = t;
          hullNext[e] = e;
          hullSize--;
          e = q2;
        }
      }
      this._hullStart = hullPrev[i3] = e;
      hullNext[e] = hullPrev[n2] = i3;
      hullNext[i3] = n2;
      hullHash[this._hashKey(x3, y3)] = i3;
      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i3 = 0, e = this._hullStart; i3 < hullSize; i3++) {
      this.hull[i3] = e;
      e = hullNext[e];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x3, y3) {
    return Math.floor(pseudoAngle(x3 - this._cx, y3 - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a2) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i2 = 0;
    let ar = 0;
    while (true) {
      const b2 = halfedges[a2];
      const a0 = a2 - a2 % 3;
      ar = a0 + (a2 + 2) % 3;
      if (b2 === -1) {
        if (i2 === 0)
          break;
        a2 = EDGE_STACK[--i2];
        continue;
      }
      const b0 = b2 - b2 % 3;
      const al = a0 + (a2 + 1) % 3;
      const bl = b0 + (b2 + 2) % 3;
      const p0 = triangles[ar];
      const pr = triangles[a2];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(
        coords[2 * p0],
        coords[2 * p0 + 1],
        coords[2 * pr],
        coords[2 * pr + 1],
        coords[2 * pl],
        coords[2 * pl + 1],
        coords[2 * p1],
        coords[2 * p1 + 1]
      );
      if (illegal) {
        triangles[a2] = p1;
        triangles[b2] = p0;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e = this._hullStart;
          do {
            if (this._hullTri[e] === bl) {
              this._hullTri[e] = a2;
              break;
            }
            e = this._hullPrev[e];
          } while (e !== this._hullStart);
        }
        this._link(a2, hbl);
        this._link(b2, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b2 + 1) % 3;
        if (i2 < EDGE_STACK.length) {
          EDGE_STACK[i2++] = br;
        }
      } else {
        if (i2 === 0)
          break;
        a2 = EDGE_STACK[--i2];
      }
    }
    return ar;
  }
  _link(a2, b2) {
    this._halfedges[a2] = b2;
    if (b2 !== -1)
      this._halfedges[b2] = a2;
  }
  // add a new triangle given vertex indices and adjacent half-edge ids
  _addTriangle(i0, i1, i2, a2, b2, c4) {
    const t = this.trianglesLen;
    this._triangles[t] = i0;
    this._triangles[t + 1] = i1;
    this._triangles[t + 2] = i2;
    this._link(t, a2);
    this._link(t + 1, b2);
    this._link(t + 2, c4);
    this.trianglesLen += 3;
    return t;
  }
};
function pseudoAngle(dx, dy) {
  const p2 = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p2 : 1 + p2) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x3 = (ey * bl - dy * cl) * d;
  const y3 = (dx * cl - ex * bl) * d;
  return x3 * x3 + y3 * y3;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x3 = ax + (ey * bl - dy * cl) * d;
  const y3 = ay + (dx * cl - ex * bl) * d;
  return { x: x3, y: y3 };
}
function quicksort(ids, dists, left2, right2) {
  if (right2 - left2 <= 20) {
    for (let i2 = left2 + 1; i2 <= right2; i2++) {
      const temp = ids[i2];
      const tempDist = dists[temp];
      let j2 = i2 - 1;
      while (j2 >= left2 && dists[ids[j2]] > tempDist)
        ids[j2 + 1] = ids[j2--];
      ids[j2 + 1] = temp;
    }
  } else {
    const median3 = left2 + right2 >> 1;
    let i2 = left2 + 1;
    let j2 = right2;
    swap2(ids, median3, i2);
    if (dists[ids[left2]] > dists[ids[right2]])
      swap2(ids, left2, right2);
    if (dists[ids[i2]] > dists[ids[right2]])
      swap2(ids, i2, right2);
    if (dists[ids[left2]] > dists[ids[i2]])
      swap2(ids, left2, i2);
    const temp = ids[i2];
    const tempDist = dists[temp];
    while (true) {
      do
        i2++;
      while (dists[ids[i2]] < tempDist);
      do
        j2--;
      while (dists[ids[j2]] > tempDist);
      if (j2 < i2)
        break;
      swap2(ids, i2, j2);
    }
    ids[left2 + 1] = ids[j2];
    ids[j2] = temp;
    if (right2 - i2 + 1 >= j2 - left2) {
      quicksort(ids, dists, i2, right2);
      quicksort(ids, dists, left2, j2 - 1);
    } else {
      quicksort(ids, dists, left2, j2 - 1);
      quicksort(ids, dists, i2, right2);
    }
  }
}
function swap2(arr, i2, j2) {
  const tmp3 = arr[i2];
  arr[i2] = arr[j2];
  arr[j2] = tmp3;
}
function defaultGetX(p2) {
  return p2[0];
}
function defaultGetY(p2) {
  return p2[1];
}

// ../../node_modules/d3-delaunay/src/path.js
var epsilon5 = 1e-6;
var Path2 = class {
  constructor() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x3, y3) {
    this._ += `M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y3}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x3, y3) {
    this._ += `L${this._x1 = +x3},${this._y1 = +y3}`;
  }
  arc(x3, y3, r) {
    x3 = +x3, y3 = +y3, r = +r;
    const x06 = x3 + r;
    const y06 = y3;
    if (r < 0)
      throw new Error("negative radius");
    if (this._x1 === null)
      this._ += `M${x06},${y06}`;
    else if (Math.abs(this._x1 - x06) > epsilon5 || Math.abs(this._y1 - y06) > epsilon5)
      this._ += "L" + x06 + "," + y06;
    if (!r)
      return;
    this._ += `A${r},${r},0,1,1,${x3 - r},${y3}A${r},${r},0,1,1,${this._x1 = x06},${this._y1 = y06}`;
  }
  rect(x3, y3, w2, h2) {
    this._ += `M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y3}h${+w2}v${+h2}h${-w2}Z`;
  }
  value() {
    return this._ || null;
  }
};

// ../../node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x3, y3) {
    this._.push([x3, y3]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x3, y3) {
    this._.push([x3, y3]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// ../../node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin)))
      throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points: points2, hull: hull3, triangles }, vectors } = this;
    let bx, by;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i2 = 0, j2 = 0, n = triangles.length, x3, y3; i2 < n; i2 += 3, j2 += 2) {
      const t13 = triangles[i2] * 2;
      const t22 = triangles[i2 + 1] * 2;
      const t32 = triangles[i2 + 2] * 2;
      const x13 = points2[t13];
      const y13 = points2[t13 + 1];
      const x22 = points2[t22];
      const y22 = points2[t22 + 1];
      const x32 = points2[t32];
      const y32 = points2[t32 + 1];
      const dx = x22 - x13;
      const dy = y22 - y13;
      const ex = x32 - x13;
      const ey = y32 - y13;
      const ab4 = (dx * ey - dy * ex) * 2;
      if (Math.abs(ab4) < 1e-9) {
        if (bx === void 0) {
          bx = by = 0;
          for (const i3 of hull3)
            bx += points2[i3 * 2], by += points2[i3 * 2 + 1];
          bx /= hull3.length, by /= hull3.length;
        }
        const a2 = 1e9 * Math.sign((bx - x13) * ey - (by - y13) * ex);
        x3 = (x13 + x32) / 2 - a2 * ey;
        y3 = (y13 + y32) / 2 + a2 * ex;
      } else {
        const d = 1 / ab4;
        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        x3 = x13 + (ey * bl - dy * cl) * d;
        y3 = y13 + (dx * cl - ex * bl) * d;
      }
      circumcenters[j2] = x3;
      circumcenters[j2 + 1] = y3;
    }
    let h2 = hull3[hull3.length - 1];
    let p0, p1 = h2 * 4;
    let x06, x12 = points2[2 * h2];
    let y06, y12 = points2[2 * h2 + 1];
    vectors.fill(0);
    for (let i2 = 0; i2 < hull3.length; ++i2) {
      h2 = hull3[i2];
      p0 = p1, x06 = x12, y06 = y12;
      p1 = h2 * 4, x12 = points2[2 * h2], y12 = points2[2 * h2 + 1];
      vectors[p0 + 2] = vectors[p1] = y06 - y12;
      vectors[p0 + 3] = vectors[p1 + 1] = x12 - x06;
    }
  }
  render(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { delaunay: { halfedges, inedges, hull: hull3 }, circumcenters, vectors } = this;
    if (hull3.length <= 1)
      return null;
    for (let i2 = 0, n = halfedges.length; i2 < n; ++i2) {
      const j2 = halfedges[i2];
      if (j2 < i2)
        continue;
      const ti = Math.floor(i2 / 3) * 2;
      const tj = Math.floor(j2 / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi, xj, yj, context);
    }
    let h0, h1 = hull3[hull3.length - 1];
    for (let i2 = 0; i2 < hull3.length; ++i2) {
      h0 = h1, h1 = hull3[i2];
      const t = Math.floor(inedges[h1] / 3) * 2;
      const x3 = circumcenters[t];
      const y3 = circumcenters[t + 1];
      const v3 = h0 * 4;
      const p2 = this._project(x3, y3, vectors[v3 + 2], vectors[v3 + 3]);
      if (p2)
        this._renderSegment(x3, y3, p2[0], p2[1], context);
    }
    return buffer && buffer.value();
  }
  renderBounds(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }
  renderCell(i2, context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const points2 = this._clip(i2);
    if (points2 === null || !points2.length)
      return;
    context.moveTo(points2[0], points2[1]);
    let n = points2.length;
    while (points2[0] === points2[n - 2] && points2[1] === points2[n - 1] && n > 1)
      n -= 2;
    for (let i3 = 2; i3 < n; i3 += 2) {
      if (points2[i3] !== points2[i3 - 2] || points2[i3 + 1] !== points2[i3 - 1])
        context.lineTo(points2[i3], points2[i3 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  *cellPolygons() {
    const { delaunay: { points: points2 } } = this;
    for (let i2 = 0, n = points2.length / 2; i2 < n; ++i2) {
      const cell3 = this.cellPolygon(i2);
      if (cell3)
        cell3.index = i2, yield cell3;
    }
  }
  cellPolygon(i2) {
    const polygon = new Polygon();
    this.renderCell(i2, polygon);
    return polygon.value();
  }
  _renderSegment(x06, y06, x12, y12, context) {
    let S2;
    const c0 = this._regioncode(x06, y06);
    const c1 = this._regioncode(x12, y12);
    if (c0 === 0 && c1 === 0) {
      context.moveTo(x06, y06);
      context.lineTo(x12, y12);
    } else if (S2 = this._clipSegment(x06, y06, x12, y12, c0, c1)) {
      context.moveTo(S2[0], S2[1]);
      context.lineTo(S2[2], S2[3]);
    }
  }
  contains(i2, x3, y3) {
    if ((x3 = +x3, x3 !== x3) || (y3 = +y3, y3 !== y3))
      return false;
    return this.delaunay._step(i2, x3, y3) === i2;
  }
  *neighbors(i2) {
    const ci = this._clip(i2);
    if (ci)
      for (const j2 of this.delaunay.neighbors(i2)) {
        const cj = this._clip(j2);
        if (cj)
          loop:
            for (let ai = 0, li = ci.length; ai < li; ai += 2) {
              for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
                if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
                  yield j2;
                  break loop;
                }
              }
            }
      }
  }
  _cell(i2) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i2];
    if (e0 === -1)
      return null;
    const points2 = [];
    let e = e0;
    do {
      const t = Math.floor(e / 3);
      points2.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i2)
        break;
      e = halfedges[e];
    } while (e !== e0 && e !== -1);
    return points2;
  }
  _clip(i2) {
    if (i2 === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points2 = this._cell(i2);
    if (points2 === null)
      return null;
    const { vectors: V2 } = this;
    const v3 = i2 * 4;
    return this._simplify(V2[v3] || V2[v3 + 1] ? this._clipInfinite(i2, points2, V2[v3], V2[v3 + 1], V2[v3 + 2], V2[v3 + 3]) : this._clipFinite(i2, points2));
  }
  _clipFinite(i2, points2) {
    const n = points2.length;
    let P2 = null;
    let x06, y06, x12 = points2[n - 2], y12 = points2[n - 1];
    let c0, c1 = this._regioncode(x12, y12);
    let e0, e1 = 0;
    for (let j2 = 0; j2 < n; j2 += 2) {
      x06 = x12, y06 = y12, x12 = points2[j2], y12 = points2[j2 + 1];
      c0 = c1, c1 = this._regioncode(x12, y12);
      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P2)
          P2.push(x12, y12);
        else
          P2 = [x12, y12];
      } else {
        let S2, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S2 = this._clipSegment(x06, y06, x12, y12, c0, c1)) === null)
            continue;
          [sx0, sy0, sx1, sy1] = S2;
        } else {
          if ((S2 = this._clipSegment(x12, y12, x06, y06, c1, c0)) === null)
            continue;
          [sx1, sy1, sx0, sy0] = S2;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1)
            this._edge(i2, e0, e1, P2, P2.length);
          if (P2)
            P2.push(sx0, sy0);
          else
            P2 = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1)
          this._edge(i2, e0, e1, P2, P2.length);
        if (P2)
          P2.push(sx1, sy1);
        else
          P2 = [sx1, sy1];
      }
    }
    if (P2) {
      e0 = e1, e1 = this._edgecode(P2[0], P2[1]);
      if (e0 && e1)
        this._edge(i2, e0, e1, P2, P2.length);
    } else if (this.contains(i2, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P2;
  }
  _clipSegment(x06, y06, x12, y12, c0, c1) {
    const flip2 = c0 < c1;
    if (flip2)
      [x06, y06, x12, y12, c0, c1] = [x12, y12, x06, y06, c1, c0];
    while (true) {
      if (c0 === 0 && c1 === 0)
        return flip2 ? [x12, y12, x06, y06] : [x06, y06, x12, y12];
      if (c0 & c1)
        return null;
      let x3, y3, c4 = c0 || c1;
      if (c4 & 8)
        x3 = x06 + (x12 - x06) * (this.ymax - y06) / (y12 - y06), y3 = this.ymax;
      else if (c4 & 4)
        x3 = x06 + (x12 - x06) * (this.ymin - y06) / (y12 - y06), y3 = this.ymin;
      else if (c4 & 2)
        y3 = y06 + (y12 - y06) * (this.xmax - x06) / (x12 - x06), x3 = this.xmax;
      else
        y3 = y06 + (y12 - y06) * (this.xmin - x06) / (x12 - x06), x3 = this.xmin;
      if (c0)
        x06 = x3, y06 = y3, c0 = this._regioncode(x06, y06);
      else
        x12 = x3, y12 = y3, c1 = this._regioncode(x12, y12);
    }
  }
  _clipInfinite(i2, points2, vx0, vy0, vxn, vyn) {
    let P2 = Array.from(points2), p2;
    if (p2 = this._project(P2[0], P2[1], vx0, vy0))
      P2.unshift(p2[0], p2[1]);
    if (p2 = this._project(P2[P2.length - 2], P2[P2.length - 1], vxn, vyn))
      P2.push(p2[0], p2[1]);
    if (P2 = this._clipFinite(i2, P2)) {
      for (let j2 = 0, n = P2.length, c0, c1 = this._edgecode(P2[n - 2], P2[n - 1]); j2 < n; j2 += 2) {
        c0 = c1, c1 = this._edgecode(P2[j2], P2[j2 + 1]);
        if (c0 && c1)
          j2 = this._edge(i2, c0, c1, P2, j2), n = P2.length;
      }
    } else if (this.contains(i2, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P2 = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P2;
  }
  _edge(i2, e0, e1, P2, j2) {
    while (e0 !== e1) {
      let x3, y3;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        case 4:
          e0 = 6, x3 = this.xmax, y3 = this.ymin;
          break;
        case 6:
          e0 = 2;
          continue;
        case 2:
          e0 = 10, x3 = this.xmax, y3 = this.ymax;
          break;
        case 10:
          e0 = 8;
          continue;
        case 8:
          e0 = 9, x3 = this.xmin, y3 = this.ymax;
          break;
        case 9:
          e0 = 1;
          continue;
        case 1:
          e0 = 5, x3 = this.xmin, y3 = this.ymin;
          break;
      }
      if ((P2[j2] !== x3 || P2[j2 + 1] !== y3) && this.contains(i2, x3, y3)) {
        P2.splice(j2, 0, x3, y3), j2 += 2;
      }
    }
    return j2;
  }
  _project(x06, y06, vx, vy) {
    let t = Infinity, c4, x3, y3;
    if (vy < 0) {
      if (y06 <= this.ymin)
        return null;
      if ((c4 = (this.ymin - y06) / vy) < t)
        y3 = this.ymin, x3 = x06 + (t = c4) * vx;
    } else if (vy > 0) {
      if (y06 >= this.ymax)
        return null;
      if ((c4 = (this.ymax - y06) / vy) < t)
        y3 = this.ymax, x3 = x06 + (t = c4) * vx;
    }
    if (vx > 0) {
      if (x06 >= this.xmax)
        return null;
      if ((c4 = (this.xmax - x06) / vx) < t)
        x3 = this.xmax, y3 = y06 + (t = c4) * vy;
    } else if (vx < 0) {
      if (x06 <= this.xmin)
        return null;
      if ((c4 = (this.xmin - x06) / vx) < t)
        x3 = this.xmin, y3 = y06 + (t = c4) * vy;
    }
    return [x3, y3];
  }
  _edgecode(x3, y3) {
    return (x3 === this.xmin ? 1 : x3 === this.xmax ? 2 : 0) | (y3 === this.ymin ? 4 : y3 === this.ymax ? 8 : 0);
  }
  _regioncode(x3, y3) {
    return (x3 < this.xmin ? 1 : x3 > this.xmax ? 2 : 0) | (y3 < this.ymin ? 4 : y3 > this.ymax ? 8 : 0);
  }
  _simplify(P2) {
    if (P2 && P2.length > 4) {
      for (let i2 = 0; i2 < P2.length; i2 += 2) {
        const j2 = (i2 + 2) % P2.length, k3 = (i2 + 4) % P2.length;
        if (P2[i2] === P2[j2] && P2[j2] === P2[k3] || P2[i2 + 1] === P2[j2 + 1] && P2[j2 + 1] === P2[k3 + 1]) {
          P2.splice(j2, 2), i2 -= 2;
        }
      }
      if (!P2.length)
        P2 = null;
    }
    return P2;
  }
};

// ../../node_modules/d3-delaunay/src/delaunay.js
var tau2 = 2 * Math.PI;
var pow = Math.pow;
function pointX(p2) {
  return p2[0];
}
function pointY(p2) {
  return p2[1];
}
function collinear2(d) {
  const { triangles, coords } = d;
  for (let i2 = 0; i2 < triangles.length; i2 += 3) {
    const a2 = 2 * triangles[i2], b2 = 2 * triangles[i2 + 1], c4 = 2 * triangles[i2 + 2], cross2 = (coords[c4] - coords[a2]) * (coords[b2 + 1] - coords[a2 + 1]) - (coords[b2] - coords[a2]) * (coords[c4 + 1] - coords[a2 + 1]);
    if (cross2 > 1e-10)
      return false;
  }
  return true;
}
function jitter(x3, y3, r) {
  return [x3 + Math.sin(x3 + y3) * r, y3 + Math.cos(x3 - y3) * r];
}
var Delaunay = class _Delaunay {
  static from(points2, fx = pointX, fy = pointY, that) {
    return new _Delaunay("length" in points2 ? flatArray(points2, fx, fy, that) : Float64Array.from(flatIterable(points2, fx, fy, that)));
  }
  constructor(points2) {
    this._delaunator = new Delaunator(points2);
    this.inedges = new Int32Array(points2.length / 2);
    this._hullIndex = new Int32Array(points2.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d = this._delaunator, points2 = this.points;
    if (d.hull && d.hull.length > 2 && collinear2(d)) {
      this.collinear = Int32Array.from({ length: points2.length / 2 }, (_2, i2) => i2).sort((i2, j2) => points2[2 * i2] - points2[2 * j2] || points2[2 * i2 + 1] - points2[2 * j2 + 1]);
      const e = this.collinear[0], f2 = this.collinear[this.collinear.length - 1], bounds = [points2[2 * e], points2[2 * e + 1], points2[2 * f2], points2[2 * f2 + 1]], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
      for (let i2 = 0, n = points2.length / 2; i2 < n; ++i2) {
        const p2 = jitter(points2[2 * i2], points2[2 * i2 + 1], r);
        points2[2 * i2] = p2[0];
        points2[2 * i2 + 1] = p2[1];
      }
      this._delaunator = new Delaunator(points2);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull3 = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e = 0, n = halfedges.length; e < n; ++e) {
      const p2 = triangles[e % 3 === 2 ? e - 2 : e + 1];
      if (halfedges[e] === -1 || inedges[p2] === -1)
        inedges[p2] = e;
    }
    for (let i2 = 0, n = hull3.length; i2 < n; ++i2) {
      hullIndex[hull3[i2]] = i2;
    }
    if (hull3.length <= 2 && hull3.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull3[0];
      inedges[hull3[0]] = 1;
      if (hull3.length === 2) {
        inedges[hull3[1]] = 0;
        this.triangles[1] = hull3[1];
        this.triangles[2] = hull3[1];
      }
    }
  }
  voronoi(bounds) {
    return new Voronoi(this, bounds);
  }
  *neighbors(i2) {
    const { inedges, hull: hull3, _hullIndex, halfedges, triangles, collinear: collinear3 } = this;
    if (collinear3) {
      const l = collinear3.indexOf(i2);
      if (l > 0)
        yield collinear3[l - 1];
      if (l < collinear3.length - 1)
        yield collinear3[l + 1];
      return;
    }
    const e0 = inedges[i2];
    if (e0 === -1)
      return;
    let e = e0, p0 = -1;
    do {
      yield p0 = triangles[e];
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i2)
        return;
      e = halfedges[e];
      if (e === -1) {
        const p2 = hull3[(_hullIndex[i2] + 1) % hull3.length];
        if (p2 !== p0)
          yield p2;
        return;
      }
    } while (e !== e0);
  }
  find(x3, y3, i2 = 0) {
    if ((x3 = +x3, x3 !== x3) || (y3 = +y3, y3 !== y3))
      return -1;
    const i0 = i2;
    let c4;
    while ((c4 = this._step(i2, x3, y3)) >= 0 && c4 !== i2 && c4 !== i0)
      i2 = c4;
    return c4;
  }
  _step(i2, x3, y3) {
    const { inedges, hull: hull3, _hullIndex, halfedges, triangles, points: points2 } = this;
    if (inedges[i2] === -1 || !points2.length)
      return (i2 + 1) % (points2.length >> 1);
    let c4 = i2;
    let dc = pow(x3 - points2[i2 * 2], 2) + pow(y3 - points2[i2 * 2 + 1], 2);
    const e0 = inedges[i2];
    let e = e0;
    do {
      let t = triangles[e];
      const dt = pow(x3 - points2[t * 2], 2) + pow(y3 - points2[t * 2 + 1], 2);
      if (dt < dc)
        dc = dt, c4 = t;
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i2)
        break;
      e = halfedges[e];
      if (e === -1) {
        e = hull3[(_hullIndex[i2] + 1) % hull3.length];
        if (e !== t) {
          if (pow(x3 - points2[e * 2], 2) + pow(y3 - points2[e * 2 + 1], 2) < dc)
            return e;
        }
        break;
      }
    } while (e !== e0);
    return c4;
  }
  render(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { points: points2, halfedges, triangles } = this;
    for (let i2 = 0, n = halfedges.length; i2 < n; ++i2) {
      const j2 = halfedges[i2];
      if (j2 < i2)
        continue;
      const ti = triangles[i2] * 2;
      const tj = triangles[j2] * 2;
      context.moveTo(points2[ti], points2[ti + 1]);
      context.lineTo(points2[tj], points2[tj + 1]);
    }
    this.renderHull(context);
    return buffer && buffer.value();
  }
  renderPoints(context, r) {
    if (r === void 0 && (!context || typeof context.moveTo !== "function"))
      r = context, context = null;
    r = r == void 0 ? 2 : +r;
    const buffer = context == null ? context = new Path2() : void 0;
    const { points: points2 } = this;
    for (let i2 = 0, n = points2.length; i2 < n; i2 += 2) {
      const x3 = points2[i2], y3 = points2[i2 + 1];
      context.moveTo(x3 + r, y3);
      context.arc(x3, y3, r, 0, tau2);
    }
    return buffer && buffer.value();
  }
  renderHull(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { hull: hull3, points: points2 } = this;
    const h2 = hull3[0] * 2, n = hull3.length;
    context.moveTo(points2[h2], points2[h2 + 1]);
    for (let i2 = 1; i2 < n; ++i2) {
      const h3 = 2 * hull3[i2];
      context.lineTo(points2[h3], points2[h3 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i2, context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { points: points2, triangles } = this;
    const t03 = triangles[i2 *= 3] * 2;
    const t13 = triangles[i2 + 1] * 2;
    const t22 = triangles[i2 + 2] * 2;
    context.moveTo(points2[t03], points2[t03 + 1]);
    context.lineTo(points2[t13], points2[t13 + 1]);
    context.lineTo(points2[t22], points2[t22 + 1]);
    context.closePath();
    return buffer && buffer.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i2 = 0, n = triangles.length / 3; i2 < n; ++i2) {
      yield this.trianglePolygon(i2);
    }
  }
  trianglePolygon(i2) {
    const polygon = new Polygon();
    this.renderTriangle(i2, polygon);
    return polygon.value();
  }
};
function flatArray(points2, fx, fy, that) {
  const n = points2.length;
  const array3 = new Float64Array(n * 2);
  for (let i2 = 0; i2 < n; ++i2) {
    const p2 = points2[i2];
    array3[i2 * 2] = fx.call(that, p2, i2, points2);
    array3[i2 * 2 + 1] = fy.call(that, p2, i2, points2);
  }
  return array3;
}
function* flatIterable(points2, fx, fy, that) {
  let i2 = 0;
  for (const p2 of points2) {
    yield fx.call(that, p2, i2, points2);
    yield fy.call(that, p2, i2, points2);
    ++i2;
  }
}

// ../../node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x3) {
  return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
}
function formatDecimalParts(x3, p2) {
  if ((i2 = (x3 = p2 ? x3.toExponential(p2 - 1) : x3.toExponential()).indexOf("e")) < 0)
    return null;
  var i2, coefficient = x3.slice(0, i2);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x3.slice(i2 + 1)
  ];
}

// ../../node_modules/d3-format/src/exponent.js
function exponent_default(x3) {
  return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
}

// ../../node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width2) {
    var i2 = value.length, t = [], j2 = 0, g2 = grouping[0], length4 = 0;
    while (i2 > 0 && g2 > 0) {
      if (length4 + g2 + 1 > width2)
        g2 = Math.max(1, width2 - length4);
      t.push(value.substring(i2 -= g2, i2 + g2));
      if ((length4 += g2 + 1) > width2)
        break;
      g2 = grouping[j2 = (j2 + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

// ../../node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i2) {
      return numerals[+i2];
    });
  };
}

// ../../node_modules/d3-format/src/formatSpecifier.js
var re3 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re3.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// ../../node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s2) {
  out:
    for (var n = s2.length, i2 = 1, i0 = -1, i1; i2 < n; ++i2) {
      switch (s2[i2]) {
        case ".":
          i0 = i1 = i2;
          break;
        case "0":
          if (i0 === 0)
            i0 = i2;
          i1 = i2;
          break;
        default:
          if (!+s2[i2])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}

// ../../node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x3, p2) {
  var d = formatDecimalParts(x3, p2);
  if (!d)
    return x3 + "";
  var coefficient = d[0], exponent = d[1], i2 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i2 === n ? coefficient : i2 > n ? coefficient + new Array(i2 - n + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x3, Math.max(0, p2 + i2 - 1))[0];
}

// ../../node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x3, p2) {
  var d = formatDecimalParts(x3, p2);
  if (!d)
    return x3 + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// ../../node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x3, p2) => (x3 * 100).toFixed(p2),
  "b": (x3) => Math.round(x3).toString(2),
  "c": (x3) => x3 + "",
  "d": formatDecimal_default,
  "e": (x3, p2) => x3.toExponential(p2),
  "f": (x3, p2) => x3.toFixed(p2),
  "g": (x3, p2) => x3.toPrecision(p2),
  "o": (x3) => Math.round(x3).toString(8),
  "p": (x3, p2) => formatRounded_default(x3 * 100, p2),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
  "x": (x3) => Math.round(x3).toString(16)
};

// ../../node_modules/d3-format/src/identity.js
function identity_default2(x3) {
  return x3;
}

// ../../node_modules/d3-format/src/locale.js
var map = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale3) {
  var group3 = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default2 : formatGroup_default(map.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default2 : formatNumerals_default(map.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "\u2212" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align2 = specifier.align, sign3 = specifier.sign, symbol2 = specifier.symbol, zero3 = specifier.zero, width2 = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n")
      comma = true, type2 = "g";
    else if (!formatTypes_default[type2])
      precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero3 || fill === "0" && align2 === "=")
      zero3 = true, fill = "0", align2 = "=";
    var prefix2 = symbol2 === "$" ? currencyPrefix : symbol2 === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix2 = symbol2 === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix2, valueSuffix = suffix2, i2, n, c4;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign3 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign3 === "(" ? sign3 : minus : sign3 === "-" || sign3 === "(" ? "" : sign3) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign3 === "(" ? ")" : "");
        if (maybeSuffix) {
          i2 = -1, n = value.length;
          while (++i2 < n) {
            if (c4 = value.charCodeAt(i2), 48 > c4 || c4 > 57) {
              valueSuffix = (c4 === 46 ? decimal + value.slice(i2 + 1) : value.slice(i2)) + valueSuffix;
              value = value.slice(0, i2);
              break;
            }
          }
        }
      }
      if (comma && !zero3)
        value = group3(value, Infinity);
      var length4 = valuePrefix.length + value.length + valueSuffix.length, padding2 = length4 < width2 ? new Array(width2 - length4 + 1).join(fill) : "";
      if (comma && zero3)
        value = group3(padding2 + value, padding2.length ? width2 - valueSuffix.length : Infinity), padding2 = "";
      switch (align2) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding2;
          break;
        case "=":
          value = valuePrefix + padding2 + value + valueSuffix;
          break;
        case "^":
          value = padding2.slice(0, length4 = padding2.length >> 1) + valuePrefix + value + valueSuffix + padding2.slice(length4);
          break;
        default:
          value = padding2 + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix2(specifier, value) {
    var f2 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k3 = Math.pow(10, -e), prefix2 = prefixes[8 + e / 3];
    return function(value2) {
      return f2(k3 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// ../../node_modules/d3-format/src/defaultLocale.js
var locale;
var format2;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format2 = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// ../../node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// ../../node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// ../../node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max4) {
  step = Math.abs(step), max4 = Math.abs(max4) - step;
  return Math.max(0, exponent_default(max4) - exponent_default(step)) + 1;
}

// ../../node_modules/d3-geo/src/math.js
var epsilon6 = 1e-6;
var epsilon22 = 1e-12;
var pi2 = Math.PI;
var halfPi = pi2 / 2;
var quarterPi = pi2 / 4;
var tau3 = pi2 * 2;
var degrees3 = 180 / pi2;
var radians2 = pi2 / 180;
var abs2 = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var hypot = Math.hypot;
var log = Math.log;
var pow2 = Math.pow;
var sin = Math.sin;
var sign = Math.sign || function(x3) {
  return x3 > 0 ? 1 : x3 < 0 ? -1 : 0;
};
var sqrt = Math.sqrt;
var tan = Math.tan;
function acos(x3) {
  return x3 > 1 ? 0 : x3 < -1 ? pi2 : Math.acos(x3);
}
function asin(x3) {
  return x3 > 1 ? halfPi : x3 < -1 ? -halfPi : Math.asin(x3);
}

// ../../node_modules/d3-geo/src/noop.js
function noop2() {
}

// ../../node_modules/d3-geo/src/stream.js
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}
var streamObjectType = {
  Feature: function(object3, stream) {
    streamGeometry(object3.geometry, stream);
  },
  FeatureCollection: function(object3, stream) {
    var features = object3.features, i2 = -1, n = features.length;
    while (++i2 < n)
      streamGeometry(features[i2].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function(object3, stream) {
    stream.sphere();
  },
  Point: function(object3, stream) {
    object3 = object3.coordinates;
    stream.point(object3[0], object3[1], object3[2]);
  },
  MultiPoint: function(object3, stream) {
    var coordinates = object3.coordinates, i2 = -1, n = coordinates.length;
    while (++i2 < n)
      object3 = coordinates[i2], stream.point(object3[0], object3[1], object3[2]);
  },
  LineString: function(object3, stream) {
    streamLine(object3.coordinates, stream, 0);
  },
  MultiLineString: function(object3, stream) {
    var coordinates = object3.coordinates, i2 = -1, n = coordinates.length;
    while (++i2 < n)
      streamLine(coordinates[i2], stream, 0);
  },
  Polygon: function(object3, stream) {
    streamPolygon(object3.coordinates, stream);
  },
  MultiPolygon: function(object3, stream) {
    var coordinates = object3.coordinates, i2 = -1, n = coordinates.length;
    while (++i2 < n)
      streamPolygon(coordinates[i2], stream);
  },
  GeometryCollection: function(object3, stream) {
    var geometries = object3.geometries, i2 = -1, n = geometries.length;
    while (++i2 < n)
      streamGeometry(geometries[i2], stream);
  }
};
function streamLine(coordinates, stream, closed) {
  var i2 = -1, n = coordinates.length - closed, coordinate;
  stream.lineStart();
  while (++i2 < n)
    coordinate = coordinates[i2], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}
function streamPolygon(coordinates, stream) {
  var i2 = -1, n = coordinates.length;
  stream.polygonStart();
  while (++i2 < n)
    streamLine(coordinates[i2], stream, 1);
  stream.polygonEnd();
}
function stream_default(object3, stream) {
  if (object3 && streamObjectType.hasOwnProperty(object3.type)) {
    streamObjectType[object3.type](object3, stream);
  } else {
    streamGeometry(object3, stream);
  }
}

// ../../node_modules/d3-geo/src/cartesian.js
function spherical(cartesian2) {
  return [atan2(cartesian2[1], cartesian2[0]), asin(cartesian2[2])];
}
function cartesian(spherical2) {
  var lambda = spherical2[0], phi = spherical2[1], cosPhi = cos(phi);
  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
}
function cartesianDot(a2, b2) {
  return a2[0] * b2[0] + a2[1] * b2[1] + a2[2] * b2[2];
}
function cartesianCross(a2, b2) {
  return [a2[1] * b2[2] - a2[2] * b2[1], a2[2] * b2[0] - a2[0] * b2[2], a2[0] * b2[1] - a2[1] * b2[0]];
}
function cartesianAddInPlace(a2, b2) {
  a2[0] += b2[0], a2[1] += b2[1], a2[2] += b2[2];
}
function cartesianScale(vector3, k3) {
  return [vector3[0] * k3, vector3[1] * k3, vector3[2] * k3];
}
function cartesianNormalizeInPlace(d) {
  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

// ../../node_modules/d3-geo/src/centroid.js
var W0;
var W1;
var X0;
var Y0;
var Z0;
var X1;
var Y1;
var Z1;
var X22;
var Y22;
var Z2;
var lambda00;
var phi00;
var x0;
var y0;
var z0;
var centroidStream = {
  sphere: noop2,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};
function centroidPoint(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  var cosPhi = cos(phi);
  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
}
function centroidPointCartesian(x3, y3, z2) {
  ++W0;
  X0 += (x3 - X0) / W0;
  Y0 += (y3 - Y0) / W0;
  Z0 += (z2 - Z0) / W0;
}
function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}
function centroidLinePointFirst(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  var cosPhi = cos(phi);
  x0 = cosPhi * cos(lambda);
  y0 = cosPhi * sin(lambda);
  z0 = sin(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}
function centroidLinePoint(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  var cosPhi = cos(phi), x3 = cosPhi * cos(lambda), y3 = cosPhi * sin(lambda), z2 = sin(phi), w2 = atan2(sqrt((w2 = y0 * z2 - z0 * y3) * w2 + (w2 = z0 * x3 - x0 * z2) * w2 + (w2 = x0 * y3 - y0 * x3) * w2), x0 * x3 + y0 * y3 + z0 * z2);
  W1 += w2;
  X1 += w2 * (x0 + (x0 = x3));
  Y1 += w2 * (y0 + (y0 = y3));
  Z1 += w2 * (z0 + (z0 = z2));
  centroidPointCartesian(x0, y0, z0);
}
function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}
function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}
function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= radians2, phi *= radians2;
  centroidStream.point = centroidRingPoint;
  var cosPhi = cos(phi);
  x0 = cosPhi * cos(lambda);
  y0 = cosPhi * sin(lambda);
  z0 = sin(phi);
  centroidPointCartesian(x0, y0, z0);
}
function centroidRingPoint(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  var cosPhi = cos(phi), x3 = cosPhi * cos(lambda), y3 = cosPhi * sin(lambda), z2 = sin(phi), cx = y0 * z2 - z0 * y3, cy = z0 * x3 - x0 * z2, cz = x0 * y3 - y0 * x3, m2 = hypot(cx, cy, cz), w2 = asin(m2), v3 = m2 && -w2 / m2;
  X22.add(v3 * cx);
  Y22.add(v3 * cy);
  Z2.add(v3 * cz);
  W1 += w2;
  X1 += w2 * (x0 + (x0 = x3));
  Y1 += w2 * (y0 + (y0 = y3));
  Z1 += w2 * (z0 + (z0 = z2));
  centroidPointCartesian(x0, y0, z0);
}
function centroid_default(object3) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = 0;
  X22 = new Adder();
  Y22 = new Adder();
  Z2 = new Adder();
  stream_default(object3, centroidStream);
  var x3 = +X22, y3 = +Y22, z2 = +Z2, m2 = hypot(x3, y3, z2);
  if (m2 < epsilon22) {
    x3 = X1, y3 = Y1, z2 = Z1;
    if (W1 < epsilon6)
      x3 = X0, y3 = Y0, z2 = Z0;
    m2 = hypot(x3, y3, z2);
    if (m2 < epsilon22)
      return [NaN, NaN];
  }
  return [atan2(y3, x3) * degrees3, asin(z2 / m2) * degrees3];
}

// ../../node_modules/d3-geo/src/compose.js
function compose_default(a2, b2) {
  function compose(x3, y3) {
    return x3 = a2(x3, y3), b2(x3[0], x3[1]);
  }
  if (a2.invert && b2.invert)
    compose.invert = function(x3, y3) {
      return x3 = b2.invert(x3, y3), x3 && a2.invert(x3[0], x3[1]);
    };
  return compose;
}

// ../../node_modules/d3-geo/src/rotation.js
function rotationIdentity(lambda, phi) {
  if (abs2(lambda) > pi2)
    lambda -= Math.round(lambda / tau3) * tau3;
  return [lambda, phi];
}
rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau3) ? deltaPhi || deltaGamma ? compose_default(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    lambda += deltaLambda;
    if (abs2(lambda) > pi2)
      lambda -= Math.round(lambda / tau3) * tau3;
    return [lambda, phi];
  };
}
function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos(deltaPhi), sinDeltaPhi = sin(deltaPhi), cosDeltaGamma = cos(deltaGamma), sinDeltaGamma = sin(deltaGamma);
  function rotation(lambda, phi) {
    var cosPhi = cos(phi), x3 = cos(lambda) * cosPhi, y3 = sin(lambda) * cosPhi, z2 = sin(phi), k3 = z2 * cosDeltaPhi + x3 * sinDeltaPhi;
    return [
      atan2(y3 * cosDeltaGamma - k3 * sinDeltaGamma, x3 * cosDeltaPhi - z2 * sinDeltaPhi),
      asin(k3 * cosDeltaGamma + y3 * sinDeltaGamma)
    ];
  }
  rotation.invert = function(lambda, phi) {
    var cosPhi = cos(phi), x3 = cos(lambda) * cosPhi, y3 = sin(lambda) * cosPhi, z2 = sin(phi), k3 = z2 * cosDeltaGamma - y3 * sinDeltaGamma;
    return [
      atan2(y3 * cosDeltaGamma + z2 * sinDeltaGamma, x3 * cosDeltaPhi + k3 * sinDeltaPhi),
      asin(k3 * cosDeltaPhi - x3 * sinDeltaPhi)
    ];
  };
  return rotation;
}
function rotation_default(rotate) {
  rotate = rotateRadians(rotate[0] * radians2, rotate[1] * radians2, rotate.length > 2 ? rotate[2] * radians2 : 0);
  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * radians2, coordinates[1] * radians2);
    return coordinates[0] *= degrees3, coordinates[1] *= degrees3, coordinates;
  }
  forward.invert = function(coordinates) {
    coordinates = rotate.invert(coordinates[0] * radians2, coordinates[1] * radians2);
    return coordinates[0] *= degrees3, coordinates[1] *= degrees3, coordinates;
  };
  return forward;
}

// ../../node_modules/d3-geo/src/circle.js
function circleStream(stream, radius2, delta, direction, t03, t13) {
  if (!delta)
    return;
  var cosRadius = cos(radius2), sinRadius = sin(radius2), step = direction * delta;
  if (t03 == null) {
    t03 = radius2 + direction * tau3;
    t13 = radius2 - step / 2;
  } else {
    t03 = circleRadius(cosRadius, t03);
    t13 = circleRadius(cosRadius, t13);
    if (direction > 0 ? t03 < t13 : t03 > t13)
      t03 += direction * tau3;
  }
  for (var point6, t = t03; direction > 0 ? t > t13 : t < t13; t -= step) {
    point6 = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
    stream.point(point6[0], point6[1]);
  }
}
function circleRadius(cosRadius, point6) {
  point6 = cartesian(point6), point6[0] -= cosRadius;
  cartesianNormalizeInPlace(point6);
  var radius2 = acos(-point6[1]);
  return ((-point6[2] < 0 ? -radius2 : radius2) + tau3 - epsilon6) % tau3;
}

// ../../node_modules/d3-geo/src/clip/buffer.js
function buffer_default() {
  var lines = [], line3;
  return {
    point: function(x3, y3, m2) {
      line3.push([x3, y3, m2]);
    },
    lineStart: function() {
      lines.push(line3 = []);
    },
    lineEnd: noop2,
    rejoin: function() {
      if (lines.length > 1)
        lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line3 = null;
      return result;
    }
  };
}

// ../../node_modules/d3-geo/src/pointEqual.js
function pointEqual_default(a2, b2) {
  return abs2(a2[0] - b2[0]) < epsilon6 && abs2(a2[1] - b2[1]) < epsilon6;
}

// ../../node_modules/d3-geo/src/clip/rejoin.js
function Intersection(point6, points2, other, entry) {
  this.x = point6;
  this.z = points2;
  this.o = other;
  this.e = entry;
  this.v = false;
  this.n = this.p = null;
}
function rejoin_default(segments, compareIntersection2, startInside, interpolate, stream) {
  var subject = [], clip = [], i2, n;
  segments.forEach(function(segment) {
    if ((n2 = segment.length - 1) <= 0)
      return;
    var n2, p0 = segment[0], p1 = segment[n2], x3;
    if (pointEqual_default(p0, p1)) {
      if (!p0[2] && !p1[2]) {
        stream.lineStart();
        for (i2 = 0; i2 < n2; ++i2)
          stream.point((p0 = segment[i2])[0], p0[1]);
        stream.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon6;
    }
    subject.push(x3 = new Intersection(p0, segment, null, true));
    clip.push(x3.o = new Intersection(p0, null, x3, false));
    subject.push(x3 = new Intersection(p1, segment, null, false));
    clip.push(x3.o = new Intersection(p1, null, x3, true));
  });
  if (!subject.length)
    return;
  clip.sort(compareIntersection2);
  link(subject);
  link(clip);
  for (i2 = 0, n = clip.length; i2 < n; ++i2) {
    clip[i2].e = startInside = !startInside;
  }
  var start2 = subject[0], points2, point6;
  while (1) {
    var current = start2, isSubject = true;
    while (current.v)
      if ((current = current.n) === start2)
        return;
    points2 = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i2 = 0, n = points2.length; i2 < n; ++i2)
            stream.point((point6 = points2[i2])[0], point6[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points2 = current.p.z;
          for (i2 = points2.length - 1; i2 >= 0; --i2)
            stream.point((point6 = points2[i2])[0], point6[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points2 = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}
function link(array3) {
  if (!(n = array3.length))
    return;
  var n, i2 = 0, a2 = array3[0], b2;
  while (++i2 < n) {
    a2.n = b2 = array3[i2];
    b2.p = a2;
    a2 = b2;
  }
  a2.n = b2 = array3[0];
  b2.p = a2;
}

// ../../node_modules/d3-geo/src/polygonContains.js
function longitude(point6) {
  return abs2(point6[0]) <= pi2 ? point6[0] : sign(point6[0]) * ((abs2(point6[0]) + pi2) % tau3 - pi2);
}
function polygonContains_default(polygon, point6) {
  var lambda = longitude(point6), phi = point6[1], sinPhi = sin(phi), normal = [sin(lambda), -cos(lambda), 0], angle = 0, winding = 0;
  var sum6 = new Adder();
  if (sinPhi === 1)
    phi = halfPi + epsilon6;
  else if (sinPhi === -1)
    phi = -halfPi - epsilon6;
  for (var i2 = 0, n = polygon.length; i2 < n; ++i2) {
    if (!(m2 = (ring = polygon[i2]).length))
      continue;
    var ring, m2, point0 = ring[m2 - 1], lambda0 = longitude(point0), phi0 = point0[1] / 2 + quarterPi, sinPhi0 = sin(phi0), cosPhi0 = cos(phi0);
    for (var j2 = 0; j2 < m2; ++j2, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j2], lambda1 = longitude(point1), phi1 = point1[1] / 2 + quarterPi, sinPhi1 = sin(phi1), cosPhi1 = cos(phi1), delta = lambda1 - lambda0, sign3 = delta >= 0 ? 1 : -1, absDelta = sign3 * delta, antimeridian = absDelta > pi2, k3 = sinPhi0 * sinPhi1;
      sum6.add(atan2(k3 * sign3 * sin(absDelta), cosPhi0 * cosPhi1 + k3 * cos(absDelta)));
      angle += antimeridian ? delta + sign3 * tau3 : delta;
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }
  return (angle < -epsilon6 || angle < epsilon6 && sum6 < -epsilon22) ^ winding & 1;
}

// ../../node_modules/d3-geo/src/clip/index.js
function clip_default(pointVisible, clipLine, interpolate, start2) {
  return function(sink) {
    var line3 = clipLine(sink), ringBuffer = buffer_default(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
    var clip = {
      point: point6,
      lineStart,
      lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point6;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge(segments);
        var startInside = polygonContains_default(polygon, start2);
        if (segments.length) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          rejoin_default(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted)
          sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };
    function point6(lambda, phi) {
      if (pointVisible(lambda, phi))
        sink.point(lambda, phi);
    }
    function pointLine(lambda, phi) {
      line3.point(lambda, phi);
    }
    function lineStart() {
      clip.point = pointLine;
      line3.lineStart();
    }
    function lineEnd() {
      clip.point = point6;
      line3.lineEnd();
    }
    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }
    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }
    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i2, n = ringSegments.length, m2, segment, point7;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n)
        return;
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m2 = segment.length - 1) > 0) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i2 = 0; i2 < m2; ++i2)
            sink.point((point7 = segment[i2])[0], point7[1]);
          sink.lineEnd();
        }
        return;
      }
      if (n > 1 && clean & 2)
        ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }
    return clip;
  };
}
function validSegment(segment) {
  return segment.length > 1;
}
function compareIntersection(a2, b2) {
  return ((a2 = a2.x)[0] < 0 ? a2[1] - halfPi - epsilon6 : halfPi - a2[1]) - ((b2 = b2.x)[0] < 0 ? b2[1] - halfPi - epsilon6 : halfPi - b2[1]);
}

// ../../node_modules/d3-geo/src/clip/antimeridian.js
var antimeridian_default = clip_default(
  function() {
    return true;
  },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi2, -halfPi]
);
function clipAntimeridianLine(stream) {
  var lambda0 = NaN, phi0 = NaN, sign0 = NaN, clean;
  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? pi2 : -pi2, delta = abs2(lambda1 - lambda0);
      if (abs2(delta - pi2) < epsilon6) {
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi2) {
        if (abs2(lambda0 - sign0) < epsilon6)
          lambda0 -= sign0 * epsilon6;
        if (abs2(lambda1 - sign1) < epsilon6)
          lambda1 -= sign1 * epsilon6;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }
      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function() {
      return 2 - clean;
    }
  };
}
function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0, cosPhi1, sinLambda0Lambda1 = sin(lambda0 - lambda1);
  return abs2(sinLambda0Lambda1) > epsilon6 ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}
function clipAntimeridianInterpolate(from2, to, direction, stream) {
  var phi;
  if (from2 == null) {
    phi = direction * halfPi;
    stream.point(-pi2, phi);
    stream.point(0, phi);
    stream.point(pi2, phi);
    stream.point(pi2, 0);
    stream.point(pi2, -phi);
    stream.point(0, -phi);
    stream.point(-pi2, -phi);
    stream.point(-pi2, 0);
    stream.point(-pi2, phi);
  } else if (abs2(from2[0] - to[0]) > epsilon6) {
    var lambda = from2[0] < to[0] ? pi2 : -pi2;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

// ../../node_modules/d3-geo/src/clip/circle.js
function circle_default(radius2) {
  var cr = cos(radius2), delta = 6 * radians2, smallRadius = cr > 0, notHemisphere = abs2(cr) > epsilon6;
  function interpolate(from2, to, direction, stream) {
    circleStream(stream, radius2, delta, direction, from2, to);
  }
  function visible(lambda, phi) {
    return cos(lambda) * cos(phi) > cr;
  }
  function clipLine(stream) {
    var point0, c0, v0, v00, clean;
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi], point22, v3 = visible(lambda, phi), c4 = smallRadius ? v3 ? 0 : code(lambda, phi) : v3 ? code(lambda + (lambda < 0 ? pi2 : -pi2), phi) : 0;
        if (!point0 && (v00 = v0 = v3))
          stream.lineStart();
        if (v3 !== v0) {
          point22 = intersect(point0, point1);
          if (!point22 || pointEqual_default(point0, point22) || pointEqual_default(point1, point22))
            point1[2] = 1;
        }
        if (v3 !== v0) {
          clean = 0;
          if (v3) {
            stream.lineStart();
            point22 = intersect(point1, point0);
            stream.point(point22[0], point22[1]);
          } else {
            point22 = intersect(point0, point1);
            stream.point(point22[0], point22[1], 2);
            stream.lineEnd();
          }
          point0 = point22;
        } else if (notHemisphere && point0 && smallRadius ^ v3) {
          var t;
          if (!(c4 & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1], 3);
            }
          }
        }
        if (v3 && (!point0 || !pointEqual_default(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v3, c0 = c4;
      },
      lineEnd: function() {
        if (v0)
          stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | (v00 && v0) << 1;
      }
    };
  }
  function intersect(a2, b2, two) {
    var pa = cartesian(a2), pb = cartesian(b2);
    var n1 = [1, 0, 0], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
    if (!determinant)
      return !two && a2;
    var c1 = cr * n2n2 / determinant, c22 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A5 = cartesianScale(n1, c1), B4 = cartesianScale(n2, c22);
    cartesianAddInPlace(A5, B4);
    var u4 = n1xn2, w2 = cartesianDot(A5, u4), uu = cartesianDot(u4, u4), t22 = w2 * w2 - uu * (cartesianDot(A5, A5) - 1);
    if (t22 < 0)
      return;
    var t = sqrt(t22), q2 = cartesianScale(u4, (-w2 - t) / uu);
    cartesianAddInPlace(q2, A5);
    q2 = spherical(q2);
    if (!two)
      return q2;
    var lambda0 = a2[0], lambda1 = b2[0], phi0 = a2[1], phi1 = b2[1], z2;
    if (lambda1 < lambda0)
      z2 = lambda0, lambda0 = lambda1, lambda1 = z2;
    var delta2 = lambda1 - lambda0, polar = abs2(delta2 - pi2) < epsilon6, meridian = polar || delta2 < epsilon6;
    if (!polar && phi1 < phi0)
      z2 = phi0, phi0 = phi1, phi1 = z2;
    if (meridian ? polar ? phi0 + phi1 > 0 ^ q2[1] < (abs2(q2[0] - lambda0) < epsilon6 ? phi0 : phi1) : phi0 <= q2[1] && q2[1] <= phi1 : delta2 > pi2 ^ (lambda0 <= q2[0] && q2[0] <= lambda1)) {
      var q1 = cartesianScale(u4, (-w2 + t) / uu);
      cartesianAddInPlace(q1, A5);
      return [q2, spherical(q1)];
    }
  }
  function code(lambda, phi) {
    var r = smallRadius ? radius2 : pi2 - radius2, code2 = 0;
    if (lambda < -r)
      code2 |= 1;
    else if (lambda > r)
      code2 |= 2;
    if (phi < -r)
      code2 |= 4;
    else if (phi > r)
      code2 |= 8;
    return code2;
  }
  return clip_default(visible, clipLine, interpolate, smallRadius ? [0, -radius2] : [-pi2, radius2 - pi2]);
}

// ../../node_modules/d3-geo/src/clip/line.js
function line_default(a2, b2, x06, y06, x12, y12) {
  var ax = a2[0], ay = a2[1], bx = b2[0], by = b2[1], t03 = 0, t13 = 1, dx = bx - ax, dy = by - ay, r;
  r = x06 - ax;
  if (!dx && r > 0)
    return;
  r /= dx;
  if (dx < 0) {
    if (r < t03)
      return;
    if (r < t13)
      t13 = r;
  } else if (dx > 0) {
    if (r > t13)
      return;
    if (r > t03)
      t03 = r;
  }
  r = x12 - ax;
  if (!dx && r < 0)
    return;
  r /= dx;
  if (dx < 0) {
    if (r > t13)
      return;
    if (r > t03)
      t03 = r;
  } else if (dx > 0) {
    if (r < t03)
      return;
    if (r < t13)
      t13 = r;
  }
  r = y06 - ay;
  if (!dy && r > 0)
    return;
  r /= dy;
  if (dy < 0) {
    if (r < t03)
      return;
    if (r < t13)
      t13 = r;
  } else if (dy > 0) {
    if (r > t13)
      return;
    if (r > t03)
      t03 = r;
  }
  r = y12 - ay;
  if (!dy && r < 0)
    return;
  r /= dy;
  if (dy < 0) {
    if (r > t13)
      return;
    if (r > t03)
      t03 = r;
  } else if (dy > 0) {
    if (r < t03)
      return;
    if (r < t13)
      t13 = r;
  }
  if (t03 > 0)
    a2[0] = ax + t03 * dx, a2[1] = ay + t03 * dy;
  if (t13 < 1)
    b2[0] = ax + t13 * dx, b2[1] = ay + t13 * dy;
  return true;
}

// ../../node_modules/d3-geo/src/clip/rectangle.js
var clipMax = 1e9;
var clipMin = -clipMax;
function clipRectangle(x06, y06, x12, y12) {
  function visible(x3, y3) {
    return x06 <= x3 && x3 <= x12 && y06 <= y3 && y3 <= y12;
  }
  function interpolate(from2, to, direction, stream) {
    var a2 = 0, a1 = 0;
    if (from2 == null || (a2 = corner(from2, direction)) !== (a1 = corner(to, direction)) || comparePoint(from2, to) < 0 ^ direction > 0) {
      do
        stream.point(a2 === 0 || a2 === 3 ? x06 : x12, a2 > 1 ? y12 : y06);
      while ((a2 = (a2 + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }
  function corner(p2, direction) {
    return abs2(p2[0] - x06) < epsilon6 ? direction > 0 ? 0 : 3 : abs2(p2[0] - x12) < epsilon6 ? direction > 0 ? 2 : 1 : abs2(p2[1] - y06) < epsilon6 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
  }
  function compareIntersection2(a2, b2) {
    return comparePoint(a2.x, b2.x);
  }
  function comparePoint(a2, b2) {
    var ca3 = corner(a2, 1), cb = corner(b2, 1);
    return ca3 !== cb ? ca3 - cb : ca3 === 0 ? b2[1] - a2[1] : ca3 === 1 ? a2[0] - b2[0] : ca3 === 2 ? a2[1] - b2[1] : b2[0] - a2[0];
  }
  return function(stream) {
    var activeStream = stream, bufferStream = buffer_default(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first3, clean;
    var clipStream = {
      point: point6,
      lineStart,
      lineEnd,
      polygonStart,
      polygonEnd
    };
    function point6(x3, y3) {
      if (visible(x3, y3))
        activeStream.point(x3, y3);
    }
    function polygonInside() {
      var winding = 0;
      for (var i2 = 0, n = polygon.length; i2 < n; ++i2) {
        for (var ring2 = polygon[i2], j2 = 1, m2 = ring2.length, point7 = ring2[0], a0, a1, b0 = point7[0], b1 = point7[1]; j2 < m2; ++j2) {
          a0 = b0, a1 = b1, point7 = ring2[j2], b0 = point7[0], b1 = point7[1];
          if (a1 <= y12) {
            if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x06 - a0))
              ++winding;
          } else {
            if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x06 - a0))
              --winding;
          }
        }
      }
      return winding;
    }
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }
    function polygonEnd() {
      var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments = merge(segments)).length;
      if (cleanInside || visible2) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible2) {
          rejoin_default(segments, compareIntersection2, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }
    function lineStart() {
      clipStream.point = linePoint;
      if (polygon)
        polygon.push(ring = []);
      first3 = true;
      v_ = false;
      x_ = y_ = NaN;
    }
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_)
          bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point6;
      if (v_)
        activeStream.lineEnd();
    }
    function linePoint(x3, y3) {
      var v3 = visible(x3, y3);
      if (polygon)
        ring.push([x3, y3]);
      if (first3) {
        x__ = x3, y__ = y3, v__ = v3;
        first3 = false;
        if (v3) {
          activeStream.lineStart();
          activeStream.point(x3, y3);
        }
      } else {
        if (v3 && v_)
          activeStream.point(x3, y3);
        else {
          var a2 = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b2 = [x3 = Math.max(clipMin, Math.min(clipMax, x3)), y3 = Math.max(clipMin, Math.min(clipMax, y3))];
          if (line_default(a2, b2, x06, y06, x12, y12)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a2[0], a2[1]);
            }
            activeStream.point(b2[0], b2[1]);
            if (!v3)
              activeStream.lineEnd();
            clean = false;
          } else if (v3) {
            activeStream.lineStart();
            activeStream.point(x3, y3);
            clean = false;
          }
        }
      }
      x_ = x3, y_ = y3, v_ = v3;
    }
    return clipStream;
  };
}

// ../../node_modules/d3-geo/src/graticule.js
function graticuleX(y06, y12, dy) {
  var y3 = range(y06, y12 - epsilon6, dy).concat(y12);
  return function(x3) {
    return y3.map(function(y4) {
      return [x3, y4];
    });
  };
}
function graticuleY(x06, x12, dx) {
  var x3 = range(x06, x12 - epsilon6, dx).concat(x12);
  return function(y3) {
    return x3.map(function(x4) {
      return [x4, y3];
    });
  };
}
function graticule() {
  var x12, x06, X13, X03, y12, y06, Y13, Y03, dx = 10, dy = dx, DX = 90, DY = 360, x3, y3, X3, Y3, precision = 2.5;
  function graticule4() {
    return { type: "MultiLineString", coordinates: lines() };
  }
  function lines() {
    return range(ceil(X03 / DX) * DX, X13, DX).map(X3).concat(range(ceil(Y03 / DY) * DY, Y13, DY).map(Y3)).concat(range(ceil(x06 / dx) * dx, x12, dx).filter(function(x4) {
      return abs2(x4 % DX) > epsilon6;
    }).map(x3)).concat(range(ceil(y06 / dy) * dy, y12, dy).filter(function(y4) {
      return abs2(y4 % DY) > epsilon6;
    }).map(y3));
  }
  graticule4.lines = function() {
    return lines().map(function(coordinates) {
      return { type: "LineString", coordinates };
    });
  };
  graticule4.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X3(X03).concat(
          Y3(Y13).slice(1),
          X3(X13).reverse().slice(1),
          Y3(Y03).reverse().slice(1)
        )
      ]
    };
  };
  graticule4.extent = function(_2) {
    if (!arguments.length)
      return graticule4.extentMinor();
    return graticule4.extentMajor(_2).extentMinor(_2);
  };
  graticule4.extentMajor = function(_2) {
    if (!arguments.length)
      return [[X03, Y03], [X13, Y13]];
    X03 = +_2[0][0], X13 = +_2[1][0];
    Y03 = +_2[0][1], Y13 = +_2[1][1];
    if (X03 > X13)
      _2 = X03, X03 = X13, X13 = _2;
    if (Y03 > Y13)
      _2 = Y03, Y03 = Y13, Y13 = _2;
    return graticule4.precision(precision);
  };
  graticule4.extentMinor = function(_2) {
    if (!arguments.length)
      return [[x06, y06], [x12, y12]];
    x06 = +_2[0][0], x12 = +_2[1][0];
    y06 = +_2[0][1], y12 = +_2[1][1];
    if (x06 > x12)
      _2 = x06, x06 = x12, x12 = _2;
    if (y06 > y12)
      _2 = y06, y06 = y12, y12 = _2;
    return graticule4.precision(precision);
  };
  graticule4.step = function(_2) {
    if (!arguments.length)
      return graticule4.stepMinor();
    return graticule4.stepMajor(_2).stepMinor(_2);
  };
  graticule4.stepMajor = function(_2) {
    if (!arguments.length)
      return [DX, DY];
    DX = +_2[0], DY = +_2[1];
    return graticule4;
  };
  graticule4.stepMinor = function(_2) {
    if (!arguments.length)
      return [dx, dy];
    dx = +_2[0], dy = +_2[1];
    return graticule4;
  };
  graticule4.precision = function(_2) {
    if (!arguments.length)
      return precision;
    precision = +_2;
    x3 = graticuleX(y06, y12, 90);
    y3 = graticuleY(x06, x12, precision);
    X3 = graticuleX(Y03, Y13, 90);
    Y3 = graticuleY(X03, X13, precision);
    return graticule4;
  };
  return graticule4.extentMajor([[-180, -90 + epsilon6], [180, 90 - epsilon6]]).extentMinor([[-180, -80 - epsilon6], [180, 80 + epsilon6]]);
}
function graticule10() {
  return graticule()();
}

// ../../node_modules/d3-geo/src/identity.js
var identity_default3 = (x3) => x3;

// ../../node_modules/d3-geo/src/path/area.js
var areaSum = new Adder();
var areaRingSum = new Adder();
var x00;
var y00;
var x02;
var y02;
var areaStream = {
  point: noop2,
  lineStart: noop2,
  lineEnd: noop2,
  polygonStart: function() {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop2;
    areaSum.add(abs2(areaRingSum));
    areaRingSum = new Adder();
  },
  result: function() {
    var area3 = areaSum / 2;
    areaSum = new Adder();
    return area3;
  }
};
function areaRingStart() {
  areaStream.point = areaPointFirst;
}
function areaPointFirst(x3, y3) {
  areaStream.point = areaPoint;
  x00 = x02 = x3, y00 = y02 = y3;
}
function areaPoint(x3, y3) {
  areaRingSum.add(y02 * x3 - x02 * y3);
  x02 = x3, y02 = y3;
}
function areaRingEnd() {
  areaPoint(x00, y00);
}
var area_default2 = areaStream;

// ../../node_modules/d3-geo/src/path/bounds.js
var x03 = Infinity;
var y03 = x03;
var x1 = -x03;
var y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: noop2,
  lineEnd: noop2,
  polygonStart: noop2,
  polygonEnd: noop2,
  result: function() {
    var bounds = [[x03, y03], [x1, y1]];
    x1 = y1 = -(y03 = x03 = Infinity);
    return bounds;
  }
};
function boundsPoint(x3, y3) {
  if (x3 < x03)
    x03 = x3;
  if (x3 > x1)
    x1 = x3;
  if (y3 < y03)
    y03 = y3;
  if (y3 > y1)
    y1 = y3;
}
var bounds_default = boundsStream;

// ../../node_modules/d3-geo/src/path/centroid.js
var X02 = 0;
var Y02 = 0;
var Z02 = 0;
var X12 = 0;
var Y12 = 0;
var Z12 = 0;
var X23 = 0;
var Y23 = 0;
var Z22 = 0;
var x002;
var y002;
var x04;
var y04;
var centroidStream2 = {
  point: centroidPoint2,
  lineStart: centroidLineStart2,
  lineEnd: centroidLineEnd2,
  polygonStart: function() {
    centroidStream2.lineStart = centroidRingStart2;
    centroidStream2.lineEnd = centroidRingEnd2;
  },
  polygonEnd: function() {
    centroidStream2.point = centroidPoint2;
    centroidStream2.lineStart = centroidLineStart2;
    centroidStream2.lineEnd = centroidLineEnd2;
  },
  result: function() {
    var centroid2 = Z22 ? [X23 / Z22, Y23 / Z22] : Z12 ? [X12 / Z12, Y12 / Z12] : Z02 ? [X02 / Z02, Y02 / Z02] : [NaN, NaN];
    X02 = Y02 = Z02 = X12 = Y12 = Z12 = X23 = Y23 = Z22 = 0;
    return centroid2;
  }
};
function centroidPoint2(x3, y3) {
  X02 += x3;
  Y02 += y3;
  ++Z02;
}
function centroidLineStart2() {
  centroidStream2.point = centroidPointFirstLine;
}
function centroidPointFirstLine(x3, y3) {
  centroidStream2.point = centroidPointLine;
  centroidPoint2(x04 = x3, y04 = y3);
}
function centroidPointLine(x3, y3) {
  var dx = x3 - x04, dy = y3 - y04, z2 = sqrt(dx * dx + dy * dy);
  X12 += z2 * (x04 + x3) / 2;
  Y12 += z2 * (y04 + y3) / 2;
  Z12 += z2;
  centroidPoint2(x04 = x3, y04 = y3);
}
function centroidLineEnd2() {
  centroidStream2.point = centroidPoint2;
}
function centroidRingStart2() {
  centroidStream2.point = centroidPointFirstRing;
}
function centroidRingEnd2() {
  centroidPointRing(x002, y002);
}
function centroidPointFirstRing(x3, y3) {
  centroidStream2.point = centroidPointRing;
  centroidPoint2(x002 = x04 = x3, y002 = y04 = y3);
}
function centroidPointRing(x3, y3) {
  var dx = x3 - x04, dy = y3 - y04, z2 = sqrt(dx * dx + dy * dy);
  X12 += z2 * (x04 + x3) / 2;
  Y12 += z2 * (y04 + y3) / 2;
  Z12 += z2;
  z2 = y04 * x3 - x04 * y3;
  X23 += z2 * (x04 + x3);
  Y23 += z2 * (y04 + y3);
  Z22 += z2 * 3;
  centroidPoint2(x04 = x3, y04 = y3);
}
var centroid_default2 = centroidStream2;

// ../../node_modules/d3-geo/src/path/context.js
function PathContext(context) {
  this._context = context;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_2) {
    return this._radius = _2, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._context.closePath();
    this._point = NaN;
  },
  point: function(x3, y3) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x3, y3);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x3, y3);
        break;
      }
      default: {
        this._context.moveTo(x3 + this._radius, y3);
        this._context.arc(x3, y3, this._radius, 0, tau3);
        break;
      }
    }
  },
  result: noop2
};

// ../../node_modules/d3-geo/src/path/measure.js
var lengthSum = new Adder();
var lengthRing;
var x003;
var y003;
var x05;
var y05;
var lengthStream = {
  point: noop2,
  lineStart: function() {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function() {
    if (lengthRing)
      lengthPoint(x003, y003);
    lengthStream.point = noop2;
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length4 = +lengthSum;
    lengthSum = new Adder();
    return length4;
  }
};
function lengthPointFirst(x3, y3) {
  lengthStream.point = lengthPoint;
  x003 = x05 = x3, y003 = y05 = y3;
}
function lengthPoint(x3, y3) {
  x05 -= x3, y05 -= y3;
  lengthSum.add(sqrt(x05 * x05 + y05 * y05));
  x05 = x3, y05 = y3;
}
var measure_default = lengthStream;

// ../../node_modules/d3-geo/src/path/string.js
var cacheDigits;
var cacheAppend;
var cacheRadius;
var cacheCircle;
var PathString = class {
  constructor(digits) {
    this._append = digits == null ? append2 : appendRound2(digits);
    this._radius = 4.5;
    this._ = "";
  }
  pointRadius(_2) {
    this._radius = +_2;
    return this;
  }
  polygonStart() {
    this._line = 0;
  }
  polygonEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    if (this._line === 0)
      this._ += "Z";
    this._point = NaN;
  }
  point(x3, y3) {
    switch (this._point) {
      case 0: {
        this._append`M${x3},${y3}`;
        this._point = 1;
        break;
      }
      case 1: {
        this._append`L${x3},${y3}`;
        break;
      }
      default: {
        this._append`M${x3},${y3}`;
        if (this._radius !== cacheRadius || this._append !== cacheAppend) {
          const r = this._radius;
          const s2 = this._;
          this._ = "";
          this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;
          cacheRadius = r;
          cacheAppend = this._append;
          cacheCircle = this._;
          this._ = s2;
        }
        this._ += cacheCircle;
        break;
      }
    }
  }
  result() {
    const result = this._;
    this._ = "";
    return result.length ? result : null;
  }
};
function append2(strings) {
  let i2 = 1;
  this._ += strings[0];
  for (const j2 = strings.length; i2 < j2; ++i2) {
    this._ += arguments[i2] + strings[i2];
  }
}
function appendRound2(digits) {
  const d = Math.floor(digits);
  if (!(d >= 0))
    throw new RangeError(`invalid digits: ${digits}`);
  if (d > 15)
    return append2;
  if (d !== cacheDigits) {
    const k3 = 10 ** d;
    cacheDigits = d;
    cacheAppend = function append3(strings) {
      let i2 = 1;
      this._ += strings[0];
      for (const j2 = strings.length; i2 < j2; ++i2) {
        this._ += Math.round(arguments[i2] * k3) / k3 + strings[i2];
      }
    };
  }
  return cacheAppend;
}

// ../../node_modules/d3-geo/src/path/index.js
function path_default(projection3, context) {
  let digits = 3, pointRadius = 4.5, projectionStream, contextStream;
  function path2(object3) {
    if (object3) {
      if (typeof pointRadius === "function")
        contextStream.pointRadius(+pointRadius.apply(this, arguments));
      stream_default(object3, projectionStream(contextStream));
    }
    return contextStream.result();
  }
  path2.area = function(object3) {
    stream_default(object3, projectionStream(area_default2));
    return area_default2.result();
  };
  path2.measure = function(object3) {
    stream_default(object3, projectionStream(measure_default));
    return measure_default.result();
  };
  path2.bounds = function(object3) {
    stream_default(object3, projectionStream(bounds_default));
    return bounds_default.result();
  };
  path2.centroid = function(object3) {
    stream_default(object3, projectionStream(centroid_default2));
    return centroid_default2.result();
  };
  path2.projection = function(_2) {
    if (!arguments.length)
      return projection3;
    projectionStream = _2 == null ? (projection3 = null, identity_default3) : (projection3 = _2).stream;
    return path2;
  };
  path2.context = function(_2) {
    if (!arguments.length)
      return context;
    contextStream = _2 == null ? (context = null, new PathString(digits)) : new PathContext(context = _2);
    if (typeof pointRadius !== "function")
      contextStream.pointRadius(pointRadius);
    return path2;
  };
  path2.pointRadius = function(_2) {
    if (!arguments.length)
      return pointRadius;
    pointRadius = typeof _2 === "function" ? _2 : (contextStream.pointRadius(+_2), +_2);
    return path2;
  };
  path2.digits = function(_2) {
    if (!arguments.length)
      return digits;
    if (_2 == null)
      digits = null;
    else {
      const d = Math.floor(_2);
      if (!(d >= 0))
        throw new RangeError(`invalid digits: ${_2}`);
      digits = d;
    }
    if (context === null)
      contextStream = new PathString(digits);
    return path2;
  };
  return path2.projection(projection3).digits(digits).context(context);
}

// ../../node_modules/d3-geo/src/transform.js
function transform_default(methods) {
  return {
    stream: transformer(methods)
  };
}
function transformer(methods) {
  return function(stream) {
    var s2 = new TransformStream();
    for (var key in methods)
      s2[key] = methods[key];
    s2.stream = stream;
    return s2;
  };
}
function TransformStream() {
}
TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x3, y3) {
    this.stream.point(x3, y3);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};

// ../../node_modules/d3-geo/src/projection/fit.js
function fit(projection3, fitBounds, object3) {
  var clip = projection3.clipExtent && projection3.clipExtent();
  projection3.scale(150).translate([0, 0]);
  if (clip != null)
    projection3.clipExtent(null);
  stream_default(object3, projection3.stream(bounds_default));
  fitBounds(bounds_default.result());
  if (clip != null)
    projection3.clipExtent(clip);
  return projection3;
}
function fitExtent(projection3, extent4, object3) {
  return fit(projection3, function(b2) {
    var w2 = extent4[1][0] - extent4[0][0], h2 = extent4[1][1] - extent4[0][1], k3 = Math.min(w2 / (b2[1][0] - b2[0][0]), h2 / (b2[1][1] - b2[0][1])), x3 = +extent4[0][0] + (w2 - k3 * (b2[1][0] + b2[0][0])) / 2, y3 = +extent4[0][1] + (h2 - k3 * (b2[1][1] + b2[0][1])) / 2;
    projection3.scale(150 * k3).translate([x3, y3]);
  }, object3);
}
function fitSize(projection3, size, object3) {
  return fitExtent(projection3, [[0, 0], size], object3);
}
function fitWidth(projection3, width2, object3) {
  return fit(projection3, function(b2) {
    var w2 = +width2, k3 = w2 / (b2[1][0] - b2[0][0]), x3 = (w2 - k3 * (b2[1][0] + b2[0][0])) / 2, y3 = -k3 * b2[0][1];
    projection3.scale(150 * k3).translate([x3, y3]);
  }, object3);
}
function fitHeight(projection3, height2, object3) {
  return fit(projection3, function(b2) {
    var h2 = +height2, k3 = h2 / (b2[1][1] - b2[0][1]), x3 = -k3 * b2[0][0], y3 = (h2 - k3 * (b2[1][1] + b2[0][1])) / 2;
    projection3.scale(150 * k3).translate([x3, y3]);
  }, object3);
}

// ../../node_modules/d3-geo/src/projection/resample.js
var maxDepth = 16;
var cosMinDistance = cos(30 * radians2);
function resample_default(project2, delta2) {
  return +delta2 ? resample(project2, delta2) : resampleNone(project2);
}
function resampleNone(project2) {
  return transformer({
    point: function(x3, y3) {
      x3 = project2(x3, y3);
      this.stream.point(x3[0], x3[1]);
    }
  });
}
function resample(project2, delta2) {
  function resampleLineTo(x06, y06, lambda0, a0, b0, c0, x12, y12, lambda1, a1, b1, c1, depth, stream) {
    var dx = x12 - x06, dy = y12 - y06, d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a2 = a0 + a1, b2 = b0 + b1, c4 = c0 + c1, m2 = sqrt(a2 * a2 + b2 * b2 + c4 * c4), phi2 = asin(c4 /= m2), lambda2 = abs2(abs2(c4) - 1) < epsilon6 || abs2(lambda0 - lambda1) < epsilon6 ? (lambda0 + lambda1) / 2 : atan2(b2, a2), p2 = project2(lambda2, phi2), x22 = p2[0], y22 = p2[1], dx2 = x22 - x06, dy2 = y22 - y06, dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 || abs2((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        resampleLineTo(x06, y06, lambda0, a0, b0, c0, x22, y22, lambda2, a2 /= m2, b2 /= m2, c4, depth, stream);
        stream.point(x22, y22);
        resampleLineTo(x22, y22, lambda2, a2, b2, c4, x12, y12, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda002, x004, y004, a00, b00, c00, lambda0, x06, y06, a0, b0, c0;
    var resampleStream = {
      point: point6,
      lineStart,
      lineEnd,
      polygonStart: function() {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function() {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };
    function point6(x3, y3) {
      x3 = project2(x3, y3);
      stream.point(x3[0], x3[1]);
    }
    function lineStart() {
      x06 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }
    function linePoint(lambda, phi) {
      var c4 = cartesian([lambda, phi]), p2 = project2(lambda, phi);
      resampleLineTo(x06, y06, lambda0, a0, b0, c0, x06 = p2[0], y06 = p2[1], lambda0 = lambda, a0 = c4[0], b0 = c4[1], c0 = c4[2], maxDepth, stream);
      stream.point(x06, y06);
    }
    function lineEnd() {
      resampleStream.point = point6;
      stream.lineEnd();
    }
    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }
    function ringPoint(lambda, phi) {
      linePoint(lambda002 = lambda, phi), x004 = x06, y004 = y06, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }
    function ringEnd() {
      resampleLineTo(x06, y06, lambda0, a0, b0, c0, x004, y004, lambda002, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }
    return resampleStream;
  };
}

// ../../node_modules/d3-geo/src/projection/index.js
var transformRadians = transformer({
  point: function(x3, y3) {
    this.stream.point(x3 * radians2, y3 * radians2);
  }
});
function transformRotate(rotate) {
  return transformer({
    point: function(x3, y3) {
      var r = rotate(x3, y3);
      return this.stream.point(r[0], r[1]);
    }
  });
}
function scaleTranslate(k3, dx, dy, sx, sy) {
  function transform3(x3, y3) {
    x3 *= sx;
    y3 *= sy;
    return [dx + k3 * x3, dy - k3 * y3];
  }
  transform3.invert = function(x3, y3) {
    return [(x3 - dx) / k3 * sx, (dy - y3) / k3 * sy];
  };
  return transform3;
}
function scaleTranslateRotate(k3, dx, dy, sx, sy, alpha) {
  if (!alpha)
    return scaleTranslate(k3, dx, dy, sx, sy);
  var cosAlpha = cos(alpha), sinAlpha = sin(alpha), a2 = cosAlpha * k3, b2 = sinAlpha * k3, ai = cosAlpha / k3, bi = sinAlpha / k3, ci = (sinAlpha * dy - cosAlpha * dx) / k3, fi = (sinAlpha * dx + cosAlpha * dy) / k3;
  function transform3(x3, y3) {
    x3 *= sx;
    y3 *= sy;
    return [a2 * x3 - b2 * y3 + dx, dy - b2 * x3 - a2 * y3];
  }
  transform3.invert = function(x3, y3) {
    return [sx * (ai * x3 - bi * y3 + ci), sy * (fi - bi * x3 - ai * y3)];
  };
  return transform3;
}
function projection(project2) {
  return projectionMutator(function() {
    return project2;
  })();
}
function projectionMutator(projectAt) {
  var project2, k3 = 150, x3 = 480, y3 = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = antimeridian_default, x06 = null, y06, x12, y12, postclip = identity_default3, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
  function projection3(point6) {
    return projectRotateTransform(point6[0] * radians2, point6[1] * radians2);
  }
  function invert2(point6) {
    point6 = projectRotateTransform.invert(point6[0], point6[1]);
    return point6 && [point6[0] * degrees3, point6[1] * degrees3];
  }
  projection3.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };
  projection3.preclip = function(_2) {
    return arguments.length ? (preclip = _2, theta = void 0, reset2()) : preclip;
  };
  projection3.postclip = function(_2) {
    return arguments.length ? (postclip = _2, x06 = y06 = x12 = y12 = null, reset2()) : postclip;
  };
  projection3.clipAngle = function(_2) {
    return arguments.length ? (preclip = +_2 ? circle_default(theta = _2 * radians2) : (theta = null, antimeridian_default), reset2()) : theta * degrees3;
  };
  projection3.clipExtent = function(_2) {
    return arguments.length ? (postclip = _2 == null ? (x06 = y06 = x12 = y12 = null, identity_default3) : clipRectangle(x06 = +_2[0][0], y06 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reset2()) : x06 == null ? null : [[x06, y06], [x12, y12]];
  };
  projection3.scale = function(_2) {
    return arguments.length ? (k3 = +_2, recenter()) : k3;
  };
  projection3.translate = function(_2) {
    return arguments.length ? (x3 = +_2[0], y3 = +_2[1], recenter()) : [x3, y3];
  };
  projection3.center = function(_2) {
    return arguments.length ? (lambda = _2[0] % 360 * radians2, phi = _2[1] % 360 * radians2, recenter()) : [lambda * degrees3, phi * degrees3];
  };
  projection3.rotate = function(_2) {
    return arguments.length ? (deltaLambda = _2[0] % 360 * radians2, deltaPhi = _2[1] % 360 * radians2, deltaGamma = _2.length > 2 ? _2[2] % 360 * radians2 : 0, recenter()) : [deltaLambda * degrees3, deltaPhi * degrees3, deltaGamma * degrees3];
  };
  projection3.angle = function(_2) {
    return arguments.length ? (alpha = _2 % 360 * radians2, recenter()) : alpha * degrees3;
  };
  projection3.reflectX = function(_2) {
    return arguments.length ? (sx = _2 ? -1 : 1, recenter()) : sx < 0;
  };
  projection3.reflectY = function(_2) {
    return arguments.length ? (sy = _2 ? -1 : 1, recenter()) : sy < 0;
  };
  projection3.precision = function(_2) {
    return arguments.length ? (projectResample = resample_default(projectTransform, delta2 = _2 * _2), reset2()) : sqrt(delta2);
  };
  projection3.fitExtent = function(extent4, object3) {
    return fitExtent(projection3, extent4, object3);
  };
  projection3.fitSize = function(size, object3) {
    return fitSize(projection3, size, object3);
  };
  projection3.fitWidth = function(width2, object3) {
    return fitWidth(projection3, width2, object3);
  };
  projection3.fitHeight = function(height2, object3) {
    return fitHeight(projection3, height2, object3);
  };
  function recenter() {
    var center2 = scaleTranslateRotate(k3, 0, 0, sx, sy, alpha).apply(null, project2(lambda, phi)), transform3 = scaleTranslateRotate(k3, x3 - center2[0], y3 - center2[1], sx, sy, alpha);
    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose_default(project2, transform3);
    projectRotateTransform = compose_default(rotate, projectTransform);
    projectResample = resample_default(projectTransform, delta2);
    return reset2();
  }
  function reset2() {
    cache = cacheStream = null;
    return projection3;
  }
  return function() {
    project2 = projectAt.apply(this, arguments);
    projection3.invert = project2.invert && invert2;
    return recenter();
  };
}

// ../../node_modules/d3-geo/src/projection/conic.js
function conicProjection(projectAt) {
  var phi0 = 0, phi1 = pi2 / 3, m2 = projectionMutator(projectAt), p2 = m2(phi0, phi1);
  p2.parallels = function(_2) {
    return arguments.length ? m2(phi0 = _2[0] * radians2, phi1 = _2[1] * radians2) : [phi0 * degrees3, phi1 * degrees3];
  };
  return p2;
}

// ../../node_modules/d3-geo/src/projection/cylindricalEqualArea.js
function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = cos(phi0);
  function forward(lambda, phi) {
    return [lambda * cosPhi0, sin(phi) / cosPhi0];
  }
  forward.invert = function(x3, y3) {
    return [x3 / cosPhi0, asin(y3 * cosPhi0)];
  };
  return forward;
}

// ../../node_modules/d3-geo/src/projection/conicEqualArea.js
function conicEqualAreaRaw(y06, y12) {
  var sy0 = sin(y06), n = (sy0 + sin(y12)) / 2;
  if (abs2(n) < epsilon6)
    return cylindricalEqualAreaRaw(y06);
  var c4 = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c4) / n;
  function project2(x3, y3) {
    var r = sqrt(c4 - 2 * n * sin(y3)) / n;
    return [r * sin(x3 *= n), r0 - r * cos(x3)];
  }
  project2.invert = function(x3, y3) {
    var r0y = r0 - y3, l = atan2(x3, abs2(r0y)) * sign(r0y);
    if (r0y * n < 0)
      l -= pi2 * sign(x3) * sign(r0y);
    return [l / n, asin((c4 - (x3 * x3 + r0y * r0y) * n * n) / (2 * n))];
  };
  return project2;
}
function conicEqualArea_default() {
  return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}

// ../../node_modules/d3-geo/src/projection/albers.js
function albers_default() {
  return conicEqualArea_default().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}

// ../../node_modules/d3-geo/src/projection/albersUsa.js
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function(x3, y3) {
      var i2 = -1;
      while (++i2 < n)
        streams[i2].point(x3, y3);
    },
    sphere: function() {
      var i2 = -1;
      while (++i2 < n)
        streams[i2].sphere();
    },
    lineStart: function() {
      var i2 = -1;
      while (++i2 < n)
        streams[i2].lineStart();
    },
    lineEnd: function() {
      var i2 = -1;
      while (++i2 < n)
        streams[i2].lineEnd();
    },
    polygonStart: function() {
      var i2 = -1;
      while (++i2 < n)
        streams[i2].polygonStart();
    },
    polygonEnd: function() {
      var i2 = -1;
      while (++i2 < n)
        streams[i2].polygonEnd();
    }
  };
}
function albersUsa_default() {
  var cache, cacheStream, lower48 = albers_default(), lower48Point, alaska = conicEqualArea_default().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, hawaii = conicEqualArea_default().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, point6, pointStream = { point: function(x3, y3) {
    point6 = [x3, y3];
  } };
  function albersUsa(coordinates) {
    var x3 = coordinates[0], y3 = coordinates[1];
    return point6 = null, (lower48Point.point(x3, y3), point6) || (alaskaPoint.point(x3, y3), point6) || (hawaiiPoint.point(x3, y3), point6);
  }
  albersUsa.invert = function(coordinates) {
    var k3 = lower48.scale(), t = lower48.translate(), x3 = (coordinates[0] - t[0]) / k3, y3 = (coordinates[1] - t[1]) / k3;
    return (y3 >= 0.12 && y3 < 0.234 && x3 >= -0.425 && x3 < -0.214 ? alaska : y3 >= 0.166 && y3 < 0.234 && x3 >= -0.214 && x3 < -0.115 ? hawaii : lower48).invert(coordinates);
  };
  albersUsa.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };
  albersUsa.precision = function(_2) {
    if (!arguments.length)
      return lower48.precision();
    lower48.precision(_2), alaska.precision(_2), hawaii.precision(_2);
    return reset2();
  };
  albersUsa.scale = function(_2) {
    if (!arguments.length)
      return lower48.scale();
    lower48.scale(_2), alaska.scale(_2 * 0.35), hawaii.scale(_2);
    return albersUsa.translate(lower48.translate());
  };
  albersUsa.translate = function(_2) {
    if (!arguments.length)
      return lower48.translate();
    var k3 = lower48.scale(), x3 = +_2[0], y3 = +_2[1];
    lower48Point = lower48.translate(_2).clipExtent([[x3 - 0.455 * k3, y3 - 0.238 * k3], [x3 + 0.455 * k3, y3 + 0.238 * k3]]).stream(pointStream);
    alaskaPoint = alaska.translate([x3 - 0.307 * k3, y3 + 0.201 * k3]).clipExtent([[x3 - 0.425 * k3 + epsilon6, y3 + 0.12 * k3 + epsilon6], [x3 - 0.214 * k3 - epsilon6, y3 + 0.234 * k3 - epsilon6]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x3 - 0.205 * k3, y3 + 0.212 * k3]).clipExtent([[x3 - 0.214 * k3 + epsilon6, y3 + 0.166 * k3 + epsilon6], [x3 - 0.115 * k3 - epsilon6, y3 + 0.234 * k3 - epsilon6]]).stream(pointStream);
    return reset2();
  };
  albersUsa.fitExtent = function(extent4, object3) {
    return fitExtent(albersUsa, extent4, object3);
  };
  albersUsa.fitSize = function(size, object3) {
    return fitSize(albersUsa, size, object3);
  };
  albersUsa.fitWidth = function(width2, object3) {
    return fitWidth(albersUsa, width2, object3);
  };
  albersUsa.fitHeight = function(height2, object3) {
    return fitHeight(albersUsa, height2, object3);
  };
  function reset2() {
    cache = cacheStream = null;
    return albersUsa;
  }
  return albersUsa.scale(1070);
}

// ../../node_modules/d3-geo/src/projection/azimuthal.js
function azimuthalRaw(scale3) {
  return function(x3, y3) {
    var cx = cos(x3), cy = cos(y3), k3 = scale3(cx * cy);
    if (k3 === Infinity)
      return [2, 0];
    return [
      k3 * cy * sin(x3),
      k3 * sin(y3)
    ];
  };
}
function azimuthalInvert(angle) {
  return function(x3, y3) {
    var z2 = sqrt(x3 * x3 + y3 * y3), c4 = angle(z2), sc = sin(c4), cc2 = cos(c4);
    return [
      atan2(x3 * sc, z2 * cc2),
      asin(z2 && y3 * sc / z2)
    ];
  };
}

// ../../node_modules/d3-geo/src/projection/azimuthalEqualArea.js
var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z2) {
  return 2 * asin(z2 / 2);
});
function azimuthalEqualArea_default() {
  return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}

// ../../node_modules/d3-geo/src/projection/azimuthalEquidistant.js
var azimuthalEquidistantRaw = azimuthalRaw(function(c4) {
  return (c4 = acos(c4)) && c4 / sin(c4);
});
azimuthalEquidistantRaw.invert = azimuthalInvert(function(z2) {
  return z2;
});
function azimuthalEquidistant_default() {
  return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}

// ../../node_modules/d3-geo/src/projection/mercator.js
function mercatorRaw(lambda, phi) {
  return [lambda, log(tan((halfPi + phi) / 2))];
}
mercatorRaw.invert = function(x3, y3) {
  return [x3, 2 * atan(exp(y3)) - halfPi];
};
function mercator_default() {
  return mercatorProjection(mercatorRaw).scale(961 / tau3);
}
function mercatorProjection(project2) {
  var m2 = projection(project2), center2 = m2.center, scale3 = m2.scale, translate = m2.translate, clipExtent = m2.clipExtent, x06 = null, y06, x12, y12;
  m2.scale = function(_2) {
    return arguments.length ? (scale3(_2), reclip()) : scale3();
  };
  m2.translate = function(_2) {
    return arguments.length ? (translate(_2), reclip()) : translate();
  };
  m2.center = function(_2) {
    return arguments.length ? (center2(_2), reclip()) : center2();
  };
  m2.clipExtent = function(_2) {
    return arguments.length ? (_2 == null ? x06 = y06 = x12 = y12 = null : (x06 = +_2[0][0], y06 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reclip()) : x06 == null ? null : [[x06, y06], [x12, y12]];
  };
  function reclip() {
    var k3 = pi2 * scale3(), t = m2(rotation_default(m2.rotate()).invert([0, 0]));
    return clipExtent(x06 == null ? [[t[0] - k3, t[1] - k3], [t[0] + k3, t[1] + k3]] : project2 === mercatorRaw ? [[Math.max(t[0] - k3, x06), y06], [Math.min(t[0] + k3, x12), y12]] : [[x06, Math.max(t[1] - k3, y06)], [x12, Math.min(t[1] + k3, y12)]]);
  }
  return reclip();
}

// ../../node_modules/d3-geo/src/projection/conicConformal.js
function tany(y3) {
  return tan((halfPi + y3) / 2);
}
function conicConformalRaw(y06, y12) {
  var cy0 = cos(y06), n = y06 === y12 ? sin(y06) : log(cy0 / cos(y12)) / log(tany(y12) / tany(y06)), f2 = cy0 * pow2(tany(y06), n) / n;
  if (!n)
    return mercatorRaw;
  function project2(x3, y3) {
    if (f2 > 0) {
      if (y3 < -halfPi + epsilon6)
        y3 = -halfPi + epsilon6;
    } else {
      if (y3 > halfPi - epsilon6)
        y3 = halfPi - epsilon6;
    }
    var r = f2 / pow2(tany(y3), n);
    return [r * sin(n * x3), f2 - r * cos(n * x3)];
  }
  project2.invert = function(x3, y3) {
    var fy = f2 - y3, r = sign(n) * sqrt(x3 * x3 + fy * fy), l = atan2(x3, abs2(fy)) * sign(fy);
    if (fy * n < 0)
      l -= pi2 * sign(x3) * sign(fy);
    return [l / n, 2 * atan(pow2(f2 / r, 1 / n)) - halfPi];
  };
  return project2;
}
function conicConformal_default() {
  return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);
}

// ../../node_modules/d3-geo/src/projection/equirectangular.js
function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}
equirectangularRaw.invert = equirectangularRaw;
function equirectangular_default() {
  return projection(equirectangularRaw).scale(152.63);
}

// ../../node_modules/d3-geo/src/projection/conicEquidistant.js
function conicEquidistantRaw(y06, y12) {
  var cy0 = cos(y06), n = y06 === y12 ? sin(y06) : (cy0 - cos(y12)) / (y12 - y06), g2 = cy0 / n + y06;
  if (abs2(n) < epsilon6)
    return equirectangularRaw;
  function project2(x3, y3) {
    var gy = g2 - y3, nx = n * x3;
    return [gy * sin(nx), g2 - gy * cos(nx)];
  }
  project2.invert = function(x3, y3) {
    var gy = g2 - y3, l = atan2(x3, abs2(gy)) * sign(gy);
    if (gy * n < 0)
      l -= pi2 * sign(x3) * sign(gy);
    return [l / n, g2 - sign(n) * sqrt(x3 * x3 + gy * gy)];
  };
  return project2;
}
function conicEquidistant_default() {
  return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}

// ../../node_modules/d3-geo/src/projection/equalEarth.js
var A1 = 1.340264;
var A22 = -0.081106;
var A3 = 893e-6;
var A4 = 3796e-6;
var M = sqrt(3) / 2;
var iterations = 12;
function equalEarthRaw(lambda, phi) {
  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;
  return [
    lambda * cos(l) / (M * (A1 + 3 * A22 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
    l * (A1 + A22 * l2 + l6 * (A3 + A4 * l2))
  ];
}
equalEarthRaw.invert = function(x3, y3) {
  var l = y3, l2 = l * l, l6 = l2 * l2 * l2;
  for (var i2 = 0, delta, fy, fpy; i2 < iterations; ++i2) {
    fy = l * (A1 + A22 * l2 + l6 * (A3 + A4 * l2)) - y3;
    fpy = A1 + 3 * A22 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if (abs2(delta) < epsilon22)
      break;
  }
  return [
    M * x3 * (A1 + 3 * A22 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),
    asin(sin(l) / M)
  ];
};
function equalEarth_default() {
  return projection(equalEarthRaw).scale(177.158);
}

// ../../node_modules/d3-geo/src/projection/gnomonic.js
function gnomonicRaw(x3, y3) {
  var cy = cos(y3), k3 = cos(x3) * cy;
  return [cy * sin(x3) / k3, sin(y3) / k3];
}
gnomonicRaw.invert = azimuthalInvert(atan);
function gnomonic_default() {
  return projection(gnomonicRaw).scale(144.049).clipAngle(60);
}

// ../../node_modules/d3-geo/src/projection/orthographic.js
function orthographicRaw(x3, y3) {
  return [cos(y3) * sin(x3), sin(y3)];
}
orthographicRaw.invert = azimuthalInvert(asin);
function orthographic_default() {
  return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon6);
}

// ../../node_modules/d3-geo/src/projection/stereographic.js
function stereographicRaw(x3, y3) {
  var cy = cos(y3), k3 = 1 + cos(x3) * cy;
  return [cy * sin(x3) / k3, sin(y3) / k3];
}
stereographicRaw.invert = azimuthalInvert(function(z2) {
  return 2 * atan(z2);
});
function stereographic_default() {
  return projection(stereographicRaw).scale(250).clipAngle(142);
}

// ../../node_modules/d3-geo/src/projection/transverseMercator.js
function transverseMercatorRaw(lambda, phi) {
  return [log(tan((halfPi + phi) / 2)), -lambda];
}
transverseMercatorRaw.invert = function(x3, y3) {
  return [-y3, 2 * atan(exp(x3)) - halfPi];
};
function transverseMercator_default() {
  var m2 = mercatorProjection(transverseMercatorRaw), center2 = m2.center, rotate = m2.rotate;
  m2.center = function(_2) {
    return arguments.length ? center2([-_2[1], _2[0]]) : (_2 = center2(), [_2[1], -_2[0]]);
  };
  m2.rotate = function(_2) {
    return arguments.length ? rotate([_2[0], _2[1], _2.length > 2 ? _2[2] + 90 : 90]) : (_2 = rotate(), [_2[0], _2[1], _2[2] - 90]);
  };
  return rotate([0, 0, 90]).scale(159.155);
}

// ../../node_modules/d3-hierarchy/src/cluster.js
function defaultSeparation(a2, b2) {
  return a2.parent === b2.parent ? 1 : 2;
}
function meanX(children2) {
  return children2.reduce(meanXReduce, 0) / children2.length;
}
function meanXReduce(x3, c4) {
  return x3 + c4.x;
}
function maxY(children2) {
  return 1 + children2.reduce(maxYReduce, 0);
}
function maxYReduce(y3, c4) {
  return Math.max(y3, c4.y);
}
function leafLeft(node) {
  var children2;
  while (children2 = node.children)
    node = children2[0];
  return node;
}
function leafRight(node) {
  var children2;
  while (children2 = node.children)
    node = children2[children2.length - 1];
  return node;
}
function cluster_default() {
  var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
  function cluster2(root2) {
    var previousNode, x3 = 0;
    root2.eachAfter(function(node) {
      var children2 = node.children;
      if (children2) {
        node.x = meanX(children2);
        node.y = maxY(children2);
      } else {
        node.x = previousNode ? x3 += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left2 = leafLeft(root2), right2 = leafRight(root2), x06 = left2.x - separation(left2, right2) / 2, x12 = right2.x + separation(right2, left2) / 2;
    return root2.eachAfter(nodeSize ? function(node) {
      node.x = (node.x - root2.x) * dx;
      node.y = (root2.y - node.y) * dy;
    } : function(node) {
      node.x = (node.x - x06) / (x12 - x06) * dx;
      node.y = (1 - (root2.y ? node.y / root2.y : 1)) * dy;
    });
  }
  cluster2.separation = function(x3) {
    return arguments.length ? (separation = x3, cluster2) : separation;
  };
  cluster2.size = function(x3) {
    return arguments.length ? (nodeSize = false, dx = +x3[0], dy = +x3[1], cluster2) : nodeSize ? null : [dx, dy];
  };
  cluster2.nodeSize = function(x3) {
    return arguments.length ? (nodeSize = true, dx = +x3[0], dy = +x3[1], cluster2) : nodeSize ? [dx, dy] : null;
  };
  return cluster2;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/count.js
function count3(node) {
  var sum6 = 0, children2 = node.children, i2 = children2 && children2.length;
  if (!i2)
    sum6 = 1;
  else
    while (--i2 >= 0)
      sum6 += children2[i2].value;
  node.value = sum6;
}
function count_default() {
  return this.eachAfter(count3);
}

// ../../node_modules/d3-hierarchy/src/hierarchy/each.js
function each_default2(callback, that) {
  let index2 = -1;
  for (const node of this) {
    callback.call(that, node, ++index2, this);
  }
  return this;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js
function eachBefore_default(callback, that) {
  var node = this, nodes = [node], children2, i2, index2 = -1;
  while (node = nodes.pop()) {
    callback.call(that, node, ++index2, this);
    if (children2 = node.children) {
      for (i2 = children2.length - 1; i2 >= 0; --i2) {
        nodes.push(children2[i2]);
      }
    }
  }
  return this;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js
function eachAfter_default(callback, that) {
  var node = this, nodes = [node], next = [], children2, i2, n, index2 = -1;
  while (node = nodes.pop()) {
    next.push(node);
    if (children2 = node.children) {
      for (i2 = 0, n = children2.length; i2 < n; ++i2) {
        nodes.push(children2[i2]);
      }
    }
  }
  while (node = next.pop()) {
    callback.call(that, node, ++index2, this);
  }
  return this;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/find.js
function find_default(callback, that) {
  let index2 = -1;
  for (const node of this) {
    if (callback.call(that, node, ++index2, this)) {
      return node;
    }
  }
}

// ../../node_modules/d3-hierarchy/src/hierarchy/sum.js
function sum_default(value) {
  return this.eachAfter(function(node) {
    var sum6 = +value(node.data) || 0, children2 = node.children, i2 = children2 && children2.length;
    while (--i2 >= 0)
      sum6 += children2[i2].value;
    node.value = sum6;
  });
}

// ../../node_modules/d3-hierarchy/src/hierarchy/sort.js
function sort_default2(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}

// ../../node_modules/d3-hierarchy/src/hierarchy/path.js
function path_default2(end) {
  var start2 = this, ancestor = leastCommonAncestor(start2, end), nodes = [start2];
  while (start2 !== ancestor) {
    start2 = start2.parent;
    nodes.push(start2);
  }
  var k3 = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k3, 0, end);
    end = end.parent;
  }
  return nodes;
}
function leastCommonAncestor(a2, b2) {
  if (a2 === b2)
    return a2;
  var aNodes = a2.ancestors(), bNodes = b2.ancestors(), c4 = null;
  a2 = aNodes.pop();
  b2 = bNodes.pop();
  while (a2 === b2) {
    c4 = a2;
    a2 = aNodes.pop();
    b2 = bNodes.pop();
  }
  return c4;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/ancestors.js
function ancestors_default() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/descendants.js
function descendants_default() {
  return Array.from(this);
}

// ../../node_modules/d3-hierarchy/src/hierarchy/leaves.js
function leaves_default() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/links.js
function links_default() {
  var root2 = this, links = [];
  root2.each(function(node) {
    if (node !== root2) {
      links.push({ source: node.parent, target: node });
    }
  });
  return links;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/iterator.js
function* iterator_default2() {
  var node = this, current, next = [node], children2, i2, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      yield node;
      if (children2 = node.children) {
        for (i2 = 0, n = children2.length; i2 < n; ++i2) {
          next.push(children2[i2]);
        }
      }
    }
  } while (next.length);
}

// ../../node_modules/d3-hierarchy/src/hierarchy/index.js
function hierarchy(data, children2) {
  if (data instanceof Map) {
    data = [void 0, data];
    if (children2 === void 0)
      children2 = mapChildren;
  } else if (children2 === void 0) {
    children2 = objectChildren;
  }
  var root2 = new Node(data), node, nodes = [root2], child, childs, i2, n;
  while (node = nodes.pop()) {
    if ((childs = children2(node.data)) && (n = (childs = Array.from(childs)).length)) {
      node.children = childs;
      for (i2 = n - 1; i2 >= 0; --i2) {
        nodes.push(child = childs[i2] = new Node(childs[i2]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }
  return root2.eachBefore(computeHeight);
}
function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}
function objectChildren(d) {
  return d.children;
}
function mapChildren(d) {
  return Array.isArray(d) ? d[1] : null;
}
function copyData(node) {
  if (node.data.value !== void 0)
    node.value = node.data.value;
  node.data = node.data.data;
}
function computeHeight(node) {
  var height2 = 0;
  do
    node.height = height2;
  while ((node = node.parent) && node.height < ++height2);
}
function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}
Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: count_default,
  each: each_default2,
  eachAfter: eachAfter_default,
  eachBefore: eachBefore_default,
  find: find_default,
  sum: sum_default,
  sort: sort_default2,
  path: path_default2,
  ancestors: ancestors_default,
  descendants: descendants_default,
  leaves: leaves_default,
  links: links_default,
  copy: node_copy,
  [Symbol.iterator]: iterator_default2
};

// ../../node_modules/d3-hierarchy/src/accessors.js
function optional(f2) {
  return f2 == null ? null : required(f2);
}
function required(f2) {
  if (typeof f2 !== "function")
    throw new Error();
  return f2;
}

// ../../node_modules/d3-hierarchy/src/stratify.js
var preroot = { depth: -1 };
var ambiguous = {};
var imputed = {};
function defaultId(d) {
  return d.id;
}
function defaultParentId(d) {
  return d.parentId;
}
function stratify_default() {
  var id2 = defaultId, parentId = defaultParentId, path2;
  function stratify(data) {
    var nodes = Array.from(data), currentId = id2, currentParentId = parentId, n, d, i2, root2, parent, node, nodeId, nodeKey, nodeByKey = /* @__PURE__ */ new Map();
    if (path2 != null) {
      const I2 = nodes.map((d2, i3) => normalize(path2(d2, i3, data)));
      const P2 = I2.map(parentof);
      const S2 = new Set(I2).add("");
      for (const i3 of P2) {
        if (!S2.has(i3)) {
          S2.add(i3);
          I2.push(i3);
          P2.push(parentof(i3));
          nodes.push(imputed);
        }
      }
      currentId = (_2, i3) => I2[i3];
      currentParentId = (_2, i3) => P2[i3];
    }
    for (i2 = 0, n = nodes.length; i2 < n; ++i2) {
      d = nodes[i2], node = nodes[i2] = new Node(d);
      if ((nodeId = currentId(d, i2, data)) != null && (nodeId += "")) {
        nodeKey = node.id = nodeId;
        nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
      }
      if ((nodeId = currentParentId(d, i2, data)) != null && (nodeId += "")) {
        node.parent = nodeId;
      }
    }
    for (i2 = 0; i2 < n; ++i2) {
      node = nodes[i2];
      if (nodeId = node.parent) {
        parent = nodeByKey.get(nodeId);
        if (!parent)
          throw new Error("missing: " + nodeId);
        if (parent === ambiguous)
          throw new Error("ambiguous: " + nodeId);
        if (parent.children)
          parent.children.push(node);
        else
          parent.children = [node];
        node.parent = parent;
      } else {
        if (root2)
          throw new Error("multiple roots");
        root2 = node;
      }
    }
    if (!root2)
      throw new Error("no root");
    if (path2 != null) {
      while (root2.data === imputed && root2.children.length === 1) {
        root2 = root2.children[0], --n;
      }
      for (let i3 = nodes.length - 1; i3 >= 0; --i3) {
        node = nodes[i3];
        if (node.data !== imputed)
          break;
        node.data = null;
      }
    }
    root2.parent = preroot;
    root2.eachBefore(function(node2) {
      node2.depth = node2.parent.depth + 1;
      --n;
    }).eachBefore(computeHeight);
    root2.parent = null;
    if (n > 0)
      throw new Error("cycle");
    return root2;
  }
  stratify.id = function(x3) {
    return arguments.length ? (id2 = optional(x3), stratify) : id2;
  };
  stratify.parentId = function(x3) {
    return arguments.length ? (parentId = optional(x3), stratify) : parentId;
  };
  stratify.path = function(x3) {
    return arguments.length ? (path2 = optional(x3), stratify) : path2;
  };
  return stratify;
}
function normalize(path2) {
  path2 = `${path2}`;
  let i2 = path2.length;
  if (slash(path2, i2 - 1) && !slash(path2, i2 - 2))
    path2 = path2.slice(0, -1);
  return path2[0] === "/" ? path2 : `/${path2}`;
}
function parentof(path2) {
  let i2 = path2.length;
  if (i2 < 2)
    return "";
  while (--i2 > 1)
    if (slash(path2, i2))
      break;
  return path2.slice(0, i2);
}
function slash(path2, i2) {
  if (path2[i2] === "/") {
    let k3 = 0;
    while (i2 > 0 && path2[--i2] === "\\")
      ++k3;
    if ((k3 & 1) === 0)
      return true;
  }
  return false;
}

// ../../node_modules/d3-hierarchy/src/tree.js
function defaultSeparation2(a2, b2) {
  return a2.parent === b2.parent ? 1 : 2;
}
function nextLeft(v3) {
  var children2 = v3.children;
  return children2 ? children2[0] : v3.t;
}
function nextRight(v3) {
  var children2 = v3.children;
  return children2 ? children2[children2.length - 1] : v3.t;
}
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}
function executeShifts(v3) {
  var shift = 0, change = 0, children2 = v3.children, i2 = children2.length, w2;
  while (--i2 >= 0) {
    w2 = children2[i2];
    w2.z += shift;
    w2.m += shift;
    shift += w2.s + (change += w2.c);
  }
}
function nextAncestor(vim, v3, ancestor) {
  return vim.a.parent === v3.parent ? vim.a : ancestor;
}
function TreeNode(node, i2) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null;
  this.a = this;
  this.z = 0;
  this.m = 0;
  this.c = 0;
  this.s = 0;
  this.t = null;
  this.i = i2;
}
TreeNode.prototype = Object.create(Node.prototype);
function treeRoot(root2) {
  var tree2 = new TreeNode(root2, 0), node, nodes = [tree2], child, children2, i2, n;
  while (node = nodes.pop()) {
    if (children2 = node._.children) {
      node.children = new Array(n = children2.length);
      for (i2 = n - 1; i2 >= 0; --i2) {
        nodes.push(child = node.children[i2] = new TreeNode(children2[i2], i2));
        child.parent = node;
      }
    }
  }
  (tree2.parent = new TreeNode(null, 0)).children = [tree2];
  return tree2;
}
function tree_default() {
  var separation = defaultSeparation2, dx = 1, dy = 1, nodeSize = null;
  function tree2(root2) {
    var t = treeRoot(root2);
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);
    if (nodeSize)
      root2.eachBefore(sizeNode);
    else {
      var left2 = root2, right2 = root2, bottom2 = root2;
      root2.eachBefore(function(node) {
        if (node.x < left2.x)
          left2 = node;
        if (node.x > right2.x)
          right2 = node;
        if (node.depth > bottom2.depth)
          bottom2 = node;
      });
      var s2 = left2 === right2 ? 1 : separation(left2, right2) / 2, tx = s2 - left2.x, kx2 = dx / (right2.x + s2 + tx), ky2 = dy / (bottom2.depth || 1);
      root2.eachBefore(function(node) {
        node.x = (node.x + tx) * kx2;
        node.y = node.depth * ky2;
      });
    }
    return root2;
  }
  function firstWalk(v3) {
    var children2 = v3.children, siblings = v3.parent.children, w2 = v3.i ? siblings[v3.i - 1] : null;
    if (children2) {
      executeShifts(v3);
      var midpoint = (children2[0].z + children2[children2.length - 1].z) / 2;
      if (w2) {
        v3.z = w2.z + separation(v3._, w2._);
        v3.m = v3.z - midpoint;
      } else {
        v3.z = midpoint;
      }
    } else if (w2) {
      v3.z = w2.z + separation(v3._, w2._);
    }
    v3.parent.A = apportion(v3, w2, v3.parent.A || siblings[0]);
  }
  function secondWalk(v3) {
    v3._.x = v3.z + v3.parent.m;
    v3.m += v3.parent.m;
  }
  function apportion(v3, w2, ancestor) {
    if (w2) {
      var vip = v3, vop = v3, vim = w2, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v3;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v3, ancestor), v3, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v3;
      }
    }
    return ancestor;
  }
  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }
  tree2.separation = function(x3) {
    return arguments.length ? (separation = x3, tree2) : separation;
  };
  tree2.size = function(x3) {
    return arguments.length ? (nodeSize = false, dx = +x3[0], dy = +x3[1], tree2) : nodeSize ? null : [dx, dy];
  };
  tree2.nodeSize = function(x3) {
    return arguments.length ? (nodeSize = true, dx = +x3[0], dy = +x3[1], tree2) : nodeSize ? [dx, dy] : null;
  };
  return tree2;
}

// ../../node_modules/d3-random/src/lcg.js
var mul = 1664525;
var inc = 1013904223;
var eps = 1 / 4294967296;
function lcg(seed = Math.random()) {
  let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;
  return () => (state = mul * state + inc | 0, eps * (state >>> 0));
}

// ../../node_modules/d3-scale/src/init.js
function initRange(domain, range3) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range3).domain(domain);
      break;
  }
  return this;
}
function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;
    case 1: {
      if (typeof domain === "function")
        this.interpolator(domain);
      else
        this.range(domain);
      break;
    }
    default: {
      this.domain(domain);
      if (typeof interpolator === "function")
        this.interpolator(interpolator);
      else
        this.range(interpolator);
      break;
    }
  }
  return this;
}

// ../../node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index2 = new InternMap(), domain = [], range3 = [], unknown = implicit;
  function scale3(d) {
    let i2 = index2.get(d);
    if (i2 === void 0) {
      if (unknown !== implicit)
        return unknown;
      index2.set(d, i2 = domain.push(d) - 1);
    }
    return range3[i2 % range3.length];
  }
  scale3.domain = function(_2) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index2 = new InternMap();
    for (const value of _2) {
      if (index2.has(value))
        continue;
      index2.set(value, domain.push(value) - 1);
    }
    return scale3;
  };
  scale3.range = function(_2) {
    return arguments.length ? (range3 = Array.from(_2), scale3) : range3.slice();
  };
  scale3.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale3) : unknown;
  };
  scale3.copy = function() {
    return ordinal(domain, range3).unknown(unknown);
  };
  initRange.apply(scale3, arguments);
  return scale3;
}

// ../../node_modules/d3-scale/src/band.js
function band() {
  var scale3 = ordinal().unknown(void 0), domain = scale3.domain, ordinalRange2 = scale3.range, r0 = 0, r1 = 1, step, bandwidth, round3 = false, paddingInner = 0, paddingOuter = 0, align2 = 0.5;
  delete scale3.unknown;
  function rescale() {
    var n = domain().length, reverse3 = r1 < r0, start2 = reverse3 ? r1 : r0, stop = reverse3 ? r0 : r1;
    step = (stop - start2) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round3)
      step = Math.floor(step);
    start2 += (stop - start2 - step * (n - paddingInner)) * align2;
    bandwidth = step * (1 - paddingInner);
    if (round3)
      start2 = Math.round(start2), bandwidth = Math.round(bandwidth);
    var values2 = range(n).map(function(i2) {
      return start2 + step * i2;
    });
    return ordinalRange2(reverse3 ? values2.reverse() : values2);
  }
  scale3.domain = function(_2) {
    return arguments.length ? (domain(_2), rescale()) : domain();
  };
  scale3.range = function(_2) {
    return arguments.length ? ([r0, r1] = _2, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale3.rangeRound = function(_2) {
    return [r0, r1] = _2, r0 = +r0, r1 = +r1, round3 = true, rescale();
  };
  scale3.bandwidth = function() {
    return bandwidth;
  };
  scale3.step = function() {
    return step;
  };
  scale3.round = function(_2) {
    return arguments.length ? (round3 = !!_2, rescale()) : round3;
  };
  scale3.padding = function(_2) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_2), rescale()) : paddingInner;
  };
  scale3.paddingInner = function(_2) {
    return arguments.length ? (paddingInner = Math.min(1, _2), rescale()) : paddingInner;
  };
  scale3.paddingOuter = function(_2) {
    return arguments.length ? (paddingOuter = +_2, rescale()) : paddingOuter;
  };
  scale3.align = function(_2) {
    return arguments.length ? (align2 = Math.max(0, Math.min(1, _2)), rescale()) : align2;
  };
  scale3.copy = function() {
    return band(domain(), [r0, r1]).round(round3).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align2);
  };
  return initRange.apply(rescale(), arguments);
}
function pointish(scale3) {
  var copy4 = scale3.copy;
  scale3.padding = scale3.paddingOuter;
  delete scale3.paddingInner;
  delete scale3.paddingOuter;
  scale3.copy = function() {
    return pointish(copy4());
  };
  return scale3;
}
function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

// ../../node_modules/d3-scale/src/constant.js
function constants(x3) {
  return function() {
    return x3;
  };
}

// ../../node_modules/d3-scale/src/number.js
function number3(x3) {
  return +x3;
}

// ../../node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity4(x3) {
  return x3;
}
function normalize2(a2, b2) {
  return (b2 -= a2 = +a2) ? function(x3) {
    return (x3 - a2) / b2;
  } : constants(isNaN(b2) ? NaN : 0.5);
}
function clamper(a2, b2) {
  var t;
  if (a2 > b2)
    t = a2, a2 = b2, b2 = t;
  return function(x3) {
    return Math.max(a2, Math.min(b2, x3));
  };
}
function bimap(domain, range3, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range3[0], r1 = range3[1];
  if (d1 < d0)
    d0 = normalize2(d1, d0), r0 = interpolate(r1, r0);
  else
    d0 = normalize2(d0, d1), r0 = interpolate(r0, r1);
  return function(x3) {
    return r0(d0(x3));
  };
}
function polymap(domain, range3, interpolate) {
  var j2 = Math.min(domain.length, range3.length) - 1, d = new Array(j2), r = new Array(j2), i2 = -1;
  if (domain[j2] < domain[0]) {
    domain = domain.slice().reverse();
    range3 = range3.slice().reverse();
  }
  while (++i2 < j2) {
    d[i2] = normalize2(domain[i2], domain[i2 + 1]);
    r[i2] = interpolate(range3[i2], range3[i2 + 1]);
  }
  return function(x3) {
    var i3 = bisect_default(domain, x3, 1, j2) - 1;
    return r[i3](d[i3](x3));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer2() {
  var domain = unit, range3 = unit, interpolate = value_default, transform3, untransform, unknown, clamp = identity4, piecewise2, output, input2;
  function rescale() {
    var n = Math.min(domain.length, range3.length);
    if (clamp !== identity4)
      clamp = clamper(domain[0], domain[n - 1]);
    piecewise2 = n > 2 ? polymap : bimap;
    output = input2 = null;
    return scale3;
  }
  function scale3(x3) {
    return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise2(domain.map(transform3), range3, interpolate)))(transform3(clamp(x3)));
  }
  scale3.invert = function(y3) {
    return clamp(untransform((input2 || (input2 = piecewise2(range3, domain.map(transform3), number_default)))(y3)));
  };
  scale3.domain = function(_2) {
    return arguments.length ? (domain = Array.from(_2, number3), rescale()) : domain.slice();
  };
  scale3.range = function(_2) {
    return arguments.length ? (range3 = Array.from(_2), rescale()) : range3.slice();
  };
  scale3.rangeRound = function(_2) {
    return range3 = Array.from(_2), interpolate = round_default, rescale();
  };
  scale3.clamp = function(_2) {
    return arguments.length ? (clamp = _2 ? true : identity4, rescale()) : clamp !== identity4;
  };
  scale3.interpolate = function(_2) {
    return arguments.length ? (interpolate = _2, rescale()) : interpolate;
  };
  scale3.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale3) : unknown;
  };
  return function(t, u4) {
    transform3 = t, untransform = u4;
    return rescale();
  };
}
function continuous() {
  return transformer2()(identity4, identity4);
}

// ../../node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop, count4, specifier) {
  var step = tickStep(start2, stop, count4), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format2(specifier);
}

// ../../node_modules/d3-scale/src/linear.js
function linearish(scale3) {
  var domain = scale3.domain;
  scale3.ticks = function(count4) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count4 == null ? 10 : count4);
  };
  scale3.tickFormat = function(count4, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count4 == null ? 10 : count4, specifier);
  };
  scale3.nice = function(count4) {
    if (count4 == null)
      count4 = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start2 = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start2) {
      step = start2, start2 = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop, count4);
      if (step === prestep) {
        d[i0] = start2;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale3;
  };
  return scale3;
}
function linear2() {
  var scale3 = continuous();
  scale3.copy = function() {
    return copy(scale3, linear2());
  };
  initRange.apply(scale3, arguments);
  return linearish(scale3);
}

// ../../node_modules/d3-scale/src/identity.js
function identity5(domain) {
  var unknown;
  function scale3(x3) {
    return x3 == null || isNaN(x3 = +x3) ? unknown : x3;
  }
  scale3.invert = scale3;
  scale3.domain = scale3.range = function(_2) {
    return arguments.length ? (domain = Array.from(_2, number3), scale3) : domain.slice();
  };
  scale3.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale3) : unknown;
  };
  scale3.copy = function() {
    return identity5(domain).unknown(unknown);
  };
  domain = arguments.length ? Array.from(domain, number3) : [0, 1];
  return linearish(scale3);
}

// ../../node_modules/d3-scale/src/nice.js
function nice2(domain, interval2) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x06 = domain[i0], x12 = domain[i1], t;
  if (x12 < x06) {
    t = i0, i0 = i1, i1 = t;
    t = x06, x06 = x12, x12 = t;
  }
  domain[i0] = interval2.floor(x06);
  domain[i1] = interval2.ceil(x12);
  return domain;
}

// ../../node_modules/d3-scale/src/log.js
function transformLog(x3) {
  return Math.log(x3);
}
function transformExp(x3) {
  return Math.exp(x3);
}
function transformLogn(x3) {
  return -Math.log(-x3);
}
function transformExpn(x3) {
  return -Math.exp(-x3);
}
function pow10(x3) {
  return isFinite(x3) ? +("1e" + x3) : x3 < 0 ? 0 : x3;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : (x3) => Math.pow(base, x3);
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x3) => Math.log(x3) / base);
}
function reflect(f2) {
  return (x3, k3) => -f2(-x3, k3);
}
function loggish(transform3) {
  const scale3 = transform3(transformLog, transformExp);
  const domain = scale3.domain;
  let base = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform3(transformLogn, transformExpn);
    } else {
      transform3(transformLog, transformExp);
    }
    return scale3;
  }
  scale3.base = function(_2) {
    return arguments.length ? (base = +_2, rescale()) : base;
  };
  scale3.domain = function(_2) {
    return arguments.length ? (domain(_2), rescale()) : domain();
  };
  scale3.ticks = (count4) => {
    const d = domain();
    let u4 = d[0];
    let v3 = d[d.length - 1];
    const r = v3 < u4;
    if (r)
      [u4, v3] = [v3, u4];
    let i2 = logs(u4);
    let j2 = logs(v3);
    let k3;
    let t;
    const n = count4 == null ? 10 : +count4;
    let z2 = [];
    if (!(base % 1) && j2 - i2 < n) {
      i2 = Math.floor(i2), j2 = Math.ceil(j2);
      if (u4 > 0)
        for (; i2 <= j2; ++i2) {
          for (k3 = 1; k3 < base; ++k3) {
            t = i2 < 0 ? k3 / pows(-i2) : k3 * pows(i2);
            if (t < u4)
              continue;
            if (t > v3)
              break;
            z2.push(t);
          }
        }
      else
        for (; i2 <= j2; ++i2) {
          for (k3 = base - 1; k3 >= 1; --k3) {
            t = i2 > 0 ? k3 / pows(-i2) : k3 * pows(i2);
            if (t < u4)
              continue;
            if (t > v3)
              break;
            z2.push(t);
          }
        }
      if (z2.length * 2 < n)
        z2 = ticks(u4, v3, n);
    } else {
      z2 = ticks(i2, j2, Math.min(j2 - i2, n)).map(pows);
    }
    return r ? z2.reverse() : z2;
  };
  scale3.tickFormat = (count4, specifier) => {
    if (count4 == null)
      count4 = 10;
    if (specifier == null)
      specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null)
        specifier.trim = true;
      specifier = format2(specifier);
    }
    if (count4 === Infinity)
      return specifier;
    const k3 = Math.max(1, base * count4 / scale3.ticks().length);
    return (d) => {
      let i2 = d / pows(Math.round(logs(d)));
      if (i2 * base < base - 0.5)
        i2 *= base;
      return i2 <= k3 ? specifier(d) : "";
    };
  };
  scale3.nice = () => {
    return domain(nice2(domain(), {
      floor: (x3) => pows(Math.floor(logs(x3))),
      ceil: (x3) => pows(Math.ceil(logs(x3)))
    }));
  };
  return scale3;
}
function log2() {
  const scale3 = loggish(transformer2()).domain([1, 10]);
  scale3.copy = () => copy(scale3, log2()).base(scale3.base());
  initRange.apply(scale3, arguments);
  return scale3;
}

// ../../node_modules/d3-scale/src/symlog.js
function transformSymlog(c4) {
  return function(x3) {
    return Math.sign(x3) * Math.log1p(Math.abs(x3 / c4));
  };
}
function transformSymexp(c4) {
  return function(x3) {
    return Math.sign(x3) * Math.expm1(Math.abs(x3)) * c4;
  };
}
function symlogish(transform3) {
  var c4 = 1, scale3 = transform3(transformSymlog(c4), transformSymexp(c4));
  scale3.constant = function(_2) {
    return arguments.length ? transform3(transformSymlog(c4 = +_2), transformSymexp(c4)) : c4;
  };
  return linearish(scale3);
}
function symlog() {
  var scale3 = symlogish(transformer2());
  scale3.copy = function() {
    return copy(scale3, symlog()).constant(scale3.constant());
  };
  return initRange.apply(scale3, arguments);
}

// ../../node_modules/d3-scale/src/pow.js
function transformPow(exponent) {
  return function(x3) {
    return x3 < 0 ? -Math.pow(-x3, exponent) : Math.pow(x3, exponent);
  };
}
function transformSqrt(x3) {
  return x3 < 0 ? -Math.sqrt(-x3) : Math.sqrt(x3);
}
function transformSquare(x3) {
  return x3 < 0 ? -x3 * x3 : x3 * x3;
}
function powish(transform3) {
  var scale3 = transform3(identity4, identity4), exponent = 1;
  function rescale() {
    return exponent === 1 ? transform3(identity4, identity4) : exponent === 0.5 ? transform3(transformSqrt, transformSquare) : transform3(transformPow(exponent), transformPow(1 / exponent));
  }
  scale3.exponent = function(_2) {
    return arguments.length ? (exponent = +_2, rescale()) : exponent;
  };
  return linearish(scale3);
}
function pow3() {
  var scale3 = powish(transformer2());
  scale3.copy = function() {
    return copy(scale3, pow3()).exponent(scale3.exponent());
  };
  initRange.apply(scale3, arguments);
  return scale3;
}

// ../../node_modules/d3-scale/src/quantile.js
function quantile3() {
  var domain = [], range3 = [], thresholds = [], unknown;
  function rescale() {
    var i2 = 0, n = Math.max(1, range3.length);
    thresholds = new Array(n - 1);
    while (++i2 < n)
      thresholds[i2 - 1] = quantileSorted(domain, i2 / n);
    return scale3;
  }
  function scale3(x3) {
    return x3 == null || isNaN(x3 = +x3) ? unknown : range3[bisect_default(thresholds, x3)];
  }
  scale3.invertExtent = function(y3) {
    var i2 = range3.indexOf(y3);
    return i2 < 0 ? [NaN, NaN] : [
      i2 > 0 ? thresholds[i2 - 1] : domain[0],
      i2 < thresholds.length ? thresholds[i2] : domain[domain.length - 1]
    ];
  };
  scale3.domain = function(_2) {
    if (!arguments.length)
      return domain.slice();
    domain = [];
    for (let d of _2)
      if (d != null && !isNaN(d = +d))
        domain.push(d);
    domain.sort(ascending);
    return rescale();
  };
  scale3.range = function(_2) {
    return arguments.length ? (range3 = Array.from(_2), rescale()) : range3.slice();
  };
  scale3.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale3) : unknown;
  };
  scale3.quantiles = function() {
    return thresholds.slice();
  };
  scale3.copy = function() {
    return quantile3().domain(domain).range(range3).unknown(unknown);
  };
  return initRange.apply(scale3, arguments);
}

// ../../node_modules/d3-scale/src/threshold.js
function threshold() {
  var domain = [0.5], range3 = [0, 1], unknown, n = 1;
  function scale3(x3) {
    return x3 != null && x3 <= x3 ? range3[bisect_default(domain, x3, 0, n)] : unknown;
  }
  scale3.domain = function(_2) {
    return arguments.length ? (domain = Array.from(_2), n = Math.min(domain.length, range3.length - 1), scale3) : domain.slice();
  };
  scale3.range = function(_2) {
    return arguments.length ? (range3 = Array.from(_2), n = Math.min(domain.length, range3.length - 1), scale3) : range3.slice();
  };
  scale3.invertExtent = function(y3) {
    var i2 = range3.indexOf(y3);
    return [domain[i2 - 1], domain[i2]];
  };
  scale3.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale3) : unknown;
  };
  scale3.copy = function() {
    return threshold().domain(domain).range(range3).unknown(unknown);
  };
  return initRange.apply(scale3, arguments);
}

// ../../node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function timeInterval(floori, offseti, count4, field2) {
  function interval2(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval2.floor = (date2) => {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval2.ceil = (date2) => {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval2.round = (date2) => {
    const d0 = interval2(date2), d1 = interval2.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval2.offset = (date2, step) => {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval2.range = (start2, stop, step) => {
    const range3 = [];
    start2 = interval2.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop) || !(step > 0))
      return range3;
    let previous;
    do
      range3.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop);
    return range3;
  };
  interval2.filter = (test) => {
    return timeInterval((date2) => {
      if (date2 >= date2)
        while (floori(date2), !test(date2))
          date2.setTime(date2 - 1);
    }, (date2, step) => {
      if (date2 >= date2) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date2, -1), !test(date2)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date2, 1), !test(date2)) {
            }
          }
      }
    });
  };
  if (count4) {
    interval2.count = (start2, end) => {
      t02.setTime(+start2), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count4(t02, t12));
    };
    interval2.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval2 : interval2.filter(field2 ? (d) => field2(d) % step === 0 : (d) => interval2.count(0, d) % step === 0);
    };
  }
  return interval2;
}

// ../../node_modules/d3-time/src/millisecond.js
var millisecond = timeInterval(() => {
}, (date2, step) => {
  date2.setTime(+date2 + step);
}, (start2, end) => {
  return end - start2;
});
millisecond.every = (k3) => {
  k3 = Math.floor(k3);
  if (!isFinite(k3) || !(k3 > 0))
    return null;
  if (!(k3 > 1))
    return millisecond;
  return timeInterval((date2) => {
    date2.setTime(Math.floor(date2 / k3) * k3);
  }, (date2, step) => {
    date2.setTime(+date2 + step * k3);
  }, (start2, end) => {
    return (end - start2) / k3;
  });
};
var milliseconds = millisecond.range;

// ../../node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// ../../node_modules/d3-time/src/second.js
var second = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds());
}, (date2, step) => {
  date2.setTime(+date2 + step * durationSecond);
}, (start2, end) => {
  return (end - start2) / durationSecond;
}, (date2) => {
  return date2.getUTCSeconds();
});
var seconds = second.range;

// ../../node_modules/d3-time/src/minute.js
var timeMinute = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationMinute);
}, (start2, end) => {
  return (end - start2) / durationMinute;
}, (date2) => {
  return date2.getMinutes();
});
var timeMinutes = timeMinute.range;
var utcMinute = timeInterval((date2) => {
  date2.setUTCSeconds(0, 0);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationMinute);
}, (start2, end) => {
  return (end - start2) / durationMinute;
}, (date2) => {
  return date2.getUTCMinutes();
});
var utcMinutes = utcMinute.range;

// ../../node_modules/d3-time/src/hour.js
var timeHour = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationHour);
}, (start2, end) => {
  return (end - start2) / durationHour;
}, (date2) => {
  return date2.getHours();
});
var timeHours = timeHour.range;
var utcHour = timeInterval((date2) => {
  date2.setUTCMinutes(0, 0, 0);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationHour);
}, (start2, end) => {
  return (end - start2) / durationHour;
}, (date2) => {
  return date2.getUTCHours();
});
var utcHours = utcHour.range;

// ../../node_modules/d3-time/src/day.js
var timeDay = timeInterval(
  (date2) => date2.setHours(0, 0, 0, 0),
  (date2, step) => date2.setDate(date2.getDate() + step),
  (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay,
  (date2) => date2.getDate() - 1
);
var timeDays = timeDay.range;
var utcDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCDate(date2.getUTCDate() + step);
}, (start2, end) => {
  return (end - start2) / durationDay;
}, (date2) => {
  return date2.getUTCDate() - 1;
});
var utcDays = utcDay.range;
var unixDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCDate(date2.getUTCDate() + step);
}, (start2, end) => {
  return (end - start2) / durationDay;
}, (date2) => {
  return Math.floor(date2 / durationDay);
});
var unixDays = unixDay.range;

// ../../node_modules/d3-time/src/week.js
function timeWeekday(i2) {
  return timeInterval((date2) => {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i2) % 7);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setDate(date2.getDate() + step * 7);
  }, (start2, end) => {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var timeSunday = timeWeekday(0);
var timeMonday = timeWeekday(1);
var timeTuesday = timeWeekday(2);
var timeWednesday = timeWeekday(3);
var timeThursday = timeWeekday(4);
var timeFriday = timeWeekday(5);
var timeSaturday = timeWeekday(6);
var timeSundays = timeSunday.range;
var timeMondays = timeMonday.range;
var timeTuesdays = timeTuesday.range;
var timeWednesdays = timeWednesday.range;
var timeThursdays = timeThursday.range;
var timeFridays = timeFriday.range;
var timeSaturdays = timeSaturday.range;
function utcWeekday(i2) {
  return timeInterval((date2) => {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i2) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, (start2, end) => {
    return (end - start2) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// ../../node_modules/d3-time/src/month.js
var timeMonth = timeInterval((date2) => {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setMonth(date2.getMonth() + step);
}, (start2, end) => {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, (date2) => {
  return date2.getMonth();
});
var timeMonths = timeMonth.range;
var utcMonth = timeInterval((date2) => {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCMonth(date2.getUTCMonth() + step);
}, (start2, end) => {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, (date2) => {
  return date2.getUTCMonth();
});
var utcMonths = utcMonth.range;

// ../../node_modules/d3-time/src/year.js
var timeYear = timeInterval((date2) => {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setFullYear(date2.getFullYear() + step);
}, (start2, end) => {
  return end.getFullYear() - start2.getFullYear();
}, (date2) => {
  return date2.getFullYear();
});
timeYear.every = (k3) => {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : timeInterval((date2) => {
    date2.setFullYear(Math.floor(date2.getFullYear() / k3) * k3);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setFullYear(date2.getFullYear() + step * k3);
  });
};
var timeYears = timeYear.range;
var utcYear = timeInterval((date2) => {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCFullYear(date2.getUTCFullYear() + step);
}, (start2, end) => {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, (date2) => {
  return date2.getUTCFullYear();
});
utcYear.every = (k3) => {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : timeInterval((date2) => {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k3) * k3);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCFullYear(date2.getUTCFullYear() + step * k3);
  });
};
var utcYears = utcYear.range;

// ../../node_modules/d3-time/src/ticks.js
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start2, stop, count4) {
    const reverse3 = stop < start2;
    if (reverse3)
      [start2, stop] = [stop, start2];
    const interval2 = count4 && typeof count4.range === "function" ? count4 : tickInterval(start2, stop, count4);
    const ticks3 = interval2 ? interval2.range(start2, +stop + 1) : [];
    return reverse3 ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start2, stop, count4) {
    const target = Math.abs(stop - start2) / count4;
    const i2 = bisector(([, , step2]) => step2).right(tickIntervals, target);
    if (i2 === tickIntervals.length)
      return year.every(tickStep(start2 / durationYear, stop / durationYear, count4));
    if (i2 === 0)
      return millisecond.every(Math.max(tickStep(start2, stop, count4), 1));
    const [t, step] = tickIntervals[target / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target ? i2 - 1 : i2];
    return t.every(step);
  }
  return [ticks2, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);

// ../../node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date2.setFullYear(d.y);
    return date2;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date2.setUTCFullYear(d.y);
    return date2;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y3, m2, d) {
  return { y: y3, m: m2, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday2,
    "b": formatShortMonth,
    "B": formatMonth2,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear2,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string2 = [], i2 = -1, j2 = 0, n = specifier.length, c4, pad3, format3;
      if (!(date2 instanceof Date))
        date2 = /* @__PURE__ */ new Date(+date2);
      while (++i2 < n) {
        if (specifier.charCodeAt(i2) === 37) {
          string2.push(specifier.slice(j2, i2));
          if ((pad3 = pads[c4 = specifier.charAt(++i2)]) != null)
            c4 = specifier.charAt(++i2);
          else
            pad3 = c4 === "e" ? " " : "0";
          if (format3 = formats2[c4])
            c4 = format3(date2, pad3);
          string2.push(c4);
          j2 = i2 + 1;
        }
      }
      string2.push(specifier.slice(j2, i2));
      return string2.join("");
    };
  }
  function newParse(specifier, Z3) {
    return function(string2) {
      var d = newDate(1900, void 0, 1), i2 = parseSpecifier(d, specifier, string2 += "", 0), week, day;
      if (i2 != string2.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z3 && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string2, j2) {
    var i2 = 0, n = specifier.length, m2 = string2.length, c4, parse2;
    while (i2 < n) {
      if (j2 >= m2)
        return -1;
      c4 = specifier.charCodeAt(i2++);
      if (c4 === 37) {
        c4 = specifier.charAt(i2++);
        parse2 = parses[c4 in pads ? specifier.charAt(i2++) : c4];
        if (!parse2 || (j2 = parse2(d, string2, j2)) < 0)
          return -1;
      } else if (c4 != string2.charCodeAt(j2++)) {
        return -1;
      }
    }
    return j2;
  }
  function parsePeriod(d, string2, i2) {
    var n = periodRe.exec(string2.slice(i2));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseShortWeekday(d, string2, i2) {
    var n = shortWeekdayRe.exec(string2.slice(i2));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseWeekday(d, string2, i2) {
    var n = weekdayRe.exec(string2.slice(i2));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseShortMonth(d, string2, i2) {
    var n = shortMonthRe.exec(string2.slice(i2));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseMonth(d, string2, i2) {
    var n = monthRe.exec(string2.slice(i2));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string2, i2) {
    return parseSpecifier(d, locale_dateTime, string2, i2);
  }
  function parseLocaleDate(d, string2, i2) {
    return parseSpecifier(d, locale_date, string2, i2);
  }
  function parseLocaleTime(d, string2, i2) {
    return parseSpecifier(d, locale_time, string2, i2);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday2(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth2(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f2 = newFormat(specifier += "", formats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f2 = newFormat(specifier += "", utcFormats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad2(value, fill, width2) {
  var sign3 = value < 0 ? "-" : "", string2 = (sign3 ? -value : value) + "", length4 = string2.length;
  return sign3 + (length4 < width2 ? new Array(width2 - length4 + 1).join(fill) + string2 : string2);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name2, i2) => [name2.toLowerCase(), i2]));
}
function parseWeekdayNumberSunday(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 1));
  return n ? (d.w = +n[0], i2 + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 1));
  return n ? (d.u = +n[0], i2 + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d.U = +n[0], i2 + n[0].length) : -1;
}
function parseWeekNumberISO(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d.V = +n[0], i2 + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d.W = +n[0], i2 + n[0].length) : -1;
}
function parseFullYear(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 4));
  return n ? (d.y = +n[0], i2 + n[0].length) : -1;
}
function parseYear(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i2 + n[0].length) : -1;
}
function parseZone(d, string2, i2) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string2.slice(i2, i2 + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i2 + n[0].length) : -1;
}
function parseQuarter(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 1));
  return n ? (d.q = n[0] * 3 - 3, i2 + n[0].length) : -1;
}
function parseMonthNumber(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d.m = n[0] - 1, i2 + n[0].length) : -1;
}
function parseDayOfMonth(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d.d = +n[0], i2 + n[0].length) : -1;
}
function parseDayOfYear(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 3));
  return n ? (d.m = 0, d.d = +n[0], i2 + n[0].length) : -1;
}
function parseHour24(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d.H = +n[0], i2 + n[0].length) : -1;
}
function parseMinutes(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d.M = +n[0], i2 + n[0].length) : -1;
}
function parseSeconds(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d.S = +n[0], i2 + n[0].length) : -1;
}
function parseMilliseconds(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 3));
  return n ? (d.L = +n[0], i2 + n[0].length) : -1;
}
function parseMicroseconds(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 6));
  return n ? (d.L = Math.floor(n[0] / 1e3), i2 + n[0].length) : -1;
}
function parseLiteralPercent(d, string2, i2) {
  var n = percentRe.exec(string2.slice(i2, i2 + 1));
  return n ? i2 + n[0].length : -1;
}
function parseUnixTimestamp(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2));
  return n ? (d.Q = +n[0], i2 + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string2, i2) {
  var n = numberRe.exec(string2.slice(i2));
  return n ? (d.s = +n[0], i2 + n[0].length) : -1;
}
function formatDayOfMonth(d, p2) {
  return pad2(d.getDate(), p2, 2);
}
function formatHour24(d, p2) {
  return pad2(d.getHours(), p2, 2);
}
function formatHour12(d, p2) {
  return pad2(d.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear(d, p2) {
  return pad2(1 + timeDay.count(timeYear(d), d), p2, 3);
}
function formatMilliseconds(d, p2) {
  return pad2(d.getMilliseconds(), p2, 3);
}
function formatMicroseconds(d, p2) {
  return formatMilliseconds(d, p2) + "000";
}
function formatMonthNumber(d, p2) {
  return pad2(d.getMonth() + 1, p2, 2);
}
function formatMinutes(d, p2) {
  return pad2(d.getMinutes(), p2, 2);
}
function formatSeconds(d, p2) {
  return pad2(d.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d, p2) {
  return pad2(timeSunday.count(timeYear(d) - 1, d), p2, 2);
}
function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
}
function formatWeekNumberISO(d, p2) {
  d = dISO(d);
  return pad2(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p2) {
  return pad2(timeMonday.count(timeYear(d) - 1, d), p2, 2);
}
function formatYear2(d, p2) {
  return pad2(d.getFullYear() % 100, p2, 2);
}
function formatYearISO(d, p2) {
  d = dISO(d);
  return pad2(d.getFullYear() % 100, p2, 2);
}
function formatFullYear(d, p2) {
  return pad2(d.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO(d, p2) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
  return pad2(d.getFullYear() % 1e4, p2, 4);
}
function formatZone(d) {
  var z2 = d.getTimezoneOffset();
  return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad2(z2 / 60 | 0, "0", 2) + pad2(z2 % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p2) {
  return pad2(d.getUTCDate(), p2, 2);
}
function formatUTCHour24(d, p2) {
  return pad2(d.getUTCHours(), p2, 2);
}
function formatUTCHour12(d, p2) {
  return pad2(d.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear(d, p2) {
  return pad2(1 + utcDay.count(utcYear(d), d), p2, 3);
}
function formatUTCMilliseconds(d, p2) {
  return pad2(d.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds(d, p2) {
  return formatUTCMilliseconds(d, p2) + "000";
}
function formatUTCMonthNumber(d, p2) {
  return pad2(d.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes(d, p2) {
  return pad2(d.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds(d, p2) {
  return pad2(d.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p2) {
  return pad2(utcSunday.count(utcYear(d) - 1, d), p2, 2);
}
function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p2) {
  d = UTCdISO(d);
  return pad2(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p2) {
  return pad2(utcMonday.count(utcYear(d) - 1, d), p2, 2);
}
function formatUTCYear(d, p2) {
  return pad2(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO(d, p2) {
  d = UTCdISO(d);
  return pad2(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear(d, p2) {
  return pad2(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO(d, p2) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad2(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}

// ../../node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// ../../node_modules/d3-scale/src/time.js
function date(t) {
  return new Date(t);
}
function number4(t) {
  return t instanceof Date ? +t : +/* @__PURE__ */ new Date(+t);
}
function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second3, format3) {
  var scale3 = continuous(), invert2 = scale3.invert, domain = scale3.domain;
  var formatMillisecond = format3(".%L"), formatSecond = format3(":%S"), formatMinute = format3("%I:%M"), formatHour = format3("%I %p"), formatDay = format3("%a %d"), formatWeek = format3("%b %d"), formatMonth2 = format3("%B"), formatYear3 = format3("%Y");
  function tickFormat2(date2) {
    return (second3(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth2 : formatYear3)(date2);
  }
  scale3.invert = function(y3) {
    return new Date(invert2(y3));
  };
  scale3.domain = function(_2) {
    return arguments.length ? domain(Array.from(_2, number4)) : domain().map(date);
  };
  scale3.ticks = function(interval2) {
    var d = domain();
    return ticks2(d[0], d[d.length - 1], interval2 == null ? 10 : interval2);
  };
  scale3.tickFormat = function(count4, specifier) {
    return specifier == null ? tickFormat2 : format3(specifier);
  };
  scale3.nice = function(interval2) {
    var d = domain();
    if (!interval2 || typeof interval2.range !== "function")
      interval2 = tickInterval(d[0], d[d.length - 1], interval2 == null ? 10 : interval2);
    return interval2 ? domain(nice2(d, interval2)) : scale3;
  };
  scale3.copy = function() {
    return copy(scale3, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second3, format3));
  };
  return scale3;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}

// ../../node_modules/d3-scale/src/utcTime.js
function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
}

// ../../node_modules/d3-scale/src/sequential.js
function copy2(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}

// ../../node_modules/d3-scale/src/diverging.js
function transformer3() {
  var x06 = 0, x12 = 0.5, x22 = 1, s2 = 1, t03, t13, t22, k10, k21, interpolator = identity4, transform3, clamp = false, unknown;
  function scale3(x3) {
    return isNaN(x3 = +x3) ? unknown : (x3 = 0.5 + ((x3 = +transform3(x3)) - t13) * (s2 * x3 < s2 * t13 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x3)) : x3));
  }
  scale3.domain = function(_2) {
    return arguments.length ? ([x06, x12, x22] = _2, t03 = transform3(x06 = +x06), t13 = transform3(x12 = +x12), t22 = transform3(x22 = +x22), k10 = t03 === t13 ? 0 : 0.5 / (t13 - t03), k21 = t13 === t22 ? 0 : 0.5 / (t22 - t13), s2 = t13 < t03 ? -1 : 1, scale3) : [x06, x12, x22];
  };
  scale3.clamp = function(_2) {
    return arguments.length ? (clamp = !!_2, scale3) : clamp;
  };
  scale3.interpolator = function(_2) {
    return arguments.length ? (interpolator = _2, scale3) : interpolator;
  };
  function range3(interpolate) {
    return function(_2) {
      var r0, r1, r2;
      return arguments.length ? ([r0, r1, r2] = _2, interpolator = piecewise(interpolate, [r0, r1, r2]), scale3) : [interpolator(0), interpolator(0.5), interpolator(1)];
    };
  }
  scale3.range = range3(value_default);
  scale3.rangeRound = range3(round_default);
  scale3.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale3) : unknown;
  };
  return function(t) {
    transform3 = t, t03 = t(x06), t13 = t(x12), t22 = t(x22), k10 = t03 === t13 ? 0 : 0.5 / (t13 - t03), k21 = t13 === t22 ? 0 : 0.5 / (t22 - t13), s2 = t13 < t03 ? -1 : 1;
    return scale3;
  };
}
function diverging() {
  var scale3 = linearish(transformer3()(identity4));
  scale3.copy = function() {
    return copy2(scale3, diverging());
  };
  return initInterpolator.apply(scale3, arguments);
}
function divergingLog() {
  var scale3 = loggish(transformer3()).domain([0.1, 1, 10]);
  scale3.copy = function() {
    return copy2(scale3, divergingLog()).base(scale3.base());
  };
  return initInterpolator.apply(scale3, arguments);
}
function divergingSymlog() {
  var scale3 = symlogish(transformer3());
  scale3.copy = function() {
    return copy2(scale3, divergingSymlog()).constant(scale3.constant());
  };
  return initInterpolator.apply(scale3, arguments);
}
function divergingPow() {
  var scale3 = powish(transformer3());
  scale3.copy = function() {
    return copy2(scale3, divergingPow()).exponent(scale3.exponent());
  };
  return initInterpolator.apply(scale3, arguments);
}

// ../../node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n = specifier.length / 6 | 0, colors = new Array(n), i2 = 0;
  while (i2 < n)
    colors[i2] = "#" + specifier.slice(i2 * 6, ++i2 * 6);
  return colors;
}

// ../../node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// ../../node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

// ../../node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

// ../../node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

// ../../node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

// ../../node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

// ../../node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

// ../../node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

// ../../node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

// ../../node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

// ../../node_modules/d3-scale-chromatic/src/ramp.js
var ramp_default = (scheme28) => rgbBasis(scheme28[scheme28.length - 1]);

// ../../node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors_default);
var BrBG_default = ramp_default(scheme);

// ../../node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors_default);
var PRGn_default = ramp_default(scheme2);

// ../../node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors_default);
var PiYG_default = ramp_default(scheme3);

// ../../node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors_default);
var PuOr_default = ramp_default(scheme4);

// ../../node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors_default);
var RdBu_default = ramp_default(scheme5);

// ../../node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors_default);
var RdGy_default = ramp_default(scheme6);

// ../../node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors_default);
var RdYlBu_default = ramp_default(scheme7);

// ../../node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors_default);
var RdYlGn_default = ramp_default(scheme8);

// ../../node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors_default);
var Spectral_default = ramp_default(scheme9);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors_default);
var BuGn_default = ramp_default(scheme10);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11 = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors_default);
var BuPu_default = ramp_default(scheme11);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12 = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors_default);
var GnBu_default = ramp_default(scheme12);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13 = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors_default);
var OrRd_default = ramp_default(scheme13);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14 = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors_default);
var PuBuGn_default = ramp_default(scheme14);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15 = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors_default);
var PuBu_default = ramp_default(scheme15);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16 = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors_default);
var PuRd_default = ramp_default(scheme16);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17 = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors_default);
var RdPu_default = ramp_default(scheme17);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18 = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors_default);
var YlGnBu_default = ramp_default(scheme18);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19 = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors_default);
var YlGn_default = ramp_default(scheme19);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20 = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors_default);
var YlOrBr_default = ramp_default(scheme20);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21 = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors_default);
var YlOrRd_default = ramp_default(scheme21);

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22 = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors_default);
var Blues_default = ramp_default(scheme22);

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23 = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors_default);
var Greens_default = ramp_default(scheme23);

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24 = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors_default);
var Greys_default = ramp_default(scheme24);

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25 = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors_default);
var Purples_default = ramp_default(scheme25);

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26 = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors_default);
var Reds_default = ramp_default(scheme26);

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27 = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors_default);
var Oranges_default = ramp_default(scheme27);

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js
function cividis_default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
}

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default2 = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var c = cubehelix();
function rainbow_default(t) {
  if (t < 0 || t > 1)
    t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c.h = 360 * t - 100;
  c.s = 1.5 - 1.5 * ts;
  c.l = 0.8 - 0.9 * ts;
  return c + "";
}

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
var c2 = rgb();
var pi_1_3 = Math.PI / 3;
var pi_2_3 = Math.PI * 2 / 3;
function sinebow_default(t) {
  var x3;
  t = (0.5 - t) * Math.PI;
  c2.r = 255 * (x3 = Math.sin(t)) * x3;
  c2.g = 255 * (x3 = Math.sin(t + pi_1_3)) * x3;
  c2.b = 255 * (x3 = Math.sin(t + pi_2_3)) * x3;
  return c2 + "";
}

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
function turbo_default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
}

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range3) {
  var n = range3.length;
  return function(t) {
    return range3[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// ../../node_modules/d3-shape/src/constant.js
function constant_default5(x3) {
  return function constant2() {
    return x3;
  };
}

// ../../node_modules/d3-shape/src/math.js
var cos2 = Math.cos;
var min4 = Math.min;
var sin2 = Math.sin;
var sqrt3 = Math.sqrt;
var epsilon7 = 1e-12;
var pi3 = Math.PI;
var halfPi2 = pi3 / 2;
var tau4 = 2 * pi3;

// ../../node_modules/d3-shape/src/path.js
function withPath(shape) {
  let digits = 3;
  shape.digits = function(_2) {
    if (!arguments.length)
      return digits;
    if (_2 == null) {
      digits = null;
    } else {
      const d = Math.floor(_2);
      if (!(d >= 0))
        throw new RangeError(`invalid digits: ${_2}`);
      digits = d;
    }
    return shape;
  };
  return () => new Path(digits);
}

// ../../node_modules/d3-shape/src/array.js
var slice2 = Array.prototype.slice;
function array_default(x3) {
  return typeof x3 === "object" && "length" in x3 ? x3 : Array.from(x3);
}

// ../../node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
      default:
        this._context.lineTo(x3, y3);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// ../../node_modules/d3-shape/src/point.js
function x2(p2) {
  return p2[0];
}
function y2(p2) {
  return p2[1];
}

// ../../node_modules/d3-shape/src/line.js
function line_default2(x3, y3) {
  var defined2 = constant_default5(true), context = null, curve = linear_default, output = null, path2 = withPath(line3);
  x3 = typeof x3 === "function" ? x3 : x3 === void 0 ? x2 : constant_default5(x3);
  y3 = typeof y3 === "function" ? y3 : y3 === void 0 ? y2 : constant_default5(y3);
  function line3(data) {
    var i2, n = (data = array_default(data)).length, d, defined0 = false, buffer;
    if (context == null)
      output = curve(buffer = path2());
    for (i2 = 0; i2 <= n; ++i2) {
      if (!(i2 < n && defined2(d = data[i2], i2, data)) === defined0) {
        if (defined0 = !defined0)
          output.lineStart();
        else
          output.lineEnd();
      }
      if (defined0)
        output.point(+x3(d, i2, data), +y3(d, i2, data));
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  line3.x = function(_2) {
    return arguments.length ? (x3 = typeof _2 === "function" ? _2 : constant_default5(+_2), line3) : x3;
  };
  line3.y = function(_2) {
    return arguments.length ? (y3 = typeof _2 === "function" ? _2 : constant_default5(+_2), line3) : y3;
  };
  line3.defined = function(_2) {
    return arguments.length ? (defined2 = typeof _2 === "function" ? _2 : constant_default5(!!_2), line3) : defined2;
  };
  line3.curve = function(_2) {
    return arguments.length ? (curve = _2, context != null && (output = curve(context)), line3) : curve;
  };
  line3.context = function(_2) {
    return arguments.length ? (_2 == null ? context = output = null : output = curve(context = _2), line3) : context;
  };
  return line3;
}

// ../../node_modules/d3-shape/src/area.js
function area_default3(x06, y06, y12) {
  var x12 = null, defined2 = constant_default5(true), context = null, curve = linear_default, output = null, path2 = withPath(area3);
  x06 = typeof x06 === "function" ? x06 : x06 === void 0 ? x2 : constant_default5(+x06);
  y06 = typeof y06 === "function" ? y06 : y06 === void 0 ? constant_default5(0) : constant_default5(+y06);
  y12 = typeof y12 === "function" ? y12 : y12 === void 0 ? y2 : constant_default5(+y12);
  function area3(data) {
    var i2, j2, k3, n = (data = array_default(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
    if (context == null)
      output = curve(buffer = path2());
    for (i2 = 0; i2 <= n; ++i2) {
      if (!(i2 < n && defined2(d = data[i2], i2, data)) === defined0) {
        if (defined0 = !defined0) {
          j2 = i2;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k3 = i2 - 1; k3 >= j2; --k3) {
            output.point(x0z[k3], y0z[k3]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i2] = +x06(d, i2, data), y0z[i2] = +y06(d, i2, data);
        output.point(x12 ? +x12(d, i2, data) : x0z[i2], y12 ? +y12(d, i2, data) : y0z[i2]);
      }
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default2().defined(defined2).curve(curve).context(context);
  }
  area3.x = function(_2) {
    return arguments.length ? (x06 = typeof _2 === "function" ? _2 : constant_default5(+_2), x12 = null, area3) : x06;
  };
  area3.x0 = function(_2) {
    return arguments.length ? (x06 = typeof _2 === "function" ? _2 : constant_default5(+_2), area3) : x06;
  };
  area3.x1 = function(_2) {
    return arguments.length ? (x12 = _2 == null ? null : typeof _2 === "function" ? _2 : constant_default5(+_2), area3) : x12;
  };
  area3.y = function(_2) {
    return arguments.length ? (y06 = typeof _2 === "function" ? _2 : constant_default5(+_2), y12 = null, area3) : y06;
  };
  area3.y0 = function(_2) {
    return arguments.length ? (y06 = typeof _2 === "function" ? _2 : constant_default5(+_2), area3) : y06;
  };
  area3.y1 = function(_2) {
    return arguments.length ? (y12 = _2 == null ? null : typeof _2 === "function" ? _2 : constant_default5(+_2), area3) : y12;
  };
  area3.lineX0 = area3.lineY0 = function() {
    return arealine().x(x06).y(y06);
  };
  area3.lineY1 = function() {
    return arealine().x(x06).y(y12);
  };
  area3.lineX1 = function() {
    return arealine().x(x12).y(y06);
  };
  area3.defined = function(_2) {
    return arguments.length ? (defined2 = typeof _2 === "function" ? _2 : constant_default5(!!_2), area3) : defined2;
  };
  area3.curve = function(_2) {
    return arguments.length ? (curve = _2, context != null && (output = curve(context)), area3) : curve;
  };
  area3.context = function(_2) {
    return arguments.length ? (_2 == null ? context = output = null : output = curve(context = _2), area3) : context;
  };
  return area3;
}

// ../../node_modules/d3-shape/src/curve/bump.js
var Bump = class {
  constructor(context, x3) {
    this._context = context;
    this._x = x3;
  }
  areaStart() {
    this._line = 0;
  }
  areaEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  }
  point(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0: {
        this._point = 1;
        if (this._line)
          this._context.lineTo(x3, y3);
        else
          this._context.moveTo(x3, y3);
        break;
      }
      case 1:
        this._point = 2;
      default: {
        if (this._x)
          this._context.bezierCurveTo(this._x0 = (this._x0 + x3) / 2, this._y0, this._x0, y3, x3, y3);
        else
          this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y3) / 2, x3, this._y0, x3, y3);
        break;
      }
    }
    this._x0 = x3, this._y0 = y3;
  }
};
function bumpX(context) {
  return new Bump(context, true);
}
function bumpY(context) {
  return new Bump(context, false);
}

// ../../node_modules/d3-shape/src/symbol/asterisk.js
var sqrt32 = sqrt3(3);
var asterisk_default = {
  draw(context, size) {
    const r = sqrt3(size + min4(size / 28, 0.75)) * 0.59436;
    const t = r / 2;
    const u4 = t * sqrt32;
    context.moveTo(0, r);
    context.lineTo(0, -r);
    context.moveTo(-u4, -t);
    context.lineTo(u4, t);
    context.moveTo(-u4, t);
    context.lineTo(u4, -t);
  }
};

// ../../node_modules/d3-shape/src/symbol/circle.js
var circle_default2 = {
  draw(context, size) {
    const r = sqrt3(size / pi3);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau4);
  }
};

// ../../node_modules/d3-shape/src/symbol/cross.js
var cross_default = {
  draw(context, size) {
    const r = sqrt3(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

// ../../node_modules/d3-shape/src/symbol/diamond.js
var tan30 = sqrt3(1 / 3);
var tan30_2 = tan30 * 2;
var diamond_default = {
  draw(context, size) {
    const y3 = sqrt3(size / tan30_2);
    const x3 = y3 * tan30;
    context.moveTo(0, -y3);
    context.lineTo(x3, 0);
    context.lineTo(0, y3);
    context.lineTo(-x3, 0);
    context.closePath();
  }
};

// ../../node_modules/d3-shape/src/symbol/diamond2.js
var diamond2_default = {
  draw(context, size) {
    const r = sqrt3(size) * 0.62625;
    context.moveTo(0, -r);
    context.lineTo(r, 0);
    context.lineTo(0, r);
    context.lineTo(-r, 0);
    context.closePath();
  }
};

// ../../node_modules/d3-shape/src/symbol/plus.js
var plus_default = {
  draw(context, size) {
    const r = sqrt3(size - min4(size / 7, 2)) * 0.87559;
    context.moveTo(-r, 0);
    context.lineTo(r, 0);
    context.moveTo(0, r);
    context.lineTo(0, -r);
  }
};

// ../../node_modules/d3-shape/src/symbol/square.js
var square_default = {
  draw(context, size) {
    const w2 = sqrt3(size);
    const x3 = -w2 / 2;
    context.rect(x3, x3, w2, w2);
  }
};

// ../../node_modules/d3-shape/src/symbol/square2.js
var square2_default = {
  draw(context, size) {
    const r = sqrt3(size) * 0.4431;
    context.moveTo(r, r);
    context.lineTo(r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, r);
    context.closePath();
  }
};

// ../../node_modules/d3-shape/src/symbol/star.js
var ka = 0.8908130915292852;
var kr = sin2(pi3 / 10) / sin2(7 * pi3 / 10);
var kx = sin2(tau4 / 10) * kr;
var ky = -cos2(tau4 / 10) * kr;
var star_default = {
  draw(context, size) {
    const r = sqrt3(size * ka);
    const x3 = kx * r;
    const y3 = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x3, y3);
    for (let i2 = 1; i2 < 5; ++i2) {
      const a2 = tau4 * i2 / 5;
      const c4 = cos2(a2);
      const s2 = sin2(a2);
      context.lineTo(s2 * r, -c4 * r);
      context.lineTo(c4 * x3 - s2 * y3, s2 * x3 + c4 * y3);
    }
    context.closePath();
  }
};

// ../../node_modules/d3-shape/src/symbol/triangle.js
var sqrt33 = sqrt3(3);
var triangle_default = {
  draw(context, size) {
    const y3 = -sqrt3(size / (sqrt33 * 3));
    context.moveTo(0, y3 * 2);
    context.lineTo(-sqrt33 * y3, -y3);
    context.lineTo(sqrt33 * y3, -y3);
    context.closePath();
  }
};

// ../../node_modules/d3-shape/src/symbol/triangle2.js
var sqrt34 = sqrt3(3);
var triangle2_default = {
  draw(context, size) {
    const s2 = sqrt3(size) * 0.6824;
    const t = s2 / 2;
    const u4 = s2 * sqrt34 / 2;
    context.moveTo(0, -s2);
    context.lineTo(u4, t);
    context.lineTo(-u4, t);
    context.closePath();
  }
};

// ../../node_modules/d3-shape/src/symbol/wye.js
var c3 = -0.5;
var s = sqrt3(3) / 2;
var k2 = 1 / sqrt3(12);
var a = (k2 / 2 + 1) * 3;
var wye_default = {
  draw(context, size) {
    const r = sqrt3(size / a);
    const x06 = r / 2, y06 = r * k2;
    const x12 = x06, y12 = r * k2 + r;
    const x22 = -x12, y22 = y12;
    context.moveTo(x06, y06);
    context.lineTo(x12, y12);
    context.lineTo(x22, y22);
    context.lineTo(c3 * x06 - s * y06, s * x06 + c3 * y06);
    context.lineTo(c3 * x12 - s * y12, s * x12 + c3 * y12);
    context.lineTo(c3 * x22 - s * y22, s * x22 + c3 * y22);
    context.lineTo(c3 * x06 + s * y06, c3 * y06 - s * x06);
    context.lineTo(c3 * x12 + s * y12, c3 * y12 - s * x12);
    context.lineTo(c3 * x22 + s * y22, c3 * y22 - s * x22);
    context.closePath();
  }
};

// ../../node_modules/d3-shape/src/symbol/times.js
var times_default = {
  draw(context, size) {
    const r = sqrt3(size - min4(size / 6, 1.7)) * 0.6189;
    context.moveTo(-r, -r);
    context.lineTo(r, r);
    context.moveTo(-r, r);
    context.lineTo(r, -r);
  }
};

// ../../node_modules/d3-shape/src/symbol.js
var symbolsFill = [
  circle_default2,
  cross_default,
  diamond_default,
  square_default,
  star_default,
  triangle_default,
  wye_default
];
var symbolsStroke = [
  circle_default2,
  plus_default,
  times_default,
  triangle2_default,
  asterisk_default,
  square2_default,
  diamond2_default
];

// ../../node_modules/d3-shape/src/noop.js
function noop_default2() {
}

// ../../node_modules/d3-shape/src/curve/basis.js
function point2(that, x3, y3) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x3) / 6,
    (that._y0 + 4 * that._y1 + y3) / 6
  );
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point2(this, this._x1, this._y1);
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      default:
        point2(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y3;
  }
};
function basis_default2(context) {
  return new Basis(context);
}

// ../../node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default2,
  areaEnd: noop_default2,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x3, this._y2 = y3;
        break;
      case 1:
        this._point = 2;
        this._x3 = x3, this._y3 = y3;
        break;
      case 2:
        this._point = 3;
        this._x4 = x3, this._y4 = y3;
        this._context.moveTo((this._x0 + 4 * this._x1 + x3) / 6, (this._y0 + 4 * this._y1 + y3) / 6);
        break;
      default:
        point2(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y3;
  }
};
function basisClosed_default2(context) {
  return new BasisClosed(context);
}

// ../../node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x06 = (this._x0 + 4 * this._x1 + x3) / 6, y06 = (this._y0 + 4 * this._y1 + y3) / 6;
        this._line ? this._context.lineTo(x06, y06) : this._context.moveTo(x06, y06);
        break;
      case 3:
        this._point = 4;
      default:
        point2(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y3;
  }
};
function basisOpen_default(context) {
  return new BasisOpen(context);
}

// ../../node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x3 = this._x, y3 = this._y, j2 = x3.length - 1;
    if (j2 > 0) {
      var x06 = x3[0], y06 = y3[0], dx = x3[j2] - x06, dy = y3[j2] - y06, i2 = -1, t;
      while (++i2 <= j2) {
        t = i2 / j2;
        this._basis.point(
          this._beta * x3[i2] + (1 - this._beta) * (x06 + t * dx),
          this._beta * y3[i2] + (1 - this._beta) * (y06 + t * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x3, y3) {
    this._x.push(+x3);
    this._y.push(+y3);
  }
};
var bundle_default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
}(0.85);

// ../../node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x3, y3) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x3),
    that._y2 + that._k * (that._y1 - y3),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point3(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
        this._x1 = x3, this._y1 = y3;
        break;
      case 2:
        this._point = 3;
      default:
        point3(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// ../../node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default2,
  areaEnd: noop_default2,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x3, this._y3 = y3;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x3, this._y4 = y3);
        break;
      case 2:
        this._point = 3;
        this._x5 = x3, this._y5 = y3;
        break;
      default:
        point3(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// ../../node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point3(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// ../../node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x3, y3) {
  var x12 = that._x1, y12 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon7) {
    var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x12 = (x12 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y12 = (y12 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }
  if (that._l23_a > epsilon7) {
    var b2 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m2 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b2 + that._x1 * that._l23_2a - x3 * that._l12_2a) / m2;
    y22 = (y22 * b2 + that._y1 * that._l23_2a - y3 * that._l12_2a) / m2;
  }
  that._context.bezierCurveTo(x12, y12, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y3;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      default:
        point4(this, x3, y3);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// ../../node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default2,
  areaEnd: noop_default2,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y3;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x3, this._y3 = y3;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x3, this._y4 = y3);
        break;
      case 2:
        this._point = 3;
        this._x5 = x3, this._y5 = y3;
        break;
      default:
        point4(this, x3, y3);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// ../../node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y3;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point4(this, x3, y3);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// ../../node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default2,
  areaEnd: noop_default2,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point)
      this._context.closePath();
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    if (this._point)
      this._context.lineTo(x3, y3);
    else
      this._point = 1, this._context.moveTo(x3, y3);
  }
};
function linearClosed_default(context) {
  return new LinearClosed(context);
}

// ../../node_modules/d3-shape/src/curve/monotone.js
function sign2(x3) {
  return x3 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p2 = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign2(s0) + sign2(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
}
function slope2(that, t) {
  var h2 = that._x1 - that._x0;
  return h2 ? (3 * (that._y1 - that._y0) / h2 - t) / 2 : t;
}
function point5(that, t03, t13) {
  var x06 = that._x0, y06 = that._y0, x12 = that._x1, y12 = that._y1, dx = (x12 - x06) / 3;
  that._context.bezierCurveTo(x06 + dx, y06 + dx * t03, x12 - dx, y12 - dx * t13, x12, y12);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point5(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    var t13 = NaN;
    x3 = +x3, y3 = +y3;
    if (x3 === this._x1 && y3 === this._y1)
      return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point5(this, slope2(this, t13 = slope3(this, x3, y3)), t13);
        break;
      default:
        point5(this, this._t0, t13 = slope3(this, x3, y3));
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y3;
    this._t0 = t13;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x3, y3) {
  MonotoneX.prototype.point.call(this, y3, x3);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x3, y3) {
    this._context.moveTo(y3, x3);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x3, y3) {
    this._context.lineTo(y3, x3);
  },
  bezierCurveTo: function(x12, y12, x22, y22, x3, y3) {
    this._context.bezierCurveTo(y12, x12, y22, x22, y3, x3);
  }
};
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}

// ../../node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x3 = this._x, y3 = this._y, n = x3.length;
    if (n) {
      this._line ? this._context.lineTo(x3[0], y3[0]) : this._context.moveTo(x3[0], y3[0]);
      if (n === 2) {
        this._context.lineTo(x3[1], y3[1]);
      } else {
        var px = controlPoints(x3), py = controlPoints(y3);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x3[i1], y3[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n === 1)
      this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x3, y3) {
    this._x.push(+x3);
    this._y.push(+y3);
  }
};
function controlPoints(x3) {
  var i2, n = x3.length - 1, m2, a2 = new Array(n), b2 = new Array(n), r = new Array(n);
  a2[0] = 0, b2[0] = 2, r[0] = x3[0] + 2 * x3[1];
  for (i2 = 1; i2 < n - 1; ++i2)
    a2[i2] = 1, b2[i2] = 4, r[i2] = 4 * x3[i2] + 2 * x3[i2 + 1];
  a2[n - 1] = 2, b2[n - 1] = 7, r[n - 1] = 8 * x3[n - 1] + x3[n];
  for (i2 = 1; i2 < n; ++i2)
    m2 = a2[i2] / b2[i2 - 1], b2[i2] -= m2, r[i2] -= m2 * r[i2 - 1];
  a2[n - 1] = r[n - 1] / b2[n - 1];
  for (i2 = n - 2; i2 >= 0; --i2)
    a2[i2] = (r[i2] - a2[i2 + 1]) / b2[i2];
  b2[n - 1] = (x3[n] + a2[n - 1]) / 2;
  for (i2 = 0; i2 < n - 1; ++i2)
    b2[i2] = 2 * x3[i2 + 1] - a2[i2 + 1];
  return [a2, b2];
}
function natural_default(context) {
  return new Natural(context);
}

// ../../node_modules/d3-shape/src/curve/step.js
function Step(context, t) {
  this._context = context;
  this._t = t;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2)
      this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    if (this._line >= 0)
      this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y3);
          this._context.lineTo(x3, y3);
        } else {
          var x12 = this._x * (1 - this._t) + x3 * this._t;
          this._context.lineTo(x12, this._y);
          this._context.lineTo(x12, y3);
        }
        break;
      }
    }
    this._x = x3, this._y = y3;
  }
};
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}

// ../../node_modules/d3-zoom/src/constant.js
var constant_default6 = (x3) => () => x3;

// ../../node_modules/d3-zoom/src/event.js
function ZoomEvent(type2, {
  sourceEvent,
  target,
  transform: transform3,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform3, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}

// ../../node_modules/d3-zoom/src/transform.js
function Transform2(k3, x3, y3) {
  this.k = k3;
  this.x = x3;
  this.y = y3;
}
Transform2.prototype = {
  constructor: Transform2,
  scale: function(k3) {
    return k3 === 1 ? this : new Transform2(this.k * k3, this.x, this.y);
  },
  translate: function(x3, y3) {
    return x3 === 0 & y3 === 0 ? this : new Transform2(this.k, this.x + this.k * x3, this.y + this.k * y3);
  },
  apply: function(point6) {
    return [point6[0] * this.k + this.x, point6[1] * this.k + this.y];
  },
  applyX: function(x3) {
    return x3 * this.k + this.x;
  },
  applyY: function(y3) {
    return y3 * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x3) {
    return (x3 - this.x) / this.k;
  },
  invertY: function(y3) {
    return (y3 - this.y) / this.k;
  },
  rescaleX: function(x3) {
    return x3.copy().domain(x3.range().map(this.invertX, this).map(x3.invert, x3));
  },
  rescaleY: function(y3) {
    return y3.copy().domain(y3.range().map(this.invertY, this).map(y3.invert, y3));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity6 = new Transform2(1, 0, 0);
transform.prototype = Transform2.prototype;
function transform(node) {
  while (!node.__zoom)
    if (!(node = node.parentNode))
      return identity6;
  return node.__zoom;
}

// ../../node_modules/d3-zoom/src/noevent.js
function nopropagation2(event) {
  event.stopImmediatePropagation();
}
function noevent_default3(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// ../../node_modules/d3-zoom/src/zoom.js
function defaultFilter2(event) {
  return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent2() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity6;
}
function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable2() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform3, extent4, translateExtent) {
  var dx0 = transform3.invertX(extent4[0][0]) - translateExtent[0][0], dx1 = transform3.invertX(extent4[1][0]) - translateExtent[1][0], dy0 = transform3.invertY(extent4[0][1]) - translateExtent[0][1], dy1 = transform3.invertY(extent4[1][1]) - translateExtent[1][1];
  return transform3.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom_default2() {
  var filter3 = defaultFilter2, extent4 = defaultExtent2, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable2, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom2(selection2) {
    selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom2.transform = function(collection, transform3, point6, event) {
    var selection2 = collection.selection ? collection.selection() : collection;
    selection2.property("__zoom", defaultTransform);
    if (collection !== selection2) {
      schedule(collection, transform3, point6, event);
    } else {
      selection2.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform3 === "function" ? transform3.apply(this, arguments) : transform3).end();
      });
    }
  };
  zoom2.scaleBy = function(selection2, k3, p2, event) {
    zoom2.scaleTo(selection2, function() {
      var k0 = this.__zoom.k, k1 = typeof k3 === "function" ? k3.apply(this, arguments) : k3;
      return k0 * k1;
    }, p2, event);
  };
  zoom2.scaleTo = function(selection2, k3, p2, event) {
    zoom2.transform(selection2, function() {
      var e = extent4.apply(this, arguments), t03 = this.__zoom, p0 = p2 == null ? centroid2(e) : typeof p2 === "function" ? p2.apply(this, arguments) : p2, p1 = t03.invert(p0), k1 = typeof k3 === "function" ? k3.apply(this, arguments) : k3;
      return constrain(translate(scale3(t03, k1), p0, p1), e, translateExtent);
    }, p2, event);
  };
  zoom2.translateBy = function(selection2, x3, y3, event) {
    zoom2.transform(selection2, function() {
      return constrain(this.__zoom.translate(
        typeof x3 === "function" ? x3.apply(this, arguments) : x3,
        typeof y3 === "function" ? y3.apply(this, arguments) : y3
      ), extent4.apply(this, arguments), translateExtent);
    }, null, event);
  };
  zoom2.translateTo = function(selection2, x3, y3, p2, event) {
    zoom2.transform(selection2, function() {
      var e = extent4.apply(this, arguments), t = this.__zoom, p0 = p2 == null ? centroid2(e) : typeof p2 === "function" ? p2.apply(this, arguments) : p2;
      return constrain(identity6.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x3 === "function" ? -x3.apply(this, arguments) : -x3,
        typeof y3 === "function" ? -y3.apply(this, arguments) : -y3
      ), e, translateExtent);
    }, p2, event);
  };
  function scale3(transform3, k3) {
    k3 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k3));
    return k3 === transform3.k ? transform3 : new Transform2(k3, transform3.x, transform3.y);
  }
  function translate(transform3, p0, p1) {
    var x3 = p0[0] - p1[0] * transform3.k, y3 = p0[1] - p1[1] * transform3.k;
    return x3 === transform3.x && y3 === transform3.y ? transform3 : new Transform2(transform3.k, x3, y3);
  }
  function centroid2(extent5) {
    return [(+extent5[0][0] + +extent5[1][0]) / 2, (+extent5[0][1] + +extent5[1][1]) / 2];
  }
  function schedule(transition2, transform3, point6, event) {
    transition2.on("start.zoom", function() {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g2 = gesture(that, args).event(event), e = extent4.apply(that, args), p2 = point6 == null ? centroid2(e) : typeof point6 === "function" ? point6.apply(that, args) : point6, w2 = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a2 = that.__zoom, b2 = typeof transform3 === "function" ? transform3.apply(that, args) : transform3, i2 = interpolate(a2.invert(p2).concat(w2 / a2.k), b2.invert(p2).concat(w2 / b2.k));
      return function(t) {
        if (t === 1)
          t = b2;
        else {
          var l = i2(t), k3 = w2 / l[2];
          t = new Transform2(k3, p2[0] - l[0] * k3, p2[1] - l[1] * k3);
        }
        g2.zoom(null, t);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent4.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event) {
      if (event)
        this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform3) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform3.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform3.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform3.invert(this.touch1[0]);
      this.that.__zoom = transform3;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type2) {
      var d = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new ZoomEvent(type2, {
          sourceEvent: this.sourceEvent,
          target: zoom2,
          type: type2,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d
      );
    }
  };
  function wheeled(event, ...args) {
    if (!filter3.apply(this, arguments))
      return;
    var g2 = gesture(this, args).event(event), t = this.__zoom, k3 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p2 = pointer_default(event);
    if (g2.wheel) {
      if (g2.mouse[0][0] !== p2[0] || g2.mouse[0][1] !== p2[1]) {
        g2.mouse[1] = t.invert(g2.mouse[0] = p2);
      }
      clearTimeout(g2.wheel);
    } else if (t.k === k3)
      return;
    else {
      g2.mouse = [p2, t.invert(p2)];
      interrupt_default(this);
      g2.start();
    }
    noevent_default3(event);
    g2.wheel = setTimeout(wheelidled, wheelDelay);
    g2.zoom("mouse", constrain(translate(scale3(t, k3), g2.mouse[0], g2.mouse[1]), g2.extent, translateExtent));
    function wheelidled() {
      g2.wheel = null;
      g2.end();
    }
  }
  function mousedowned(event, ...args) {
    if (touchending || !filter3.apply(this, arguments))
      return;
    var currentTarget = event.currentTarget, g2 = gesture(this, args, true).event(event), v3 = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p2 = pointer_default(event, currentTarget), x06 = event.clientX, y06 = event.clientY;
    nodrag_default(event.view);
    nopropagation2(event);
    g2.mouse = [p2, this.__zoom.invert(p2)];
    interrupt_default(this);
    g2.start();
    function mousemoved(event2) {
      noevent_default3(event2);
      if (!g2.moved) {
        var dx = event2.clientX - x06, dy = event2.clientY - y06;
        g2.moved = dx * dx + dy * dy > clickDistance2;
      }
      g2.event(event2).zoom("mouse", constrain(translate(g2.that.__zoom, g2.mouse[0] = pointer_default(event2, currentTarget), g2.mouse[1]), g2.extent, translateExtent));
    }
    function mouseupped(event2) {
      v3.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event2.view, g2.moved);
      noevent_default3(event2);
      g2.event(event2).end();
    }
  }
  function dblclicked(event, ...args) {
    if (!filter3.apply(this, arguments))
      return;
    var t03 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t03.invert(p0), k1 = t03.k * (event.shiftKey ? 0.5 : 2), t13 = constrain(translate(scale3(t03, k1), p0, p1), extent4.apply(this, args), translateExtent);
    noevent_default3(event);
    if (duration > 0)
      select_default2(this).transition().duration(duration).call(schedule, t13, p0, event);
    else
      select_default2(this).call(zoom2.transform, t13, p0, event);
  }
  function touchstarted(event, ...args) {
    if (!filter3.apply(this, arguments))
      return;
    var touches = event.touches, n = touches.length, g2 = gesture(this, args, event.changedTouches.length === n).event(event), started, i2, t, p2;
    nopropagation2(event);
    for (i2 = 0; i2 < n; ++i2) {
      t = touches[i2], p2 = pointer_default(t, this);
      p2 = [p2, this.__zoom.invert(p2), t.identifier];
      if (!g2.touch0)
        g2.touch0 = p2, started = true, g2.taps = 1 + !!touchstarting;
      else if (!g2.touch1 && g2.touch0[2] !== p2[2])
        g2.touch1 = p2, g2.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g2.taps < 2)
        touchfirst = p2[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt_default(this);
      g2.start();
    }
  }
  function touchmoved(event, ...args) {
    if (!this.__zooming)
      return;
    var g2 = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i2, t, p2, l;
    noevent_default3(event);
    for (i2 = 0; i2 < n; ++i2) {
      t = touches[i2], p2 = pointer_default(t, this);
      if (g2.touch0 && g2.touch0[2] === t.identifier)
        g2.touch0[0] = p2;
      else if (g2.touch1 && g2.touch1[2] === t.identifier)
        g2.touch1[0] = p2;
    }
    t = g2.that.__zoom;
    if (g2.touch1) {
      var p0 = g2.touch0[0], l0 = g2.touch0[1], p1 = g2.touch1[0], l1 = g2.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale3(t, Math.sqrt(dp / dl));
      p2 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g2.touch0)
      p2 = g2.touch0[0], l = g2.touch0[1];
    else
      return;
    g2.zoom("touch", constrain(translate(t, p2, l), g2.extent, translateExtent));
  }
  function touchended(event, ...args) {
    if (!this.__zooming)
      return;
    var g2 = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i2, t;
    nopropagation2(event);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i2 = 0; i2 < n; ++i2) {
      t = touches[i2];
      if (g2.touch0 && g2.touch0[2] === t.identifier)
        delete g2.touch0;
      else if (g2.touch1 && g2.touch1[2] === t.identifier)
        delete g2.touch1;
    }
    if (g2.touch1 && !g2.touch0)
      g2.touch0 = g2.touch1, delete g2.touch1;
    if (g2.touch0)
      g2.touch0[1] = this.__zoom.invert(g2.touch0[0]);
    else {
      g2.end();
      if (g2.taps === 2) {
        t = pointer_default(t, this);
        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p2 = select_default2(this).on("dblclick.zoom");
          if (p2)
            p2.apply(this, arguments);
        }
      }
    }
  }
  zoom2.wheelDelta = function(_2) {
    return arguments.length ? (wheelDelta = typeof _2 === "function" ? _2 : constant_default6(+_2), zoom2) : wheelDelta;
  };
  zoom2.filter = function(_2) {
    return arguments.length ? (filter3 = typeof _2 === "function" ? _2 : constant_default6(!!_2), zoom2) : filter3;
  };
  zoom2.touchable = function(_2) {
    return arguments.length ? (touchable = typeof _2 === "function" ? _2 : constant_default6(!!_2), zoom2) : touchable;
  };
  zoom2.extent = function(_2) {
    return arguments.length ? (extent4 = typeof _2 === "function" ? _2 : constant_default6([[+_2[0][0], +_2[0][1]], [+_2[1][0], +_2[1][1]]]), zoom2) : extent4;
  };
  zoom2.scaleExtent = function(_2) {
    return arguments.length ? (scaleExtent[0] = +_2[0], scaleExtent[1] = +_2[1], zoom2) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom2.translateExtent = function(_2) {
    return arguments.length ? (translateExtent[0][0] = +_2[0][0], translateExtent[1][0] = +_2[1][0], translateExtent[0][1] = +_2[0][1], translateExtent[1][1] = +_2[1][1], zoom2) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom2.constrain = function(_2) {
    return arguments.length ? (constrain = _2, zoom2) : constrain;
  };
  zoom2.duration = function(_2) {
    return arguments.length ? (duration = +_2, zoom2) : duration;
  };
  zoom2.interpolate = function(_2) {
    return arguments.length ? (interpolate = _2, zoom2) : interpolate;
  };
  zoom2.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom2 : value;
  };
  zoom2.clickDistance = function(_2) {
    return arguments.length ? (clickDistance2 = (_2 = +_2) * _2, zoom2) : Math.sqrt(clickDistance2);
  };
  zoom2.tapDistance = function(_2) {
    return arguments.length ? (tapDistance = +_2, zoom2) : tapDistance;
  };
  return zoom2;
}

// ../../node_modules/@observablehq/plot/src/defined.js
function defined(x3) {
  return x3 != null && !Number.isNaN(x3);
}
function ascendingDefined2(a2, b2) {
  return +defined(b2) - +defined(a2) || ascending(a2, b2);
}
function descendingDefined(a2, b2) {
  return +defined(b2) - +defined(a2) || descending(a2, b2);
}
function nonempty(x3) {
  return x3 != null && `${x3}` !== "";
}
function finite2(x3) {
  return isFinite(x3) ? x3 : NaN;
}
function positive(x3) {
  return x3 > 0 && isFinite(x3) ? x3 : NaN;
}
function negative(x3) {
  return x3 < 0 && isFinite(x3) ? x3 : NaN;
}

// ../../node_modules/@observablehq/plot/src/time.js
var timeIntervals = /* @__PURE__ */ new Map([
  ["second", second],
  ["minute", timeMinute],
  ["hour", timeHour],
  ["day", timeDay],
  // TODO local time equivalent of unixDay?
  ["week", timeSunday],
  ["month", timeMonth],
  ["year", timeYear],
  ["monday", timeMonday],
  ["tuesday", timeTuesday],
  ["wednesday", timeWednesday],
  ["thursday", timeThursday],
  ["friday", timeFriday],
  ["saturday", timeSaturday],
  ["sunday", timeSunday]
]);
var utcIntervals = /* @__PURE__ */ new Map([
  ["second", second],
  ["minute", utcMinute],
  ["hour", utcHour],
  ["day", unixDay],
  ["week", utcSunday],
  ["month", utcMonth],
  ["year", utcYear],
  ["monday", utcMonday],
  ["tuesday", utcTuesday],
  ["wednesday", utcWednesday],
  ["thursday", utcThursday],
  ["friday", utcFriday],
  ["saturday", utcSaturday],
  ["sunday", utcSunday]
]);
function parseInterval(input2, intervals) {
  let name2 = `${input2}`.toLowerCase();
  if (name2.endsWith("s"))
    name2 = name2.slice(0, -1);
  let period = 1;
  const match = /^(?:(\d+)\s+)/.exec(name2);
  if (match) {
    name2 = name2.slice(match[0].length);
    period = +match[1];
  }
  switch (name2) {
    case "quarter":
      name2 = "month";
      period *= 3;
      break;
    case "half":
      name2 = "month";
      period *= 6;
      break;
  }
  let interval2 = intervals.get(name2);
  if (!interval2)
    throw new Error(`unknown interval: ${input2}`);
  if (!(period > 1))
    return interval2;
  if (!interval2.every)
    throw new Error(`non-periodic interval: ${name2}`);
  return interval2.every(period);
}
function maybeTimeInterval(interval2) {
  return parseInterval(interval2, timeIntervals);
}
function maybeUtcInterval(interval2) {
  return parseInterval(interval2, utcIntervals);
}
function isUtcYear(i2) {
  if (!i2)
    return false;
  const date2 = i2.floor(new Date(Date.UTC(2e3, 11, 31)));
  return utcYear(date2) >= date2;
}
function isTimeYear(i2) {
  if (!i2)
    return false;
  const date2 = i2.floor(new Date(2e3, 11, 31));
  return timeYear(date2) >= date2;
}

// ../../node_modules/@observablehq/plot/src/options.js
var TypedArray = Object.getPrototypeOf(Uint8Array);
var objectToString = Object.prototype.toString;
function valueof(data, value, type2) {
  const valueType = typeof value;
  return valueType === "string" ? maybeTypedMap(data, field(value), type2) : valueType === "function" ? maybeTypedMap(data, value, type2) : valueType === "number" || value instanceof Date || valueType === "boolean" ? map2(data, constant(value), type2) : typeof value?.transform === "function" ? maybeTypedArrayify(value.transform(data), type2) : maybeTypedArrayify(value, type2);
}
function maybeTypedMap(data, f2, type2) {
  return map2(data, type2?.prototype instanceof TypedArray ? floater(f2) : f2, type2);
}
function maybeTypedArrayify(data, type2) {
  return type2 === void 0 ? arrayify2(data) : data instanceof type2 ? data : type2.prototype instanceof TypedArray && !(data instanceof TypedArray) ? type2.from(data, coerceNumber) : type2.from(data);
}
function floater(f2) {
  return (d, i2) => coerceNumber(f2(d, i2));
}
var singleton = [null];
var field = (name2) => (d) => d[name2];
var indexOf = { transform: range2 };
var identity7 = { transform: (d) => d };
var one2 = () => 1;
var yes = () => true;
var string = (x3) => x3 == null ? x3 : `${x3}`;
var number5 = (x3) => x3 == null ? x3 : +x3;
var first2 = (x3) => x3 ? x3[0] : void 0;
var second2 = (x3) => x3 ? x3[1] : void 0;
var third = (x3) => x3 ? x3[2] : void 0;
var constant = (x3) => () => x3;
function percentile(reduce) {
  const p2 = +`${reduce}`.slice(1) / 100;
  return (I2, f2) => quantile2(I2, p2, f2);
}
function coerceNumbers(values2) {
  return values2 instanceof TypedArray ? values2 : map2(values2, coerceNumber, Float64Array);
}
function coerceNumber(x3) {
  return x3 == null ? NaN : Number(x3);
}
function coerceDates(values2) {
  return map2(values2, coerceDate);
}
function coerceDate(x3) {
  return x3 instanceof Date && !isNaN(x3) ? x3 : typeof x3 === "string" ? parse(x3) : x3 == null || isNaN(x3 = +x3) ? void 0 : new Date(x3);
}
function maybeColorChannel(value, defaultValue) {
  if (value === void 0)
    value = defaultValue;
  return value === null ? [void 0, "none"] : isColor(value) ? [void 0, value] : [value, void 0];
}
function maybeNumberChannel(value, defaultValue) {
  if (value === void 0)
    value = defaultValue;
  return value === null || typeof value === "number" ? [void 0, value] : [value, void 0];
}
function maybeKeyword(input2, name2, allowed) {
  if (input2 != null)
    return keyword(input2, name2, allowed);
}
function keyword(input2, name2, allowed) {
  const i2 = `${input2}`.toLowerCase();
  if (!allowed.includes(i2))
    throw new Error(`invalid ${name2}: ${input2}`);
  return i2;
}
function arrayify2(data) {
  return data == null || data instanceof Array || data instanceof TypedArray ? data : Array.from(data);
}
function map2(values2, f2, type2 = Array) {
  return values2 == null ? values2 : values2 instanceof type2 ? values2.map(f2) : type2.from(values2, f2);
}
function slice3(values2, type2 = Array) {
  return values2 instanceof type2 ? values2.slice() : type2.from(values2);
}
function hasX({ x: x3, x1: x12, x2: x22 }) {
  return x3 !== void 0 || x12 !== void 0 || x22 !== void 0;
}
function hasY({ y: y3, y1: y12, y2: y22 }) {
  return y3 !== void 0 || y12 !== void 0 || y22 !== void 0;
}
function hasXY(options) {
  return hasX(options) || hasY(options) || options.interval !== void 0;
}
function isObject4(option) {
  return option?.toString === objectToString;
}
function isScaleOptions(option) {
  return isObject4(option) && (option.type !== void 0 || option.domain !== void 0);
}
function isOptions(option) {
  return isObject4(option) && typeof option.transform !== "function";
}
function isDomainSort(sort3) {
  return isOptions(sort3) && sort3.value === void 0 && sort3.channel === void 0;
}
function maybeZero(x3, x12, x22, x32 = identity7) {
  if (x12 === void 0 && x22 === void 0) {
    x12 = 0, x22 = x3 === void 0 ? x32 : x3;
  } else if (x12 === void 0) {
    x12 = x3 === void 0 ? 0 : x3;
  } else if (x22 === void 0) {
    x22 = x3 === void 0 ? 0 : x3;
  }
  return [x12, x22];
}
function maybeTuple(x3, y3) {
  return x3 === void 0 && y3 === void 0 ? [first2, second2] : [x3, y3];
}
function maybeZ({ z: z2, fill, stroke } = {}) {
  if (z2 === void 0)
    [z2] = maybeColorChannel(fill);
  if (z2 === void 0)
    [z2] = maybeColorChannel(stroke);
  return z2;
}
function range2(data) {
  const n = data.length;
  const r = new Uint32Array(n);
  for (let i2 = 0; i2 < n; ++i2)
    r[i2] = i2;
  return r;
}
function take(values2, index2) {
  return map2(index2, (i2) => values2[i2]);
}
function taker(f2) {
  return f2.length === 1 ? (index2, values2) => f2(take(values2, index2)) : f2;
}
function keyof2(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
function maybeInput(key, options) {
  if (options[key] !== void 0)
    return options[key];
  switch (key) {
    case "x1":
    case "x2":
      key = "x";
      break;
    case "y1":
    case "y2":
      key = "y";
      break;
  }
  return options[key];
}
function column2(source) {
  let value;
  return [
    {
      transform: () => value,
      label: labelof(source)
    },
    (v3) => value = v3
  ];
}
function maybeColumn(source) {
  return source == null ? [source] : column2(source);
}
function labelof(value, defaultValue) {
  return typeof value === "string" ? value : value && value.label !== void 0 ? value.label : defaultValue;
}
function mid(x12, x22) {
  return {
    transform(data) {
      const X13 = x12.transform(data);
      const X24 = x22.transform(data);
      return isTemporal(X13) || isTemporal(X24) ? map2(X13, (_2, i2) => new Date((+X13[i2] + +X24[i2]) / 2)) : map2(X13, (_2, i2) => (+X13[i2] + +X24[i2]) / 2, Float64Array);
    },
    label: x12.label
  };
}
function maybeApplyInterval(V2, scale3) {
  const t = maybeIntervalTransform(scale3?.interval, scale3?.type);
  return t ? map2(V2, t) : V2;
}
function maybeIntervalTransform(interval2, type2) {
  const i2 = maybeInterval(interval2, type2);
  return i2 && ((v3) => defined(v3) ? i2.floor(v3) : v3);
}
function maybeInterval(interval2, type2) {
  if (interval2 == null)
    return;
  if (typeof interval2 === "number") {
    if (0 < interval2 && interval2 < 1 && Number.isInteger(1 / interval2))
      interval2 = -1 / interval2;
    const n = Math.abs(interval2);
    return interval2 < 0 ? {
      floor: (d) => Math.floor(d * n) / n,
      offset: (d) => (d * n + 1) / n,
      // note: no optional step for simplicity
      range: (lo, hi) => range(Math.ceil(lo * n), hi * n).map((x3) => x3 / n)
    } : {
      floor: (d) => Math.floor(d / n) * n,
      offset: (d) => d + n,
      // note: no optional step for simplicity
      range: (lo, hi) => range(Math.ceil(lo / n), hi / n).map((x3) => x3 * n)
    };
  }
  if (typeof interval2 === "string")
    return (type2 === "time" ? maybeTimeInterval : maybeUtcInterval)(interval2);
  if (typeof interval2.floor !== "function")
    throw new Error("invalid interval; missing floor method");
  if (typeof interval2.offset !== "function")
    throw new Error("invalid interval; missing offset method");
  return interval2;
}
function maybeRangeInterval(interval2, type2) {
  interval2 = maybeInterval(interval2, type2);
  if (interval2 && typeof interval2.range !== "function")
    throw new Error("invalid interval: missing range method");
  return interval2;
}
function maybeNiceInterval(interval2, type2) {
  interval2 = maybeRangeInterval(interval2, type2);
  if (interval2 && typeof interval2.ceil !== "function")
    throw new Error("invalid interval: missing ceil method");
  return interval2;
}
function maybeValue(value) {
  return value === void 0 || isOptions(value) ? value : { value };
}
function numberChannel(source) {
  return source == null ? null : {
    transform: (data) => valueof(data, source, Float64Array),
    label: labelof(source)
  };
}
function isTuples(data) {
  if (!isIterable3(data))
    return false;
  for (const d of data) {
    if (d == null)
      continue;
    return typeof d === "object" && "0" in d && "1" in d;
  }
}
function isIterable3(value) {
  return value && typeof value[Symbol.iterator] === "function";
}
function isTextual(values2) {
  for (const value of values2) {
    if (value == null)
      continue;
    return typeof value !== "object" || value instanceof Date;
  }
}
function isOrdinal(values2) {
  for (const value of values2) {
    if (value == null)
      continue;
    const type2 = typeof value;
    return type2 === "string" || type2 === "boolean";
  }
}
function isTemporal(values2) {
  for (const value of values2) {
    if (value == null)
      continue;
    return value instanceof Date;
  }
}
function isTemporalString(values2) {
  for (const value of values2) {
    if (value == null)
      continue;
    return typeof value === "string" && isNaN(value) && parse(value);
  }
}
function isNumericString(values2) {
  for (const value of values2) {
    if (value == null)
      continue;
    if (typeof value !== "string")
      return false;
    if (!value.trim())
      continue;
    return !isNaN(value);
  }
}
function isNumeric(values2) {
  for (const value of values2) {
    if (value == null)
      continue;
    return typeof value === "number";
  }
}
function isEvery(values2, is) {
  let every;
  for (const value of values2) {
    if (value == null)
      continue;
    if (!is(value))
      return false;
    every = true;
  }
  return every;
}
function isColor(value) {
  if (typeof value !== "string")
    return false;
  value = value.toLowerCase().trim();
  return value === "none" || value === "currentcolor" || value.startsWith("url(") && value.endsWith(")") || // <funciri>, e.g. pattern or gradient
  value.startsWith("var(") && value.endsWith(")") || // CSS variable
  color(value) !== null;
}
function isOpacity(value) {
  return typeof value === "number" && (0 <= value && value <= 1 || isNaN(value));
}
function isNoneish(value) {
  return value == null || isNone(value);
}
function isNone(value) {
  return /^\s*none\s*$/i.test(value);
}
function isRound(value) {
  return /^\s*round\s*$/i.test(value);
}
function maybeAnchor(value, name2) {
  return maybeKeyword(value, name2, [
    "middle",
    "top-left",
    "top",
    "top-right",
    "right",
    "bottom-right",
    "bottom",
    "bottom-left",
    "left"
  ]);
}
function maybeFrameAnchor(value = "middle") {
  return maybeAnchor(value, "frameAnchor");
}
function orderof(values2) {
  if (values2 == null)
    return;
  const first3 = values2[0];
  const last2 = values2[values2.length - 1];
  return descending(first3, last2);
}
function inherit2(options = {}, ...rest) {
  let o = options;
  for (const defaults22 of rest) {
    for (const key in defaults22) {
      if (o[key] === void 0) {
        const value = defaults22[key];
        if (o === options)
          o = { ...o, [key]: value };
        else
          o[key] = value;
      }
    }
  }
  return o;
}
function named2(things) {
  console.warn("named iterables are deprecated; please use an object instead");
  const names = /* @__PURE__ */ new Set();
  return Object.fromEntries(
    Array.from(things, (thing) => {
      const { name: name2 } = thing;
      if (name2 == null)
        throw new Error("missing name");
      const key = `${name2}`;
      if (key === "__proto__")
        throw new Error(`illegal name: ${key}`);
      if (names.has(key))
        throw new Error(`duplicate name: ${key}`);
      names.add(key);
      return [name2, thing];
    })
  );
}
function maybeNamed(things) {
  return isIterable3(things) ? named2(things) : things;
}

// ../../node_modules/@observablehq/plot/src/scales/index.js
var position = Symbol("position");
var color2 = Symbol("color");
var radius = Symbol("radius");
var length3 = Symbol("length");
var opacity = Symbol("opacity");
var symbol = Symbol("symbol");
var projection2 = Symbol("projection");
var registry = /* @__PURE__ */ new Map([
  ["x", position],
  ["y", position],
  ["fx", position],
  ["fy", position],
  ["r", radius],
  ["color", color2],
  ["opacity", opacity],
  ["symbol", symbol],
  ["length", length3],
  ["projection", projection2]
]);

// ../../node_modules/@observablehq/plot/src/symbol.js
var sqrt35 = Math.sqrt(3);
var sqrt4_3 = 2 / sqrt35;
var symbolHexagon = {
  draw(context, size) {
    const rx = Math.sqrt(size / Math.PI), ry = rx * sqrt4_3, hy = ry / 2;
    context.moveTo(0, ry);
    context.lineTo(rx, hy);
    context.lineTo(rx, -hy);
    context.lineTo(0, -ry);
    context.lineTo(-rx, -hy);
    context.lineTo(-rx, hy);
    context.closePath();
  }
};
var symbols = /* @__PURE__ */ new Map([
  ["asterisk", asterisk_default],
  ["circle", circle_default2],
  ["cross", cross_default],
  ["diamond", diamond_default],
  ["diamond2", diamond2_default],
  ["hexagon", symbolHexagon],
  ["plus", plus_default],
  ["square", square_default],
  ["square2", square2_default],
  ["star", star_default],
  ["times", times_default],
  ["triangle", triangle_default],
  ["triangle2", triangle2_default],
  ["wye", wye_default]
]);
function isSymbolObject(value) {
  return value && typeof value.draw === "function";
}
function isSymbol(value) {
  if (isSymbolObject(value))
    return true;
  if (typeof value !== "string")
    return false;
  return symbols.has(value.toLowerCase());
}
function maybeSymbol(symbol2) {
  if (symbol2 == null || isSymbolObject(symbol2))
    return symbol2;
  const value = symbols.get(`${symbol2}`.toLowerCase());
  if (value)
    return value;
  throw new Error(`invalid symbol: ${symbol2}`);
}
function maybeSymbolChannel(symbol2) {
  if (symbol2 == null || isSymbolObject(symbol2))
    return [void 0, symbol2];
  if (typeof symbol2 === "string") {
    const value = symbols.get(`${symbol2}`.toLowerCase());
    if (value)
      return [void 0, value];
  }
  return [symbol2, void 0];
}

// ../../node_modules/@observablehq/plot/src/transforms/basic.js
function basic({ filter: f1, sort: s1, reverse: r1, transform: t13, initializer: i1, ...options } = {}, transform3) {
  if (t13 === void 0) {
    if (f1 != null)
      t13 = filterTransform(f1);
    if (s1 != null && !isDomainSort(s1))
      t13 = composeTransform(t13, sortTransform(s1));
    if (r1)
      t13 = composeTransform(t13, reverseTransform);
  }
  if (transform3 != null && i1 != null)
    throw new Error("transforms cannot be applied after initializers");
  return {
    ...options,
    ...(s1 === null || isDomainSort(s1)) && { sort: s1 },
    transform: composeTransform(t13, transform3)
  };
}
function initializer({ filter: f1, sort: s1, reverse: r1, initializer: i1, ...options } = {}, initializer2) {
  if (i1 === void 0) {
    if (f1 != null)
      i1 = filterTransform(f1);
    if (s1 != null && !isDomainSort(s1))
      i1 = composeInitializer(i1, sortTransform(s1));
    if (r1)
      i1 = composeInitializer(i1, reverseTransform);
  }
  return {
    ...options,
    ...(s1 === null || isDomainSort(s1)) && { sort: s1 },
    initializer: composeInitializer(i1, initializer2)
  };
}
function composeTransform(t13, t22) {
  if (t13 == null)
    return t22 === null ? void 0 : t22;
  if (t22 == null)
    return t13 === null ? void 0 : t13;
  return function(data, facets, plotOptions) {
    ({ data, facets } = t13.call(this, data, facets, plotOptions));
    return t22.call(this, arrayify2(data), facets, plotOptions);
  };
}
function composeInitializer(i1, i2) {
  if (i1 == null)
    return i2 === null ? void 0 : i2;
  if (i2 == null)
    return i1 === null ? void 0 : i1;
  return function(data, facets, channels, ...args) {
    let c1, d1, f1, c22, d2, f2;
    ({ data: d1 = data, facets: f1 = facets, channels: c1 } = i1.call(this, data, facets, channels, ...args));
    ({ data: d2 = d1, facets: f2 = f1, channels: c22 } = i2.call(this, d1, f1, { ...channels, ...c1 }, ...args));
    return { data: d2, facets: f2, channels: { ...c1, ...c22 } };
  };
}
function apply(options, t) {
  return (options.initializer != null ? initializer : basic)(options, t);
}
function filter2(test, options) {
  return apply(options, filterTransform(test));
}
function filterTransform(value) {
  return (data, facets) => {
    const V2 = valueof(data, value);
    return { data, facets: facets.map((I2) => I2.filter((i2) => V2[i2])) };
  };
}
function reverse2({ sort: sort3, ...options } = {}) {
  return {
    ...apply(options, reverseTransform),
    sort: isDomainSort(sort3) ? sort3 : null
  };
}
function reverseTransform(data, facets) {
  return { data, facets: facets.map((I2) => I2.slice().reverse()) };
}
function shuffle({ seed, sort: sort3, ...options } = {}) {
  return {
    ...apply(options, sortValue(seed == null ? Math.random : lcg(seed))),
    sort: isDomainSort(sort3) ? sort3 : null
  };
}
function sort2(order, { sort: sort3, ...options } = {}) {
  return {
    ...(isOptions(order) && order.channel !== void 0 ? initializer : apply)(options, sortTransform(order)),
    sort: isDomainSort(sort3) ? sort3 : null
  };
}
function sortTransform(value) {
  return (typeof value === "function" && value.length !== 1 ? sortData : sortValue)(value);
}
function sortData(compare) {
  return (data, facets) => {
    const compareData = (i2, j2) => compare(data[i2], data[j2]);
    return { data, facets: facets.map((I2) => I2.slice().sort(compareData)) };
  };
}
function sortValue(value) {
  let channel, order;
  ({ channel, value, order } = { ...maybeValue(value) });
  const negate2 = channel?.startsWith("-");
  if (negate2)
    channel = channel.slice(1);
  if (order === void 0)
    order = negate2 ? descendingDefined : ascendingDefined2;
  if (typeof order !== "function") {
    switch (`${order}`.toLowerCase()) {
      case "ascending":
        order = ascendingDefined2;
        break;
      case "descending":
        order = descendingDefined;
        break;
      default:
        throw new Error(`invalid order: ${order}`);
    }
  }
  return (data, facets, channels) => {
    let V2;
    if (channel === void 0) {
      V2 = valueof(data, value);
    } else {
      if (channels === void 0)
        throw new Error("channel sort requires an initializer");
      V2 = channels[channel];
      if (!V2)
        return {};
      V2 = V2.value;
    }
    const compareValue = (i2, j2) => order(V2[i2], V2[j2]);
    return { data, facets: facets.map((I2) => I2.slice().sort(compareValue)) };
  };
}

// ../../node_modules/@observablehq/plot/src/transforms/group.js
function groupZ(outputs, options) {
  return groupn(null, null, outputs, options);
}
function groupX(outputs = { y: "count" }, options = {}) {
  const { x: x3 = identity7 } = options;
  if (x3 == null)
    throw new Error("missing channel: x");
  return groupn(x3, null, outputs, options);
}
function groupY(outputs = { x: "count" }, options = {}) {
  const { y: y3 = identity7 } = options;
  if (y3 == null)
    throw new Error("missing channel: y");
  return groupn(null, y3, outputs, options);
}
function group2(outputs = { fill: "count" }, options = {}) {
  let { x: x3, y: y3 } = options;
  [x3, y3] = maybeTuple(x3, y3);
  if (x3 == null)
    throw new Error("missing channel: x");
  if (y3 == null)
    throw new Error("missing channel: y");
  return groupn(x3, y3, outputs, options);
}
function groupn(x3, y3, {
  data: reduceData = reduceIdentity,
  filter: filter3,
  sort: sort3,
  reverse: reverse3,
  ...outputs
  // output channel definitions
} = {}, inputs2 = {}) {
  outputs = maybeOutputs(outputs, inputs2);
  reduceData = maybeReduce(reduceData, identity7);
  sort3 = sort3 == null ? void 0 : maybeOutput("sort", sort3, inputs2);
  filter3 = filter3 == null ? void 0 : maybeEvaluator("filter", filter3, inputs2);
  const [GX, setGX] = maybeColumn(x3);
  const [GY, setGY] = maybeColumn(y3);
  const {
    z: z2,
    fill,
    stroke,
    x1: x12,
    x2: x22,
    // consumed if x is an output
    y1: y12,
    y2: y22,
    // consumed if y is an output
    ...options
  } = inputs2;
  const [GZ, setGZ] = maybeColumn(z2);
  const [vfill] = maybeColorChannel(fill);
  const [vstroke] = maybeColorChannel(stroke);
  const [GF, setGF] = maybeColumn(vfill);
  const [GS, setGS] = maybeColumn(vstroke);
  return {
    ..."z" in inputs2 && { z: GZ || z2 },
    ..."fill" in inputs2 && { fill: GF || fill },
    ..."stroke" in inputs2 && { stroke: GS || stroke },
    ...basic(options, (data, facets, plotOptions) => {
      const X3 = maybeApplyInterval(valueof(data, x3), plotOptions?.x);
      const Y3 = maybeApplyInterval(valueof(data, y3), plotOptions?.y);
      const Z3 = valueof(data, z2);
      const F2 = valueof(data, vfill);
      const S2 = valueof(data, vstroke);
      const G = maybeSubgroup(outputs, { z: Z3, fill: F2, stroke: S2 });
      const groupFacets = [];
      const groupData = [];
      const GX2 = X3 && setGX([]);
      const GY2 = Y3 && setGY([]);
      const GZ2 = Z3 && setGZ([]);
      const GF2 = F2 && setGF([]);
      const GS2 = S2 && setGS([]);
      let i2 = 0;
      for (const o of outputs)
        o.initialize(data);
      if (sort3)
        sort3.initialize(data);
      if (filter3)
        filter3.initialize(data);
      for (const facet of facets) {
        const groupFacet = [];
        for (const o of outputs)
          o.scope("facet", facet);
        if (sort3)
          sort3.scope("facet", facet);
        if (filter3)
          filter3.scope("facet", facet);
        for (const [f2, I2] of maybeGroup(facet, G)) {
          for (const [y4, gg] of maybeGroup(I2, Y3)) {
            for (const [x4, g2] of maybeGroup(gg, X3)) {
              if (filter3 && !filter3.reduce(g2))
                continue;
              groupFacet.push(i2++);
              groupData.push(reduceData.reduceIndex(g2, data));
              if (X3)
                GX2.push(x4);
              if (Y3)
                GY2.push(y4);
              if (Z3)
                GZ2.push(G === Z3 ? f2 : Z3[g2[0]]);
              if (F2)
                GF2.push(G === F2 ? f2 : F2[g2[0]]);
              if (S2)
                GS2.push(G === S2 ? f2 : S2[g2[0]]);
              for (const o of outputs)
                o.reduce(g2);
              if (sort3)
                sort3.reduce(g2);
            }
          }
        }
        groupFacets.push(groupFacet);
      }
      maybeSort(groupFacets, sort3, reverse3);
      return { data: groupData, facets: groupFacets };
    }),
    ...!hasOutput(outputs, "x") && (GX ? { x: GX } : { x1: x12, x2: x22 }),
    ...!hasOutput(outputs, "y") && (GY ? { y: GY } : { y1: y12, y2: y22 }),
    ...Object.fromEntries(outputs.map(({ name: name2, output }) => [name2, output]))
  };
}
function hasOutput(outputs, ...names) {
  for (const { name: name2 } of outputs) {
    if (names.includes(name2)) {
      return true;
    }
  }
  return false;
}
function maybeOutputs(outputs, inputs2, asOutput = maybeOutput) {
  const entries = Object.entries(outputs);
  if (inputs2.title != null && outputs.title === void 0)
    entries.push(["title", reduceTitle]);
  if (inputs2.href != null && outputs.href === void 0)
    entries.push(["href", reduceFirst]);
  return entries.filter(([, reduce]) => reduce !== void 0).map(([name2, reduce]) => reduce === null ? nullOutput(name2) : asOutput(name2, reduce, inputs2));
}
function maybeOutput(name2, reduce, inputs2, asEvaluator = maybeEvaluator) {
  let scale3;
  if (isObject4(reduce) && "reduce" in reduce)
    scale3 = reduce.scale, reduce = reduce.reduce;
  const evaluator = asEvaluator(name2, reduce, inputs2);
  const [output, setOutput] = column2(evaluator.label);
  let O;
  return {
    name: name2,
    output: scale3 === void 0 ? output : { value: output, scale: scale3 },
    initialize(data) {
      evaluator.initialize(data);
      O = setOutput([]);
    },
    scope(scope, I2) {
      evaluator.scope(scope, I2);
    },
    reduce(I2, extent4) {
      O.push(evaluator.reduce(I2, extent4));
    }
  };
}
function nullOutput(name2) {
  return { name: name2, initialize() {
  }, scope() {
  }, reduce() {
  } };
}
function maybeEvaluator(name2, reduce, inputs2, asReduce = maybeReduce) {
  const input2 = maybeInput(name2, inputs2);
  const reducer2 = asReduce(reduce, input2);
  let V2, context;
  return {
    label: labelof(reducer2 === reduceCount ? null : input2, reducer2.label),
    initialize(data) {
      V2 = input2 === void 0 ? data : valueof(data, input2);
      if (reducer2.scope === "data") {
        context = reducer2.reduceIndex(range2(data), V2);
      }
    },
    scope(scope, I2) {
      if (reducer2.scope === scope) {
        context = reducer2.reduceIndex(I2, V2);
      }
    },
    reduce(I2, extent4) {
      return reducer2.scope == null ? reducer2.reduceIndex(I2, V2, extent4) : reducer2.reduceIndex(I2, V2, context, extent4);
    }
  };
}
function maybeGroup(I2, X3) {
  return X3 ? sort(
    group(I2, (i2) => X3[i2]),
    first2
  ) : [[, I2]];
}
function maybeReduce(reduce, value, fallback = invalidReduce) {
  if (reduce == null)
    return fallback(reduce);
  if (typeof reduce.reduceIndex === "function")
    return reduce;
  if (typeof reduce.reduce === "function" && isObject4(reduce))
    return reduceReduce(reduce);
  if (typeof reduce === "function")
    return reduceFunction(reduce);
  if (/^p\d{2}$/i.test(reduce))
    return reduceAccessor(percentile(reduce));
  switch (`${reduce}`.toLowerCase()) {
    case "first":
      return reduceFirst;
    case "last":
      return reduceLast;
    case "identity":
      return reduceIdentity;
    case "count":
      return reduceCount;
    case "distinct":
      return reduceDistinct;
    case "sum":
      return value == null ? reduceCount : reduceSum;
    case "proportion":
      return reduceProportion(value, "data");
    case "proportion-facet":
      return reduceProportion(value, "facet");
    case "deviation":
      return reduceAccessor(deviation);
    case "min":
      return reduceAccessor(min2);
    case "min-index":
      return reduceAccessor(minIndex);
    case "max":
      return reduceAccessor(max2);
    case "max-index":
      return reduceAccessor(maxIndex);
    case "mean":
      return reduceMaybeTemporalAccessor(mean2);
    case "median":
      return reduceMaybeTemporalAccessor(median2);
    case "variance":
      return reduceAccessor(variance2);
    case "mode":
      return reduceAccessor(mode2);
  }
  return fallback(reduce);
}
function invalidReduce(reduce) {
  throw new Error(`invalid reduce: ${reduce}`);
}
function maybeSubgroup(outputs, inputs2) {
  for (const name2 in inputs2) {
    const value = inputs2[name2];
    if (value !== void 0 && !outputs.some((o) => o.name === name2)) {
      return value;
    }
  }
}
function maybeSort(facets, sort3, reverse3) {
  if (sort3) {
    const S2 = sort3.output.transform();
    const compare = (i2, j2) => ascendingDefined2(S2[i2], S2[j2]);
    facets.forEach((f2) => f2.sort(compare));
  }
  if (reverse3) {
    facets.forEach((f2) => f2.reverse());
  }
}
function reduceReduce(reduce) {
  console.warn("deprecated reduce interface; implement reduceIndex instead.");
  return { ...reduce, reduceIndex: reduce.reduce.bind(reduce) };
}
function reduceFunction(f2) {
  return {
    reduceIndex(I2, X3, extent4) {
      return f2(take(X3, I2), extent4);
    }
  };
}
function reduceAccessor(f2) {
  return {
    reduceIndex(I2, X3) {
      return f2(I2, (i2) => X3[i2]);
    }
  };
}
function reduceMaybeTemporalAccessor(f2) {
  return {
    reduceIndex(I2, X3) {
      const x3 = f2(I2, (i2) => X3[i2]);
      return isTemporal(X3) ? new Date(x3) : x3;
    }
  };
}
var reduceIdentity = {
  reduceIndex(I2, X3) {
    return take(X3, I2);
  }
};
var reduceFirst = {
  reduceIndex(I2, X3) {
    return X3[I2[0]];
  }
};
var reduceTitle = {
  reduceIndex(I2, X3) {
    const n = 5;
    const groups2 = sort(
      rollup(
        I2,
        (V2) => V2.length,
        (i2) => X3[i2]
      ),
      second2
    );
    const top2 = groups2.slice(-n).reverse();
    if (top2.length < groups2.length) {
      const bottom2 = groups2.slice(0, 1 - n);
      top2[n - 1] = [`\u2026 ${bottom2.length.toLocaleString("en-US")} more`, sum4(bottom2, second2)];
    }
    return top2.map(([key, value]) => `${key} (${value.toLocaleString("en-US")})`).join("\n");
  }
};
var reduceLast = {
  reduceIndex(I2, X3) {
    return X3[I2[I2.length - 1]];
  }
};
var reduceCount = {
  label: "Frequency",
  reduceIndex(I2) {
    return I2.length;
  }
};
var reduceDistinct = {
  label: "Distinct",
  reduceIndex(I2, X3) {
    const s2 = new InternSet();
    for (const i2 of I2)
      s2.add(X3[i2]);
    return s2.size;
  }
};
var reduceSum = reduceAccessor(sum4);
function reduceProportion(value, scope) {
  return value == null ? { scope, label: "Frequency", reduceIndex: (I2, V2, basis2 = 1) => I2.length / basis2 } : { scope, reduceIndex: (I2, V2, basis2 = 1) => sum4(I2, (i2) => V2[i2]) / basis2 };
}

// ../../node_modules/@observablehq/plot/src/channel.js
function createChannel(data, { scale: scale3, type: type2, value, filter: filter3, hint }, name2) {
  if (hint === void 0 && typeof value?.transform === "function")
    hint = value.hint;
  return inferChannelScale(name2, {
    scale: scale3,
    type: type2,
    value: valueof(data, value),
    label: labelof(value),
    filter: filter3,
    hint
  });
}
function createChannels(channels, data) {
  return Object.fromEntries(
    Object.entries(channels).map(([name2, channel]) => [name2, createChannel(data, channel, name2)])
  );
}
function valueObject(channels, scales) {
  const values2 = Object.fromEntries(
    Object.entries(channels).map(([name2, { scale: scaleName, value }]) => {
      const scale3 = scaleName == null ? null : scales[scaleName];
      return [name2, scale3 == null ? value : map2(value, scale3)];
    })
  );
  values2.channels = channels;
  return values2;
}
function inferChannelScale(name2, channel) {
  const { scale: scale3, value } = channel;
  if (scale3 === true || scale3 === "auto") {
    switch (name2) {
      case "fill":
      case "stroke":
      case "color":
        channel.scale = scale3 !== true && isEvery(value, isColor) ? null : "color";
        break;
      case "fillOpacity":
      case "strokeOpacity":
      case "opacity":
        channel.scale = scale3 !== true && isEvery(value, isOpacity) ? null : "opacity";
        break;
      case "symbol":
        if (scale3 !== true && isEvery(value, isSymbol)) {
          channel.scale = null;
          channel.value = map2(value, maybeSymbol);
        } else {
          channel.scale = "symbol";
        }
        break;
      default:
        channel.scale = registry.has(name2) ? name2 : null;
        break;
    }
  } else if (scale3 === false) {
    channel.scale = null;
  } else if (scale3 != null && !registry.has(scale3)) {
    throw new Error(`unknown scale: ${scale3}`);
  }
  return channel;
}
function channelDomain(data, facets, channels, facetChannels, options) {
  const { order: defaultOrder, reverse: defaultReverse, reduce: defaultReduce = true, limit: defaultLimit } = options;
  for (const x3 in options) {
    if (!registry.has(x3))
      continue;
    let { value: y3, order = defaultOrder, reverse: reverse3 = defaultReverse, reduce = defaultReduce, limit = defaultLimit } = maybeValue(options[x3]);
    const negate2 = y3?.startsWith("-");
    if (negate2)
      y3 = y3.slice(1);
    order = order === void 0 ? negate2 !== (y3 === "width" || y3 === "height") ? descendingGroup : ascendingGroup : maybeOrder(order);
    if (reduce == null || reduce === false)
      continue;
    const X3 = x3 === "fx" || x3 === "fy" ? reindexFacetChannel(facets, facetChannels[x3]) : findScaleChannel(channels, x3);
    if (!X3)
      throw new Error(`missing channel for scale: ${x3}`);
    const XV = X3.value;
    const [lo = 0, hi = Infinity] = isIterable3(limit) ? limit : limit < 0 ? [limit] : [0, limit];
    if (y3 == null) {
      X3.domain = () => {
        let domain = Array.from(new InternSet(XV));
        if (reverse3)
          domain = domain.reverse();
        if (lo !== 0 || hi !== Infinity)
          domain = domain.slice(lo, hi);
        return domain;
      };
    } else {
      const YV = y3 === "data" ? data : y3 === "height" ? difference(channels, "y1", "y2") : y3 === "width" ? difference(channels, "x1", "x2") : values(channels, y3, y3 === "y" ? "y2" : y3 === "x" ? "x2" : void 0);
      const reducer2 = maybeReduce(reduce === true ? "max" : reduce, YV);
      X3.domain = () => {
        let domain = rollups(
          range2(XV),
          (I2) => reducer2.reduceIndex(I2, YV),
          (i2) => XV[i2]
        );
        if (order)
          domain.sort(order);
        if (reverse3)
          domain.reverse();
        if (lo !== 0 || hi !== Infinity)
          domain = domain.slice(lo, hi);
        return domain.map(first2);
      };
    }
  }
}
function findScaleChannel(channels, scale3) {
  for (const name2 in channels) {
    const channel = channels[name2];
    if (channel.scale === scale3)
      return channel;
  }
}
function reindexFacetChannel(facets, channel) {
  const originalFacets = facets.original;
  if (originalFacets === facets)
    return channel;
  const V1 = channel.value;
  const V2 = channel.value = [];
  for (let i2 = 0; i2 < originalFacets.length; ++i2) {
    const vi = V1[originalFacets[i2][0]];
    for (const j2 of facets[i2])
      V2[j2] = vi;
  }
  return channel;
}
function difference(channels, k1, k22) {
  const X13 = values(channels, k1);
  const X24 = values(channels, k22);
  return map2(X24, (x22, i2) => Math.abs(x22 - X13[i2]), Float64Array);
}
function values(channels, name2, alias) {
  let channel = channels[name2];
  if (!channel && alias !== void 0)
    channel = channels[alias];
  if (channel)
    return channel.value;
  throw new Error(`missing channel: ${name2}`);
}
function maybeOrder(order) {
  if (order == null || typeof order === "function")
    return order;
  switch (`${order}`.toLowerCase()) {
    case "ascending":
      return ascendingGroup;
    case "descending":
      return descendingGroup;
  }
  throw new Error(`invalid order: ${order}`);
}
function ascendingGroup([ak, av], [bk, bv]) {
  return ascendingDefined2(av, bv) || ascendingDefined2(ak, bk);
}
function descendingGroup([ak, av], [bk, bv]) {
  return descendingDefined(av, bv) || ascendingDefined2(ak, bk);
}
function getSource(channels, key) {
  let channel = channels[key];
  if (!channel)
    return;
  while (channel.source)
    channel = channel.source;
  return channel.source === null ? null : channel;
}

// ../../node_modules/@observablehq/plot/src/context.js
function createContext(options = {}) {
  const { document: document2 = typeof window !== "undefined" ? window.document : void 0 } = options;
  return { document: document2 };
}
function create3(name2, { document: document2 }) {
  return select_default2(creator_default(name2).call(document2.documentElement));
}

// ../../node_modules/@observablehq/plot/src/warnings.js
var warnings = 0;
function consumeWarnings() {
  const w2 = warnings;
  warnings = 0;
  return w2;
}
function warn(message) {
  console.warn(message);
  ++warnings;
}

// ../../node_modules/@observablehq/plot/src/projection.js
var pi4 = Math.PI;
var tau5 = 2 * pi4;
var defaultAspectRatio = 0.618;
function createProjection({
  projection: projection3,
  inset: globalInset = 0,
  insetTop = globalInset,
  insetRight = globalInset,
  insetBottom = globalInset,
  insetLeft = globalInset
} = {}, dimensions) {
  if (projection3 == null)
    return;
  if (typeof projection3.stream === "function")
    return projection3;
  let options;
  let domain;
  let clip = "frame";
  if (isObject4(projection3)) {
    let inset2;
    ({
      type: projection3,
      domain,
      inset: inset2,
      insetTop = inset2 !== void 0 ? inset2 : insetTop,
      insetRight = inset2 !== void 0 ? inset2 : insetRight,
      insetBottom = inset2 !== void 0 ? inset2 : insetBottom,
      insetLeft = inset2 !== void 0 ? inset2 : insetLeft,
      clip = clip,
      ...options
    } = projection3);
    if (projection3 == null)
      return;
  }
  if (typeof projection3 !== "function")
    ({ type: projection3 } = namedProjection(projection3));
  const { width: width2, height: height2, marginLeft: marginLeft2, marginRight: marginRight2, marginTop: marginTop2, marginBottom: marginBottom2 } = dimensions;
  const dx = width2 - marginLeft2 - marginRight2 - insetLeft - insetRight;
  const dy = height2 - marginTop2 - marginBottom2 - insetTop - insetBottom;
  projection3 = projection3?.({ width: dx, height: dy, clip, ...options });
  if (projection3 == null)
    return;
  clip = maybePostClip(clip, marginLeft2, marginTop2, width2 - marginRight2, height2 - marginBottom2);
  let tx = marginLeft2 + insetLeft;
  let ty = marginTop2 + insetTop;
  let transform3;
  if (domain != null) {
    const [[x06, y06], [x12, y12]] = path_default(projection3).bounds(domain);
    const k3 = Math.min(dx / (x12 - x06), dy / (y12 - y06));
    if (k3 > 0) {
      tx -= (k3 * (x06 + x12) - dx) / 2;
      ty -= (k3 * (y06 + y12) - dy) / 2;
      transform3 = transform_default({
        point(x3, y3) {
          this.stream.point(x3 * k3 + tx, y3 * k3 + ty);
        }
      });
    } else {
      warn(`Warning: the projection could not be fit to the specified domain; using the default scale.`);
    }
  }
  transform3 ??= tx === 0 && ty === 0 ? identity8() : transform_default({
    point(x3, y3) {
      this.stream.point(x3 + tx, y3 + ty);
    }
  });
  return { stream: (s2) => projection3.stream(transform3.stream(clip(s2))) };
}
function namedProjection(projection3) {
  switch (`${projection3}`.toLowerCase()) {
    case "albers-usa":
      return scaleProjection(albersUsa_default, 0.7463, 0.4673);
    case "albers":
      return conicProjection2(albers_default, 0.7463, 0.4673);
    case "azimuthal-equal-area":
      return scaleProjection(azimuthalEqualArea_default, 4, 4);
    case "azimuthal-equidistant":
      return scaleProjection(azimuthalEquidistant_default, tau5, tau5);
    case "conic-conformal":
      return conicProjection2(conicConformal_default, tau5, tau5);
    case "conic-equal-area":
      return conicProjection2(conicEqualArea_default, 6.1702, 2.9781);
    case "conic-equidistant":
      return conicProjection2(conicEquidistant_default, 7.312, 3.6282);
    case "equal-earth":
      return scaleProjection(equalEarth_default, 5.4133, 2.6347);
    case "equirectangular":
      return scaleProjection(equirectangular_default, tau5, pi4);
    case "gnomonic":
      return scaleProjection(gnomonic_default, 3.4641, 3.4641);
    case "identity":
      return { type: identity8 };
    case "reflect-y":
      return { type: reflectY };
    case "mercator":
      return scaleProjection(mercator_default, tau5, tau5);
    case "orthographic":
      return scaleProjection(orthographic_default, 2, 2);
    case "stereographic":
      return scaleProjection(stereographic_default, 2, 2);
    case "transverse-mercator":
      return scaleProjection(transverseMercator_default, tau5, tau5);
    default:
      throw new Error(`unknown projection type: ${projection3}`);
  }
}
function maybePostClip(clip, x12, y12, x22, y22) {
  if (clip === false || clip == null || typeof clip === "number")
    return (s2) => s2;
  if (clip === true)
    clip = "frame";
  switch (`${clip}`.toLowerCase()) {
    case "frame":
      return clipRectangle(x12, y12, x22, y22);
    default:
      throw new Error(`unknown projection clip type: ${clip}`);
  }
}
function scaleProjection(createProjection2, kx2, ky2) {
  return {
    type: ({ width: width2, height: height2, rotate, precision = 0.15, clip }) => {
      const projection3 = createProjection2();
      if (precision != null)
        projection3.precision?.(precision);
      if (rotate != null)
        projection3.rotate?.(rotate);
      if (typeof clip === "number")
        projection3.clipAngle?.(clip);
      projection3.scale(Math.min(width2 / kx2, height2 / ky2));
      projection3.translate([width2 / 2, height2 / 2]);
      return projection3;
    },
    aspectRatio: ky2 / kx2
  };
}
function conicProjection2(createProjection2, kx2, ky2) {
  const { type: type2, aspectRatio: aspectRatio2 } = scaleProjection(createProjection2, kx2, ky2);
  return {
    type: (options) => {
      const { parallels, domain, width: width2, height: height2 } = options;
      const projection3 = type2(options);
      if (parallels != null) {
        projection3.parallels(parallels);
        if (domain === void 0) {
          projection3.fitSize([width2, height2], { type: "Sphere" });
        }
      }
      return projection3;
    },
    aspectRatio: aspectRatio2
  };
}
var identity8 = constant({ stream: (stream) => stream });
var reflectY = constant(
  transform_default({
    point(x3, y3) {
      this.stream.point(x3, -y3);
    }
  })
);
function project(cx, cy, values2, projection3) {
  const x3 = values2[cx];
  const y3 = values2[cy];
  const n = x3.length;
  const X3 = values2[cx] = new Float64Array(n).fill(NaN);
  const Y3 = values2[cy] = new Float64Array(n).fill(NaN);
  let i2;
  const stream = projection3.stream({
    point(x4, y4) {
      X3[i2] = x4;
      Y3[i2] = y4;
    }
  });
  for (i2 = 0; i2 < n; ++i2) {
    stream.point(x3[i2], y3[i2]);
  }
}
function hasProjection({ projection: projection3 } = {}) {
  if (projection3 == null)
    return false;
  if (typeof projection3.stream === "function")
    return true;
  if (isObject4(projection3))
    projection3 = projection3.type;
  return projection3 != null;
}
function projectionAspectRatio(projection3) {
  if (typeof projection3?.stream === "function")
    return defaultAspectRatio;
  if (isObject4(projection3))
    projection3 = projection3.type;
  if (projection3 == null)
    return;
  if (typeof projection3 !== "function") {
    const { aspectRatio: aspectRatio2 } = namedProjection(projection3);
    if (aspectRatio2)
      return aspectRatio2;
  }
  return defaultAspectRatio;
}
function applyPosition(channels, scales, { projection: projection3 }) {
  const { x: x3, y: y3 } = channels;
  let position3 = {};
  if (x3)
    position3.x = x3;
  if (y3)
    position3.y = y3;
  position3 = valueObject(position3, scales);
  if (projection3 && x3?.scale === "x" && y3?.scale === "y")
    project("x", "y", position3, projection3);
  if (x3)
    position3.x = coerceNumbers(position3.x);
  if (y3)
    position3.y = coerceNumbers(position3.y);
  return position3;
}
function getGeometryChannels(channel) {
  const X3 = [];
  const Y3 = [];
  const x3 = { scale: "x", value: X3 };
  const y3 = { scale: "y", value: Y3 };
  const sink = {
    point(x4, y4) {
      X3.push(x4);
      Y3.push(y4);
    },
    lineStart() {
    },
    lineEnd() {
    },
    polygonStart() {
    },
    polygonEnd() {
    },
    sphere() {
    }
  };
  for (const object3 of channel.value)
    stream_default(object3, sink);
  return [x3, y3];
}

// ../../node_modules/@observablehq/plot/src/scales/schemes.js
var categoricalSchemes = /* @__PURE__ */ new Map([
  ["accent", Accent_default],
  ["category10", category10_default],
  ["dark2", Dark2_default],
  ["paired", Paired_default],
  ["pastel1", Pastel1_default],
  ["pastel2", Pastel2_default],
  ["set1", Set1_default],
  ["set2", Set2_default],
  ["set3", Set3_default],
  ["tableau10", Tableau10_default]
]);
function isCategoricalScheme(scheme28) {
  return scheme28 != null && categoricalSchemes.has(`${scheme28}`.toLowerCase());
}
var ordinalSchemes = new Map([
  ...categoricalSchemes,
  // diverging
  ["brbg", scheme112(scheme, BrBG_default)],
  ["prgn", scheme112(scheme2, PRGn_default)],
  ["piyg", scheme112(scheme3, PiYG_default)],
  ["puor", scheme112(scheme4, PuOr_default)],
  ["rdbu", scheme112(scheme5, RdBu_default)],
  ["rdgy", scheme112(scheme6, RdGy_default)],
  ["rdylbu", scheme112(scheme7, RdYlBu_default)],
  ["rdylgn", scheme112(scheme8, RdYlGn_default)],
  ["spectral", scheme112(scheme9, Spectral_default)],
  // reversed diverging (for temperature data)
  ["burd", scheme11r(scheme5, RdBu_default)],
  ["buylrd", scheme11r(scheme7, RdYlBu_default)],
  // sequential (single-hue)
  ["blues", scheme92(scheme22, Blues_default)],
  ["greens", scheme92(scheme23, Greens_default)],
  ["greys", scheme92(scheme24, Greys_default)],
  ["oranges", scheme92(scheme27, Oranges_default)],
  ["purples", scheme92(scheme25, Purples_default)],
  ["reds", scheme92(scheme26, Reds_default)],
  // sequential (multi-hue)
  ["turbo", schemei(turbo_default)],
  ["viridis", schemei(viridis_default)],
  ["magma", schemei(magma)],
  ["inferno", schemei(inferno)],
  ["plasma", schemei(plasma)],
  ["cividis", schemei(cividis_default)],
  ["cubehelix", schemei(cubehelix_default2)],
  ["warm", schemei(warm)],
  ["cool", schemei(cool)],
  ["bugn", scheme92(scheme10, BuGn_default)],
  ["bupu", scheme92(scheme11, BuPu_default)],
  ["gnbu", scheme92(scheme12, GnBu_default)],
  ["orrd", scheme92(scheme13, OrRd_default)],
  ["pubu", scheme92(scheme15, PuBu_default)],
  ["pubugn", scheme92(scheme14, PuBuGn_default)],
  ["purd", scheme92(scheme16, PuRd_default)],
  ["rdpu", scheme92(scheme17, RdPu_default)],
  ["ylgn", scheme92(scheme19, YlGn_default)],
  ["ylgnbu", scheme92(scheme18, YlGnBu_default)],
  ["ylorbr", scheme92(scheme20, YlOrBr_default)],
  ["ylorrd", scheme92(scheme21, YlOrRd_default)],
  // cyclical
  ["rainbow", schemeicyclical(rainbow_default)],
  ["sinebow", schemeicyclical(sinebow_default)]
]);
function scheme92(scheme28, interpolate) {
  return ({ length: n }) => {
    if (n === 1)
      return [scheme28[3][1]];
    if (n === 2)
      return [scheme28[3][1], scheme28[3][2]];
    n = Math.max(3, Math.floor(n));
    return n > 9 ? quantize_default(interpolate, n) : scheme28[n];
  };
}
function scheme112(scheme28, interpolate) {
  return ({ length: n }) => {
    if (n === 2)
      return [scheme28[3][0], scheme28[3][2]];
    n = Math.max(3, Math.floor(n));
    return n > 11 ? quantize_default(interpolate, n) : scheme28[n];
  };
}
function scheme11r(scheme28, interpolate) {
  return ({ length: n }) => {
    if (n === 2)
      return [scheme28[3][2], scheme28[3][0]];
    n = Math.max(3, Math.floor(n));
    return n > 11 ? quantize_default((t) => interpolate(1 - t), n) : scheme28[n].slice().reverse();
  };
}
function schemei(interpolate) {
  return ({ length: n }) => quantize_default(interpolate, Math.max(2, Math.floor(n)));
}
function schemeicyclical(interpolate) {
  return ({ length: n }) => quantize_default(interpolate, Math.floor(n) + 1).slice(0, -1);
}
function ordinalScheme(scheme28) {
  const s2 = `${scheme28}`.toLowerCase();
  if (!ordinalSchemes.has(s2))
    throw new Error(`unknown ordinal scheme: ${s2}`);
  return ordinalSchemes.get(s2);
}
function ordinalRange(scheme28, length4) {
  const s2 = ordinalScheme(scheme28);
  const r = typeof s2 === "function" ? s2({ length: length4 }) : s2;
  return r.length !== length4 ? r.slice(0, length4) : r;
}
function maybeBooleanRange(domain, scheme28 = "greys") {
  const range3 = /* @__PURE__ */ new Set();
  const [f2, t] = ordinalRange(scheme28, 2);
  for (const value of domain) {
    if (value == null)
      continue;
    if (value === true)
      range3.add(t);
    else if (value === false)
      range3.add(f2);
    else
      return;
  }
  return [...range3];
}
var quantitativeSchemes = /* @__PURE__ */ new Map([
  // diverging
  ["brbg", BrBG_default],
  ["prgn", PRGn_default],
  ["piyg", PiYG_default],
  ["puor", PuOr_default],
  ["rdbu", RdBu_default],
  ["rdgy", RdGy_default],
  ["rdylbu", RdYlBu_default],
  ["rdylgn", RdYlGn_default],
  ["spectral", Spectral_default],
  // reversed diverging (for temperature data)
  ["burd", (t) => RdBu_default(1 - t)],
  ["buylrd", (t) => RdYlBu_default(1 - t)],
  // sequential (single-hue)
  ["blues", Blues_default],
  ["greens", Greens_default],
  ["greys", Greys_default],
  ["purples", Purples_default],
  ["reds", Reds_default],
  ["oranges", Oranges_default],
  // sequential (multi-hue)
  ["turbo", turbo_default],
  ["viridis", viridis_default],
  ["magma", magma],
  ["inferno", inferno],
  ["plasma", plasma],
  ["cividis", cividis_default],
  ["cubehelix", cubehelix_default2],
  ["warm", warm],
  ["cool", cool],
  ["bugn", BuGn_default],
  ["bupu", BuPu_default],
  ["gnbu", GnBu_default],
  ["orrd", OrRd_default],
  ["pubugn", PuBuGn_default],
  ["pubu", PuBu_default],
  ["purd", PuRd_default],
  ["rdpu", RdPu_default],
  ["ylgnbu", YlGnBu_default],
  ["ylgn", YlGn_default],
  ["ylorbr", YlOrBr_default],
  ["ylorrd", YlOrRd_default],
  // cyclical
  ["rainbow", rainbow_default],
  ["sinebow", sinebow_default]
]);
function quantitativeScheme(scheme28) {
  const s2 = `${scheme28}`.toLowerCase();
  if (!quantitativeSchemes.has(s2))
    throw new Error(`unknown quantitative scheme: ${s2}`);
  return quantitativeSchemes.get(s2);
}
var divergingSchemes = /* @__PURE__ */ new Set([
  "brbg",
  "prgn",
  "piyg",
  "puor",
  "rdbu",
  "rdgy",
  "rdylbu",
  "rdylgn",
  "spectral",
  "burd",
  "buylrd"
]);
function isDivergingScheme(scheme28) {
  return scheme28 != null && divergingSchemes.has(`${scheme28}`.toLowerCase());
}

// ../../node_modules/@observablehq/plot/src/scales/quantitative.js
var flip = (i2) => (t) => i2(1 - t);
var unit2 = [0, 1];
var interpolators = /* @__PURE__ */ new Map([
  // numbers
  ["number", number_default],
  // color spaces
  ["rgb", rgb_default],
  ["hsl", hsl_default],
  ["hcl", hcl_default],
  ["lab", lab2]
]);
function maybeInterpolator(interpolate) {
  const i2 = `${interpolate}`.toLowerCase();
  if (!interpolators.has(i2))
    throw new Error(`unknown interpolator: ${i2}`);
  return interpolators.get(i2);
}
function createScaleQ(key, scale3, channels, {
  type: type2,
  nice: nice3,
  clamp,
  zero: zero3,
  domain = inferAutoDomain(key, channels),
  unknown,
  round: round3,
  scheme: scheme28,
  interval: interval2,
  range: range3 = registry.get(key) === radius ? inferRadialRange(channels, domain) : registry.get(key) === length3 ? inferLengthRange(channels, domain) : registry.get(key) === opacity ? unit2 : void 0,
  interpolate = registry.get(key) === color2 ? scheme28 == null && range3 !== void 0 ? rgb_default : quantitativeScheme(scheme28 !== void 0 ? scheme28 : type2 === "cyclical" ? "rainbow" : "turbo") : round3 ? round_default : number_default,
  reverse: reverse3
}) {
  interval2 = maybeRangeInterval(interval2, type2);
  if (type2 === "cyclical" || type2 === "sequential")
    type2 = "linear";
  reverse3 = !!reverse3;
  if (range3 !== void 0) {
    const n = (domain = arrayify2(domain)).length;
    const m2 = (range3 = arrayify2(range3)).length;
    if (n > m2) {
      domain = domain.slice(0, m2);
      warn(`Warning: the ${key} scale domain contains extra elements.`);
    } else if (m2 > n) {
      range3 = range3.slice(0, n);
      warn(`Warning: the ${key} scale range contains extra elements.`);
    }
  }
  if (typeof interpolate !== "function") {
    interpolate = maybeInterpolator(interpolate);
  }
  if (interpolate.length === 1) {
    if (reverse3) {
      interpolate = flip(interpolate);
      reverse3 = false;
    }
    if (range3 === void 0) {
      range3 = Float64Array.from(domain, (_2, i2) => i2 / (domain.length - 1));
      if (range3.length === 2)
        range3 = unit2;
    }
    scale3.interpolate((range3 === unit2 ? constant : interpolatePiecewise)(interpolate));
  } else {
    scale3.interpolate(interpolate);
  }
  if (zero3) {
    const [min5, max4] = extent(domain);
    if (min5 > 0 || max4 < 0) {
      domain = slice3(domain);
      if (orderof(domain) !== Math.sign(min5))
        domain[domain.length - 1] = 0;
      else
        domain[0] = 0;
    }
  }
  if (reverse3)
    domain = reverse(domain);
  scale3.domain(domain).unknown(unknown);
  if (nice3)
    scale3.nice(maybeNice(nice3, type2)), domain = scale3.domain();
  if (range3 !== void 0)
    scale3.range(range3);
  if (clamp)
    scale3.clamp(clamp);
  return { type: type2, domain, range: range3, scale: scale3, interpolate, interval: interval2 };
}
function maybeNice(nice3, type2) {
  return nice3 === true ? void 0 : typeof nice3 === "number" ? nice3 : maybeNiceInterval(nice3, type2);
}
function createScaleLinear(key, channels, options) {
  return createScaleQ(key, linear2(), channels, options);
}
function createScaleSqrt(key, channels, options) {
  return createScalePow(key, channels, { ...options, exponent: 0.5 });
}
function createScalePow(key, channels, { exponent = 1, ...options }) {
  return createScaleQ(key, pow3().exponent(exponent), channels, { ...options, type: "pow" });
}
function createScaleLog(key, channels, { base = 10, domain = inferLogDomain(channels), ...options }) {
  return createScaleQ(key, log2().base(base), channels, { ...options, domain });
}
function createScaleSymlog(key, channels, { constant: constant2 = 1, ...options }) {
  return createScaleQ(key, symlog().constant(constant2), channels, options);
}
function createScaleQuantile(key, channels, {
  range: range3,
  quantiles = range3 === void 0 ? 5 : (range3 = [...range3]).length,
  // deprecated; use n instead
  n = quantiles,
  scheme: scheme28 = "rdylbu",
  domain = inferQuantileDomain(channels),
  unknown,
  interpolate,
  reverse: reverse3
}) {
  if (range3 === void 0) {
    range3 = interpolate !== void 0 ? quantize_default(interpolate, n) : registry.get(key) === color2 ? ordinalRange(scheme28, n) : void 0;
  }
  if (domain.length > 0) {
    domain = quantile3(domain, range3 === void 0 ? { length: n } : range3).quantiles();
  }
  return createScaleThreshold(key, channels, { domain, range: range3, reverse: reverse3, unknown });
}
function createScaleQuantize(key, channels, {
  range: range3,
  n = range3 === void 0 ? 5 : (range3 = [...range3]).length,
  scheme: scheme28 = "rdylbu",
  domain = inferAutoDomain(key, channels),
  unknown,
  interpolate,
  reverse: reverse3
}) {
  const [min5, max4] = extent(domain);
  let thresholds;
  if (range3 === void 0) {
    thresholds = ticks(min5, max4, n);
    if (thresholds[0] <= min5)
      thresholds.splice(0, 1);
    if (thresholds[thresholds.length - 1] >= max4)
      thresholds.pop();
    n = thresholds.length + 1;
    range3 = interpolate !== void 0 ? quantize_default(interpolate, n) : registry.get(key) === color2 ? ordinalRange(scheme28, n) : void 0;
  } else {
    thresholds = quantize_default(number_default(min5, max4), n + 1).slice(1, -1);
    if (min5 instanceof Date)
      thresholds = thresholds.map((x3) => new Date(x3));
  }
  if (orderof(arrayify2(domain)) < 0)
    thresholds.reverse();
  return createScaleThreshold(key, channels, { domain: thresholds, range: range3, reverse: reverse3, unknown });
}
function createScaleThreshold(key, channels, {
  domain = [0],
  // explicit thresholds in ascending order
  unknown,
  scheme: scheme28 = "rdylbu",
  interpolate,
  range: range3 = interpolate !== void 0 ? quantize_default(interpolate, domain.length + 1) : registry.get(key) === color2 ? ordinalRange(scheme28, domain.length + 1) : void 0,
  reverse: reverse3
}) {
  domain = arrayify2(domain);
  const sign3 = orderof(domain);
  if (!isNaN(sign3) && !isOrdered(domain, sign3))
    throw new Error(`the ${key} scale has a non-monotonic domain`);
  if (reverse3)
    range3 = reverse(range3);
  return {
    type: "threshold",
    scale: threshold(sign3 < 0 ? reverse(domain) : domain, range3 === void 0 ? [] : range3).unknown(unknown),
    domain,
    range: range3
  };
}
function isOrdered(domain, sign3) {
  for (let i2 = 1, n = domain.length, d = domain[0]; i2 < n; ++i2) {
    const s2 = descending(d, d = domain[i2]);
    if (s2 !== 0 && s2 !== sign3)
      return false;
  }
  return true;
}
function createScaleIdentity() {
  return { type: "identity", scale: identity5() };
}
function inferDomain(channels, f2 = finite2) {
  return channels.length ? [
    min2(channels, ({ value }) => value === void 0 ? value : min2(value, f2)),
    max2(channels, ({ value }) => value === void 0 ? value : max2(value, f2))
  ] : [0, 1];
}
function inferAutoDomain(key, channels) {
  const type2 = registry.get(key);
  return (type2 === radius || type2 === opacity || type2 === length3 ? inferZeroDomain : inferDomain)(channels);
}
function inferZeroDomain(channels) {
  return [0, channels.length ? max2(channels, ({ value }) => value === void 0 ? value : max2(value, finite2)) : 1];
}
function inferRadialRange(channels, domain) {
  const hint = channels.find(({ radius: radius2 }) => radius2 !== void 0);
  if (hint !== void 0)
    return [0, hint.radius];
  const h25 = quantile2(channels, 0.5, ({ value }) => value === void 0 ? NaN : quantile2(value, 0.25, positive));
  const range3 = domain.map((d) => 3 * Math.sqrt(d / h25));
  const k3 = 30 / max2(range3);
  return k3 < 1 ? range3.map((r) => r * k3) : range3;
}
function inferLengthRange(channels, domain) {
  const h50 = median2(channels, ({ value }) => value === void 0 ? NaN : median2(value, Math.abs));
  const range3 = domain.map((d) => 12 * d / h50);
  const k3 = 60 / max2(range3);
  return k3 < 1 ? range3.map((r) => r * k3) : range3;
}
function inferLogDomain(channels) {
  for (const { value } of channels) {
    if (value !== void 0) {
      for (let v3 of value) {
        if (v3 > 0)
          return inferDomain(channels, positive);
        if (v3 < 0)
          return inferDomain(channels, negative);
      }
    }
  }
  return [1, 10];
}
function inferQuantileDomain(channels) {
  const domain = [];
  for (const { value } of channels) {
    if (value === void 0)
      continue;
    for (const v3 of value)
      domain.push(v3);
  }
  return domain;
}
function interpolatePiecewise(interpolate) {
  return (i2, j2) => (t) => interpolate(i2 + t * (j2 - i2));
}

// ../../node_modules/@observablehq/plot/src/scales/diverging.js
function createScaleD(key, scale3, transform3, channels, {
  type: type2,
  nice: nice3,
  clamp,
  domain = inferDomain(channels),
  unknown,
  pivot = 0,
  scheme: scheme28,
  range: range3,
  symmetric = true,
  interpolate = registry.get(key) === color2 ? scheme28 == null && range3 !== void 0 ? rgb_default : quantitativeScheme(scheme28 !== void 0 ? scheme28 : "rdbu") : number_default,
  reverse: reverse3
}) {
  pivot = +pivot;
  domain = arrayify2(domain);
  let [min5, max4] = domain;
  if (domain.length > 2)
    warn(`Warning: the diverging ${key} scale domain contains extra elements.`);
  if (descending(min5, max4) < 0)
    [min5, max4] = [max4, min5], reverse3 = !reverse3;
  min5 = Math.min(min5, pivot);
  max4 = Math.max(max4, pivot);
  if (typeof interpolate !== "function") {
    interpolate = maybeInterpolator(interpolate);
  }
  if (range3 !== void 0) {
    interpolate = interpolate.length === 1 ? interpolatePiecewise(interpolate)(...range3) : piecewise(interpolate, range3);
  }
  if (reverse3)
    interpolate = flip(interpolate);
  if (symmetric) {
    const mid2 = transform3.apply(pivot);
    const mindelta = mid2 - transform3.apply(min5);
    const maxdelta = transform3.apply(max4) - mid2;
    if (mindelta < maxdelta)
      min5 = transform3.invert(mid2 - maxdelta);
    else if (mindelta > maxdelta)
      max4 = transform3.invert(mid2 + mindelta);
  }
  scale3.domain([min5, pivot, max4]).unknown(unknown).interpolator(interpolate);
  if (clamp)
    scale3.clamp(clamp);
  if (nice3)
    scale3.nice(nice3);
  return { type: type2, domain: [min5, max4], pivot, interpolate, scale: scale3 };
}
function createScaleDiverging(key, channels, options) {
  return createScaleD(key, diverging(), transformIdentity, channels, options);
}
function createScaleDivergingSqrt(key, channels, options) {
  return createScaleDivergingPow(key, channels, { ...options, exponent: 0.5 });
}
function createScaleDivergingPow(key, channels, { exponent = 1, ...options }) {
  return createScaleD(key, divergingPow().exponent(exponent = +exponent), transformPow2(exponent), channels, {
    ...options,
    type: "diverging-pow"
  });
}
function createScaleDivergingLog(key, channels, { base = 10, pivot = 1, domain = inferDomain(channels, pivot < 0 ? negative : positive), ...options }) {
  return createScaleD(key, divergingLog().base(base = +base), transformLog2, channels, {
    domain,
    pivot,
    ...options
  });
}
function createScaleDivergingSymlog(key, channels, { constant: constant2 = 1, ...options }) {
  return createScaleD(
    key,
    divergingSymlog().constant(constant2 = +constant2),
    transformSymlog2(constant2),
    channels,
    options
  );
}
var transformIdentity = {
  apply(x3) {
    return x3;
  },
  invert(x3) {
    return x3;
  }
};
var transformLog2 = {
  apply: Math.log,
  invert: Math.exp
};
var transformSqrt2 = {
  apply(x3) {
    return Math.sign(x3) * Math.sqrt(Math.abs(x3));
  },
  invert(x3) {
    return Math.sign(x3) * (x3 * x3);
  }
};
function transformPow2(exponent) {
  return exponent === 0.5 ? transformSqrt2 : {
    apply(x3) {
      return Math.sign(x3) * Math.pow(Math.abs(x3), exponent);
    },
    invert(x3) {
      return Math.sign(x3) * Math.pow(Math.abs(x3), 1 / exponent);
    }
  };
}
function transformSymlog2(constant2) {
  return {
    apply(x3) {
      return Math.sign(x3) * Math.log1p(Math.abs(x3 / constant2));
    },
    invert(x3) {
      return Math.sign(x3) * Math.expm1(Math.abs(x3)) * constant2;
    }
  };
}

// ../../node_modules/@observablehq/plot/src/scales/temporal.js
function createScaleT(key, scale3, channels, options) {
  return createScaleQ(key, scale3, channels, options);
}
function createScaleTime(key, channels, options) {
  return createScaleT(key, time(), channels, options);
}
function createScaleUtc(key, channels, options) {
  return createScaleT(key, utcTime(), channels, options);
}

// ../../node_modules/@observablehq/plot/src/scales/ordinal.js
var ordinalImplicit = Symbol("ordinal");
function createScaleO(key, scale3, channels, { type: type2, interval: interval2, domain, range: range3, reverse: reverse3, hint }) {
  interval2 = maybeRangeInterval(interval2, type2);
  if (domain === void 0)
    domain = inferDomain2(channels, interval2, key);
  if (type2 === "categorical" || type2 === ordinalImplicit)
    type2 = "ordinal";
  if (reverse3)
    domain = reverse(domain);
  scale3.domain(domain);
  if (range3 !== void 0) {
    if (typeof range3 === "function")
      range3 = range3(domain);
    scale3.range(range3);
  }
  return { type: type2, domain, range: range3, scale: scale3, hint, interval: interval2 };
}
function createScaleOrdinal(key, channels, { type: type2, interval: interval2, domain, range: range3, scheme: scheme28, unknown, ...options }) {
  interval2 = maybeRangeInterval(interval2, type2);
  if (domain === void 0)
    domain = inferDomain2(channels, interval2, key);
  let hint;
  if (registry.get(key) === symbol) {
    hint = inferSymbolHint(channels);
    range3 = range3 === void 0 ? inferSymbolRange(hint) : map2(range3, maybeSymbol);
  } else if (registry.get(key) === color2) {
    if (range3 === void 0 && (type2 === "ordinal" || type2 === ordinalImplicit)) {
      range3 = maybeBooleanRange(domain, scheme28);
      if (range3 !== void 0)
        scheme28 = void 0;
    }
    if (scheme28 === void 0 && range3 === void 0) {
      scheme28 = type2 === "ordinal" ? "turbo" : "tableau10";
    }
    if (scheme28 !== void 0) {
      if (range3 !== void 0) {
        const interpolate = quantitativeScheme(scheme28);
        const t03 = range3[0], d = range3[1] - range3[0];
        range3 = ({ length: n }) => quantize_default((t) => interpolate(t03 + d * t), n);
      } else {
        range3 = ordinalScheme(scheme28);
      }
    }
  }
  if (unknown === implicit) {
    throw new Error(`implicit unknown on ${key} scale is not supported`);
  }
  return createScaleO(key, ordinal().unknown(unknown), channels, { ...options, type: type2, domain, range: range3, hint });
}
function createScalePoint(key, channels, { align: align2 = 0.5, padding: padding2 = 0.5, ...options }) {
  return maybeRound(point().align(align2).padding(padding2), channels, options, key);
}
function createScaleBand(key, channels, {
  align: align2 = 0.5,
  padding: padding2 = 0.1,
  paddingInner = padding2,
  paddingOuter = key === "fx" || key === "fy" ? 0 : padding2,
  ...options
}) {
  return maybeRound(
    band().align(align2).paddingInner(paddingInner).paddingOuter(paddingOuter),
    channels,
    options,
    key
  );
}
function maybeRound(scale3, channels, options, key) {
  let { round: round3 } = options;
  if (round3 !== void 0)
    scale3.round(round3 = !!round3);
  scale3 = createScaleO(key, scale3, channels, options);
  scale3.round = round3;
  return scale3;
}
function inferDomain2(channels, interval2, key) {
  const values2 = new InternSet();
  for (const { value, domain } of channels) {
    if (domain !== void 0)
      return domain();
    if (value === void 0)
      continue;
    for (const v3 of value)
      values2.add(v3);
  }
  if (interval2 !== void 0) {
    const [min5, max4] = extent(values2).map(interval2.floor, interval2);
    return interval2.range(min5, interval2.offset(max4));
  }
  if (values2.size > 1e4 && registry.get(key) === position) {
    throw new Error(`implicit ordinal domain of ${key} scale has more than 10,000 values`);
  }
  return sort(values2, ascendingDefined2);
}
function inferHint(channels, key) {
  let value;
  for (const { hint } of channels) {
    const candidate = hint?.[key];
    if (candidate === void 0)
      continue;
    if (value === void 0)
      value = candidate;
    else if (value !== candidate)
      return;
  }
  return value;
}
function inferSymbolHint(channels) {
  return {
    fill: inferHint(channels, "fill"),
    stroke: inferHint(channels, "stroke")
  };
}
function inferSymbolRange(hint) {
  return isNoneish(hint.fill) ? symbolsStroke : symbolsFill;
}

// ../../node_modules/@observablehq/plot/src/scales.js
function createScales(channelsByScale, {
  label: globalLabel,
  inset: globalInset = 0,
  insetTop: globalInsetTop = globalInset,
  insetRight: globalInsetRight = globalInset,
  insetBottom: globalInsetBottom = globalInset,
  insetLeft: globalInsetLeft = globalInset,
  round: round3,
  nice: nice3,
  clamp,
  zero: zero3,
  align: align2,
  padding: padding2,
  projection: projection3,
  facet: { label: facetLabel2 = globalLabel } = {},
  ...options
} = {}) {
  const scales = {};
  for (const [key, channels] of channelsByScale) {
    const scaleOptions = options[key];
    const scale3 = createScale(key, channels, {
      round: registry.get(key) === position ? round3 : void 0,
      // only for position
      nice: nice3,
      clamp,
      zero: zero3,
      align: align2,
      padding: padding2,
      projection: projection3,
      ...scaleOptions
    });
    if (scale3) {
      let {
        label: label2 = key === "fx" || key === "fy" ? facetLabel2 : globalLabel,
        percent,
        transform: transform3,
        inset: inset2,
        insetTop = inset2 !== void 0 ? inset2 : key === "y" ? globalInsetTop : 0,
        // not fy
        insetRight = inset2 !== void 0 ? inset2 : key === "x" ? globalInsetRight : 0,
        // not fx
        insetBottom = inset2 !== void 0 ? inset2 : key === "y" ? globalInsetBottom : 0,
        // not fy
        insetLeft = inset2 !== void 0 ? inset2 : key === "x" ? globalInsetLeft : 0
        // not fx
      } = scaleOptions || {};
      if (transform3 == null)
        transform3 = void 0;
      else if (typeof transform3 !== "function")
        throw new Error("invalid scale transform; not a function");
      scale3.percent = !!percent;
      scale3.label = label2 === void 0 ? inferScaleLabel(channels, scale3) : label2;
      scale3.transform = transform3;
      if (key === "x" || key === "fx") {
        scale3.insetLeft = +insetLeft;
        scale3.insetRight = +insetRight;
      } else if (key === "y" || key === "fy") {
        scale3.insetTop = +insetTop;
        scale3.insetBottom = +insetBottom;
      }
      scales[key] = scale3;
    }
  }
  return scales;
}
function createScaleFunctions(scales) {
  return Object.fromEntries(
    Object.entries(scales).filter(([, { scale: scale3 }]) => scale3).map(([name2, { scale: scale3, type: type2, interval: interval2, label: label2 }]) => {
      scale3.type = type2;
      if (interval2 != null)
        scale3.interval = interval2;
      if (label2 != null)
        scale3.label = label2;
      return [name2, scale3];
    })
  );
}
function autoScaleRange(scales, dimensions) {
  const { x: x3, y: y3, fx, fy } = scales;
  const superdimensions = fx || fy ? outerDimensions(dimensions) : dimensions;
  if (fx)
    autoScaleRangeX(fx, superdimensions);
  if (fy)
    autoScaleRangeY(fy, superdimensions);
  const subdimensions = fx || fy ? innerDimensions(scales, dimensions) : dimensions;
  if (x3)
    autoScaleRangeX(x3, subdimensions);
  if (y3)
    autoScaleRangeY(y3, subdimensions);
}
function inferScaleLabel(channels = [], scale3) {
  let label2;
  for (const { label: l } of channels) {
    if (l === void 0)
      continue;
    if (label2 === void 0)
      label2 = l;
    else if (label2 !== l)
      return;
  }
  if (label2 === void 0)
    return;
  if (!isOrdinalScale(scale3) && scale3.percent)
    label2 = `${label2} (%)`;
  return { inferred: true, toString: () => label2 };
}
function outerDimensions(dimensions) {
  const {
    marginTop: marginTop2,
    marginRight: marginRight2,
    marginBottom: marginBottom2,
    marginLeft: marginLeft2,
    width: width2,
    height: height2,
    facet: {
      marginTop: facetMarginTop2,
      marginRight: facetMarginRight2,
      marginBottom: facetMarginBottom2,
      marginLeft: facetMarginLeft2
    }
  } = dimensions;
  return {
    marginTop: Math.max(marginTop2, facetMarginTop2),
    marginRight: Math.max(marginRight2, facetMarginRight2),
    marginBottom: Math.max(marginBottom2, facetMarginBottom2),
    marginLeft: Math.max(marginLeft2, facetMarginLeft2),
    width: width2,
    height: height2
  };
}
function innerDimensions({ fx, fy }, dimensions) {
  const { marginTop: marginTop2, marginRight: marginRight2, marginBottom: marginBottom2, marginLeft: marginLeft2, width: width2, height: height2 } = outerDimensions(dimensions);
  return {
    marginTop: marginTop2,
    marginRight: marginRight2,
    marginBottom: marginBottom2,
    marginLeft: marginLeft2,
    width: fx ? fx.scale.bandwidth() + marginLeft2 + marginRight2 : width2,
    height: fy ? fy.scale.bandwidth() + marginTop2 + marginBottom2 : height2,
    facet: { width: width2, height: height2 }
  };
}
function autoScaleRangeX(scale3, dimensions) {
  if (scale3.range === void 0) {
    const { insetLeft, insetRight } = scale3;
    const { width: width2, marginLeft: marginLeft2 = 0, marginRight: marginRight2 = 0 } = dimensions;
    const left2 = marginLeft2 + insetLeft;
    const right2 = width2 - marginRight2 - insetRight;
    scale3.range = [left2, Math.max(left2, right2)];
    if (!isOrdinalScale(scale3))
      scale3.range = piecewiseRange(scale3);
    scale3.scale.range(scale3.range);
  }
  autoScaleRound(scale3);
}
function autoScaleRangeY(scale3, dimensions) {
  if (scale3.range === void 0) {
    const { insetTop, insetBottom } = scale3;
    const { height: height2, marginTop: marginTop2 = 0, marginBottom: marginBottom2 = 0 } = dimensions;
    const top2 = marginTop2 + insetTop;
    const bottom2 = height2 - marginBottom2 - insetBottom;
    scale3.range = [Math.max(top2, bottom2), top2];
    if (!isOrdinalScale(scale3))
      scale3.range = piecewiseRange(scale3);
    else
      scale3.range.reverse();
    scale3.scale.range(scale3.range);
  }
  autoScaleRound(scale3);
}
function autoScaleRound(scale3) {
  if (scale3.round === void 0 && isBandScale(scale3) && roundError(scale3) <= 30) {
    scale3.scale.round(true);
  }
}
function roundError({ scale: scale3 }) {
  const n = scale3.domain().length;
  const [start2, stop] = scale3.range();
  const paddingInner = scale3.paddingInner ? scale3.paddingInner() : 1;
  const paddingOuter = scale3.paddingOuter ? scale3.paddingOuter() : scale3.padding();
  const m2 = n - paddingInner;
  const step = Math.abs(stop - start2) / Math.max(1, m2 + paddingOuter * 2);
  return (step - Math.floor(step)) * m2;
}
function piecewiseRange(scale3) {
  const length4 = scale3.scale.domain().length + isThresholdScale(scale3);
  if (!(length4 > 2))
    return scale3.range;
  const [start2, end] = scale3.range;
  return Array.from({ length: length4 }, (_2, i2) => start2 + i2 / (length4 - 1) * (end - start2));
}
function normalizeScale(key, scale3, hint) {
  return createScale(key, hint === void 0 ? void 0 : [{ hint }], { ...scale3 });
}
function createScale(key, channels = [], options = {}) {
  const type2 = inferScaleType(key, channels, options);
  if (options.type === void 0 && options.domain === void 0 && options.range === void 0 && options.interval == null && key !== "fx" && key !== "fy" && isOrdinalScale({ type: type2 })) {
    const values2 = channels.map(({ value }) => value).filter((value) => value !== void 0);
    if (values2.some(isTemporal))
      warn(
        `Warning: some data associated with the ${key} scale are dates. Dates are typically associated with a "utc" or "time" scale rather than a "${formatScaleType(
          type2
        )}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can specify the interval of the ${key} scale (e.g., d3.utcDay), or you can suppress this warning by setting the type of the ${key} scale to "${formatScaleType(
          type2
        )}".`
      );
    else if (values2.some(isTemporalString))
      warn(
        `Warning: some data associated with the ${key} scale are strings that appear to be dates (e.g., YYYY-MM-DD). If these strings represent dates, you should parse them to Date objects. Dates are typically associated with a "utc" or "time" scale rather than a "${formatScaleType(
          type2
        )}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can suppress this warning by setting the type of the ${key} scale to "${formatScaleType(
          type2
        )}".`
      );
    else if (values2.some(isNumericString))
      warn(
        `Warning: some data associated with the ${key} scale are strings that appear to be numbers. If these strings represent numbers, you should parse or coerce them to numbers. Numbers are typically associated with a "linear" scale rather than a "${formatScaleType(
          type2
        )}" scale. If you want to treat this data as ordinal, you can specify the interval of the ${key} scale (e.g., 1 for integers), or you can suppress this warning by setting the type of the ${key} scale to "${formatScaleType(
          type2
        )}".`
      );
  }
  options.type = type2;
  switch (type2) {
    case "diverging":
    case "diverging-sqrt":
    case "diverging-pow":
    case "diverging-log":
    case "diverging-symlog":
    case "cyclical":
    case "sequential":
    case "linear":
    case "sqrt":
    case "threshold":
    case "quantile":
    case "pow":
    case "log":
    case "symlog":
      options = coerceType(channels, options, coerceNumbers);
      break;
    case "identity":
      switch (registry.get(key)) {
        case position:
          options = coerceType(channels, options, coerceNumbers);
          break;
        case symbol:
          options = coerceType(channels, options, coerceSymbols);
          break;
      }
      break;
    case "utc":
    case "time":
      options = coerceType(channels, options, coerceDates);
      break;
  }
  switch (type2) {
    case "diverging":
      return createScaleDiverging(key, channels, options);
    case "diverging-sqrt":
      return createScaleDivergingSqrt(key, channels, options);
    case "diverging-pow":
      return createScaleDivergingPow(key, channels, options);
    case "diverging-log":
      return createScaleDivergingLog(key, channels, options);
    case "diverging-symlog":
      return createScaleDivergingSymlog(key, channels, options);
    case "categorical":
    case "ordinal":
    case ordinalImplicit:
      return createScaleOrdinal(key, channels, options);
    case "cyclical":
    case "sequential":
    case "linear":
      return createScaleLinear(key, channels, options);
    case "sqrt":
      return createScaleSqrt(key, channels, options);
    case "threshold":
      return createScaleThreshold(key, channels, options);
    case "quantile":
      return createScaleQuantile(key, channels, options);
    case "quantize":
      return createScaleQuantize(key, channels, options);
    case "pow":
      return createScalePow(key, channels, options);
    case "log":
      return createScaleLog(key, channels, options);
    case "symlog":
      return createScaleSymlog(key, channels, options);
    case "utc":
      return createScaleUtc(key, channels, options);
    case "time":
      return createScaleTime(key, channels, options);
    case "point":
      return createScalePoint(key, channels, options);
    case "band":
      return createScaleBand(key, channels, options);
    case "identity":
      return registry.get(key) === position ? createScaleIdentity() : { type: "identity" };
    case void 0:
      return;
    default:
      throw new Error(`unknown scale type: ${type2}`);
  }
}
function formatScaleType(type2) {
  return typeof type2 === "symbol" ? type2.description : type2;
}
var typeProjection = { toString: () => "projection" };
function inferScaleType(key, channels, { type: type2, domain, range: range3, scheme: scheme28, pivot, projection: projection3 }) {
  if (key === "fx" || key === "fy")
    return "band";
  if ((key === "x" || key === "y") && projection3 != null)
    type2 = typeProjection;
  for (const { type: t } of channels) {
    if (t === void 0)
      continue;
    else if (type2 === void 0)
      type2 = t;
    else if (type2 !== t)
      throw new Error(`scale incompatible with channel: ${type2} !== ${t}`);
  }
  if (type2 === typeProjection)
    return;
  if (type2 !== void 0)
    return type2;
  if (domain === void 0 && !channels.some(({ value }) => value !== void 0))
    return;
  const kind = registry.get(key);
  if (kind === radius)
    return "sqrt";
  if (kind === opacity || kind === length3)
    return "linear";
  if (kind === symbol)
    return "ordinal";
  if ((domain || range3 || []).length > 2)
    return asOrdinalType(kind);
  if (domain !== void 0) {
    if (isOrdinal(domain))
      return asOrdinalType(kind);
    if (isTemporal(domain))
      return "utc";
  } else {
    const values2 = channels.map(({ value }) => value).filter((value) => value !== void 0);
    if (values2.some(isOrdinal))
      return asOrdinalType(kind);
    if (values2.some(isTemporal))
      return "utc";
  }
  if (kind === color2) {
    if (pivot != null || isDivergingScheme(scheme28))
      return "diverging";
    if (isCategoricalScheme(scheme28))
      return "categorical";
  }
  return "linear";
}
function asOrdinalType(kind) {
  switch (kind) {
    case position:
      return "point";
    case color2:
      return ordinalImplicit;
    default:
      return "ordinal";
  }
}
function isTemporalScale({ type: type2 }) {
  return type2 === "time" || type2 === "utc";
}
function isOrdinalScale({ type: type2 }) {
  return type2 === "ordinal" || type2 === "point" || type2 === "band" || type2 === ordinalImplicit;
}
function isThresholdScale({ type: type2 }) {
  return type2 === "threshold";
}
function isBandScale({ type: type2 }) {
  return type2 === "point" || type2 === "band";
}
function isCollapsed(scale3) {
  if (scale3 === void 0)
    return true;
  const domain = scale3.domain();
  const value = scale3(domain[0]);
  for (let i2 = 1, n = domain.length; i2 < n; ++i2) {
    if (scale3(domain[i2]) - value) {
      return false;
    }
  }
  return true;
}
function coerceType(channels, { domain, ...options }, coerceValues) {
  for (const c4 of channels) {
    if (c4.value !== void 0) {
      c4.value = coerceValues(c4.value);
    }
  }
  return {
    domain: domain === void 0 ? domain : coerceValues(domain),
    ...options
  };
}
function coerceSymbols(values2) {
  return map2(values2, maybeSymbol);
}
function scale2(options = {}) {
  let scale3;
  for (const key in options) {
    if (!registry.has(key))
      continue;
    if (!isScaleOptions(options[key]))
      continue;
    if (scale3 !== void 0)
      throw new Error("ambiguous scale definition; multiple scales found");
    scale3 = exposeScale(normalizeScale(key, options[key]));
  }
  if (scale3 === void 0)
    throw new Error("invalid scale definition; no scale found");
  return scale3;
}
function exposeScales(scaleDescriptors) {
  return (key) => {
    if (!registry.has(key = `${key}`))
      throw new Error(`unknown scale: ${key}`);
    return key in scaleDescriptors ? exposeScale(scaleDescriptors[key]) : void 0;
  };
}
function exposeScale({ scale: scale3, type: type2, domain, range: range3, interpolate, interval: interval2, transform: transform3, percent, pivot }) {
  if (type2 === "identity")
    return { type: "identity", apply: (d) => d, invert: (d) => d };
  const unknown = scale3.unknown ? scale3.unknown() : void 0;
  return {
    type: type2,
    domain: slice3(domain),
    // defensive copy
    ...range3 !== void 0 && { range: slice3(range3) },
    // defensive copy
    ...transform3 !== void 0 && { transform: transform3 },
    ...percent && { percent },
    // only exposed if truthy
    ...unknown !== void 0 && { unknown },
    ...interval2 !== void 0 && { interval: interval2 },
    // quantitative
    ...interpolate !== void 0 && { interpolate },
    ...scale3.clamp && { clamp: scale3.clamp() },
    // diverging (always asymmetric; we never want to apply the symmetric transform twice)
    ...pivot !== void 0 && { pivot, symmetric: false },
    // log, diverging-log
    ...scale3.base && { base: scale3.base() },
    // pow, diverging-pow
    ...scale3.exponent && { exponent: scale3.exponent() },
    // symlog, diverging-symlog
    ...scale3.constant && { constant: scale3.constant() },
    // band, point
    ...scale3.align && { align: scale3.align(), round: scale3.round() },
    ...scale3.padding && (scale3.paddingInner ? { paddingInner: scale3.paddingInner(), paddingOuter: scale3.paddingOuter() } : { padding: scale3.padding() }),
    ...scale3.bandwidth && { bandwidth: scale3.bandwidth(), step: scale3.step() },
    // utilities
    apply: (t) => scale3(t),
    ...scale3.invert && { invert: (t) => scale3.invert(t) }
  };
}

// ../../node_modules/@observablehq/plot/src/memoize.js
function memoize1(compute) {
  let cacheValue, cacheKeys;
  return (...keys) => {
    if (cacheKeys?.length !== keys.length || cacheKeys.some((k3, i2) => k3 !== keys[i2])) {
      cacheKeys = keys;
      cacheValue = compute(...keys);
    }
    return cacheValue;
  };
}

// ../../node_modules/@observablehq/plot/src/format.js
var numberFormat = memoize1((locale3) => {
  return new Intl.NumberFormat(locale3);
});
var monthFormat = memoize1((locale3, month) => {
  return new Intl.DateTimeFormat(locale3, { timeZone: "UTC", ...month && { month } });
});
var weekdayFormat = memoize1((locale3, weekday) => {
  return new Intl.DateTimeFormat(locale3, { timeZone: "UTC", ...weekday && { weekday } });
});
function formatNumber2(locale3 = "en-US") {
  const format3 = numberFormat(locale3);
  return (i2) => i2 != null && !isNaN(i2) ? format3.format(i2) : void 0;
}
function formatMonth(locale3 = "en-US", format3 = "short") {
  const fmt = monthFormat(locale3, format3);
  return (i2) => i2 != null && !isNaN(i2 = +new Date(Date.UTC(2e3, +i2))) ? fmt.format(i2) : void 0;
}
function formatWeekday(locale3 = "en-US", format3 = "short") {
  const fmt = weekdayFormat(locale3, format3);
  return (i2) => i2 != null && !isNaN(i2 = +new Date(Date.UTC(2001, 0, +i2))) ? fmt.format(i2) : void 0;
}
function formatIsoDate(date2) {
  return format(date2, "Invalid Date");
}
function formatAuto2(locale3 = "en-US") {
  const number7 = formatNumber2(locale3);
  return (v3) => (v3 instanceof Date ? formatIsoDate : typeof v3 === "number" ? number7 : string)(v3);
}
var formatDefault = formatAuto2();

// ../../node_modules/@observablehq/plot/src/style.js
var offset = (typeof window !== "undefined" ? window.devicePixelRatio > 1 : typeof it === "undefined") ? 0 : 0.5;
var nextClipId = 0;
function getClipId() {
  return `plot-clip-${++nextClipId}`;
}
function styles(mark2, {
  title,
  href,
  ariaLabel: variaLabel,
  ariaDescription,
  ariaHidden,
  target,
  fill,
  fillOpacity,
  stroke,
  strokeWidth,
  strokeOpacity,
  strokeLinejoin,
  strokeLinecap,
  strokeMiterlimit,
  strokeDasharray,
  strokeDashoffset,
  opacity: opacity2,
  mixBlendMode,
  imageFilter,
  paintOrder,
  pointerEvents,
  shapeRendering,
  channels
}, {
  ariaLabel: cariaLabel,
  fill: defaultFill = "currentColor",
  fillOpacity: defaultFillOpacity,
  stroke: defaultStroke = "none",
  strokeOpacity: defaultStrokeOpacity,
  strokeWidth: defaultStrokeWidth,
  strokeLinecap: defaultStrokeLinecap,
  strokeLinejoin: defaultStrokeLinejoin,
  strokeMiterlimit: defaultStrokeMiterlimit,
  paintOrder: defaultPaintOrder
}) {
  if (defaultFill === null) {
    fill = null;
    fillOpacity = null;
  }
  if (defaultStroke === null) {
    stroke = null;
    strokeOpacity = null;
  }
  if (isNoneish(defaultFill)) {
    if (!isNoneish(defaultStroke) && (!isNoneish(fill) || channels?.fill))
      defaultStroke = "none";
  } else {
    if (isNoneish(defaultStroke) && (!isNoneish(stroke) || channels?.stroke))
      defaultFill = "none";
  }
  const [vfill, cfill] = maybeColorChannel(fill, defaultFill);
  const [vfillOpacity, cfillOpacity] = maybeNumberChannel(fillOpacity, defaultFillOpacity);
  const [vstroke, cstroke] = maybeColorChannel(stroke, defaultStroke);
  const [vstrokeOpacity, cstrokeOpacity] = maybeNumberChannel(strokeOpacity, defaultStrokeOpacity);
  const [vopacity, copacity] = maybeNumberChannel(opacity2);
  if (!isNone(cstroke)) {
    if (strokeWidth === void 0)
      strokeWidth = defaultStrokeWidth;
    if (strokeLinecap === void 0)
      strokeLinecap = defaultStrokeLinecap;
    if (strokeLinejoin === void 0)
      strokeLinejoin = defaultStrokeLinejoin;
    if (strokeMiterlimit === void 0 && !isRound(strokeLinejoin))
      strokeMiterlimit = defaultStrokeMiterlimit;
    if (!isNone(cfill) && paintOrder === void 0)
      paintOrder = defaultPaintOrder;
  }
  const [vstrokeWidth, cstrokeWidth] = maybeNumberChannel(strokeWidth);
  if (defaultFill !== null) {
    mark2.fill = impliedString(cfill, "currentColor");
    mark2.fillOpacity = impliedNumber(cfillOpacity, 1);
  }
  if (defaultStroke !== null) {
    mark2.stroke = impliedString(cstroke, "none");
    mark2.strokeWidth = impliedNumber(cstrokeWidth, 1);
    mark2.strokeOpacity = impliedNumber(cstrokeOpacity, 1);
    mark2.strokeLinejoin = impliedString(strokeLinejoin, "miter");
    mark2.strokeLinecap = impliedString(strokeLinecap, "butt");
    mark2.strokeMiterlimit = impliedNumber(strokeMiterlimit, 4);
    mark2.strokeDasharray = impliedString(strokeDasharray, "none");
    mark2.strokeDashoffset = impliedString(strokeDashoffset, "0");
  }
  mark2.target = string(target);
  mark2.ariaLabel = string(cariaLabel);
  mark2.ariaDescription = string(ariaDescription);
  mark2.ariaHidden = string(ariaHidden);
  mark2.opacity = impliedNumber(copacity, 1);
  mark2.mixBlendMode = impliedString(mixBlendMode, "normal");
  mark2.imageFilter = impliedString(imageFilter, "none");
  mark2.paintOrder = impliedString(paintOrder, "normal");
  mark2.pointerEvents = impliedString(pointerEvents, "auto");
  mark2.shapeRendering = impliedString(shapeRendering, "auto");
  return {
    title: { value: title, optional: true },
    href: { value: href, optional: true },
    ariaLabel: { value: variaLabel, optional: true },
    fill: { value: vfill, scale: "auto", optional: true },
    fillOpacity: { value: vfillOpacity, scale: "auto", optional: true },
    stroke: { value: vstroke, scale: "auto", optional: true },
    strokeOpacity: { value: vstrokeOpacity, scale: "auto", optional: true },
    strokeWidth: { value: vstrokeWidth, optional: true },
    opacity: { value: vopacity, scale: "auto", optional: true }
  };
}
function applyTitle(selection2, L2) {
  if (L2)
    selection2.filter((i2) => nonempty(L2[i2])).append("title").call(applyText, L2);
}
function applyTitleGroup(selection2, L2) {
  if (L2)
    selection2.filter(([i2]) => nonempty(L2[i2])).append("title").call(applyTextGroup, L2);
}
function applyText(selection2, T2) {
  if (T2)
    selection2.text((i2) => formatDefault(T2[i2]));
}
function applyTextGroup(selection2, T2) {
  if (T2)
    selection2.text(([i2]) => formatDefault(T2[i2]));
}
function applyChannelStyles(selection2, { target, tip: tip2 }, {
  ariaLabel: AL,
  title: T2,
  fill: F2,
  fillOpacity: FO,
  stroke: S2,
  strokeOpacity: SO,
  strokeWidth: SW,
  opacity: O,
  href: H2
}) {
  if (AL)
    applyAttr(selection2, "aria-label", (i2) => AL[i2]);
  if (F2)
    applyAttr(selection2, "fill", (i2) => F2[i2]);
  if (FO)
    applyAttr(selection2, "fill-opacity", (i2) => FO[i2]);
  if (S2)
    applyAttr(selection2, "stroke", (i2) => S2[i2]);
  if (SO)
    applyAttr(selection2, "stroke-opacity", (i2) => SO[i2]);
  if (SW)
    applyAttr(selection2, "stroke-width", (i2) => SW[i2]);
  if (O)
    applyAttr(selection2, "opacity", (i2) => O[i2]);
  if (H2)
    applyHref(selection2, (i2) => H2[i2], target);
  if (!tip2)
    applyTitle(selection2, T2);
}
function applyGroupedChannelStyles(selection2, { target, tip: tip2 }, {
  ariaLabel: AL,
  title: T2,
  fill: F2,
  fillOpacity: FO,
  stroke: S2,
  strokeOpacity: SO,
  strokeWidth: SW,
  opacity: O,
  href: H2
}) {
  if (AL)
    applyAttr(selection2, "aria-label", ([i2]) => AL[i2]);
  if (F2)
    applyAttr(selection2, "fill", ([i2]) => F2[i2]);
  if (FO)
    applyAttr(selection2, "fill-opacity", ([i2]) => FO[i2]);
  if (S2)
    applyAttr(selection2, "stroke", ([i2]) => S2[i2]);
  if (SO)
    applyAttr(selection2, "stroke-opacity", ([i2]) => SO[i2]);
  if (SW)
    applyAttr(selection2, "stroke-width", ([i2]) => SW[i2]);
  if (O)
    applyAttr(selection2, "opacity", ([i2]) => O[i2]);
  if (H2)
    applyHref(selection2, ([i2]) => H2[i2], target);
  if (!tip2)
    applyTitleGroup(selection2, T2);
}
function groupAesthetics({
  ariaLabel: AL,
  title: T2,
  fill: F2,
  fillOpacity: FO,
  stroke: S2,
  strokeOpacity: SO,
  strokeWidth: SW,
  opacity: O,
  href: H2
}, { tip: tip2 }) {
  return [AL, tip2 ? void 0 : T2, F2, FO, S2, SO, SW, O, H2].filter((c4) => c4 !== void 0);
}
function groupZ2(I2, Z3, z2) {
  const G = group(I2, (i2) => Z3[i2]);
  if (z2 === void 0 && G.size > 1 + I2.length >> 1) {
    warn(
      `Warning: the implicit z channel has high cardinality. This may occur when the fill or stroke channel is associated with quantitative data rather than ordinal or categorical data. You can suppress this warning by setting the z option explicitly; if this data represents a single series, set z to null.`
    );
  }
  return G.values();
}
function* groupIndex(I2, position3, mark2, channels) {
  const { z: z2 } = mark2;
  const { z: Z3 } = channels;
  const A5 = groupAesthetics(channels, mark2);
  const C3 = [...position3, ...A5];
  for (const G of Z3 ? groupZ2(I2, Z3, z2) : [I2]) {
    let Ag;
    let Gg;
    out:
      for (const i2 of G) {
        for (const c4 of C3) {
          if (!defined(c4[i2])) {
            if (Gg)
              Gg.push(-1);
            continue out;
          }
        }
        if (Ag === void 0) {
          if (Gg)
            yield Gg;
          Ag = A5.map((c4) => keyof2(c4[i2])), Gg = [i2];
          continue;
        }
        Gg.push(i2);
        for (let j2 = 0; j2 < A5.length; ++j2) {
          const k3 = keyof2(A5[j2][i2]);
          if (k3 !== Ag[j2]) {
            yield Gg;
            Ag = A5.map((c4) => keyof2(c4[i2])), Gg = [i2];
            continue out;
          }
        }
      }
    if (Gg)
      yield Gg;
  }
}
function maybeClip(clip) {
  if (clip === true)
    clip = "frame";
  else if (clip === false)
    clip = null;
  return maybeKeyword(clip, "clip", ["frame", "sphere"]);
}
function applyClip(selection2, mark2, dimensions, context) {
  let clipUrl;
  switch (mark2.clip) {
    case "frame": {
      const { width: width2, height: height2, marginLeft: marginLeft2, marginRight: marginRight2, marginTop: marginTop2, marginBottom: marginBottom2 } = dimensions;
      const id2 = getClipId();
      clipUrl = `url(#${id2})`;
      selection2 = create3("svg:g", context).call(
        (g2) => g2.append("svg:clipPath").attr("id", id2).append("rect").attr("x", marginLeft2).attr("y", marginTop2).attr("width", width2 - marginRight2 - marginLeft2).attr("height", height2 - marginTop2 - marginBottom2)
      ).each(function() {
        this.appendChild(selection2.node());
        selection2.node = () => this;
      });
      break;
    }
    case "sphere": {
      const { projection: projection3 } = context;
      if (!projection3)
        throw new Error(`the "sphere" clip option requires a projection`);
      const id2 = getClipId();
      clipUrl = `url(#${id2})`;
      selection2.append("clipPath").attr("id", id2).append("path").attr("d", path_default(projection3)({ type: "Sphere" }));
      break;
    }
  }
  applyAttr(selection2, "aria-label", mark2.ariaLabel);
  applyAttr(selection2, "aria-description", mark2.ariaDescription);
  applyAttr(selection2, "aria-hidden", mark2.ariaHidden);
  applyAttr(selection2, "clip-path", clipUrl);
}
function applyIndirectStyles(selection2, mark2, dimensions, context) {
  applyClip(selection2, mark2, dimensions, context);
  applyAttr(selection2, "fill", mark2.fill);
  applyAttr(selection2, "fill-opacity", mark2.fillOpacity);
  applyAttr(selection2, "stroke", mark2.stroke);
  applyAttr(selection2, "stroke-width", mark2.strokeWidth);
  applyAttr(selection2, "stroke-opacity", mark2.strokeOpacity);
  applyAttr(selection2, "stroke-linejoin", mark2.strokeLinejoin);
  applyAttr(selection2, "stroke-linecap", mark2.strokeLinecap);
  applyAttr(selection2, "stroke-miterlimit", mark2.strokeMiterlimit);
  applyAttr(selection2, "stroke-dasharray", mark2.strokeDasharray);
  applyAttr(selection2, "stroke-dashoffset", mark2.strokeDashoffset);
  applyAttr(selection2, "shape-rendering", mark2.shapeRendering);
  applyAttr(selection2, "filter", mark2.imageFilter);
  applyAttr(selection2, "paint-order", mark2.paintOrder);
  applyAttr(selection2, "pointer-events", mark2.pointerEvents);
}
function applyDirectStyles(selection2, mark2) {
  applyStyle(selection2, "mix-blend-mode", mark2.mixBlendMode);
  applyAttr(selection2, "opacity", mark2.opacity);
}
function applyHref(selection2, href, target) {
  selection2.each(function(i2) {
    const h2 = href(i2);
    if (h2 != null) {
      const a2 = this.ownerDocument.createElementNS(namespaces_default.svg, "a");
      a2.setAttribute("fill", "inherit");
      a2.setAttributeNS(namespaces_default.xlink, "href", h2);
      if (target != null)
        a2.setAttribute("target", target);
      this.parentNode.insertBefore(a2, this).appendChild(this);
    }
  });
}
function applyAttr(selection2, name2, value) {
  if (value != null)
    selection2.attr(name2, value);
}
function applyStyle(selection2, name2, value) {
  if (value != null)
    selection2.style(name2, value);
}
function applyTransform(selection2, mark2, { x: x3, y: y3 }, tx = offset, ty = offset) {
  tx += mark2.dx;
  ty += mark2.dy;
  if (x3?.bandwidth)
    tx += x3.bandwidth() / 2;
  if (y3?.bandwidth)
    ty += y3.bandwidth() / 2;
  if (tx || ty)
    selection2.attr("transform", `translate(${tx},${ty})`);
}
function impliedString(value, impliedValue) {
  if ((value = string(value)) !== impliedValue)
    return value;
}
function impliedNumber(value, impliedValue) {
  if ((value = number5(value)) !== impliedValue)
    return value;
}
var validClassName = /^-?([_a-z]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])([_a-z0-9-]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])*$/i;
function maybeClassName(name2) {
  if (name2 === void 0)
    return "plot-d6a7b5";
  name2 = `${name2}`;
  if (!validClassName.test(name2))
    throw new Error(`invalid class name: ${name2}`);
  return name2;
}
function applyInlineStyles(selection2, style2) {
  if (typeof style2 === "string") {
    selection2.property("style", style2);
  } else if (style2 != null) {
    for (const element of selection2) {
      Object.assign(element.style, style2);
    }
  }
}
function applyFrameAnchor({ frameAnchor }, { width: width2, height: height2, marginTop: marginTop2, marginRight: marginRight2, marginBottom: marginBottom2, marginLeft: marginLeft2 }) {
  return [
    /left$/.test(frameAnchor) ? marginLeft2 : /right$/.test(frameAnchor) ? width2 - marginRight2 : (marginLeft2 + width2 - marginRight2) / 2,
    /^top/.test(frameAnchor) ? marginTop2 : /^bottom/.test(frameAnchor) ? height2 - marginBottom2 : (marginTop2 + height2 - marginBottom2) / 2
  ];
}

// ../../node_modules/@observablehq/plot/src/dimensions.js
function createDimensions(scales, marks2, options = {}) {
  let marginTopDefault = 0.5 - offset, marginRightDefault = 0.5 + offset, marginBottomDefault = 0.5 + offset, marginLeftDefault = 0.5 - offset;
  for (const { marginTop: marginTop3, marginRight: marginRight3, marginBottom: marginBottom3, marginLeft: marginLeft3 } of marks2) {
    if (marginTop3 > marginTopDefault)
      marginTopDefault = marginTop3;
    if (marginRight3 > marginRightDefault)
      marginRightDefault = marginRight3;
    if (marginBottom3 > marginBottomDefault)
      marginBottomDefault = marginBottom3;
    if (marginLeft3 > marginLeftDefault)
      marginLeftDefault = marginLeft3;
  }
  let {
    margin: margin2,
    marginTop: marginTop2 = margin2 !== void 0 ? margin2 : marginTopDefault,
    marginRight: marginRight2 = margin2 !== void 0 ? margin2 : marginRightDefault,
    marginBottom: marginBottom2 = margin2 !== void 0 ? margin2 : marginBottomDefault,
    marginLeft: marginLeft2 = margin2 !== void 0 ? margin2 : marginLeftDefault
  } = options;
  marginTop2 = +marginTop2;
  marginRight2 = +marginRight2;
  marginBottom2 = +marginBottom2;
  marginLeft2 = +marginLeft2;
  let {
    width: width2 = 640,
    height: height2 = autoHeight(scales, options, {
      width: width2,
      marginTopDefault,
      marginRightDefault,
      marginBottomDefault,
      marginLeftDefault
    }) + Math.max(0, marginTop2 - marginTopDefault + marginBottom2 - marginBottomDefault)
  } = options;
  width2 = +width2;
  height2 = +height2;
  const dimensions = {
    width: width2,
    height: height2,
    marginTop: marginTop2,
    marginRight: marginRight2,
    marginBottom: marginBottom2,
    marginLeft: marginLeft2
  };
  if (scales.fx || scales.fy) {
    let {
      margin: facetMargin2,
      marginTop: facetMarginTop2 = facetMargin2 !== void 0 ? facetMargin2 : marginTop2,
      marginRight: facetMarginRight2 = facetMargin2 !== void 0 ? facetMargin2 : marginRight2,
      marginBottom: facetMarginBottom2 = facetMargin2 !== void 0 ? facetMargin2 : marginBottom2,
      marginLeft: facetMarginLeft2 = facetMargin2 !== void 0 ? facetMargin2 : marginLeft2
    } = options.facet ?? {};
    facetMarginTop2 = +facetMarginTop2;
    facetMarginRight2 = +facetMarginRight2;
    facetMarginBottom2 = +facetMarginBottom2;
    facetMarginLeft2 = +facetMarginLeft2;
    dimensions.facet = {
      marginTop: facetMarginTop2,
      marginRight: facetMarginRight2,
      marginBottom: facetMarginBottom2,
      marginLeft: facetMarginLeft2
    };
  }
  return dimensions;
}
function autoHeight({ x: x3, y: y3, fy, fx }, { projection: projection3, aspectRatio: aspectRatio2 }, { width: width2, marginTopDefault, marginRightDefault, marginBottomDefault, marginLeftDefault }) {
  const nfy = fy ? fy.scale.domain().length : 1;
  const ar = projectionAspectRatio(projection3);
  if (ar) {
    const nfx = fx ? fx.scale.domain().length : 1;
    const far = (1.1 * nfy - 0.1) / (1.1 * nfx - 0.1) * ar;
    const lar = Math.max(0.1, Math.min(10, far));
    return Math.round((width2 - marginLeftDefault - marginRightDefault) * lar + marginTopDefault + marginBottomDefault);
  }
  const ny = y3 ? isOrdinalScale(y3) ? y3.scale.domain().length : Math.max(7, 17 / nfy) : 1;
  if (aspectRatio2 != null) {
    aspectRatio2 = +aspectRatio2;
    if (!(isFinite(aspectRatio2) && aspectRatio2 > 0))
      throw new Error(`invalid aspectRatio: ${aspectRatio2}`);
    const ratio = aspectRatioLength("y", y3) / (aspectRatioLength("x", x3) * aspectRatio2);
    const fxb = fx ? fx.scale.bandwidth() : 1;
    const fyb = fy ? fy.scale.bandwidth() : 1;
    const w2 = fxb * (width2 - marginLeftDefault - marginRightDefault) - x3.insetLeft - x3.insetRight;
    return (ratio * w2 + y3.insetTop + y3.insetBottom) / fyb + marginTopDefault + marginBottomDefault;
  }
  return !!(y3 || fy) * Math.max(1, Math.min(60, ny * nfy)) * 20 + !!fx * 30 + 60;
}
function aspectRatioLength(k3, scale3) {
  if (!scale3)
    throw new Error(`aspectRatio requires ${k3} scale`);
  const { type: type2, domain } = scale3;
  let transform3;
  switch (type2) {
    case "linear":
    case "utc":
    case "time":
      transform3 = Number;
      break;
    case "pow": {
      const exponent = scale3.scale.exponent();
      transform3 = (x3) => Math.pow(x3, exponent);
      break;
    }
    case "log":
      transform3 = Math.log;
      break;
    case "point":
    case "band":
      return domain.length;
    default:
      throw new Error(`unsupported ${k3} scale for aspectRatio: ${type2}`);
  }
  const [min5, max4] = extent(domain);
  return Math.abs(transform3(max4) - transform3(min5));
}

// ../../node_modules/@observablehq/plot/src/facet.js
function createFacets(channelsByScale, options) {
  const { fx, fy } = createScales(channelsByScale, options);
  const fxDomain2 = fx?.scale.domain();
  const fyDomain2 = fy?.scale.domain();
  return fxDomain2 && fyDomain2 ? cross(fxDomain2, fyDomain2).map(([x3, y3], i2) => ({ x: x3, y: y3, i: i2 })) : fxDomain2 ? fxDomain2.map((x3, i2) => ({ x: x3, i: i2 })) : fyDomain2 ? fyDomain2.map((y3, i2) => ({ y: y3, i: i2 })) : void 0;
}
function recreateFacets(facets, { x: X3, y: Y3 }) {
  X3 &&= facetIndex(X3);
  Y3 &&= facetIndex(Y3);
  return facets.filter(
    X3 && Y3 ? (f2) => X3.has(f2.x) && Y3.has(f2.y) : X3 ? (f2) => X3.has(f2.x) : (f2) => Y3.has(f2.y)
  ).sort(
    X3 && Y3 ? (a2, b2) => X3.get(a2.x) - X3.get(b2.x) || Y3.get(a2.y) - Y3.get(b2.y) : X3 ? (a2, b2) => X3.get(a2.x) - X3.get(b2.x) : (a2, b2) => Y3.get(a2.y) - Y3.get(b2.y)
  );
}
function facetGroups(data, { fx, fy }) {
  const I2 = range2(data);
  const FX = fx?.value;
  const FY = fy?.value;
  return fx && fy ? rollup(
    I2,
    (G) => (G.fx = FX[G[0]], G.fy = FY[G[0]], G),
    (i2) => FX[i2],
    (i2) => FY[i2]
  ) : fx ? rollup(
    I2,
    (G) => (G.fx = FX[G[0]], G),
    (i2) => FX[i2]
  ) : rollup(
    I2,
    (G) => (G.fy = FY[G[0]], G),
    (i2) => FY[i2]
  );
}
function facetTranslator(fx, fy, { marginTop: marginTop2, marginLeft: marginLeft2 }) {
  return fx && fy ? ({ x: x3, y: y3 }) => `translate(${fx(x3) - marginLeft2},${fy(y3) - marginTop2})` : fx ? ({ x: x3 }) => `translate(${fx(x3) - marginLeft2},0)` : ({ y: y3 }) => `translate(0,${fy(y3) - marginTop2})`;
}
function facetExclude(index2) {
  const ex = [];
  const e = new Uint32Array(sum4(index2, (d) => d.length));
  for (const i2 of index2) {
    let n = 0;
    for (const j2 of index2) {
      if (i2 === j2)
        continue;
      e.set(j2, n);
      n += j2.length;
    }
    ex.push(e.slice(0, n));
  }
  return ex;
}
var facetAnchors = /* @__PURE__ */ new Map([
  ["top", facetAnchorTop],
  ["right", facetAnchorRight],
  ["bottom", facetAnchorBottom],
  ["left", facetAnchorLeft],
  ["top-left", and2(facetAnchorTop, facetAnchorLeft)],
  ["top-right", and2(facetAnchorTop, facetAnchorRight)],
  ["bottom-left", and2(facetAnchorBottom, facetAnchorLeft)],
  ["bottom-right", and2(facetAnchorBottom, facetAnchorRight)],
  ["top-empty", facetAnchorTopEmpty],
  ["right-empty", facetAnchorRightEmpty],
  ["bottom-empty", facetAnchorBottomEmpty],
  ["left-empty", facetAnchorLeftEmpty],
  ["empty", facetAnchorEmpty]
]);
function maybeFacetAnchor(facetAnchor) {
  if (facetAnchor == null)
    return null;
  const anchor = facetAnchors.get(`${facetAnchor}`.toLowerCase());
  if (anchor)
    return anchor;
  throw new Error(`invalid facet anchor: ${facetAnchor}`);
}
var indexCache = /* @__PURE__ */ new WeakMap();
function facetIndex(V2) {
  let I2 = indexCache.get(V2);
  if (!I2)
    indexCache.set(V2, I2 = new InternMap(map2(V2, (v3, i2) => [v3, i2])));
  return I2;
}
function facetIndexOf(V2, v3) {
  return facetIndex(V2).get(v3);
}
function facetFind(facets, x3, y3) {
  x3 = keyof2(x3);
  y3 = keyof2(y3);
  return facets.find((f2) => Object.is(keyof2(f2.x), x3) && Object.is(keyof2(f2.y), y3));
}
function facetEmpty(facets, x3, y3) {
  return facetFind(facets, x3, y3)?.empty;
}
function facetAnchorTop(facets, { y: Y3 }, { y: y3 }) {
  return Y3 ? facetIndexOf(Y3, y3) === 0 : true;
}
function facetAnchorBottom(facets, { y: Y3 }, { y: y3 }) {
  return Y3 ? facetIndexOf(Y3, y3) === Y3.length - 1 : true;
}
function facetAnchorLeft(facets, { x: X3 }, { x: x3 }) {
  return X3 ? facetIndexOf(X3, x3) === 0 : true;
}
function facetAnchorRight(facets, { x: X3 }, { x: x3 }) {
  return X3 ? facetIndexOf(X3, x3) === X3.length - 1 : true;
}
function facetAnchorTopEmpty(facets, { y: Y3 }, { x: x3, y: y3, empty: empty4 }) {
  if (empty4)
    return false;
  if (!Y3)
    return;
  const i2 = facetIndexOf(Y3, y3);
  if (i2 > 0)
    return facetEmpty(facets, x3, Y3[i2 - 1]);
}
function facetAnchorBottomEmpty(facets, { y: Y3 }, { x: x3, y: y3, empty: empty4 }) {
  if (empty4)
    return false;
  if (!Y3)
    return;
  const i2 = facetIndexOf(Y3, y3);
  if (i2 < Y3.length - 1)
    return facetEmpty(facets, x3, Y3[i2 + 1]);
}
function facetAnchorLeftEmpty(facets, { x: X3 }, { x: x3, y: y3, empty: empty4 }) {
  if (empty4)
    return false;
  if (!X3)
    return;
  const i2 = facetIndexOf(X3, x3);
  if (i2 > 0)
    return facetEmpty(facets, X3[i2 - 1], y3);
}
function facetAnchorRightEmpty(facets, { x: X3 }, { x: x3, y: y3, empty: empty4 }) {
  if (empty4)
    return false;
  if (!X3)
    return;
  const i2 = facetIndexOf(X3, x3);
  if (i2 < X3.length - 1)
    return facetEmpty(facets, X3[i2 + 1], y3);
}
function facetAnchorEmpty(facets, channels, { empty: empty4 }) {
  return empty4;
}
function and2(a2, b2) {
  return function() {
    return a2.apply(null, arguments) && b2.apply(null, arguments);
  };
}
function facetFilter(facets, { channels: { fx, fy }, groups: groups2 }) {
  return fx && fy ? facets.map(({ x: x3, y: y3 }) => groups2.get(x3)?.get(y3) ?? []) : fx ? facets.map(({ x: x3 }) => groups2.get(x3) ?? []) : facets.map(({ y: y3 }) => groups2.get(y3) ?? []);
}

// ../../node_modules/@observablehq/plot/src/mark.js
var Mark = class {
  constructor(data, channels = {}, options = {}, defaults22) {
    const {
      facet = "auto",
      facetAnchor,
      fx,
      fy,
      sort: sort3,
      dx = 0,
      dy = 0,
      margin: margin2 = 0,
      marginTop: marginTop2 = margin2,
      marginRight: marginRight2 = margin2,
      marginBottom: marginBottom2 = margin2,
      marginLeft: marginLeft2 = margin2,
      clip,
      channels: extraChannels,
      tip: tip2,
      render
    } = options;
    this.data = data;
    this.sort = isDomainSort(sort3) ? sort3 : null;
    this.initializer = initializer(options).initializer;
    this.transform = this.initializer ? options.transform : basic(options).transform;
    if (facet === null || facet === false) {
      this.facet = null;
    } else {
      this.facet = keyword(facet === true ? "include" : facet, "facet", ["auto", "include", "exclude", "super"]);
      this.fx = data === singleton && typeof fx === "string" ? [fx] : fx;
      this.fy = data === singleton && typeof fy === "string" ? [fy] : fy;
    }
    this.facetAnchor = maybeFacetAnchor(facetAnchor);
    channels = maybeNamed(channels);
    if (extraChannels !== void 0)
      channels = { ...maybeChannels(extraChannels), ...channels };
    if (defaults22 !== void 0)
      channels = { ...styles(this, options, defaults22), ...channels };
    this.channels = Object.fromEntries(
      Object.entries(channels).map(([name2, channel]) => {
        if (isOptions(channel.value)) {
          const { value, scale: scale3 = channel.scale } = channel.value;
          channel = { ...channel, scale: scale3, value };
        }
        if (data === singleton && typeof channel.value === "string") {
          const { value } = channel;
          channel = { ...channel, value: [value] };
        }
        return [name2, channel];
      }).filter(([name2, { value, optional: optional2 }]) => {
        if (value != null)
          return true;
        if (optional2)
          return false;
        throw new Error(`missing channel value: ${name2}`);
      })
    );
    this.dx = +dx;
    this.dy = +dy;
    this.marginTop = +marginTop2;
    this.marginRight = +marginRight2;
    this.marginBottom = +marginBottom2;
    this.marginLeft = +marginLeft2;
    this.clip = maybeClip(clip);
    this.tip = maybeTip(tip2);
    if (this.facet === "super") {
      if (fx || fy)
        throw new Error(`super-faceting cannot use fx or fy`);
      for (const name2 in this.channels) {
        const { scale: scale3 } = channels[name2];
        if (scale3 !== "x" && scale3 !== "y")
          continue;
        throw new Error(`super-faceting cannot use x or y`);
      }
    }
    if (render != null) {
      this.render = composeRender(render, this.render);
    }
  }
  initialize(facets, facetChannels, plotOptions) {
    let data = arrayify2(this.data);
    if (facets === void 0 && data != null)
      facets = [range2(data)];
    const originalFacets = facets;
    if (this.transform != null)
      ({ facets, data } = this.transform(data, facets, plotOptions)), data = arrayify2(data);
    if (facets !== void 0)
      facets.original = originalFacets;
    const channels = createChannels(this.channels, data);
    if (this.sort != null)
      channelDomain(data, facets, channels, facetChannels, this.sort);
    return { data, facets, channels };
  }
  filter(index2, channels, values2) {
    for (const name2 in channels) {
      const { filter: filter3 = defined } = channels[name2];
      if (filter3 !== null) {
        const value = values2[name2];
        index2 = index2.filter((i2) => filter3(value[i2]));
      }
    }
    return index2;
  }
  // If there is a projection, and there are paired x and y channels associated
  // with the x and y scale respectively (and not already in screen coordinates
  // as with an initializer), then apply the projection, replacing the x and y
  // values. Note that the x and y scales themselves don’t exist if there is a
  // projection, but whether the channels are associated with scales still
  // determines whether the projection should apply; think of the projection as
  // a combination xy-scale.
  project(channels, values2, context) {
    for (const cx in channels) {
      if (channels[cx].scale === "x" && /^x|x$/.test(cx)) {
        const cy = cx.replace(/^x|x$/, "y");
        if (cy in channels && channels[cy].scale === "y") {
          project(cx, cy, values2, context.projection);
        }
      }
    }
  }
  scale(channels, scales, context) {
    const values2 = valueObject(channels, scales);
    if (context.projection)
      this.project(channels, values2, context);
    return values2;
  }
};
function marks(...marks2) {
  marks2.plot = Mark.prototype.plot;
  return marks2;
}
function composeRender(r1, r2) {
  if (r1 == null)
    return r2 === null ? void 0 : r2;
  if (r2 == null)
    return r1 === null ? void 0 : r1;
  if (typeof r1 !== "function")
    throw new TypeError(`invalid render transform: ${r1}`);
  if (typeof r2 !== "function")
    throw new TypeError(`invalid render transform: ${r2}`);
  return function(i2, s2, v3, d, c4, next) {
    return r1.call(this, i2, s2, v3, d, c4, (i3, s3, v4, d2, c5) => {
      return r2.call(this, i3, s3, v4, d2, c5, next);
    });
  };
}
function maybeChannels(channels) {
  return Object.fromEntries(
    Object.entries(maybeNamed(channels)).map(([name2, channel]) => {
      channel = maybeValue(channel);
      if (channel.filter === void 0 && channel.scale == null)
        channel = { ...channel, filter: null };
      return [name2, channel];
    })
  );
}
function maybeTip(tip2) {
  return tip2 === true ? "xy" : tip2 === false ? null : maybeKeyword(tip2, "tip", ["x", "y", "xy"]);
}
function withTip(options, tip2) {
  return options?.tip === true ? { ...options, tip: tip2 } : options;
}

// ../../node_modules/@observablehq/plot/src/interactions/pointer.js
var states = /* @__PURE__ */ new WeakMap();
function pointerK(kx2, ky2, { x: x3, y: y3, px, py, maxRadius = 40, channels, render, ...options } = {}) {
  maxRadius = +maxRadius;
  if (px != null)
    x3 ??= null, channels = { ...channels, px: { value: px, scale: "x" } };
  if (py != null)
    y3 ??= null, channels = { ...channels, py: { value: py, scale: "y" } };
  return {
    x: x3,
    y: y3,
    channels,
    ...options,
    // Unlike other composed transforms, the render transform must be the
    // outermost render function because it will re-render dynamically in
    // response to pointer events.
    render: composeRender(function(index2, scales, values2, dimensions, context, next) {
      const svg = context.ownerSVGElement;
      const { data } = context.getMarkState(this);
      let state = states.get(svg);
      if (!state)
        states.set(svg, state = { sticky: false, roots: [], renders: [] });
      let renderIndex = state.renders.push(render2) - 1;
      const { x: x4, y: y4, fx, fy } = scales;
      let tx = fx ? fx(index2.fx) - dimensions.marginLeft : 0;
      let ty = fy ? fy(index2.fy) - dimensions.marginTop : 0;
      if (x4?.bandwidth)
        tx += x4.bandwidth() / 2;
      if (y4?.bandwidth)
        ty += y4.bandwidth() / 2;
      const faceted = index2.fi != null;
      let facetState;
      if (faceted) {
        let facetStates = state.facetStates;
        if (!facetStates)
          state.facetStates = facetStates = /* @__PURE__ */ new Map();
        facetState = facetStates.get(this);
        if (!facetState)
          facetStates.set(this, facetState = /* @__PURE__ */ new Map());
      }
      const [cx, cy] = applyFrameAnchor(this, dimensions);
      const { px: PX, py: PY } = values2;
      const px2 = PX ? (i3) => PX[i3] : anchorX(values2, cx);
      const py2 = PY ? (i3) => PY[i3] : anchorY(values2, cy);
      let i2;
      let g2;
      let f2;
      function update2(ii, ri) {
        if (faceted) {
          if (f2)
            f2 = cancelAnimationFrame(f2);
          if (ii == null)
            facetState.delete(index2.fi);
          else {
            facetState.set(index2.fi, ri);
            f2 = requestAnimationFrame(() => {
              f2 = null;
              for (const r of facetState.values()) {
                if (r < ri) {
                  ii = null;
                  break;
                }
              }
              render2(ii);
            });
            return;
          }
        }
        render2(ii);
      }
      function render2(ii) {
        if (i2 === ii)
          return;
        i2 = ii;
        const I2 = i2 == null ? [] : [i2];
        if (faceted)
          I2.fx = index2.fx, I2.fy = index2.fy, I2.fi = index2.fi;
        const r = next(I2, scales, values2, dimensions, context);
        if (g2) {
          if (faceted) {
            const p2 = g2.parentNode;
            const ft = g2.getAttribute("transform");
            const mt = r.getAttribute("transform");
            ft ? r.setAttribute("transform", ft) : r.removeAttribute("transform");
            mt ? p2.setAttribute("transform", mt) : p2.removeAttribute("transform");
            r.removeAttribute("aria-label");
            r.removeAttribute("aria-description");
            r.removeAttribute("aria-hidden");
          }
          g2.replaceWith(r);
        }
        state.roots[renderIndex] = g2 = r;
        context.dispatchValue(i2 == null ? null : data[i2]);
        return r;
      }
      function pointermove(event) {
        if (state.sticky || event.pointerType === "mouse" && event.buttons === 1)
          return;
        let [xp, yp] = pointer_default(event);
        xp -= tx, yp -= ty;
        let ii = null;
        let ri = maxRadius * maxRadius;
        for (const j2 of index2) {
          const dx = kx2 * (px2(j2) - xp);
          const dy = ky2 * (py2(j2) - yp);
          const rj = dx * dx + dy * dy;
          if (rj <= ri)
            ii = j2, ri = rj;
        }
        update2(ii, ri);
      }
      function pointerdown(event) {
        if (event.pointerType !== "mouse")
          return;
        if (i2 == null)
          return;
        if (state.sticky && state.roots.some((r) => r?.contains(event.target)))
          return;
        if (state.sticky)
          state.sticky = false, state.renders.forEach((r) => r(null));
        else
          state.sticky = true;
        event.stopImmediatePropagation();
      }
      function pointerleave(event) {
        if (event.pointerType !== "mouse")
          return;
        if (!state.sticky)
          update2(null);
      }
      svg.addEventListener("pointerenter", pointermove);
      svg.addEventListener("pointermove", pointermove);
      svg.addEventListener("pointerdown", pointerdown);
      svg.addEventListener("pointerleave", pointerleave);
      return render2(null);
    }, render)
  };
}
function pointer(options) {
  return pointerK(1, 1, options);
}
function pointerX(options) {
  return pointerK(1, 0.01, options);
}
function pointerY(options) {
  return pointerK(0.01, 1, options);
}
function anchorX({ x1: X13, x2: X24, x: X3 = X13 }, cx) {
  return X13 && X24 ? (i2) => (X13[i2] + X24[i2]) / 2 : X3 ? (i2) => X3[i2] : () => cx;
}
function anchorY({ y1: Y13, y2: Y24, y: Y3 = Y13 }, cy) {
  return Y13 && Y24 ? (i2) => (Y13[i2] + Y24[i2]) / 2 : Y3 ? (i2) => Y3[i2] : () => cy;
}

// ../../node_modules/@observablehq/plot/src/axes.js
function inferFontVariant(scale3) {
  return isOrdinalScale(scale3) && scale3.interval === void 0 ? void 0 : "tabular-nums";
}
function maybeAutoTickFormat(tickFormat2, domain) {
  return tickFormat2 === void 0 ? isTemporal(domain) ? formatIsoDate : string : typeof tickFormat2 === "function" ? tickFormat2 : (typeof tickFormat2 === "string" ? isTemporal(domain) ? utcFormat : format2 : constant)(tickFormat2);
}

// ../../node_modules/@observablehq/plot/src/legends/ramp.js
function legendRamp(color3, options) {
  let {
    label: label2 = color3.label,
    tickSize = 6,
    width: width2 = 240,
    height: height2 = 44 + tickSize,
    marginTop: marginTop2 = 18,
    marginRight: marginRight2 = 0,
    marginBottom: marginBottom2 = 16 + tickSize,
    marginLeft: marginLeft2 = 0,
    style: style2,
    ticks: ticks2 = (width2 - marginLeft2 - marginRight2) / 64,
    tickFormat: tickFormat2,
    fontVariant = inferFontVariant(color3),
    round: round3 = true,
    opacity: opacity2,
    className
  } = options;
  const context = createContext(options);
  className = maybeClassName(className);
  opacity2 = maybeNumberChannel(opacity2)[1];
  if (tickFormat2 === null)
    tickFormat2 = () => null;
  const svg = create3("svg", context).attr("class", `${className}-ramp`).attr("font-family", "system-ui, sans-serif").attr("font-size", 10).attr("width", width2).attr("height", height2).attr("viewBox", `0 0 ${width2} ${height2}`).call(
    (svg2) => (
      // Warning: if you edit this, change defaultClassName.
      svg2.append("style").text(
        `.${className}-ramp {
  display: block;
  background: white;
  height: auto;
  height: intrinsic;
  max-width: 100%;
  overflow: visible;
}
.${className}-ramp text {
  white-space: pre;
}`
      )
    )
  ).call(applyInlineStyles, style2);
  let tickAdjust = (g2) => g2.selectAll(".tick line").attr("y1", marginTop2 + marginBottom2 - height2);
  let x3;
  const applyRange = round3 ? (x4, range4) => x4.rangeRound(range4) : (x4, range4) => x4.range(range4);
  const { type: type2, domain, range: range3, interpolate, scale: scale3, pivot } = color3;
  if (interpolate) {
    const interpolator = range3 === void 0 ? interpolate : piecewise(interpolate.length === 1 ? interpolatePiecewise(interpolate) : interpolate, range3);
    x3 = applyRange(
      scale3.copy(),
      quantize_default(
        number_default(marginLeft2, width2 - marginRight2),
        Math.min(domain.length + (pivot !== void 0), range3 === void 0 ? Infinity : range3.length)
      )
    );
    const n = 256;
    const canvas = context.document.createElement("canvas");
    canvas.width = n;
    canvas.height = 1;
    const context2 = canvas.getContext("2d");
    for (let i2 = 0, j2 = n - 1; i2 < n; ++i2) {
      context2.fillStyle = interpolator(i2 / j2);
      context2.fillRect(i2, 0, 1, 1);
    }
    svg.append("image").attr("opacity", opacity2).attr("x", marginLeft2).attr("y", marginTop2).attr("width", width2 - marginLeft2 - marginRight2).attr("height", height2 - marginTop2 - marginBottom2).attr("preserveAspectRatio", "none").attr("xlink:href", canvas.toDataURL());
  } else if (type2 === "threshold") {
    const thresholds = domain;
    const thresholdFormat = tickFormat2 === void 0 ? (d) => d : typeof tickFormat2 === "string" ? format2(tickFormat2) : tickFormat2;
    x3 = applyRange(linear2().domain([-1, range3.length - 1]), [marginLeft2, width2 - marginRight2]);
    svg.append("g").attr("fill-opacity", opacity2).selectAll().data(range3).enter().append("rect").attr("x", (d, i2) => x3(i2 - 1)).attr("y", marginTop2).attr("width", (d, i2) => x3(i2) - x3(i2 - 1)).attr("height", height2 - marginTop2 - marginBottom2).attr("fill", (d) => d);
    ticks2 = map2(thresholds, (_2, i2) => i2);
    tickFormat2 = (i2) => thresholdFormat(thresholds[i2], i2);
  } else {
    x3 = applyRange(band().domain(domain), [marginLeft2, width2 - marginRight2]);
    svg.append("g").attr("fill-opacity", opacity2).selectAll().data(domain).enter().append("rect").attr("x", x3).attr("y", marginTop2).attr("width", Math.max(0, x3.bandwidth() - 1)).attr("height", height2 - marginTop2 - marginBottom2).attr("fill", scale3);
    tickAdjust = () => {
    };
  }
  svg.append("g").attr("transform", `translate(0,${height2 - marginBottom2})`).call(
    axisBottom(x3).ticks(Array.isArray(ticks2) ? null : ticks2, typeof tickFormat2 === "string" ? tickFormat2 : void 0).tickFormat(typeof tickFormat2 === "function" ? tickFormat2 : void 0).tickSize(tickSize).tickValues(Array.isArray(ticks2) ? ticks2 : null)
  ).attr("font-size", null).attr("font-family", null).attr("font-variant", impliedString(fontVariant, "normal")).call(tickAdjust).call((g2) => g2.select(".domain").remove());
  if (label2 !== void 0) {
    svg.append("text").attr("x", marginLeft2).attr("y", marginTop2 - 6).attr("fill", "currentColor").attr("font-weight", "bold").text(label2);
  }
  return svg.node();
}

// ../../node_modules/@observablehq/plot/src/legends/swatches.js
function maybeScale(scale3, key) {
  if (key == null)
    return key;
  const s2 = scale3(key);
  if (!s2)
    throw new Error(`scale not found: ${key}`);
  return s2;
}
function legendSwatches(color3, { opacity: opacity2, ...options } = {}) {
  if (!isOrdinalScale(color3) && !isThresholdScale(color3))
    throw new Error(`swatches legend requires ordinal or threshold color scale (not ${color3.type})`);
  return legendItems(
    color3,
    options,
    (selection2, scale3, width2, height2) => selection2.append("svg").attr("width", width2).attr("height", height2).attr("fill", scale3.scale).attr("fill-opacity", maybeNumberChannel(opacity2)[1]).append("rect").attr("width", "100%").attr("height", "100%")
  );
}
function legendSymbols(symbol2, {
  fill = symbol2.hint?.fill !== void 0 ? symbol2.hint.fill : "none",
  fillOpacity = 1,
  stroke = symbol2.hint?.stroke !== void 0 ? symbol2.hint.stroke : isNoneish(fill) ? "currentColor" : "none",
  strokeOpacity = 1,
  strokeWidth = 1.5,
  r = 4.5,
  ...options
} = {}, scale3) {
  const [vf, cf] = maybeColorChannel(fill);
  const [vs, cs] = maybeColorChannel(stroke);
  const sf = maybeScale(scale3, vf);
  const ss = maybeScale(scale3, vs);
  const size = r * r * Math.PI;
  fillOpacity = maybeNumberChannel(fillOpacity)[1];
  strokeOpacity = maybeNumberChannel(strokeOpacity)[1];
  strokeWidth = maybeNumberChannel(strokeWidth)[1];
  return legendItems(
    symbol2,
    options,
    (selection2, scale4, width2, height2) => selection2.append("svg").attr("viewBox", "-8 -8 16 16").attr("width", width2).attr("height", height2).attr("fill", vf === "color" ? (d) => sf.scale(d) : cf).attr("fill-opacity", fillOpacity).attr("stroke", vs === "color" ? (d) => ss.scale(d) : cs).attr("stroke-opacity", strokeOpacity).attr("stroke-width", strokeWidth).append("path").attr("d", (d) => {
      const p2 = pathRound();
      symbol2.scale(d).draw(p2, size);
      return p2;
    })
  );
}
function legendItems(scale3, options = {}, swatch) {
  let {
    columns,
    tickFormat: tickFormat2,
    fontVariant = inferFontVariant(scale3),
    // TODO label,
    swatchSize = 15,
    swatchWidth = swatchSize,
    swatchHeight = swatchSize,
    marginLeft: marginLeft2 = 0,
    className,
    style: style2,
    width: width2
  } = options;
  const context = createContext(options);
  className = maybeClassName(className);
  tickFormat2 = maybeAutoTickFormat(tickFormat2, scale3.domain);
  const swatches = create3("div", context).attr(
    "class",
    `${className}-swatches ${className}-swatches-${columns != null ? "columns" : "wrap"}`
  );
  let extraStyle;
  if (columns != null) {
    extraStyle = `.${className}-swatches-columns .${className}-swatch {
  display: flex;
  align-items: center;
  break-inside: avoid;
  padding-bottom: 1px;
}
.${className}-swatches-columns .${className}-swatch::before {
  flex-shrink: 0;
}
.${className}-swatches-columns .${className}-swatch-label {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}`;
    swatches.style("columns", columns).selectAll().data(scale3.domain).enter().append("div").attr("class", `${className}-swatch`).call(swatch, scale3, swatchWidth, swatchHeight).call(
      (item) => item.append("div").attr("class", `${className}-swatch-label`).attr("title", tickFormat2).text(tickFormat2)
    );
  } else {
    extraStyle = `.${className}-swatches-wrap {
  display: flex;
  align-items: center;
  min-height: 33px;
  flex-wrap: wrap;
}
.${className}-swatches-wrap .${className}-swatch {
  display: inline-flex;
  align-items: center;
  margin-right: 1em;
}`;
    swatches.selectAll().data(scale3.domain).enter().append("span").attr("class", `${className}-swatch`).call(swatch, scale3, swatchWidth, swatchHeight).append(function() {
      return this.ownerDocument.createTextNode(tickFormat2.apply(this, arguments));
    });
  }
  return swatches.call(
    (div) => div.insert("style", "*").text(
      `.${className}-swatches {
  font-family: system-ui, sans-serif;
  font-size: 10px;
  margin-bottom: 0.5em;
}
.${className}-swatch > svg {
  margin-right: 0.5em;
  overflow: visible;
}
${extraStyle}`
    )
  ).style("margin-left", marginLeft2 ? `${+marginLeft2}px` : null).style("width", width2 === void 0 ? null : `${+width2}px`).style("font-variant", impliedString(fontVariant, "normal")).call(applyInlineStyles, style2).node();
}

// ../../node_modules/@observablehq/plot/src/legends.js
var legendRegistry = /* @__PURE__ */ new Map([
  ["symbol", legendSymbols],
  ["color", legendColor],
  ["opacity", legendOpacity]
]);
function legend(options = {}) {
  for (const [key, value] of legendRegistry) {
    const scale3 = options[key];
    if (isScaleOptions(scale3)) {
      const context = createContext(options);
      let hint;
      if (key === "symbol") {
        const { fill, stroke = fill === void 0 && isScaleOptions(options.color) ? "color" : void 0 } = options;
        hint = { fill, stroke };
      }
      return value(
        normalizeScale(key, scale3, hint),
        legendOptions(context, scale3, options),
        (key2) => isScaleOptions(options[key2]) ? normalizeScale(key2, options[key2]) : null
      );
    }
  }
  throw new Error("unknown legend type; no scale found");
}
function exposeLegends(scales, context, defaults22 = {}) {
  return (key, options) => {
    if (!legendRegistry.has(key))
      throw new Error(`unknown legend type: ${key}`);
    if (!(key in scales))
      return;
    return legendRegistry.get(key)(scales[key], legendOptions(context, defaults22[key], options), (key2) => scales[key2]);
  };
}
function legendOptions({ className, ...context }, { label: label2, ticks: ticks2, tickFormat: tickFormat2 } = {}, options) {
  return inherit2(options, { className, ...context }, { label: label2, ticks: ticks2, tickFormat: tickFormat2 });
}
function legendColor(color3, { legend: legend3 = true, ...options }) {
  if (legend3 === true)
    legend3 = color3.type === "ordinal" ? "swatches" : "ramp";
  if (color3.domain === void 0)
    return;
  switch (`${legend3}`.toLowerCase()) {
    case "swatches":
      return legendSwatches(color3, options);
    case "ramp":
      return legendRamp(color3, options);
    default:
      throw new Error(`unknown legend type: ${legend3}`);
  }
}
function legendOpacity({ type: type2, interpolate, ...scale3 }, { legend: legend3 = true, color: color3 = rgb(0, 0, 0), ...options }) {
  if (!interpolate)
    throw new Error(`${type2} opacity scales are not supported`);
  if (legend3 === true)
    legend3 = "ramp";
  if (`${legend3}`.toLowerCase() !== "ramp")
    throw new Error(`${legend3} opacity legends are not supported`);
  return legendColor({ type: type2, ...scale3, interpolate: interpolateOpacity(color3) }, { legend: legend3, ...options });
}
function interpolateOpacity(color3) {
  const { r, g: g2, b: b2 } = rgb(color3) || rgb(0, 0, 0);
  return (t) => `rgba(${r},${g2},${b2},${t})`;
}
function createLegends(scales, context, options) {
  const legends = [];
  for (const [key, value] of legendRegistry) {
    const o = options[key];
    if (o?.legend && key in scales) {
      const legend3 = value(scales[key], legendOptions(context, scales[key], o), (key2) => scales[key2]);
      if (legend3 != null)
        legends.push(legend3);
    }
  }
  return legends;
}

// ../../node_modules/@observablehq/plot/src/math.js
var radians3 = Math.PI / 180;

// ../../node_modules/@observablehq/plot/src/marker.js
function markers(mark2, { marker, markerStart = marker, markerMid = marker, markerEnd = marker } = {}) {
  mark2.markerStart = maybeMarker(markerStart);
  mark2.markerMid = maybeMarker(markerMid);
  mark2.markerEnd = maybeMarker(markerEnd);
}
function maybeMarker(marker) {
  if (marker == null || marker === false)
    return null;
  if (marker === true)
    return markerCircleFill;
  if (typeof marker === "function")
    return marker;
  switch (`${marker}`.toLowerCase()) {
    case "none":
      return null;
    case "arrow":
      return markerArrow("auto");
    case "arrow-reverse":
      return markerArrow("auto-start-reverse");
    case "dot":
      return markerDot;
    case "circle":
    case "circle-fill":
      return markerCircleFill;
    case "circle-stroke":
      return markerCircleStroke;
  }
  throw new Error(`invalid marker: ${marker}`);
}
function markerArrow(orient) {
  return (color3, context) => create3("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("orient", orient).attr("fill", "none").attr("stroke", color3).attr("stroke-width", 1.5).attr("stroke-linecap", "round").attr("stroke-linejoin", "round").call((marker) => marker.append("path").attr("d", "M-1.5,-3l3,3l-3,3")).node();
}
function markerDot(color3, context) {
  return create3("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("fill", color3).attr("stroke", "none").call((marker) => marker.append("circle").attr("r", 2.5)).node();
}
function markerCircleFill(color3, context) {
  return create3("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("fill", color3).attr("stroke", "white").attr("stroke-width", 1.5).call((marker) => marker.append("circle").attr("r", 3)).node();
}
function markerCircleStroke(color3, context) {
  return create3("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("fill", "white").attr("stroke", color3).attr("stroke-width", 1.5).call((marker) => marker.append("circle").attr("r", 3)).node();
}
var nextMarkerId = 0;
function applyMarkers(path2, mark2, { stroke: S2 }, context) {
  return applyMarkersColor(path2, mark2, S2 && ((i2) => S2[i2]), context);
}
function applyGroupedMarkers(path2, mark2, { stroke: S2 }, context) {
  return applyMarkersColor(path2, mark2, S2 && (([i2]) => S2[i2]), context);
}
function applyMarkersColor(path2, { markerStart, markerMid, markerEnd, stroke }, strokeof = () => stroke, context) {
  const iriByMarkerColor = /* @__PURE__ */ new Map();
  function applyMarker(marker) {
    return function(i2) {
      const color3 = strokeof(i2);
      let iriByColor = iriByMarkerColor.get(marker);
      if (!iriByColor)
        iriByMarkerColor.set(marker, iriByColor = /* @__PURE__ */ new Map());
      let iri = iriByColor.get(color3);
      if (!iri) {
        const node = this.parentNode.insertBefore(marker(color3, context), this);
        const id2 = `plot-marker-${++nextMarkerId}`;
        node.setAttribute("id", id2);
        iriByColor.set(color3, iri = `url(#${id2})`);
      }
      return iri;
    };
  }
  if (markerStart)
    path2.attr("marker-start", applyMarker(markerStart));
  if (markerMid)
    path2.attr("marker-mid", applyMarker(markerMid));
  if (markerEnd)
    path2.attr("marker-end", applyMarker(markerEnd));
}

// ../../node_modules/@observablehq/plot/src/transforms/inset.js
function maybeInsetX({ inset: inset2, insetLeft, insetRight, ...options } = {}) {
  [insetLeft, insetRight] = maybeInset(inset2, insetLeft, insetRight);
  return { inset: inset2, insetLeft, insetRight, ...options };
}
function maybeInsetY({ inset: inset2, insetTop, insetBottom, ...options } = {}) {
  [insetTop, insetBottom] = maybeInset(inset2, insetTop, insetBottom);
  return { inset: inset2, insetTop, insetBottom, ...options };
}
function maybeInset(inset2, inset1, inset22) {
  return inset2 === void 0 && inset1 === void 0 && inset22 === void 0 ? offset ? [1, 0] : [0.5, 0.5] : [inset1, inset22];
}

// ../../node_modules/@observablehq/plot/src/transforms/interval.js
function maybeIntervalValue(value, { interval: interval2 }) {
  value = { ...maybeValue(value) };
  value.interval = maybeInterval(value.interval === void 0 ? interval2 : value.interval);
  return value;
}
function maybeIntervalK(k3, maybeInsetK, options, trivial) {
  const { [k3]: v3, [`${k3}1`]: v1, [`${k3}2`]: v22 } = options;
  const { value, interval: interval2 } = maybeIntervalValue(v3, options);
  if (value == null || interval2 == null && !trivial)
    return options;
  const label2 = labelof(v3);
  if (interval2 == null) {
    let V2;
    const kv = { transform: (data) => V2 || (V2 = valueof(data, value)), label: label2 };
    return {
      ...options,
      [k3]: void 0,
      [`${k3}1`]: v1 === void 0 ? kv : v1,
      [`${k3}2`]: v22 === void 0 ? kv : v22
    };
  }
  let D1, V1;
  function transform3(data) {
    if (V1 !== void 0 && data === D1)
      return V1;
    return V1 = map2(valueof(D1 = data, value), (v4) => interval2.floor(v4));
  }
  return maybeInsetK({
    ...options,
    [k3]: void 0,
    [`${k3}1`]: v1 === void 0 ? { transform: transform3, label: label2 } : v1,
    [`${k3}2`]: v22 === void 0 ? { transform: (data) => transform3(data).map((v4) => interval2.offset(v4)), label: label2 } : v22
  });
}
function maybeIntervalMidK(k3, maybeInsetK, options) {
  const { [k3]: v3 } = options;
  const { value, interval: interval2 } = maybeIntervalValue(v3, options);
  if (value == null || interval2 == null)
    return options;
  return maybeInsetK({
    ...options,
    [k3]: {
      label: labelof(v3),
      transform: (data) => {
        const V1 = map2(valueof(data, value), (v4) => interval2.floor(v4));
        const V2 = V1.map((v4) => interval2.offset(v4));
        return V1.map(
          isTemporal(V1) ? (v1, v22) => v1 == null || isNaN(v1 = +v1) || (v22 = V2[v22], v22 == null) || isNaN(v22 = +v22) ? void 0 : new Date((v1 + v22) / 2) : (v1, v22) => v1 == null || (v22 = V2[v22], v22 == null) ? NaN : (+v1 + +v22) / 2
        );
      }
    }
  });
}
function maybeTrivialIntervalX(options = {}) {
  return maybeIntervalK("x", maybeInsetX, options, true);
}
function maybeTrivialIntervalY(options = {}) {
  return maybeIntervalK("y", maybeInsetY, options, true);
}
function maybeIntervalX(options = {}) {
  return maybeIntervalK("x", maybeInsetX, options);
}
function maybeIntervalY(options = {}) {
  return maybeIntervalK("y", maybeInsetY, options);
}
function maybeIntervalMidX(options = {}) {
  return maybeIntervalMidK("x", maybeInsetX, options);
}
function maybeIntervalMidY(options = {}) {
  return maybeIntervalMidK("y", maybeInsetY, options);
}

// ../../node_modules/@observablehq/plot/src/marks/rule.js
var defaults = {
  ariaLabel: "rule",
  fill: null,
  stroke: "currentColor"
};
var RuleX = class extends Mark {
  constructor(data, options = {}) {
    const { x: x3, y1: y12, y2: y22, inset: inset2 = 0, insetTop = inset2, insetBottom = inset2 } = options;
    super(
      data,
      {
        x: { value: x3, scale: "x", optional: true },
        y1: { value: y12, scale: "y", optional: true },
        y2: { value: y22, scale: "y", optional: true }
      },
      withTip(options, "x"),
      defaults
    );
    this.insetTop = number5(insetTop);
    this.insetBottom = number5(insetBottom);
    markers(this, options);
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    const { x: X3, y1: Y13, y2: Y24 } = channels;
    const { width: width2, height: height2, marginTop: marginTop2, marginRight: marginRight2, marginLeft: marginLeft2, marginBottom: marginBottom2 } = dimensions;
    const { insetTop, insetBottom } = this;
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions).call(applyTransform, this, { x: X3 && x3 }, offset, 0).call(
      (g2) => g2.selectAll().data(index2).enter().append("line").call(applyDirectStyles, this).attr("x1", X3 ? (i2) => X3[i2] : (marginLeft2 + width2 - marginRight2) / 2).attr("x2", X3 ? (i2) => X3[i2] : (marginLeft2 + width2 - marginRight2) / 2).attr("y1", Y13 && !isCollapsed(y3) ? (i2) => Y13[i2] + insetTop : marginTop2 + insetTop).attr(
        "y2",
        Y24 && !isCollapsed(y3) ? y3.bandwidth ? (i2) => Y24[i2] + y3.bandwidth() - insetBottom : (i2) => Y24[i2] - insetBottom : height2 - marginBottom2 - insetBottom
      ).call(applyChannelStyles, this, channels).call(applyMarkers, this, channels, context)
    ).node();
  }
};
var RuleY = class extends Mark {
  constructor(data, options = {}) {
    const { x1: x12, x2: x22, y: y3, inset: inset2 = 0, insetRight = inset2, insetLeft = inset2 } = options;
    super(
      data,
      {
        y: { value: y3, scale: "y", optional: true },
        x1: { value: x12, scale: "x", optional: true },
        x2: { value: x22, scale: "x", optional: true }
      },
      withTip(options, "y"),
      defaults
    );
    this.insetRight = number5(insetRight);
    this.insetLeft = number5(insetLeft);
    markers(this, options);
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    const { y: Y3, x1: X13, x2: X24 } = channels;
    const { width: width2, height: height2, marginTop: marginTop2, marginRight: marginRight2, marginLeft: marginLeft2, marginBottom: marginBottom2 } = dimensions;
    const { insetLeft, insetRight } = this;
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, { y: Y3 && y3 }, 0, offset).call(
      (g2) => g2.selectAll().data(index2).enter().append("line").call(applyDirectStyles, this).attr("x1", X13 && !isCollapsed(x3) ? (i2) => X13[i2] + insetLeft : marginLeft2 + insetLeft).attr(
        "x2",
        X24 && !isCollapsed(x3) ? x3.bandwidth ? (i2) => X24[i2] + x3.bandwidth() - insetRight : (i2) => X24[i2] - insetRight : width2 - marginRight2 - insetRight
      ).attr("y1", Y3 ? (i2) => Y3[i2] : (marginTop2 + height2 - marginBottom2) / 2).attr("y2", Y3 ? (i2) => Y3[i2] : (marginTop2 + height2 - marginBottom2) / 2).call(applyChannelStyles, this, channels).call(applyMarkers, this, channels, context)
    ).node();
  }
};
function ruleX(data, options) {
  let { x: x3 = identity7, y: y3, y1: y12, y2: y22, ...rest } = maybeIntervalY(options);
  [y12, y22] = maybeOptionalZero(y3, y12, y22);
  return new RuleX(data, { ...rest, x: x3, y1: y12, y2: y22 });
}
function ruleY(data, options) {
  let { y: y3 = identity7, x: x3, x1: x12, x2: x22, ...rest } = maybeIntervalX(options);
  [x12, x22] = maybeOptionalZero(x3, x12, x22);
  return new RuleY(data, { ...rest, y: y3, x1: x12, x2: x22 });
}
function maybeOptionalZero(x3, x12, x22) {
  if (x3 == null) {
    if (x12 === void 0) {
      if (x22 !== void 0)
        return [0, x22];
    } else {
      if (x22 === void 0)
        return [0, x12];
    }
  } else if (x12 === void 0) {
    return x22 === void 0 ? [0, x3] : [x3, x22];
  } else if (x22 === void 0) {
    return [x3, x12];
  }
  return [x12, x22];
}

// ../../node_modules/@observablehq/plot/src/template.js
function template(strings, ...parts) {
  let n = parts.length;
  for (let j2 = 0, copy4 = true; j2 < n; ++j2) {
    if (typeof parts[j2] !== "function") {
      if (copy4) {
        strings = strings.slice();
        copy4 = false;
      }
      strings.splice(j2, 2, strings[j2] + parts[j2] + strings[j2 + 1]);
      parts.splice(j2, 1);
      --j2, --n;
    }
  }
  return (i2) => {
    let s2 = strings[0];
    for (let j2 = 0; j2 < n; ++j2) {
      s2 += parts[j2](i2) + strings[j2 + 1];
    }
    return s2;
  };
}

// ../../node_modules/@observablehq/plot/src/marks/text.js
var defaults2 = {
  ariaLabel: "text",
  strokeLinejoin: "round",
  strokeWidth: 3,
  paintOrder: "stroke"
};
var softHyphen = "\xAD";
var Text = class extends Mark {
  constructor(data, options = {}) {
    const {
      x: x3,
      y: y3,
      text: text3 = isIterable3(data) && isTextual(data) ? identity7 : indexOf,
      frameAnchor,
      textAnchor = /right$/i.test(frameAnchor) ? "end" : /left$/i.test(frameAnchor) ? "start" : "middle",
      lineAnchor = /^top/i.test(frameAnchor) ? "top" : /^bottom/i.test(frameAnchor) ? "bottom" : "middle",
      lineHeight = 1,
      lineWidth = Infinity,
      textOverflow,
      monospace,
      fontFamily = monospace ? "ui-monospace, monospace" : void 0,
      fontSize,
      fontStyle,
      fontVariant,
      fontWeight,
      rotate
    } = options;
    const [vrotate, crotate] = maybeNumberChannel(rotate, 0);
    const [vfontSize, cfontSize] = maybeFontSizeChannel(fontSize);
    super(
      data,
      {
        x: { value: x3, scale: "x", optional: true },
        y: { value: y3, scale: "y", optional: true },
        fontSize: { value: vfontSize, optional: true },
        rotate: { value: numberChannel(vrotate), optional: true },
        text: { value: text3, filter: nonempty, optional: true }
      },
      options,
      defaults2
    );
    this.rotate = crotate;
    this.textAnchor = impliedString(textAnchor, "middle");
    this.lineAnchor = keyword(lineAnchor, "lineAnchor", ["top", "middle", "bottom"]);
    this.lineHeight = +lineHeight;
    this.lineWidth = +lineWidth;
    this.textOverflow = maybeTextOverflow(textOverflow);
    this.monospace = !!monospace;
    this.fontFamily = string(fontFamily);
    this.fontSize = cfontSize;
    this.fontStyle = string(fontStyle);
    this.fontVariant = string(fontVariant);
    this.fontWeight = string(fontWeight);
    this.frameAnchor = maybeFrameAnchor(frameAnchor);
    if (!(this.lineWidth >= 0))
      throw new Error(`invalid lineWidth: ${lineWidth}`);
    this.splitLines = splitter2(this);
    this.clipLine = clipper(this);
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    const { x: X3, y: Y3, rotate: R, text: T2, title: TL, fontSize: FS } = channels;
    const { rotate } = this;
    const [cx, cy] = applyFrameAnchor(this, dimensions);
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyIndirectTextStyles, this, T2, dimensions).call(applyTransform, this, { x: X3 && x3, y: Y3 && y3 }).call(
      (g2) => g2.selectAll().data(index2).enter().append("text").call(applyDirectStyles, this).call(applyMultilineText, this, T2, TL).attr(
        "transform",
        template`translate(${X3 ? (i2) => X3[i2] : cx},${Y3 ? (i2) => Y3[i2] : cy})${R ? (i2) => ` rotate(${R[i2]})` : rotate ? ` rotate(${rotate})` : ``}`
      ).call(applyAttr, "font-size", FS && ((i2) => FS[i2])).call(applyChannelStyles, this, channels)
    ).node();
  }
};
function maybeTextOverflow(textOverflow) {
  return textOverflow == null ? null : keyword(textOverflow, "textOverflow", [
    "clip",
    // shorthand for clip-end
    "ellipsis",
    // … ellipsis-end
    "clip-start",
    "clip-end",
    "ellipsis-start",
    "ellipsis-middle",
    "ellipsis-end"
  ]).replace(/^(clip|ellipsis)$/, "$1-end");
}
function applyMultilineText(selection2, mark2, T2, TL) {
  if (!T2)
    return;
  const { lineAnchor, lineHeight, textOverflow, splitLines, clipLine } = mark2;
  selection2.each(function(i2) {
    const lines = splitLines(formatDefault(T2[i2]) ?? "").map(clipLine);
    const n = lines.length;
    const y3 = lineAnchor === "top" ? 0.71 : lineAnchor === "bottom" ? 1 - n : (164 - n * 100) / 200;
    if (n > 1) {
      let m2 = 0;
      for (let i3 = 0; i3 < n; ++i3) {
        ++m2;
        if (!lines[i3])
          continue;
        const tspan = this.ownerDocument.createElementNS(namespaces_default.svg, "tspan");
        tspan.setAttribute("x", 0);
        if (i3 === m2 - 1)
          tspan.setAttribute("y", `${(y3 + i3) * lineHeight}em`);
        else
          tspan.setAttribute("dy", `${m2 * lineHeight}em`);
        tspan.textContent = lines[i3];
        this.appendChild(tspan);
        m2 = 0;
      }
    } else {
      if (y3)
        this.setAttribute("y", `${y3 * lineHeight}em`);
      this.textContent = lines[0];
    }
    if (textOverflow && !TL && lines[0] !== T2[i2]) {
      const title = this.ownerDocument.createElementNS(namespaces_default.svg, "title");
      title.textContent = T2[i2];
      this.appendChild(title);
    }
  });
}
function text(data, { x: x3, y: y3, ...options } = {}) {
  if (options.frameAnchor === void 0)
    [x3, y3] = maybeTuple(x3, y3);
  return new Text(data, { ...options, x: x3, y: y3 });
}
function textX(data, { x: x3 = identity7, ...options } = {}) {
  return new Text(data, maybeIntervalMidY({ ...options, x: x3 }));
}
function textY(data, { y: y3 = identity7, ...options } = {}) {
  return new Text(data, maybeIntervalMidX({ ...options, y: y3 }));
}
function applyIndirectTextStyles(selection2, mark2, T2) {
  applyAttr(selection2, "text-anchor", mark2.textAnchor);
  applyAttr(selection2, "font-family", mark2.fontFamily);
  applyAttr(selection2, "font-size", mark2.fontSize);
  applyAttr(selection2, "font-style", mark2.fontStyle);
  applyAttr(selection2, "font-variant", mark2.fontVariant === void 0 ? inferFontVariant2(T2) : mark2.fontVariant);
  applyAttr(selection2, "font-weight", mark2.fontWeight);
}
function inferFontVariant2(T2) {
  return T2 && (isNumeric(T2) || isTemporal(T2)) ? "tabular-nums" : void 0;
}
var fontSizes = /* @__PURE__ */ new Set([
  // global keywords
  "inherit",
  "initial",
  "revert",
  "unset",
  // absolute keywords
  "xx-small",
  "x-small",
  "small",
  "medium",
  "large",
  "x-large",
  "xx-large",
  "xxx-large",
  // relative keywords
  "larger",
  "smaller"
]);
function maybeFontSizeChannel(fontSize) {
  if (fontSize == null || typeof fontSize === "number")
    return [void 0, fontSize];
  if (typeof fontSize !== "string")
    return [fontSize, void 0];
  fontSize = fontSize.trim().toLowerCase();
  return fontSizes.has(fontSize) || /^[+-]?\d*\.?\d+(e[+-]?\d+)?(\w*|%)$/.test(fontSize) ? [void 0, fontSize] : [fontSize, void 0];
}
function lineWrap(input2, maxWidth, widthof2) {
  const lines = [];
  let lineStart, lineEnd = 0;
  for (const [wordStart, wordEnd, required2] of lineBreaks(input2)) {
    if (lineStart === void 0)
      lineStart = wordStart;
    if (lineEnd > lineStart && widthof2(input2, lineStart, wordEnd) > maxWidth) {
      lines.push(input2.slice(lineStart, lineEnd) + (input2[lineEnd - 1] === softHyphen ? "-" : ""));
      lineStart = wordStart;
    }
    if (required2) {
      lines.push(input2.slice(lineStart, wordEnd));
      lineStart = void 0;
      continue;
    }
    lineEnd = wordEnd;
  }
  return lines;
}
function* lineBreaks(input2) {
  let i2 = 0, j2 = 0;
  const n = input2.length;
  while (j2 < n) {
    let k3 = 1;
    switch (input2[j2]) {
      case softHyphen:
      case "-":
        ++j2;
        yield [i2, j2, false];
        i2 = j2;
        break;
      case " ":
        yield [i2, j2, false];
        while (input2[++j2] === " ")
          ;
        i2 = j2;
        break;
      case "\r":
        if (input2[j2 + 1] === "\n")
          ++k3;
      case "\n":
        yield [i2, j2, true];
        j2 += k3;
        i2 = j2;
        break;
      default:
        ++j2;
        break;
    }
  }
  yield [i2, j2, true];
}
var defaultWidthMap = {
  a: 56,
  b: 63,
  c: 57,
  d: 63,
  e: 58,
  f: 37,
  g: 62,
  h: 60,
  i: 26,
  j: 26,
  k: 55,
  l: 26,
  m: 88,
  n: 60,
  o: 60,
  p: 62,
  q: 62,
  r: 39,
  s: 54,
  t: 38,
  u: 60,
  v: 55,
  w: 79,
  x: 54,
  y: 55,
  z: 55,
  A: 69,
  B: 67,
  C: 73,
  D: 74,
  E: 61,
  F: 58,
  G: 76,
  H: 75,
  I: 28,
  J: 55,
  K: 67,
  L: 58,
  M: 89,
  N: 75,
  O: 78,
  P: 65,
  Q: 78,
  R: 67,
  S: 65,
  T: 65,
  U: 75,
  V: 69,
  W: 98,
  X: 69,
  Y: 67,
  Z: 67,
  0: 64,
  1: 48,
  2: 62,
  3: 64,
  4: 66,
  5: 63,
  6: 65,
  7: 58,
  8: 65,
  9: 65,
  " ": 29,
  "!": 32,
  '"': 49,
  "'": 31,
  "(": 39,
  ")": 39,
  ",": 31,
  "-": 48,
  ".": 31,
  "/": 32,
  ":": 31,
  ";": 31,
  "?": 52,
  "\u2018": 31,
  "\u2019": 31,
  "\u201C": 47,
  "\u201D": 47,
  "\u2026": 82
};
function defaultWidth(text3, start2 = 0, end = text3.length) {
  let sum6 = 0;
  for (let i2 = start2; i2 < end; i2 = readCharacter(text3, i2)) {
    sum6 += defaultWidthMap[text3[i2]] ?? (isPictographic(text3, i2) ? 120 : defaultWidthMap.e);
  }
  return sum6;
}
function monospaceWidth(text3, start2 = 0, end = text3.length) {
  let sum6 = 0;
  for (let i2 = start2; i2 < end; i2 = readCharacter(text3, i2)) {
    sum6 += isPictographic(text3, i2) ? 200 : 100;
  }
  return sum6;
}
function splitter2({ monospace, lineWidth, textOverflow }) {
  if (textOverflow != null || lineWidth == Infinity)
    return (text3) => text3.split(/\r\n?|\n/g);
  const widthof2 = monospace ? monospaceWidth : defaultWidth;
  const maxWidth = lineWidth * 100;
  return (text3) => lineWrap(text3, maxWidth, widthof2);
}
function clipper({ monospace, lineWidth, textOverflow }) {
  if (textOverflow == null || lineWidth == Infinity)
    return (text3) => text3;
  const widthof2 = monospace ? monospaceWidth : defaultWidth;
  const maxWidth = lineWidth * 100;
  switch (textOverflow) {
    case "clip-start":
      return (text3) => clipStart(text3, maxWidth, widthof2, "");
    case "clip-end":
      return (text3) => clipEnd(text3, maxWidth, widthof2, "");
    case "ellipsis-start":
      return (text3) => clipStart(text3, maxWidth, widthof2, ellipsis);
    case "ellipsis-middle":
      return (text3) => clipMiddle(text3, maxWidth, widthof2, ellipsis);
    case "ellipsis-end":
      return (text3) => clipEnd(text3, maxWidth, widthof2, ellipsis);
  }
}
var ellipsis = "\u2026";
function cut(text3, width2, widthof2, inset2) {
  const I2 = [];
  let w2 = 0;
  for (let i2 = 0, j2 = 0, n = text3.length; i2 < n; i2 = j2) {
    j2 = readCharacter(text3, i2);
    const l = widthof2(text3, i2, j2);
    if (w2 + l > width2) {
      w2 += inset2;
      while (w2 > width2 && i2 > 0)
        j2 = i2, i2 = I2.pop(), w2 -= widthof2(text3, i2, j2);
      return [i2, width2 - w2];
    }
    w2 += l;
    I2.push(i2);
  }
  return [-1, 0];
}
function clipEnd(text3, width2, widthof2, ellipsis2) {
  text3 = text3.trim();
  const e = widthof2(ellipsis2);
  const [i2] = cut(text3, width2, widthof2, e);
  return i2 < 0 ? text3 : text3.slice(0, i2).trimEnd() + ellipsis2;
}
function clipMiddle(text3, width2, widthof2, ellipsis2) {
  text3 = text3.trim();
  const w2 = widthof2(text3);
  if (w2 <= width2)
    return text3;
  const e = widthof2(ellipsis2) / 2;
  const [i2, ei] = cut(text3, width2 / 2, widthof2, e);
  const [j2] = cut(text3, w2 - width2 / 2 - ei + e, widthof2, -e);
  return j2 < 0 ? ellipsis2 : text3.slice(0, i2).trimEnd() + ellipsis2 + text3.slice(readCharacter(text3, j2)).trimStart();
}
function clipStart(text3, width2, widthof2, ellipsis2) {
  text3 = text3.trim();
  const w2 = widthof2(text3);
  if (w2 <= width2)
    return text3;
  const e = widthof2(ellipsis2);
  const [j2] = cut(text3, w2 - width2 + e, widthof2, -e);
  return j2 < 0 ? ellipsis2 : ellipsis2 + text3.slice(readCharacter(text3, j2)).trimStart();
}
var reCombiner = /[\p{Combining_Mark}\p{Emoji_Modifier}]+/uy;
var rePictographic = /\p{Extended_Pictographic}/uy;
function readCharacter(text3, i2) {
  i2 += isSurrogatePair(text3, i2) ? 2 : 1;
  if (isCombiner(text3, i2))
    i2 = reCombiner.lastIndex;
  if (isZeroWidthJoiner(text3, i2))
    return readCharacter(text3, i2 + 1);
  return i2;
}
function isAscii(text3, i2) {
  return text3.charCodeAt(i2) < 128;
}
function isSurrogatePair(text3, i2) {
  const hi = text3.charCodeAt(i2);
  if (hi >= 55296 && hi < 56320) {
    const lo = text3.charCodeAt(i2 + 1);
    return lo >= 56320 && lo < 57344;
  }
  return false;
}
function isZeroWidthJoiner(text3, i2) {
  return text3.charCodeAt(i2) === 8205;
}
function isCombiner(text3, i2) {
  return isAscii(text3, i2) ? false : (reCombiner.lastIndex = i2, reCombiner.test(text3));
}
function isPictographic(text3, i2) {
  return isAscii(text3, i2) ? false : (rePictographic.lastIndex = i2, rePictographic.test(text3));
}

// ../../node_modules/@observablehq/plot/src/marks/vector.js
var defaults3 = {
  ariaLabel: "vector",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 1.5,
  strokeLinejoin: "round",
  strokeLinecap: "round"
};
var defaultRadius = 3.5;
var wingRatio = defaultRadius * 5;
var shapeArrow = {
  draw(context, l, r) {
    const wing = l * r / wingRatio;
    context.moveTo(0, 0);
    context.lineTo(0, -l);
    context.moveTo(-wing, wing - l);
    context.lineTo(0, -l);
    context.lineTo(wing, wing - l);
  }
};
var shapeSpike = {
  draw(context, l, r) {
    context.moveTo(-r, 0);
    context.lineTo(0, -l);
    context.lineTo(r, 0);
  }
};
var shapes = /* @__PURE__ */ new Map([
  ["arrow", shapeArrow],
  ["spike", shapeSpike]
]);
function isShapeObject(value) {
  return value && typeof value.draw === "function";
}
function maybeShape(shape) {
  if (isShapeObject(shape))
    return shape;
  const value = shapes.get(`${shape}`.toLowerCase());
  if (value)
    return value;
  throw new Error(`invalid shape: ${shape}`);
}
var Vector3 = class extends Mark {
  constructor(data, options = {}) {
    const { x: x3, y: y3, r = defaultRadius, length: length4, rotate, shape = shapeArrow, anchor = "middle", frameAnchor } = options;
    const [vl, cl] = maybeNumberChannel(length4, 12);
    const [vr, cr] = maybeNumberChannel(rotate, 0);
    super(
      data,
      {
        x: { value: x3, scale: "x", optional: true },
        y: { value: y3, scale: "y", optional: true },
        length: { value: vl, scale: "length", optional: true },
        rotate: { value: vr, optional: true }
      },
      options,
      defaults3
    );
    this.r = +r;
    this.length = cl;
    this.rotate = cr;
    this.shape = maybeShape(shape);
    this.anchor = keyword(anchor, "anchor", ["start", "middle", "end"]);
    this.frameAnchor = maybeFrameAnchor(frameAnchor);
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    const { x: X3, y: Y3, length: L2, rotate: A5 } = channels;
    const { length: length4, rotate, anchor, shape, r } = this;
    const [cx, cy] = applyFrameAnchor(this, dimensions);
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, { x: X3 && x3, y: Y3 && y3 }).call(
      (g2) => g2.selectAll().data(index2).enter().append("path").call(applyDirectStyles, this).attr(
        "transform",
        template`translate(${X3 ? (i2) => X3[i2] : cx},${Y3 ? (i2) => Y3[i2] : cy})${A5 ? (i2) => ` rotate(${A5[i2]})` : rotate ? ` rotate(${rotate})` : ``}${anchor === "start" ? `` : anchor === "end" ? L2 ? (i2) => ` translate(0,${L2[i2]})` : ` translate(0,${length4})` : L2 ? (i2) => ` translate(0,${L2[i2] / 2})` : ` translate(0,${length4 / 2})`}`
      ).attr(
        "d",
        L2 ? (i2) => {
          const p2 = pathRound();
          shape.draw(p2, L2[i2], r);
          return p2;
        } : (() => {
          const p2 = pathRound();
          shape.draw(p2, length4, r);
          return p2;
        })()
      ).call(applyChannelStyles, this, channels)
    ).node();
  }
};
function vector(data, options = {}) {
  let { x: x3, y: y3, ...rest } = options;
  if (options.frameAnchor === void 0)
    [x3, y3] = maybeTuple(x3, y3);
  return new Vector3(data, { ...rest, x: x3, y: y3 });
}
function vectorX(data, options = {}) {
  const { x: x3 = identity7, ...rest } = options;
  return new Vector3(data, { ...rest, x: x3 });
}
function vectorY(data, options = {}) {
  const { y: y3 = identity7, ...rest } = options;
  return new Vector3(data, { ...rest, y: y3 });
}
function spike(data, options = {}) {
  const {
    shape = shapeSpike,
    stroke = defaults3.stroke,
    strokeWidth = 1,
    fill = stroke,
    fillOpacity = 0.3,
    anchor = "start",
    ...rest
  } = options;
  return vector(data, { ...rest, shape, stroke, strokeWidth, fill, fillOpacity, anchor });
}

// ../../node_modules/@observablehq/plot/src/marks/axis.js
function maybeData(data, options) {
  if (arguments.length < 2 && !isIterable3(data))
    options = data, data = null;
  if (options === void 0)
    options = {};
  return [data, options];
}
function maybeAnchor2({ anchor } = {}, anchors) {
  return anchor === void 0 ? anchors[0] : keyword(anchor, "anchor", anchors);
}
function anchorY2(options) {
  return maybeAnchor2(options, ["left", "right"]);
}
function anchorFy(options) {
  return maybeAnchor2(options, ["right", "left"]);
}
function anchorX2(options) {
  return maybeAnchor2(options, ["bottom", "top"]);
}
function anchorFx(options) {
  return maybeAnchor2(options, ["top", "bottom"]);
}
function axisY() {
  const [data, options] = maybeData(...arguments);
  return axisKy("y", anchorY2(options), data, options);
}
function axisFy() {
  const [data, options] = maybeData(...arguments);
  return axisKy("fy", anchorFy(options), data, options);
}
function axisX() {
  const [data, options] = maybeData(...arguments);
  return axisKx("x", anchorX2(options), data, options);
}
function axisFx() {
  const [data, options] = maybeData(...arguments);
  return axisKx("fx", anchorFx(options), data, options);
}
function axisKy(k3, anchor, data, {
  color: color3 = "currentColor",
  opacity: opacity2 = 1,
  stroke = color3,
  strokeOpacity = opacity2,
  strokeWidth = 1,
  fill = color3,
  fillOpacity = opacity2,
  textAnchor,
  textStroke,
  textStrokeOpacity,
  textStrokeWidth,
  tickSize = k3 === "y" ? 6 : 0,
  tickPadding,
  tickRotate,
  x: x3,
  margin: margin2,
  marginTop: marginTop2 = margin2 === void 0 ? 20 : margin2,
  marginRight: marginRight2 = margin2 === void 0 ? anchor === "right" ? 40 : 0 : margin2,
  marginBottom: marginBottom2 = margin2 === void 0 ? 20 : margin2,
  marginLeft: marginLeft2 = margin2 === void 0 ? anchor === "left" ? 40 : 0 : margin2,
  label: label2,
  labelAnchor,
  labelArrow,
  labelOffset,
  ...options
}) {
  tickSize = number5(tickSize);
  tickPadding = number5(tickPadding);
  tickRotate = number5(tickRotate);
  if (labelAnchor !== void 0)
    labelAnchor = keyword(labelAnchor, "labelAnchor", ["center", "top", "bottom"]);
  labelArrow = maybeLabelArrow(labelArrow);
  return marks(
    tickSize && !isNoneish(stroke) ? axisTickKy(k3, anchor, data, {
      stroke,
      strokeOpacity,
      strokeWidth,
      tickSize,
      tickPadding,
      tickRotate,
      x: x3,
      ...options
    }) : null,
    !isNoneish(fill) ? axisTextKy(k3, anchor, data, {
      fill,
      fillOpacity,
      stroke: textStroke,
      strokeOpacity: textStrokeOpacity,
      strokeWidth: textStrokeWidth,
      textAnchor,
      tickSize,
      tickPadding,
      tickRotate,
      x: x3,
      marginTop: marginTop2,
      marginRight: marginRight2,
      marginBottom: marginBottom2,
      marginLeft: marginLeft2,
      ...options
    }) : null,
    !isNoneish(fill) && label2 !== null ? text(
      [],
      labelOptions({ fill, fillOpacity, ...options }, function(data2, facets, channels, scales, dimensions) {
        const scale3 = scales[k3];
        const { marginTop: marginTop3, marginRight: marginRight3, marginBottom: marginBottom3, marginLeft: marginLeft3 } = k3 === "y" && dimensions.inset || dimensions;
        const cla = labelAnchor ?? (scale3.bandwidth ? "center" : "top");
        const clo = labelOffset ?? (anchor === "right" ? marginRight3 : marginLeft3) - 3;
        if (cla === "center") {
          this.textAnchor = void 0;
          this.lineAnchor = anchor === "right" ? "bottom" : "top";
          this.frameAnchor = anchor;
          this.rotate = -90;
        } else {
          this.textAnchor = anchor === "right" ? "end" : "start";
          this.lineAnchor = cla;
          this.frameAnchor = `${cla}-${anchor}`;
          this.rotate = 0;
        }
        this.dy = cla === "top" ? 3 - marginTop3 : cla === "bottom" ? marginBottom3 - 3 : 0;
        this.dx = anchor === "right" ? clo : -clo;
        this.ariaLabel = `${k3}-axis label`;
        return {
          facets: [[0]],
          channels: { text: { value: [formatAxisLabel(k3, scale3, { anchor, label: label2, labelAnchor: cla, labelArrow })] } }
        };
      })
    ) : null
  );
}
function axisKx(k3, anchor, data, {
  color: color3 = "currentColor",
  opacity: opacity2 = 1,
  stroke = color3,
  strokeOpacity = opacity2,
  strokeWidth = 1,
  fill = color3,
  fillOpacity = opacity2,
  textAnchor,
  textStroke,
  textStrokeOpacity,
  textStrokeWidth,
  tickSize = k3 === "x" ? 6 : 0,
  tickPadding,
  tickRotate,
  y: y3,
  margin: margin2,
  marginTop: marginTop2 = margin2 === void 0 ? anchor === "top" ? 30 : 0 : margin2,
  marginRight: marginRight2 = margin2 === void 0 ? 20 : margin2,
  marginBottom: marginBottom2 = margin2 === void 0 ? anchor === "bottom" ? 30 : 0 : margin2,
  marginLeft: marginLeft2 = margin2 === void 0 ? 20 : margin2,
  label: label2,
  labelAnchor,
  labelArrow,
  labelOffset,
  ...options
}) {
  tickSize = number5(tickSize);
  tickPadding = number5(tickPadding);
  tickRotate = number5(tickRotate);
  if (labelAnchor !== void 0)
    labelAnchor = keyword(labelAnchor, "labelAnchor", ["center", "left", "right"]);
  labelArrow = maybeLabelArrow(labelArrow);
  return marks(
    tickSize && !isNoneish(stroke) ? axisTickKx(k3, anchor, data, {
      stroke,
      strokeOpacity,
      strokeWidth,
      tickSize,
      tickPadding,
      tickRotate,
      y: y3,
      ...options
    }) : null,
    !isNoneish(fill) ? axisTextKx(k3, anchor, data, {
      fill,
      fillOpacity,
      stroke: textStroke,
      strokeOpacity: textStrokeOpacity,
      strokeWidth: textStrokeWidth,
      textAnchor,
      tickSize,
      tickPadding,
      tickRotate,
      y: y3,
      marginTop: marginTop2,
      marginRight: marginRight2,
      marginBottom: marginBottom2,
      marginLeft: marginLeft2,
      ...options
    }) : null,
    !isNoneish(fill) && label2 !== null ? text(
      [],
      labelOptions({ fill, fillOpacity, ...options }, function(data2, facets, channels, scales, dimensions) {
        const scale3 = scales[k3];
        const { marginTop: marginTop3, marginRight: marginRight3, marginBottom: marginBottom3, marginLeft: marginLeft3 } = k3 === "x" && dimensions.inset || dimensions;
        const cla = labelAnchor ?? (scale3.bandwidth ? "center" : "right");
        const clo = labelOffset ?? (anchor === "top" ? marginTop3 : marginBottom3) - 3;
        if (cla === "center") {
          this.frameAnchor = anchor;
          this.textAnchor = void 0;
        } else {
          this.frameAnchor = `${anchor}-${cla}`;
          this.textAnchor = cla === "right" ? "end" : "start";
        }
        this.lineAnchor = anchor;
        this.dy = anchor === "top" ? -clo : clo;
        this.dx = cla === "right" ? marginRight3 - 3 : cla === "left" ? 3 - marginLeft3 : 0;
        this.ariaLabel = `${k3}-axis label`;
        return {
          facets: [[0]],
          channels: { text: { value: [formatAxisLabel(k3, scale3, { anchor, label: label2, labelAnchor: cla, labelArrow })] } }
        };
      })
    ) : null
  );
}
function axisTickKy(k3, anchor, data, {
  strokeWidth = 1,
  strokeLinecap = null,
  strokeLinejoin = null,
  facetAnchor = anchor + (k3 === "y" ? "-empty" : ""),
  frameAnchor = anchor,
  tickSize,
  inset: inset2 = 0,
  insetLeft = inset2,
  insetRight = inset2,
  dx = 0,
  y: y3 = k3 === "y" ? void 0 : null,
  ...options
}) {
  return axisMark(vectorY, k3, `${k3}-axis tick`, data, {
    strokeWidth,
    strokeLinecap,
    strokeLinejoin,
    facetAnchor,
    frameAnchor,
    y: y3,
    ...options,
    dx: anchor === "left" ? +dx - offset + +insetLeft : +dx + offset - insetRight,
    anchor: "start",
    length: tickSize,
    shape: anchor === "left" ? shapeTickLeft : shapeTickRight
  });
}
function axisTickKx(k3, anchor, data, {
  strokeWidth = 1,
  strokeLinecap = null,
  strokeLinejoin = null,
  facetAnchor = anchor + (k3 === "x" ? "-empty" : ""),
  frameAnchor = anchor,
  tickSize,
  inset: inset2 = 0,
  insetTop = inset2,
  insetBottom = inset2,
  dy = 0,
  x: x3 = k3 === "x" ? void 0 : null,
  ...options
}) {
  return axisMark(vectorX, k3, `${k3}-axis tick`, data, {
    strokeWidth,
    strokeLinejoin,
    strokeLinecap,
    facetAnchor,
    frameAnchor,
    x: x3,
    ...options,
    dy: anchor === "bottom" ? +dy - offset - insetBottom : +dy + offset + +insetTop,
    anchor: "start",
    length: tickSize,
    shape: anchor === "bottom" ? shapeTickBottom : shapeTickTop
  });
}
function axisTextKy(k3, anchor, data, {
  facetAnchor = anchor + (k3 === "y" ? "-empty" : ""),
  frameAnchor = anchor,
  tickSize,
  tickRotate = 0,
  tickPadding = Math.max(3, 9 - tickSize) + (Math.abs(tickRotate) > 60 ? 4 * Math.cos(tickRotate * radians3) : 0),
  tickFormat: tickFormat2,
  text: text3 = typeof tickFormat2 === "function" ? tickFormat2 : void 0,
  textAnchor = Math.abs(tickRotate) > 60 ? "middle" : anchor === "left" ? "end" : "start",
  lineAnchor = tickRotate > 60 ? "top" : tickRotate < -60 ? "bottom" : "middle",
  fontVariant,
  inset: inset2 = 0,
  insetLeft = inset2,
  insetRight = inset2,
  dx = 0,
  y: y3 = k3 === "y" ? void 0 : null,
  ...options
}) {
  return axisMark(
    textY,
    k3,
    `${k3}-axis tick label`,
    data,
    {
      facetAnchor,
      frameAnchor,
      text: text3 === void 0 ? null : text3,
      textAnchor,
      lineAnchor,
      fontVariant,
      rotate: tickRotate,
      y: y3,
      ...options,
      dx: anchor === "left" ? +dx - tickSize - tickPadding + +insetLeft : +dx + +tickSize + +tickPadding - insetRight
    },
    function(scale3, ticks2, channels) {
      if (fontVariant === void 0)
        this.fontVariant = inferFontVariant3(scale3);
      if (text3 === void 0)
        channels.text = inferTextChannel(scale3, ticks2, tickFormat2);
    }
  );
}
function axisTextKx(k3, anchor, data, {
  facetAnchor = anchor + (k3 === "x" ? "-empty" : ""),
  frameAnchor = anchor,
  tickSize,
  tickRotate = 0,
  tickPadding = Math.max(3, 9 - tickSize) + (Math.abs(tickRotate) >= 10 ? 4 * Math.cos(tickRotate * radians3) : 0),
  tickFormat: tickFormat2,
  text: text3 = typeof tickFormat2 === "function" ? tickFormat2 : void 0,
  textAnchor = Math.abs(tickRotate) >= 10 ? tickRotate < 0 ^ anchor === "bottom" ? "start" : "end" : "middle",
  lineAnchor = Math.abs(tickRotate) >= 10 ? "middle" : anchor === "bottom" ? "top" : "bottom",
  fontVariant,
  inset: inset2 = 0,
  insetTop = inset2,
  insetBottom = inset2,
  dy = 0,
  x: x3 = k3 === "x" ? void 0 : null,
  ...options
}) {
  return axisMark(
    textX,
    k3,
    `${k3}-axis tick label`,
    data,
    {
      facetAnchor,
      frameAnchor,
      text: text3 === void 0 ? null : text3,
      textAnchor,
      lineAnchor,
      fontVariant,
      rotate: tickRotate,
      x: x3,
      ...options,
      dy: anchor === "bottom" ? +dy + +tickSize + +tickPadding - insetBottom : +dy - tickSize - tickPadding + +insetTop
    },
    function(scale3, ticks2, channels) {
      if (fontVariant === void 0)
        this.fontVariant = inferFontVariant3(scale3);
      if (text3 === void 0)
        channels.text = inferTextChannel(scale3, ticks2, tickFormat2);
    }
  );
}
function gridY() {
  const [data, options] = maybeData(...arguments);
  return gridKy("y", anchorY2(options), data, options);
}
function gridFy() {
  const [data, options] = maybeData(...arguments);
  return gridKy("fy", anchorFy(options), data, options);
}
function gridX() {
  const [data, options] = maybeData(...arguments);
  return gridKx("x", anchorX2(options), data, options);
}
function gridFx() {
  const [data, options] = maybeData(...arguments);
  return gridKx("fx", anchorFx(options), data, options);
}
function gridKy(k3, anchor, data, {
  y: y3 = k3 === "y" ? void 0 : null,
  x: x3 = null,
  x1: x12 = anchor === "left" ? x3 : null,
  x2: x22 = anchor === "right" ? x3 : null,
  ...options
}) {
  return axisMark(ruleY, k3, `${k3}-grid`, data, { y: y3, x1: x12, x2: x22, ...gridDefaults(options) });
}
function gridKx(k3, anchor, data, {
  x: x3 = k3 === "x" ? void 0 : null,
  y: y3 = null,
  y1: y12 = anchor === "top" ? y3 : null,
  y2: y22 = anchor === "bottom" ? y3 : null,
  ...options
}) {
  return axisMark(ruleX, k3, `${k3}-grid`, data, { x: x3, y1: y12, y2: y22, ...gridDefaults(options) });
}
function gridDefaults({
  color: color3 = "currentColor",
  opacity: opacity2 = 0.1,
  stroke = color3,
  strokeOpacity = opacity2,
  strokeWidth = 1,
  ...options
}) {
  return { stroke, strokeOpacity, strokeWidth, ...options };
}
function labelOptions({ fill, fillOpacity, fontFamily, fontSize, fontStyle, fontWeight, monospace, pointerEvents, shapeRendering }, initializer2) {
  [, fill] = maybeColorChannel(fill);
  [, fillOpacity] = maybeNumberChannel(fillOpacity);
  return {
    facet: "super",
    x: null,
    y: null,
    fill,
    fillOpacity,
    fontFamily,
    fontSize,
    fontStyle,
    fontWeight,
    monospace,
    pointerEvents,
    shapeRendering,
    initializer: initializer2
  };
}
function axisMark(mark2, k3, ariaLabel, data, options, initialize) {
  let channels;
  const m2 = mark2(
    data,
    initializer(options, function(data2, facets, _channels, scales, dimensions, context) {
      const initializeFacets = data2 == null && (k3 === "fx" || k3 === "fy");
      const { [k3]: scale3 } = scales;
      if (!scale3)
        throw new Error(`missing scale: ${k3}`);
      let { ticks: ticks2, tickSpacing, interval: interval2 } = options;
      if (isTemporalScale(scale3) && typeof ticks2 === "string")
        interval2 = ticks2, ticks2 = void 0;
      if (data2 == null) {
        if (isIterable3(ticks2)) {
          data2 = arrayify2(ticks2);
        } else if (scale3.ticks) {
          if (ticks2 !== void 0) {
            data2 = scale3.ticks(ticks2);
          } else {
            interval2 = maybeRangeInterval(interval2 === void 0 ? scale3.interval : interval2, scale3.type);
            if (interval2 !== void 0) {
              const [min5, max4] = extent(scale3.domain());
              data2 = interval2.range(min5, interval2.offset(interval2.floor(max4)));
            } else {
              const [min5, max4] = extent(scale3.range());
              ticks2 = (max4 - min5) / (tickSpacing === void 0 ? k3 === "x" ? 80 : 35 : tickSpacing);
              data2 = scale3.ticks(ticks2);
            }
          }
        } else {
          data2 = scale3.domain();
        }
        if (k3 === "y" || k3 === "x") {
          facets = [range2(data2)];
        } else {
          channels[k3] = { scale: k3, value: identity7 };
        }
      }
      initialize?.call(this, scale3, ticks2, channels);
      const initializedChannels = Object.fromEntries(
        Object.entries(channels).map(([name2, channel]) => {
          return [name2, { ...channel, value: valueof(data2, channel.value) }];
        })
      );
      if (initializeFacets)
        facets = context.filterFacets(data2, initializedChannels);
      return { data: data2, facets, channels: initializedChannels };
    })
  );
  if (data == null) {
    channels = m2.channels;
    m2.channels = {};
  } else {
    channels = {};
  }
  m2.ariaLabel = ariaLabel;
  return m2;
}
function inferTextChannel(scale3, ticks2, tickFormat2) {
  return { value: inferTickFormat(scale3, ticks2, tickFormat2) };
}
function inferTickFormat(scale3, ticks2, tickFormat2) {
  return scale3.tickFormat ? scale3.tickFormat(isIterable3(ticks2) ? null : ticks2, tickFormat2) : tickFormat2 === void 0 ? isUtcYear(scale3.interval) ? utcFormat("%Y") : isTimeYear(scale3.interval) ? timeFormat("%Y") : formatDefault : typeof tickFormat2 === "string" ? (isTemporal(scale3.domain()) ? utcFormat : format2)(tickFormat2) : constant(tickFormat2);
}
var shapeTickBottom = {
  draw(context, l) {
    context.moveTo(0, 0);
    context.lineTo(0, l);
  }
};
var shapeTickTop = {
  draw(context, l) {
    context.moveTo(0, 0);
    context.lineTo(0, -l);
  }
};
var shapeTickLeft = {
  draw(context, l) {
    context.moveTo(0, 0);
    context.lineTo(-l, 0);
  }
};
var shapeTickRight = {
  draw(context, l) {
    context.moveTo(0, 0);
    context.lineTo(l, 0);
  }
};
function inferFontVariant3(scale3) {
  return scale3.bandwidth && !scale3.interval ? void 0 : "tabular-nums";
}
function inferScaleOrder(scale3) {
  return Math.sign(orderof(scale3.domain())) * Math.sign(orderof(scale3.range()));
}
function formatAxisLabel(k3, scale3, { anchor, label: label2 = scale3.label, labelAnchor, labelArrow } = {}) {
  if (label2 == null || label2.inferred && isTemporalish(scale3) && /^(date|time|year)$/i.test(label2))
    return;
  label2 = String(label2);
  if (labelArrow === "auto")
    labelArrow = (!scale3.bandwidth || scale3.interval) && !/[↑↓→←]/.test(label2);
  if (!labelArrow)
    return label2;
  if (labelArrow === true) {
    const order = inferScaleOrder(scale3);
    if (order)
      labelArrow = /x$/.test(k3) || labelAnchor === "center" ? /x$/.test(k3) === order < 0 ? "left" : "right" : order < 0 ? "up" : "down";
  }
  switch (labelArrow) {
    case "left":
      return `\u2190 ${label2}`;
    case "right":
      return `${label2} \u2192`;
    case "up":
      return anchor === "right" ? `${label2} \u2191` : `\u2191 ${label2}`;
    case "down":
      return anchor === "right" ? `${label2} \u2193` : `\u2193 ${label2}`;
  }
  return label2;
}
function maybeLabelArrow(labelArrow = "auto") {
  return isNoneish(labelArrow) ? false : typeof labelArrow === "boolean" ? labelArrow : keyword(labelArrow, "labelArrow", ["auto", "up", "right", "down", "left"]);
}
function isTemporalish(scale3) {
  return isTemporalScale(scale3) || scale3.interval != null;
}

// ../../node_modules/@observablehq/plot/src/marks/frame.js
var defaults4 = {
  ariaLabel: "frame",
  fill: "none",
  stroke: "currentColor"
};
var lineDefaults = {
  ariaLabel: "frame",
  fill: null,
  stroke: "currentColor",
  strokeLinecap: "square"
};
var Frame = class extends Mark {
  constructor(options = {}) {
    const {
      anchor = null,
      inset: inset2 = 0,
      insetTop = inset2,
      insetRight = inset2,
      insetBottom = inset2,
      insetLeft = inset2,
      rx,
      ry
    } = options;
    super(singleton, void 0, options, anchor == null ? defaults4 : lineDefaults);
    this.anchor = maybeKeyword(anchor, "anchor", ["top", "right", "bottom", "left"]);
    this.insetTop = number5(insetTop);
    this.insetRight = number5(insetRight);
    this.insetBottom = number5(insetBottom);
    this.insetLeft = number5(insetLeft);
    this.rx = number5(rx);
    this.ry = number5(ry);
  }
  render(index2, scales, channels, dimensions, context) {
    const { marginTop: marginTop2, marginRight: marginRight2, marginBottom: marginBottom2, marginLeft: marginLeft2, width: width2, height: height2 } = dimensions;
    const { anchor, insetTop, insetRight, insetBottom, insetLeft, rx, ry } = this;
    const x12 = marginLeft2 + insetLeft;
    const x22 = width2 - marginRight2 - insetRight;
    const y12 = marginTop2 + insetTop;
    const y22 = height2 - marginBottom2 - insetBottom;
    return create3(anchor ? "svg:line" : "svg:rect", context).datum(0).call(applyIndirectStyles, this, dimensions, context).call(applyDirectStyles, this).call(applyChannelStyles, this, channels).call(applyTransform, this, {}).call(
      anchor === "left" ? (line3) => line3.attr("x1", x12).attr("x2", x12).attr("y1", y12).attr("y2", y22) : anchor === "right" ? (line3) => line3.attr("x1", x22).attr("x2", x22).attr("y1", y12).attr("y2", y22) : anchor === "top" ? (line3) => line3.attr("x1", x12).attr("x2", x22).attr("y1", y12).attr("y2", y12) : anchor === "bottom" ? (line3) => line3.attr("x1", x12).attr("x2", x22).attr("y1", y22).attr("y2", y22) : (rect3) => rect3.attr("x", x12).attr("y", y12).attr("width", x22 - x12).attr("height", y22 - y12).attr("rx", rx).attr("ry", ry)
    ).node();
  }
};
function frame2(options) {
  return new Frame(options);
}

// ../../node_modules/@observablehq/plot/src/marks/tip.js
var defaults5 = {
  ariaLabel: "tip",
  fill: "white",
  stroke: "currentColor"
};
var ignoreChannels = /* @__PURE__ */ new Set(["geometry", "href", "src", "ariaLabel"]);
var Tip = class extends Mark {
  constructor(data, options = {}) {
    if (options.tip)
      options = { ...options, tip: false };
    if (options.title === void 0 && isIterable3(data) && isTextual(data))
      options = { ...options, title: identity7 };
    const {
      x: x3,
      y: y3,
      x1: x12,
      x2: x22,
      y1: y12,
      y2: y22,
      anchor,
      monospace,
      fontFamily = monospace ? "ui-monospace, monospace" : void 0,
      fontSize,
      fontStyle,
      fontVariant,
      fontWeight,
      lineHeight = 1,
      lineWidth = 20,
      frameAnchor,
      textAnchor = "start",
      textOverflow,
      textPadding = 8,
      pointerSize = 12,
      pathFilter = "drop-shadow(0 3px 4px rgba(0,0,0,0.2))"
    } = options;
    super(
      data,
      {
        x: { value: x12 != null && x22 != null ? null : x3, scale: "x", optional: true },
        // ignore midpoint
        y: { value: y12 != null && y22 != null ? null : y3, scale: "y", optional: true },
        // ignore midpoint
        x1: { value: x12, scale: "x", optional: x22 == null },
        y1: { value: y12, scale: "y", optional: y22 == null },
        x2: { value: x22, scale: "x", optional: x12 == null },
        y2: { value: y22, scale: "y", optional: y12 == null }
      },
      options,
      defaults5
    );
    this.anchor = maybeAnchor(anchor, "anchor");
    this.previousAnchor = this.anchor ?? "top-left";
    this.frameAnchor = maybeFrameAnchor(frameAnchor);
    this.textAnchor = impliedString(textAnchor, "middle");
    this.textPadding = +textPadding;
    this.pointerSize = +pointerSize;
    this.pathFilter = string(pathFilter);
    this.lineHeight = +lineHeight;
    this.lineWidth = +lineWidth;
    this.textOverflow = maybeTextOverflow(textOverflow);
    this.monospace = !!monospace;
    this.fontFamily = string(fontFamily);
    this.fontSize = number5(fontSize);
    this.fontStyle = string(fontStyle);
    this.fontVariant = string(fontVariant);
    this.fontWeight = string(fontWeight);
    for (const key in defaults5)
      if (key in this.channels)
        this[key] = defaults5[key];
    this.splitLines = splitter2(this);
    this.clipLine = clipper(this);
  }
  render(index2, scales, values2, dimensions, context) {
    const mark2 = this;
    const { x: x3, y: y3, fx, fy } = scales;
    const { ownerSVGElement: svg, document: document2 } = context;
    const { anchor, monospace, lineHeight, lineWidth } = this;
    const { textPadding: r, pointerSize: m2, pathFilter } = this;
    const { marginTop: marginTop2, marginLeft: marginLeft2 } = dimensions;
    const sources = getSources(values2);
    const { x1: X13, y1: Y13, x2: X24, y2: Y24, x: X3 = X13 ?? X24, y: Y3 = Y13 ?? Y24 } = values2;
    const ox2 = fx ? fx(index2.fx) - marginLeft2 : 0;
    const oy2 = fy ? fy(index2.fy) - marginTop2 : 0;
    const [cx, cy] = applyFrameAnchor(this, dimensions);
    const px = anchorX(values2, cx);
    const py = anchorY(values2, cy);
    const widthof2 = monospace ? monospaceWidth : defaultWidth;
    const ee2 = widthof2(ellipsis);
    const formatFx = fx && inferTickFormat(fx);
    const formatFy = fy && inferTickFormat(fy);
    function* format3(sources2, i2) {
      if ("title" in sources2) {
        const text3 = sources2.title.value[i2];
        for (const line3 of mark2.splitLines(formatDefault(text3))) {
          yield { name: "", value: mark2.clipLine(line3) };
        }
        return;
      }
      for (const key in sources2) {
        if (key === "x1" && "x2" in sources2)
          continue;
        if (key === "y1" && "y2" in sources2)
          continue;
        const channel = sources2[key];
        const value = channel.value[i2];
        if (!defined(value) && channel.scale == null)
          continue;
        if (key === "x2" && "x1" in sources2) {
          yield { name: formatLabel(scales, channel, "x"), value: formatPair(sources2.x1, channel, i2) };
        } else if (key === "y2" && "y1" in sources2) {
          yield { name: formatLabel(scales, channel, "y"), value: formatPair(sources2.y1, channel, i2) };
        } else {
          const scale3 = channel.scale;
          const line3 = { name: formatLabel(scales, channel, key), value: formatDefault(value) };
          if (scale3 === "color" || scale3 === "opacity")
            line3[scale3] = values2[key][i2];
          yield line3;
        }
      }
      if (index2.fi != null && fx)
        yield { name: String(fx.label ?? "fx"), value: formatFx(index2.fx) };
      if (index2.fi != null && fy)
        yield { name: String(fy.label ?? "fy"), value: formatFy(index2.fy) };
    }
    const g2 = create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyIndirectTextStyles, this).call(applyTransform, this, { x: X3 && x3, y: Y3 && y3 }).call(
      (g3) => g3.selectAll().data(index2).enter().append("g").attr("transform", (i2) => `translate(${Math.round(px(i2))},${Math.round(py(i2))})`).call(applyDirectStyles, this).call((g4) => g4.append("path").attr("filter", pathFilter)).call(
        (g4) => g4.append("text").each(function(i2) {
          const that = select_default2(this);
          this.setAttribute("fill", "currentColor");
          this.setAttribute("fill-opacity", 1);
          this.setAttribute("stroke", "none");
          const names = /* @__PURE__ */ new Set();
          for (const line3 of format3(sources, i2)) {
            const name2 = line3.name;
            if (name2 && names.has(name2))
              continue;
            else
              names.add(name2);
            renderLine(that, line3);
          }
        })
      )
    );
    function renderLine(selection2, { name: name2, value, color: color3, opacity: opacity2 }) {
      const swatch = color3 != null || opacity2 != null;
      let title;
      let w2 = lineWidth * 100;
      const [j2] = cut(name2, w2, widthof2, ee2);
      if (j2 >= 0) {
        name2 = name2.slice(0, j2).trimEnd() + ellipsis;
        title = value.trim();
        value = "";
      } else {
        if (name2 || !value && !swatch)
          value = " " + value;
        const [k3] = cut(value, w2 - widthof2(name2), widthof2, ee2);
        if (k3 >= 0) {
          value = value.slice(0, k3).trimEnd() + ellipsis;
          title = value.trim();
        }
      }
      const line3 = selection2.append("tspan").attr("x", 0).attr("dy", `${lineHeight}em`).text("\u200B");
      if (name2)
        line3.append("tspan").attr("font-weight", "bold").text(name2);
      if (value)
        line3.append(() => document2.createTextNode(value));
      if (swatch)
        line3.append("tspan").text(" \u25A0").attr("fill", color3).attr("fill-opacity", opacity2).style("user-select", "none");
      if (title)
        line3.append("title").text(title);
    }
    function postrender() {
      const { width: width2, height: height2 } = dimensions.facet ?? dimensions;
      g2.selectChildren().each(function(i2) {
        let { x: tx, width: w2, height: h2 } = this.getBBox();
        w2 = Math.round(w2), h2 = Math.round(h2);
        let a2 = anchor;
        if (a2 === void 0) {
          a2 = mark2.previousAnchor;
          const x4 = px(i2) + ox2;
          const y4 = py(i2) + oy2;
          const fitLeft = x4 + w2 + r * 2 < width2;
          const fitRight = x4 - w2 - r * 2 > 0;
          const fitTop = y4 + h2 + m2 + r * 2 + 7 < height2;
          const fitBottom = y4 - h2 - m2 - r * 2 > 0;
          const ax = (/-left$/.test(a2) ? fitLeft || !fitRight : fitLeft && !fitRight) ? "left" : "right";
          const ay = (/^top-/.test(a2) ? fitTop || !fitBottom : fitTop && !fitBottom) ? "top" : "bottom";
          a2 = mark2.previousAnchor = `${ay}-${ax}`;
        }
        const path2 = this.firstChild;
        const text3 = this.lastChild;
        path2.setAttribute("d", getPath(a2, m2, r, w2, h2));
        if (tx)
          for (const t of text3.childNodes)
            t.setAttribute("x", -tx);
        text3.setAttribute("y", `${+getLineOffset(a2, text3.childNodes.length, lineHeight).toFixed(6)}em`);
        text3.setAttribute("transform", `translate(${getTextTranslate(a2, m2, r, w2, h2)})`);
      });
    }
    if (svg.isConnected)
      Promise.resolve().then(postrender);
    else if (typeof requestAnimationFrame !== "undefined")
      requestAnimationFrame(postrender);
    return g2.node();
  }
};
function tip(data, { x: x3, y: y3, ...options } = {}) {
  if (options.frameAnchor === void 0)
    [x3, y3] = maybeTuple(x3, y3);
  return new Tip(data, { ...options, x: x3, y: y3 });
}
function getLineOffset(anchor, length4, lineHeight) {
  return /^top(?:-|$)/.test(anchor) ? 0.94 - lineHeight : /^bottom(?:-|$)/ ? -0.29 - length4 * lineHeight : length4 / 2 * lineHeight;
}
function getTextTranslate(anchor, m2, r, width2, height2) {
  switch (anchor) {
    case "middle":
      return [-width2 / 2, height2 / 2];
    case "top-left":
      return [r, m2 + r];
    case "top":
      return [-width2 / 2, m2 / 2 + r];
    case "top-right":
      return [-width2 - r, m2 + r];
    case "right":
      return [-m2 / 2 - width2 - r, height2 / 2];
    case "bottom-left":
      return [r, -m2 - r];
    case "bottom":
      return [-width2 / 2, -m2 / 2 - r];
    case "bottom-right":
      return [-width2 - r, -m2 - r];
    case "left":
      return [r + m2 / 2, height2 / 2];
  }
}
function getPath(anchor, m2, r, width2, height2) {
  const w2 = width2 + r * 2;
  const h2 = height2 + r * 2;
  switch (anchor) {
    case "middle":
      return `M${-w2 / 2},${-h2 / 2}h${w2}v${h2}h${-w2}z`;
    case "top-left":
      return `M0,0l${m2},${m2}h${w2 - m2}v${h2}h${-w2}z`;
    case "top":
      return `M0,0l${m2 / 2},${m2 / 2}h${(w2 - m2) / 2}v${h2}h${-w2}v${-h2}h${(w2 - m2) / 2}z`;
    case "top-right":
      return `M0,0l${-m2},${m2}h${m2 - w2}v${h2}h${w2}z`;
    case "right":
      return `M0,0l${-m2 / 2},${-m2 / 2}v${m2 / 2 - h2 / 2}h${-w2}v${h2}h${w2}v${m2 / 2 - h2 / 2}z`;
    case "bottom-left":
      return `M0,0l${m2},${-m2}h${w2 - m2}v${-h2}h${-w2}z`;
    case "bottom":
      return `M0,0l${m2 / 2},${-m2 / 2}h${(w2 - m2) / 2}v${-h2}h${-w2}v${h2}h${(w2 - m2) / 2}z`;
    case "bottom-right":
      return `M0,0l${-m2},${-m2}h${m2 - w2}v${-h2}h${w2}z`;
    case "left":
      return `M0,0l${m2 / 2},${-m2 / 2}v${m2 / 2 - h2 / 2}h${w2}v${h2}h${-w2}v${m2 / 2 - h2 / 2}z`;
  }
}
function getSources({ channels }) {
  const sources = {};
  for (const key in channels) {
    if (ignoreChannels.has(key))
      continue;
    const source = getSource(channels, key);
    if (source)
      sources[key] = source;
  }
  return sources;
}
function formatPair(c1, c22, i2) {
  return c22.hint?.length ? `${formatDefault(c22.value[i2] - c1.value[i2])}` : `${formatDefault(c1.value[i2])}\u2013${formatDefault(c22.value[i2])}`;
}
function formatLabel(scales, c4, defaultLabel) {
  return String(scales[c4.scale]?.label ?? c4?.label ?? defaultLabel);
}

// ../../node_modules/@observablehq/plot/src/plot.js
function plot(options = {}) {
  const { facet, style: style2, caption, ariaLabel, ariaDescription } = options;
  const className = maybeClassName(options.className);
  const marks2 = options.marks === void 0 ? [] : flatMarks(options.marks);
  marks2.push(...inferTips(marks2));
  const topFacetState = maybeTopFacet(facet, options);
  const facetStateByMark = /* @__PURE__ */ new Map();
  for (const mark2 of marks2) {
    const facetState = maybeMarkFacet(mark2, topFacetState, options);
    if (facetState)
      facetStateByMark.set(mark2, facetState);
  }
  const channelsByScale = /* @__PURE__ */ new Map();
  if (topFacetState)
    addScaleChannels(channelsByScale, [topFacetState], options);
  addScaleChannels(channelsByScale, facetStateByMark, options);
  const axes = flatMarks(inferAxes(marks2, channelsByScale, options));
  for (const mark2 of axes) {
    const facetState = maybeMarkFacet(mark2, topFacetState, options);
    if (facetState)
      facetStateByMark.set(mark2, facetState);
  }
  marks2.unshift(...axes);
  let facets = createFacets(channelsByScale, options);
  if (facets !== void 0) {
    const topFacetsIndex = topFacetState ? facetFilter(facets, topFacetState) : void 0;
    for (const mark2 of marks2) {
      if (mark2.facet === null || mark2.facet === "super")
        continue;
      const facetState = facetStateByMark.get(mark2);
      if (facetState === void 0)
        continue;
      facetState.facetsIndex = mark2.fx != null || mark2.fy != null ? facetFilter(facets, facetState) : topFacetsIndex;
    }
    const nonEmpty = /* @__PURE__ */ new Set();
    for (const { facetsIndex } of facetStateByMark.values()) {
      facetsIndex?.forEach((index2, i2) => {
        if (index2?.length > 0) {
          nonEmpty.add(i2);
        }
      });
    }
    facets.forEach(
      0 < nonEmpty.size && nonEmpty.size < facets.length ? (f2, i2) => f2.empty = !nonEmpty.has(i2) : (f2) => f2.empty = false
    );
    for (const mark2 of marks2) {
      if (mark2.facet === "exclude") {
        const facetState = facetStateByMark.get(mark2);
        if (facetState !== void 0)
          facetState.facetsIndex = facetExclude(facetState.facetsIndex);
      }
    }
  }
  for (const key of registry.keys()) {
    if (isScaleOptions(options[key]) && key !== "fx" && key !== "fy") {
      channelsByScale.set(key, []);
    }
  }
  const stateByMark = /* @__PURE__ */ new Map();
  for (const mark2 of marks2) {
    if (stateByMark.has(mark2))
      throw new Error("duplicate mark; each mark must be unique");
    const { facetsIndex, channels: facetChannels } = facetStateByMark.get(mark2) ?? {};
    const { data, facets: facets2, channels } = mark2.initialize(facetsIndex, facetChannels, options);
    applyScaleTransforms(channels, options);
    stateByMark.set(mark2, { data, facets: facets2, channels });
  }
  const scaleDescriptors = createScales(addScaleChannels(channelsByScale, stateByMark, options), options);
  const scales = createScaleFunctions(scaleDescriptors);
  const dimensions = createDimensions(scaleDescriptors, marks2, options);
  autoScaleRange(scaleDescriptors, dimensions);
  const { fx, fy } = scales;
  const subdimensions = fx || fy ? innerDimensions(scaleDescriptors, dimensions) : dimensions;
  const superdimensions = fx || fy ? actualDimensions(scales, dimensions) : dimensions;
  const context = createContext(options);
  const document2 = context.document;
  const svg = creator_default("svg").call(document2.documentElement);
  let figure = svg;
  context.ownerSVGElement = svg;
  context.className = className;
  context.projection = createProjection(options, subdimensions);
  context.filterFacets = (data, channels) => {
    return facetFilter(facets, { channels, groups: facetGroups(data, channels) });
  };
  context.getMarkState = (mark2) => {
    const state = stateByMark.get(mark2);
    const facetState = facetStateByMark.get(mark2);
    return { ...state, channels: { ...state.channels, ...facetState?.channels } };
  };
  context.dispatchValue = (value) => {
    if (figure.value === value)
      return;
    figure.value = value;
    figure.dispatchEvent(new Event("input", { bubbles: true }));
  };
  const newByScale = /* @__PURE__ */ new Set();
  for (const [mark2, state] of stateByMark) {
    if (mark2.initializer != null) {
      const dimensions2 = mark2.facet === "super" ? superdimensions : subdimensions;
      const update2 = mark2.initializer(state.data, state.facets, state.channels, scales, dimensions2, context);
      if (update2.data !== void 0) {
        state.data = update2.data;
      }
      if (update2.facets !== void 0) {
        state.facets = update2.facets;
      }
      if (update2.channels !== void 0) {
        const { fx: fx2, fy: fy2, ...channels } = update2.channels;
        inferChannelScales(channels);
        Object.assign(state.channels, channels);
        for (const channel of Object.values(channels)) {
          const { scale: scale3 } = channel;
          if (scale3 != null && registry.get(scale3) !== position) {
            applyScaleTransform(channel, options);
            newByScale.add(scale3);
          }
        }
        if (fx2 != null || fy2 != null)
          facetStateByMark.set(mark2, true);
      }
    }
  }
  if (newByScale.size) {
    const newChannelsByScale = /* @__PURE__ */ new Map();
    addScaleChannels(newChannelsByScale, stateByMark, options, (key) => newByScale.has(key));
    addScaleChannels(channelsByScale, stateByMark, options, (key) => newByScale.has(key));
    const newScaleDescriptors = inheritScaleLabels(createScales(newChannelsByScale, options), scaleDescriptors);
    const newScales = createScaleFunctions(newScaleDescriptors);
    Object.assign(scaleDescriptors, newScaleDescriptors);
    Object.assign(scales, newScales);
  }
  let facetDomains, facetTranslate;
  if (facets !== void 0) {
    facetDomains = { x: fx?.domain(), y: fy?.domain() };
    facets = recreateFacets(facets, facetDomains);
    facetTranslate = facetTranslator(fx, fy, dimensions);
  }
  for (const [mark2, state] of stateByMark) {
    state.values = mark2.scale(state.channels, scales, context);
  }
  const { width: width2, height: height2 } = dimensions;
  select_default2(svg).attr("class", className).attr("fill", "currentColor").attr("font-family", "system-ui, sans-serif").attr("font-size", 10).attr("text-anchor", "middle").attr("width", width2).attr("height", height2).attr("viewBox", `0 0 ${width2} ${height2}`).attr("aria-label", ariaLabel).attr("aria-description", ariaDescription).call(
    (svg2) => (
      // Warning: if you edit this, change defaultClassName.
      svg2.append("style").text(
        `.${className} {
  display: block;
  background: white;
  height: auto;
  height: intrinsic;
  max-width: 100%;
}
.${className} text,
.${className} tspan {
  white-space: pre;
}`
      )
    )
  ).call(applyInlineStyles, style2);
  for (const mark2 of marks2) {
    const { channels, values: values2, facets: indexes2 } = stateByMark.get(mark2);
    if (facets === void 0 || mark2.facet === "super") {
      let index2 = null;
      if (indexes2) {
        index2 = indexes2[0];
        index2 = mark2.filter(index2, channels, values2);
        if (index2.length === 0)
          continue;
      }
      const node = mark2.render(index2, scales, values2, superdimensions, context);
      if (node == null)
        continue;
      svg.appendChild(node);
    } else {
      let g2;
      for (const f2 of facets) {
        if (!(mark2.facetAnchor?.(facets, facetDomains, f2) ?? !f2.empty))
          continue;
        let index2 = null;
        if (indexes2) {
          const faceted = facetStateByMark.has(mark2);
          index2 = indexes2[faceted ? f2.i : 0];
          index2 = mark2.filter(index2, channels, values2);
          if (index2.length === 0)
            continue;
          if (faceted)
            index2.fx = f2.x, index2.fy = f2.y, index2.fi = f2.i;
        }
        const node = mark2.render(index2, scales, values2, subdimensions, context);
        if (node == null)
          continue;
        (g2 ??= select_default2(svg).append("g")).append(() => node).datum(f2);
        for (const name2 of ["aria-label", "aria-description", "aria-hidden", "transform"]) {
          if (node.hasAttribute(name2)) {
            g2.attr(name2, node.getAttribute(name2));
            node.removeAttribute(name2);
          }
        }
      }
      g2?.selectChildren().attr("transform", facetTranslate);
    }
  }
  const legends = createLegends(scaleDescriptors, context, options);
  if (caption != null || legends.length > 0) {
    figure = document2.createElement("figure");
    figure.style.maxWidth = "initial";
    for (const legend3 of legends)
      figure.appendChild(legend3);
    figure.appendChild(svg);
    if (caption != null) {
      const figcaption = document2.createElement("figcaption");
      figcaption.appendChild(caption?.ownerDocument ? caption : document2.createTextNode(caption));
      figure.appendChild(figcaption);
    }
  }
  figure.scale = exposeScales(scaleDescriptors);
  figure.legend = exposeLegends(scaleDescriptors, context, options);
  const w2 = consumeWarnings();
  if (w2 > 0) {
    select_default2(svg).append("text").attr("x", width2).attr("y", 20).attr("dy", "-1em").attr("text-anchor", "end").attr("font-family", "initial").text("\u26A0\uFE0F").append("title").text(`${w2.toLocaleString("en-US")} warning${w2 === 1 ? "" : "s"}. Please check the console.`);
  }
  return figure;
}
function plotThis({ marks: marks2 = [], ...options } = {}) {
  return plot({ ...options, marks: [...marks2, this] });
}
Mark.prototype.plot = plotThis;
function flatMarks(marks2) {
  return marks2.flat(Infinity).filter((mark2) => mark2 != null).map(markify);
}
function markify(mark2) {
  return typeof mark2.render === "function" ? mark2 : new Render(mark2);
}
var Render = class extends Mark {
  constructor(render) {
    if (typeof render !== "function")
      throw new TypeError("invalid mark; missing render function");
    super();
    this.render = render;
  }
  render() {
  }
};
function applyScaleTransforms(channels, options) {
  for (const name2 in channels)
    applyScaleTransform(channels[name2], options);
  return channels;
}
function applyScaleTransform(channel, options) {
  const { scale: scale3, transform: t = true } = channel;
  if (scale3 == null || !t)
    return;
  const {
    type: type2,
    percent,
    interval: interval2,
    transform: transform3 = percent ? (x3) => x3 * 100 : maybeIntervalTransform(interval2, type2)
  } = options[scale3] ?? {};
  if (transform3 == null)
    return;
  channel.value = map2(channel.value, transform3);
  channel.transform = false;
}
function inferChannelScales(channels) {
  for (const name2 in channels) {
    inferChannelScale(name2, channels[name2]);
  }
}
function addScaleChannels(channelsByScale, stateByMark, options, filter3 = yes) {
  for (const { channels } of stateByMark.values()) {
    for (const name2 in channels) {
      const channel = channels[name2];
      const { scale: scale3 } = channel;
      if (scale3 != null && filter3(scale3)) {
        if (scale3 === "projection") {
          if (!hasProjection(options)) {
            const gx = options.x?.domain === void 0;
            const gy = options.y?.domain === void 0;
            if (gx || gy) {
              const [x3, y3] = getGeometryChannels(channel);
              if (gx)
                addScaleChannel(channelsByScale, "x", x3);
              if (gy)
                addScaleChannel(channelsByScale, "y", y3);
            }
          }
        } else {
          addScaleChannel(channelsByScale, scale3, channel);
        }
      }
    }
  }
  return channelsByScale;
}
function addScaleChannel(channelsByScale, scale3, channel) {
  const scaleChannels = channelsByScale.get(scale3);
  if (scaleChannels !== void 0)
    scaleChannels.push(channel);
  else
    channelsByScale.set(scale3, [channel]);
}
function maybeTopFacet(facet, options) {
  if (facet == null)
    return;
  const { x: x3, y: y3 } = facet;
  if (x3 == null && y3 == null)
    return;
  const data = arrayify2(facet.data);
  if (data == null)
    throw new Error("missing facet data");
  const channels = {};
  if (x3 != null)
    channels.fx = createChannel(data, { value: x3, scale: "fx" });
  if (y3 != null)
    channels.fy = createChannel(data, { value: y3, scale: "fy" });
  applyScaleTransforms(channels, options);
  const groups2 = facetGroups(data, channels);
  return { channels, groups: groups2, data: facet.data };
}
function maybeMarkFacet(mark2, topFacetState, options) {
  if (mark2.facet === null || mark2.facet === "super")
    return;
  const { fx, fy } = mark2;
  if (fx != null || fy != null) {
    const data2 = arrayify2(mark2.data ?? fx ?? fy);
    if (data2 === void 0)
      throw new Error(`missing facet data in ${mark2.ariaLabel}`);
    if (data2 === null)
      return;
    const channels2 = {};
    if (fx != null)
      channels2.fx = createChannel(data2, { value: fx, scale: "fx" });
    if (fy != null)
      channels2.fy = createChannel(data2, { value: fy, scale: "fy" });
    applyScaleTransforms(channels2, options);
    return { channels: channels2, groups: facetGroups(data2, channels2) };
  }
  if (topFacetState === void 0)
    return;
  const { channels, groups: groups2, data } = topFacetState;
  if (mark2.facet !== "auto" || mark2.data === data)
    return { channels, groups: groups2 };
  if (data.length > 0 && (groups2.size > 1 || groups2.size === 1 && channels.fx && channels.fy && [...groups2][0][1].size > 1) && arrayify2(mark2.data)?.length === data.length) {
    warn(
      `Warning: the ${mark2.ariaLabel} mark appears to use faceted data, but isn\u2019t faceted. The mark data has the same length as the facet data and the mark facet option is "auto", but the mark data and facet data are distinct. If this mark should be faceted, set the mark facet option to true; otherwise, suppress this warning by setting the mark facet option to false.`
    );
  }
}
function derive(mark2, options = {}) {
  return initializer({ ...options, x: null, y: null }, (data, facets, channels, scales, dimensions, context) => {
    return context.getMarkState(mark2);
  });
}
function inferTips(marks2) {
  const tips = [];
  for (const mark2 of marks2) {
    const t = mark2.tip;
    if (t) {
      const p2 = t === "x" ? pointerX : t === "y" ? pointerY : pointer;
      const options = p2(derive(mark2));
      options.title = null;
      tips.push(tip(mark2.data, options));
    }
  }
  return tips;
}
function inferAxes(marks2, channelsByScale, options) {
  let {
    projection: projection3,
    x: x3 = {},
    y: y3 = {},
    fx = {},
    fy = {},
    axis: axis3,
    grid: grid2,
    facet = {},
    facet: { axis: facetAxis = axis3, grid: facetGrid2 } = facet,
    x: { axis: xAxis2 = axis3, grid: xGrid2 = xAxis2 === null ? null : grid2 } = x3,
    y: { axis: yAxis2 = axis3, grid: yGrid2 = yAxis2 === null ? null : grid2 } = y3,
    fx: { axis: fxAxis2 = facetAxis, grid: fxGrid2 = fxAxis2 === null ? null : facetGrid2 } = fx,
    fy: { axis: fyAxis2 = facetAxis, grid: fyGrid2 = fyAxis2 === null ? null : facetGrid2 } = fy
  } = options;
  if (projection3 || !isScaleOptions(x3) && !hasPositionChannel("x", marks2))
    xAxis2 = xGrid2 = null;
  if (projection3 || !isScaleOptions(y3) && !hasPositionChannel("y", marks2))
    yAxis2 = yGrid2 = null;
  if (!channelsByScale.has("fx"))
    fxAxis2 = fxGrid2 = null;
  if (!channelsByScale.has("fy"))
    fyAxis2 = fyGrid2 = null;
  if (xAxis2 === void 0)
    xAxis2 = !hasAxis(marks2, "x");
  if (yAxis2 === void 0)
    yAxis2 = !hasAxis(marks2, "y");
  if (fxAxis2 === void 0)
    fxAxis2 = !hasAxis(marks2, "fx");
  if (fyAxis2 === void 0)
    fyAxis2 = !hasAxis(marks2, "fy");
  if (xAxis2 === true)
    xAxis2 = "bottom";
  if (yAxis2 === true)
    yAxis2 = "left";
  if (fxAxis2 === true)
    fxAxis2 = xAxis2 === "top" || xAxis2 === null ? "bottom" : "top";
  if (fyAxis2 === true)
    fyAxis2 = yAxis2 === "right" || yAxis2 === null ? "left" : "right";
  const axes = [];
  maybeGrid(axes, fyGrid2, gridFy, fy);
  maybeAxis(axes, fyAxis2, axisFy, "right", "left", facet, fy);
  maybeGrid(axes, fxGrid2, gridFx, fx);
  maybeAxis(axes, fxAxis2, axisFx, "top", "bottom", facet, fx);
  maybeGrid(axes, yGrid2, gridY, y3);
  maybeAxis(axes, yAxis2, axisY, "left", "right", options, y3);
  maybeGrid(axes, xGrid2, gridX, x3);
  maybeAxis(axes, xAxis2, axisX, "bottom", "top", options, x3);
  return axes;
}
function maybeAxis(axes, axis3, axisType, primary, secondary, defaults22, options) {
  if (!axis3)
    return;
  const both = isBoth(axis3);
  options = axisOptions(both ? primary : axis3, defaults22, options);
  const { line: line3 } = options;
  if ((axisType === axisY || axisType === axisX) && line3 && !isNone(line3))
    axes.push(frame2(lineOptions(options)));
  axes.push(axisType(options));
  if (both)
    axes.push(axisType({ ...options, anchor: secondary, label: null }));
}
function maybeGrid(axes, grid2, gridType, options) {
  if (!grid2 || isNone(grid2))
    return;
  axes.push(gridType(gridOptions(grid2, options)));
}
function isBoth(value) {
  return /^\s*both\s*$/i.test(value);
}
function axisOptions(anchor, defaults22, {
  line: line3 = defaults22.line,
  ticks: ticks2,
  tickSize,
  tickSpacing,
  tickPadding,
  tickFormat: tickFormat2,
  tickRotate,
  fontVariant,
  ariaLabel,
  ariaDescription,
  label: label2 = defaults22.label,
  labelAnchor,
  labelArrow = defaults22.labelArrow,
  labelOffset
}) {
  return {
    anchor,
    line: line3,
    ticks: ticks2,
    tickSize,
    tickSpacing,
    tickPadding,
    tickFormat: tickFormat2,
    tickRotate,
    fontVariant,
    ariaLabel,
    ariaDescription,
    label: label2,
    labelAnchor,
    labelArrow,
    labelOffset
  };
}
function lineOptions(options) {
  const { anchor, line: line3 } = options;
  return { anchor, facetAnchor: anchor + "-empty", stroke: line3 === true ? void 0 : line3 };
}
function gridOptions(grid2, {
  stroke = isColor(grid2) ? grid2 : void 0,
  ticks: ticks2 = isGridTicks(grid2) ? grid2 : void 0,
  tickSpacing,
  ariaLabel,
  ariaDescription
}) {
  return {
    stroke,
    ticks: ticks2,
    tickSpacing,
    ariaLabel,
    ariaDescription
  };
}
function isGridTicks(grid2) {
  switch (typeof grid2) {
    case "number":
      return true;
    case "string":
      return !isColor(grid2);
  }
  return isIterable3(grid2) || typeof grid2?.range === "function";
}
function hasAxis(marks2, k3) {
  const prefix2 = `${k3}-axis `;
  return marks2.some((m2) => m2.ariaLabel?.startsWith(prefix2));
}
function hasPositionChannel(k3, marks2) {
  for (const mark2 of marks2) {
    for (const key in mark2.channels) {
      const { scale: scale3 } = mark2.channels[key];
      if (scale3 === k3 || scale3 === "projection") {
        return true;
      }
    }
  }
  return false;
}
function inheritScaleLabels(newScales, scales) {
  for (const key in newScales) {
    const newScale = newScales[key];
    const scale3 = scales[key];
    if (newScale.label === void 0 && scale3) {
      newScale.label = scale3.label;
    }
  }
  return newScales;
}
function actualDimensions({ fx, fy }, dimensions) {
  const { marginTop: marginTop2, marginRight: marginRight2, marginBottom: marginBottom2, marginLeft: marginLeft2, width: width2, height: height2 } = outerDimensions(dimensions);
  const fxr = fx && outerRange(fx);
  const fyr = fy && outerRange(fy);
  return {
    marginTop: fy ? fyr[0] : marginTop2,
    marginRight: fx ? width2 - fxr[1] : marginRight2,
    marginBottom: fy ? height2 - fyr[1] : marginBottom2,
    marginLeft: fx ? fxr[0] : marginLeft2,
    // Some marks, namely the x- and y-axis labels, want to know what the
    // desired (rather than actual) margins are for positioning.
    inset: {
      marginTop: dimensions.marginTop,
      marginRight: dimensions.marginRight,
      marginBottom: dimensions.marginBottom,
      marginLeft: dimensions.marginLeft
    },
    width: width2,
    height: height2
  };
}
function outerRange(scale3) {
  const domain = scale3.domain();
  let x12 = scale3(domain[0]);
  let x22 = scale3(domain[domain.length - 1]);
  if (x22 < x12)
    [x12, x22] = [x22, x12];
  return [x12, x22 + scale3.bandwidth()];
}

// ../../node_modules/@observablehq/plot/src/curve.js
var curves = /* @__PURE__ */ new Map([
  ["basis", basis_default2],
  ["basis-closed", basisClosed_default2],
  ["basis-open", basisOpen_default],
  ["bundle", bundle_default],
  ["bump-x", bumpX],
  ["bump-y", bumpY],
  ["cardinal", cardinal_default],
  ["cardinal-closed", cardinalClosed_default],
  ["cardinal-open", cardinalOpen_default],
  ["catmull-rom", catmullRom_default],
  ["catmull-rom-closed", catmullRomClosed_default],
  ["catmull-rom-open", catmullRomOpen_default],
  ["linear", linear_default],
  ["linear-closed", linearClosed_default],
  ["monotone-x", monotoneX],
  ["monotone-y", monotoneY],
  ["natural", natural_default],
  ["step", step_default],
  ["step-after", stepAfter],
  ["step-before", stepBefore]
]);
function maybeCurve(curve = linear_default, tension) {
  if (typeof curve === "function")
    return curve;
  const c4 = curves.get(`${curve}`.toLowerCase());
  if (!c4)
    throw new Error(`unknown curve: ${curve}`);
  if (tension !== void 0) {
    if ("beta" in c4) {
      return c4.beta(tension);
    } else if ("tension" in c4) {
      return c4.tension(tension);
    } else if ("alpha" in c4) {
      return c4.alpha(tension);
    }
  }
  return c4;
}
function maybeCurveAuto(curve = curveAuto, tension) {
  return typeof curve !== "function" && `${curve}`.toLowerCase() === "auto" ? curveAuto : maybeCurve(curve, tension);
}
function curveAuto(context) {
  return linear_default(context);
}

// ../../node_modules/@observablehq/plot/src/transforms/bin.js
function binX(outputs = { y: "count" }, options = {}) {
  [outputs, options] = mergeOptions(outputs, options);
  const { x: x3, y: y3 } = options;
  return binn(maybeBinValue(x3, options, identity7), null, null, y3, outputs, maybeInsetX(options));
}
function binY(outputs = { x: "count" }, options = {}) {
  [outputs, options] = mergeOptions(outputs, options);
  const { x: x3, y: y3 } = options;
  return binn(null, maybeBinValue(y3, options, identity7), x3, null, outputs, maybeInsetY(options));
}
function bin2(outputs = { fill: "count" }, options = {}) {
  [outputs, options] = mergeOptions(outputs, options);
  const { x: x3, y: y3 } = maybeBinValueTuple(options);
  return binn(x3, y3, null, null, outputs, maybeInsetX(maybeInsetY(options)));
}
function maybeDenseInterval(bin3, k3, options = {}) {
  return options?.interval == null ? options : bin3({ [k3]: options?.reduce === void 0 ? reduceFirst : options.reduce, filter: null }, options);
}
function maybeDenseIntervalX(options = {}) {
  return maybeDenseInterval(binX, "y", withTip(options, "x"));
}
function maybeDenseIntervalY(options = {}) {
  return maybeDenseInterval(binY, "x", withTip(options, "y"));
}
function binn(bx, by, gx, gy, {
  data: reduceData = reduceIdentity,
  // TODO avoid materializing when unused?
  filter: filter3 = reduceCount,
  // return only non-empty bins by default
  sort: sort3,
  reverse: reverse3,
  ...outputs
  // output channel definitions
} = {}, inputs2 = {}) {
  bx = maybeBin(bx);
  by = maybeBin(by);
  outputs = maybeBinOutputs(outputs, inputs2);
  reduceData = maybeBinReduce(reduceData, identity7);
  sort3 = sort3 == null ? void 0 : maybeBinOutput("sort", sort3, inputs2);
  filter3 = filter3 == null ? void 0 : maybeBinEvaluator("filter", filter3, inputs2);
  if (gx != null && hasOutput(outputs, "x", "x1", "x2"))
    gx = null;
  if (gy != null && hasOutput(outputs, "y", "y1", "y2"))
    gy = null;
  const [BX1, setBX1] = maybeColumn(bx);
  const [BX2, setBX2] = maybeColumn(bx);
  const [BY1, setBY1] = maybeColumn(by);
  const [BY2, setBY2] = maybeColumn(by);
  const [k3, gk] = gx != null ? [gx, "x"] : gy != null ? [gy, "y"] : [];
  const [GK, setGK] = maybeColumn(k3);
  const {
    x: x3,
    y: y3,
    z: z2,
    fill,
    stroke,
    x1: x12,
    x2: x22,
    // consumed if x is an output
    y1: y12,
    y2: y22,
    // consumed if y is an output
    domain,
    cumulative,
    thresholds,
    interval: interval2,
    ...options
  } = inputs2;
  const [GZ, setGZ] = maybeColumn(z2);
  const [vfill] = maybeColorChannel(fill);
  const [vstroke] = maybeColorChannel(stroke);
  const [GF, setGF] = maybeColumn(vfill);
  const [GS, setGS] = maybeColumn(vstroke);
  return {
    ..."z" in inputs2 && { z: GZ || z2 },
    ..."fill" in inputs2 && { fill: GF || fill },
    ..."stroke" in inputs2 && { stroke: GS || stroke },
    ...basic(options, (data, facets, plotOptions) => {
      const K3 = maybeApplyInterval(valueof(data, k3), plotOptions?.[gk]);
      const Z3 = valueof(data, z2);
      const F2 = valueof(data, vfill);
      const S2 = valueof(data, vstroke);
      const G = maybeSubgroup(outputs, { z: Z3, fill: F2, stroke: S2 });
      const groupFacets = [];
      const groupData = [];
      const GK2 = K3 && setGK([]);
      const GZ2 = Z3 && setGZ([]);
      const GF2 = F2 && setGF([]);
      const GS2 = S2 && setGS([]);
      const BX12 = bx && setBX1([]);
      const BX22 = bx && setBX2([]);
      const BY12 = by && setBY1([]);
      const BY22 = by && setBY2([]);
      const bin3 = bing(bx?.(data), by?.(data));
      let i2 = 0;
      for (const o of outputs)
        o.initialize(data);
      if (sort3)
        sort3.initialize(data);
      if (filter3)
        filter3.initialize(data);
      for (const facet of facets) {
        const groupFacet = [];
        for (const o of outputs)
          o.scope("facet", facet);
        if (sort3)
          sort3.scope("facet", facet);
        if (filter3)
          filter3.scope("facet", facet);
        for (const [f2, I2] of maybeGroup(facet, G)) {
          for (const [k4, g2] of maybeGroup(I2, K3)) {
            for (const [b2, extent4] of bin3(g2)) {
              if (filter3 && !filter3.reduce(b2, extent4))
                continue;
              groupFacet.push(i2++);
              groupData.push(reduceData.reduceIndex(b2, data, extent4));
              if (K3)
                GK2.push(k4);
              if (Z3)
                GZ2.push(G === Z3 ? f2 : Z3[b2[0]]);
              if (F2)
                GF2.push(G === F2 ? f2 : F2[b2[0]]);
              if (S2)
                GS2.push(G === S2 ? f2 : S2[b2[0]]);
              if (BX12)
                BX12.push(extent4.x1), BX22.push(extent4.x2);
              if (BY12)
                BY12.push(extent4.y1), BY22.push(extent4.y2);
              for (const o of outputs)
                o.reduce(b2, extent4);
              if (sort3)
                sort3.reduce(b2);
            }
          }
        }
        groupFacets.push(groupFacet);
      }
      maybeSort(groupFacets, sort3, reverse3);
      return { data: groupData, facets: groupFacets };
    }),
    ...!hasOutput(outputs, "x") && (BX1 ? { x1: BX1, x2: BX2, x: mid(BX1, BX2) } : { x: x3, x1: x12, x2: x22 }),
    ...!hasOutput(outputs, "y") && (BY1 ? { y1: BY1, y2: BY2, y: mid(BY1, BY2) } : { y: y3, y1: y12, y2: y22 }),
    ...GK && { [gk]: GK },
    ...Object.fromEntries(outputs.map(({ name: name2, output }) => [name2, output]))
  };
}
function mergeOptions({ cumulative, domain, thresholds, interval: interval2, ...outputs }, options) {
  return [outputs, { cumulative, domain, thresholds, interval: interval2, ...options }];
}
function maybeBinValue(value, { cumulative, domain, thresholds, interval: interval2 }, defaultValue) {
  value = { ...maybeValue(value) };
  if (value.domain === void 0)
    value.domain = domain;
  if (value.cumulative === void 0)
    value.cumulative = cumulative;
  if (value.thresholds === void 0)
    value.thresholds = thresholds;
  if (value.interval === void 0)
    value.interval = interval2;
  if (value.value === void 0)
    value.value = defaultValue;
  value.thresholds = maybeThresholds(value.thresholds, value.interval);
  return value;
}
function maybeBinValueTuple(options) {
  let { x: x3, y: y3 } = options;
  x3 = maybeBinValue(x3, options);
  y3 = maybeBinValue(y3, options);
  [x3.value, y3.value] = maybeTuple(x3.value, y3.value);
  return { x: x3, y: y3 };
}
function maybeBin(options) {
  if (options == null)
    return;
  const { value, cumulative, domain = extent, thresholds } = options;
  const bin3 = (data) => {
    let V2 = valueof(data, value);
    let T2;
    if (isTemporal(V2) || isTimeThresholds(thresholds)) {
      V2 = map2(V2, coerceDate, Float64Array);
      let [min5, max4] = typeof domain === "function" ? domain(V2) : domain;
      let t = typeof thresholds === "function" && !isInterval(thresholds) ? thresholds(V2, min5, max4) : thresholds;
      if (typeof t === "number")
        t = utcTickInterval(min5, max4, t);
      if (isInterval(t)) {
        if (domain === extent) {
          min5 = t.floor(min5);
          max4 = t.offset(t.floor(max4));
        }
        t = t.range(min5, t.offset(max4));
      }
      T2 = t;
    } else {
      V2 = coerceNumbers(V2);
      let [min5, max4] = typeof domain === "function" ? domain(V2) : domain;
      let t = typeof thresholds === "function" && !isInterval(thresholds) ? thresholds(V2, min5, max4) : thresholds;
      if (typeof t === "number") {
        if (domain === extent) {
          let step = tickIncrement(min5, max4, t);
          if (isFinite(step)) {
            if (step > 0) {
              let r0 = Math.round(min5 / step);
              let r1 = Math.round(max4 / step);
              if (!(r0 * step <= min5))
                --r0;
              if (!(r1 * step > max4))
                ++r1;
              let n = r1 - r0 + 1;
              t = new Float64Array(n);
              for (let i2 = 0; i2 < n; ++i2)
                t[i2] = (r0 + i2) * step;
            } else if (step < 0) {
              step = -step;
              let r0 = Math.round(min5 * step);
              let r1 = Math.round(max4 * step);
              if (!(r0 / step <= min5))
                --r0;
              if (!(r1 / step > max4))
                ++r1;
              let n = r1 - r0 + 1;
              t = new Float64Array(n);
              for (let i2 = 0; i2 < n; ++i2)
                t[i2] = (r0 + i2) / step;
            } else {
              t = [min5];
            }
          } else {
            t = [min5];
          }
        } else {
          t = ticks(min5, max4, t);
        }
      } else if (isInterval(t)) {
        if (domain === extent) {
          min5 = t.floor(min5);
          max4 = t.offset(t.floor(max4));
        }
        t = t.range(min5, t.offset(max4));
      }
      T2 = t;
    }
    const E3 = [];
    if (T2.length === 1)
      E3.push([T2[0], T2[0]]);
    else
      for (let i2 = 1; i2 < T2.length; ++i2)
        E3.push([T2[i2 - 1], T2[i2]]);
    E3.bin = (cumulative < 0 ? bin1cn : cumulative > 0 ? bin1cp : bin1)(E3, T2, V2);
    return E3;
  };
  bin3.label = labelof(value);
  return bin3;
}
function maybeThresholds(thresholds, interval2, defaultThresholds = thresholdAuto) {
  if (thresholds === void 0) {
    return interval2 === void 0 ? defaultThresholds : maybeRangeInterval(interval2);
  }
  if (typeof thresholds === "string") {
    switch (thresholds.toLowerCase()) {
      case "freedman-diaconis":
        return thresholdFreedmanDiaconis;
      case "scott":
        return thresholdScott;
      case "sturges":
        return thresholdSturges;
      case "auto":
        return thresholdAuto;
    }
    return maybeUtcInterval(thresholds);
  }
  return thresholds;
}
function maybeBinOutputs(outputs, inputs2) {
  return maybeOutputs(outputs, inputs2, maybeBinOutput);
}
function maybeBinOutput(name2, reduce, inputs2) {
  return maybeOutput(name2, reduce, inputs2, maybeBinEvaluator);
}
function maybeBinEvaluator(name2, reduce, inputs2) {
  return maybeEvaluator(name2, reduce, inputs2, maybeBinReduce);
}
function maybeBinReduce(reduce, value) {
  return maybeReduce(reduce, value, maybeBinReduceFallback);
}
function maybeBinReduceFallback(reduce) {
  switch (`${reduce}`.toLowerCase()) {
    case "x":
      return reduceX;
    case "x1":
      return reduceX1;
    case "x2":
      return reduceX2;
    case "y":
      return reduceY;
    case "y1":
      return reduceY1;
    case "y2":
      return reduceY2;
  }
  throw new Error(`invalid bin reduce: ${reduce}`);
}
function thresholdAuto(values2, min5, max4) {
  return Math.min(200, thresholdScott(values2, min5, max4));
}
function isTimeThresholds(t) {
  return isTimeInterval(t) || isIterable3(t) && isTemporal(t);
}
function isTimeInterval(t) {
  return isInterval(t) && typeof t === "function" && t() instanceof Date;
}
function isInterval(t) {
  return typeof t?.range === "function";
}
function bing(EX, EY) {
  return EX && EY ? function* (I2) {
    const X3 = EX.bin(I2);
    for (const [ix, [x12, x22]] of EX.entries()) {
      const Y3 = EY.bin(X3[ix]);
      for (const [iy, [y12, y22]] of EY.entries()) {
        yield [Y3[iy], { x1: x12, y1: y12, x2: x22, y2: y22 }];
      }
    }
  } : EX ? function* (I2) {
    const X3 = EX.bin(I2);
    for (const [i2, [x12, x22]] of EX.entries()) {
      yield [X3[i2], { x1: x12, x2: x22 }];
    }
  } : function* (I2) {
    const Y3 = EY.bin(I2);
    for (const [i2, [y12, y22]] of EY.entries()) {
      yield [Y3[i2], { y1: y12, y2: y22 }];
    }
  };
}
function bin1(E3, T2, V2) {
  T2 = coerceNumbers(T2);
  return (I2) => {
    const B4 = E3.map(() => []);
    for (const i2 of I2)
      B4[bisect_default(T2, V2[i2]) - 1]?.push(i2);
    return B4;
  };
}
function bin1cp(E3, T2, V2) {
  const bin3 = bin1(E3, T2, V2);
  return (I2) => {
    const B4 = bin3(I2);
    for (let i2 = 1, n = B4.length; i2 < n; ++i2) {
      const C3 = B4[i2 - 1];
      const b2 = B4[i2];
      for (const j2 of C3)
        b2.push(j2);
    }
    return B4;
  };
}
function bin1cn(E3, T2, V2) {
  const bin3 = bin1(E3, T2, V2);
  return (I2) => {
    const B4 = bin3(I2);
    for (let i2 = B4.length - 2; i2 >= 0; --i2) {
      const C3 = B4[i2 + 1];
      const b2 = B4[i2];
      for (const j2 of C3)
        b2.push(j2);
    }
    return B4;
  };
}
function mid1(x12, x22) {
  const m2 = (+x12 + +x22) / 2;
  return x12 instanceof Date ? new Date(m2) : m2;
}
var reduceX = {
  reduceIndex(I2, X3, { x1: x12, x2: x22 }) {
    return mid1(x12, x22);
  }
};
var reduceY = {
  reduceIndex(I2, X3, { y1: y12, y2: y22 }) {
    return mid1(y12, y22);
  }
};
var reduceX1 = {
  reduceIndex(I2, X3, { x1: x12 }) {
    return x12;
  }
};
var reduceX2 = {
  reduceIndex(I2, X3, { x2: x22 }) {
    return x22;
  }
};
var reduceY1 = {
  reduceIndex(I2, X3, { y1: y12 }) {
    return y12;
  }
};
var reduceY2 = {
  reduceIndex(I2, X3, { y2: y22 }) {
    return y22;
  }
};

// ../../node_modules/@observablehq/plot/src/transforms/identity.js
function maybeIdentityX(options = {}) {
  return hasX(options) ? options : { ...options, x: identity7 };
}
function maybeIdentityY(options = {}) {
  return hasY(options) ? options : { ...options, y: identity7 };
}

// ../../node_modules/@observablehq/plot/src/transforms/stack.js
function stackX(stackOptions = {}, options = {}) {
  if (arguments.length === 1)
    [stackOptions, options] = mergeOptions2(stackOptions);
  const { y1: y12, y: y3 = y12, x: x3, ...rest } = options;
  const [transform3, Y3, x12, x22] = stack(y3, x3, "y", "x", stackOptions, rest);
  return { ...transform3, y1: y12, y: Y3, x1: x12, x2: x22, x: mid(x12, x22) };
}
function stackX1(stackOptions = {}, options = {}) {
  if (arguments.length === 1)
    [stackOptions, options] = mergeOptions2(stackOptions);
  const { y1: y12, y: y3 = y12, x: x3 } = options;
  const [transform3, Y3, X3] = stack(y3, x3, "y", "x", stackOptions, options);
  return { ...transform3, y1: y12, y: Y3, x: X3 };
}
function stackX2(stackOptions = {}, options = {}) {
  if (arguments.length === 1)
    [stackOptions, options] = mergeOptions2(stackOptions);
  const { y1: y12, y: y3 = y12, x: x3 } = options;
  const [transform3, Y3, , X3] = stack(y3, x3, "y", "x", stackOptions, options);
  return { ...transform3, y1: y12, y: Y3, x: X3 };
}
function stackY(stackOptions = {}, options = {}) {
  if (arguments.length === 1)
    [stackOptions, options] = mergeOptions2(stackOptions);
  const { x1: x12, x: x3 = x12, y: y3, ...rest } = options;
  const [transform3, X3, y12, y22] = stack(x3, y3, "x", "y", stackOptions, rest);
  return { ...transform3, x1: x12, x: X3, y1: y12, y2: y22, y: mid(y12, y22) };
}
function stackY1(stackOptions = {}, options = {}) {
  if (arguments.length === 1)
    [stackOptions, options] = mergeOptions2(stackOptions);
  const { x1: x12, x: x3 = x12, y: y3 } = options;
  const [transform3, X3, Y3] = stack(x3, y3, "x", "y", stackOptions, options);
  return { ...transform3, x1: x12, x: X3, y: Y3 };
}
function stackY2(stackOptions = {}, options = {}) {
  if (arguments.length === 1)
    [stackOptions, options] = mergeOptions2(stackOptions);
  const { x1: x12, x: x3 = x12, y: y3 } = options;
  const [transform3, X3, , Y3] = stack(x3, y3, "x", "y", stackOptions, options);
  return { ...transform3, x1: x12, x: X3, y: Y3 };
}
function maybeStackX({ x: x3, x1: x12, x2: x22, ...options } = {}) {
  options = withTip(options, "y");
  if (x12 === void 0 && x22 === void 0)
    return stackX({ x: x3, ...options });
  [x12, x22] = maybeZero(x3, x12, x22);
  return { ...options, x1: x12, x2: x22 };
}
function maybeStackY({ y: y3, y1: y12, y2: y22, ...options } = {}) {
  options = withTip(options, "x");
  if (y12 === void 0 && y22 === void 0)
    return stackY({ y: y3, ...options });
  [y12, y22] = maybeZero(y3, y12, y22);
  return { ...options, y1: y12, y2: y22 };
}
function mergeOptions2(options) {
  const { offset: offset2, order, reverse: reverse3, ...rest } = options;
  return [{ offset: offset2, order, reverse: reverse3 }, rest];
}
var lengthy = { length: true };
function stack(x3, y3 = one2, kx2, ky2, { offset: offset2, order, reverse: reverse3 }, options) {
  const z2 = maybeZ(options);
  const [X3, setX] = maybeColumn(x3);
  const [Y13, setY1] = column2(y3);
  const [Y24, setY2] = column2(y3);
  Y13.hint = Y24.hint = lengthy;
  offset2 = maybeOffset(offset2);
  order = maybeOrder2(order, offset2, ky2);
  return [
    basic(options, (data, facets, plotOptions) => {
      const X4 = x3 == null ? void 0 : setX(maybeApplyInterval(valueof(data, x3), plotOptions?.[kx2]));
      const Y3 = valueof(data, y3, Float64Array);
      const Z3 = valueof(data, z2);
      const compare = order && order(data, X4, Y3, Z3);
      const n = data.length;
      const Y14 = setY1(new Float64Array(n));
      const Y25 = setY2(new Float64Array(n));
      const facetstacks = [];
      for (const facet of facets) {
        const stacks = X4 ? Array.from(group(facet, (i2) => X4[i2]).values()) : [facet];
        if (compare)
          for (const stack2 of stacks)
            stack2.sort(compare);
        for (const stack2 of stacks) {
          let yn = 0;
          let yp = 0;
          if (reverse3)
            stack2.reverse();
          for (const i2 of stack2) {
            const y4 = Y3[i2];
            if (y4 < 0)
              yn = Y25[i2] = (Y14[i2] = yn) + y4;
            else if (y4 > 0)
              yp = Y25[i2] = (Y14[i2] = yp) + y4;
            else
              Y25[i2] = Y14[i2] = yp;
          }
        }
        facetstacks.push(stacks);
      }
      if (offset2)
        offset2(facetstacks, Y14, Y25, Z3);
      return { data, facets };
    }),
    X3,
    Y13,
    Y24
  ];
}
function maybeOffset(offset2) {
  if (offset2 == null)
    return;
  if (typeof offset2 === "function")
    return offset2;
  switch (`${offset2}`.toLowerCase()) {
    case "expand":
    case "normalize":
      return offsetExpand;
    case "center":
    case "silhouette":
      return offsetCenter;
    case "wiggle":
      return offsetWiggle;
  }
  throw new Error(`unknown offset: ${offset2}`);
}
function extent2(stack2, Y24) {
  let min5 = 0, max4 = 0;
  for (const i2 of stack2) {
    const y3 = Y24[i2];
    if (y3 < min5)
      min5 = y3;
    if (y3 > max4)
      max4 = y3;
  }
  return [min5, max4];
}
function offsetExpand(facetstacks, Y13, Y24) {
  for (const stacks of facetstacks) {
    for (const stack2 of stacks) {
      const [yn, yp] = extent2(stack2, Y24);
      for (const i2 of stack2) {
        const m2 = 1 / (yp - yn || 1);
        Y13[i2] = m2 * (Y13[i2] - yn);
        Y24[i2] = m2 * (Y24[i2] - yn);
      }
    }
  }
}
function offsetCenter(facetstacks, Y13, Y24) {
  for (const stacks of facetstacks) {
    for (const stack2 of stacks) {
      const [yn, yp] = extent2(stack2, Y24);
      for (const i2 of stack2) {
        const m2 = (yp + yn) / 2;
        Y13[i2] -= m2;
        Y24[i2] -= m2;
      }
    }
    offsetZero(stacks, Y13, Y24);
  }
  offsetCenterFacets(facetstacks, Y13, Y24);
}
function offsetWiggle(facetstacks, Y13, Y24, Z3) {
  for (const stacks of facetstacks) {
    const prev = new InternMap();
    let y3 = 0;
    for (const stack2 of stacks) {
      let j2 = -1;
      const Fi = stack2.map((i2) => Math.abs(Y24[i2] - Y13[i2]));
      const Df = stack2.map((i2) => {
        j2 = Z3 ? Z3[i2] : ++j2;
        const value = Y24[i2] - Y13[i2];
        const diff = prev.has(j2) ? value - prev.get(j2) : 0;
        prev.set(j2, value);
        return diff;
      });
      const Cf1 = [0, ...cumsum(Df)];
      for (const i2 of stack2) {
        Y13[i2] += y3;
        Y24[i2] += y3;
      }
      const s1 = sum4(Fi);
      if (s1)
        y3 -= sum4(Fi, (d, i2) => (Df[i2] / 2 + Cf1[i2]) * d) / s1;
    }
    offsetZero(stacks, Y13, Y24);
  }
  offsetCenterFacets(facetstacks, Y13, Y24);
}
function offsetZero(stacks, Y13, Y24) {
  const m2 = min2(stacks, (stack2) => min2(stack2, (i2) => Y13[i2]));
  for (const stack2 of stacks) {
    for (const i2 of stack2) {
      Y13[i2] -= m2;
      Y24[i2] -= m2;
    }
  }
}
function offsetCenterFacets(facetstacks, Y13, Y24) {
  const n = facetstacks.length;
  if (n === 1)
    return;
  const facets = facetstacks.map((stacks) => stacks.flat());
  const m2 = facets.map((I2) => (min2(I2, (i2) => Y13[i2]) + max2(I2, (i2) => Y24[i2])) / 2);
  const m0 = min2(m2);
  for (let j2 = 0; j2 < n; j2++) {
    const p2 = m0 - m2[j2];
    for (const i2 of facets[j2]) {
      Y13[i2] += p2;
      Y24[i2] += p2;
    }
  }
}
function maybeOrder2(order, offset2, ky2) {
  if (order === void 0 && offset2 === offsetWiggle)
    return orderInsideOut(ascendingDefined2);
  if (order == null)
    return;
  if (typeof order === "string") {
    const negate2 = order.startsWith("-");
    const compare = negate2 ? descendingDefined : ascendingDefined2;
    switch ((negate2 ? order.slice(1) : order).toLowerCase()) {
      case "value":
      case ky2:
        return orderY(compare);
      case "z":
        return orderZ(compare);
      case "sum":
        return orderSum(compare);
      case "appearance":
        return orderAppearance(compare);
      case "inside-out":
        return orderInsideOut(compare);
    }
    return orderAccessor(field(order));
  }
  if (typeof order === "function")
    return (order.length === 1 ? orderAccessor : orderComparator)(order);
  if (Array.isArray(order))
    return orderGiven(order);
  throw new Error(`invalid order: ${order}`);
}
function orderY(compare) {
  return (data, X3, Y3) => (i2, j2) => compare(Y3[i2], Y3[j2]);
}
function orderZ(compare) {
  return (data, X3, Y3, Z3) => (i2, j2) => compare(Z3[i2], Z3[j2]);
}
function orderSum(compare) {
  return orderZDomain(
    compare,
    (data, X3, Y3, Z3) => groupSort(
      range2(data),
      (I2) => sum4(I2, (i2) => Y3[i2]),
      (i2) => Z3[i2]
    )
  );
}
function orderAppearance(compare) {
  return orderZDomain(
    compare,
    (data, X3, Y3, Z3) => groupSort(
      range2(data),
      (I2) => X3[greatest(I2, (i2) => Y3[i2])],
      (i2) => Z3[i2]
    )
  );
}
function orderInsideOut(compare) {
  return orderZDomain(compare, (data, X3, Y3, Z3) => {
    const I2 = range2(data);
    const K3 = groupSort(
      I2,
      (I3) => X3[greatest(I3, (i2) => Y3[i2])],
      (i2) => Z3[i2]
    );
    const sums = rollup(
      I2,
      (I3) => sum4(I3, (i2) => Y3[i2]),
      (i2) => Z3[i2]
    );
    const Kp = [], Kn = [];
    let s2 = 0;
    for (const k3 of K3) {
      if (s2 < 0) {
        s2 += sums.get(k3);
        Kp.push(k3);
      } else {
        s2 -= sums.get(k3);
        Kn.push(k3);
      }
    }
    return Kn.reverse().concat(Kp);
  });
}
function orderAccessor(f2) {
  return (data) => {
    const O = valueof(data, f2);
    return (i2, j2) => ascendingDefined2(O[i2], O[j2]);
  };
}
function orderComparator(f2) {
  return (data) => (i2, j2) => f2(data[i2], data[j2]);
}
function orderGiven(domain) {
  return orderZDomain(ascendingDefined2, () => domain);
}
function orderZDomain(compare, domain) {
  return (data, X3, Y3, Z3) => {
    if (!Z3)
      throw new Error("missing channel: z");
    const map4 = new InternMap(domain(data, X3, Y3, Z3).map((d, i2) => [d, i2]));
    return (i2, j2) => compare(map4.get(Z3[i2]), map4.get(Z3[j2]));
  };
}

// ../../node_modules/@observablehq/plot/src/marks/area.js
var defaults6 = {
  ariaLabel: "area",
  strokeWidth: 1,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  strokeMiterlimit: 1
};
var Area = class extends Mark {
  constructor(data, options = {}) {
    const { x1: x12, y1: y12, x2: x22, y2: y22, z: z2, curve, tension } = options;
    super(
      data,
      {
        x1: { value: x12, scale: "x" },
        y1: { value: y12, scale: "y" },
        x2: { value: x22, scale: "x", optional: true },
        y2: { value: y22, scale: "y", optional: true },
        z: { value: maybeZ(options), optional: true }
      },
      options,
      defaults6
    );
    this.z = z2;
    this.curve = maybeCurve(curve, tension);
  }
  filter(index2) {
    return index2;
  }
  render(index2, scales, channels, dimensions, context) {
    const { x1: X13, y1: Y13, x2: X24 = X13, y2: Y24 = Y13 } = channels;
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, scales, 0, 0).call(
      (g2) => g2.selectAll().data(groupIndex(index2, [X13, Y13, X24, Y24], this, channels)).enter().append("path").call(applyDirectStyles, this).call(applyGroupedChannelStyles, this, channels).attr(
        "d",
        area_default3().curve(this.curve).defined((i2) => i2 >= 0).x0((i2) => X13[i2]).y0((i2) => Y13[i2]).x1((i2) => X24[i2]).y1((i2) => Y24[i2])
      )
    ).node();
  }
};
function area(data, options) {
  if (options === void 0)
    return areaY(data, { x: first2, y: second2 });
  return new Area(data, options);
}
function areaX(data, options) {
  const { y: y3 = indexOf, ...rest } = maybeDenseIntervalY(options);
  return new Area(data, maybeStackX(maybeIdentityX({ ...rest, y1: y3, y2: void 0 })));
}
function areaY(data, options) {
  const { x: x3 = indexOf, ...rest } = maybeDenseIntervalX(options);
  return new Area(data, maybeStackY(maybeIdentityY({ ...rest, x1: x3, x2: void 0 })));
}

// ../../node_modules/@observablehq/plot/src/marks/link.js
var defaults7 = {
  ariaLabel: "link",
  fill: "none",
  stroke: "currentColor",
  strokeMiterlimit: 1
};
var Link = class extends Mark {
  constructor(data, options = {}) {
    const { x1: x12, y1: y12, x2: x22, y2: y22, curve, tension } = options;
    super(
      data,
      {
        x1: { value: x12, scale: "x" },
        y1: { value: y12, scale: "y" },
        x2: { value: x22, scale: "x", optional: true },
        y2: { value: y22, scale: "y", optional: true }
      },
      options,
      defaults7
    );
    this.curve = maybeCurveAuto(curve, tension);
    markers(this, options);
  }
  project(channels, values2, context) {
    if (this.curve !== curveAuto) {
      super.project(channels, values2, context);
    }
  }
  render(index2, scales, channels, dimensions, context) {
    const { x1: X13, y1: Y13, x2: X24 = X13, y2: Y24 = Y13 } = channels;
    const { curve } = this;
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, scales).call(
      (g2) => g2.selectAll().data(index2).enter().append("path").call(applyDirectStyles, this).attr(
        "d",
        curve === curveAuto && context.projection ? sphereLink(context.projection, X13, Y13, X24, Y24) : (i2) => {
          const p2 = pathRound();
          const c4 = curve(p2);
          c4.lineStart();
          c4.point(X13[i2], Y13[i2]);
          c4.point(X24[i2], Y24[i2]);
          c4.lineEnd();
          return p2;
        }
      ).call(applyChannelStyles, this, channels).call(applyMarkers, this, channels, context)
    ).node();
  }
};
function sphereLink(projection3, X13, Y13, X24, Y24) {
  const path2 = path_default(projection3);
  X13 = coerceNumbers(X13);
  Y13 = coerceNumbers(Y13);
  X24 = coerceNumbers(X24);
  Y24 = coerceNumbers(Y24);
  return (i2) => path2({
    type: "LineString",
    coordinates: [
      [X13[i2], Y13[i2]],
      [X24[i2], Y24[i2]]
    ]
  });
}
function link2(data, { x: x3, x1: x12, x2: x22, y: y3, y1: y12, y2: y22, ...options } = {}) {
  [x12, x22] = maybeSameValue(x3, x12, x22);
  [y12, y22] = maybeSameValue(y3, y12, y22);
  return new Link(data, { ...options, x1: x12, x2: x22, y1: y12, y2: y22 });
}
function maybeSameValue(x3, x12, x22) {
  if (x3 === void 0) {
    if (x12 === void 0) {
      if (x22 !== void 0)
        return [x22];
    } else {
      if (x22 === void 0)
        return [x12];
    }
  } else if (x12 === void 0) {
    return x22 === void 0 ? [x3] : [x3, x22];
  } else if (x22 === void 0) {
    return [x3, x12];
  }
  return [x12, x22];
}

// ../../node_modules/@observablehq/plot/src/marks/arrow.js
var defaults8 = {
  ariaLabel: "arrow",
  fill: "none",
  stroke: "currentColor",
  strokeLinecap: "round",
  strokeMiterlimit: 1,
  strokeWidth: 1.5
};
var Arrow = class extends Mark {
  constructor(data, options = {}) {
    const {
      x1: x12,
      y1: y12,
      x2: x22,
      y2: y22,
      bend = 0,
      headAngle = 60,
      headLength = 8,
      // Disable the arrow with headLength = 0; or, use Plot.link.
      inset: inset2 = 0,
      insetStart = inset2,
      insetEnd = inset2
    } = options;
    super(
      data,
      {
        x1: { value: x12, scale: "x" },
        y1: { value: y12, scale: "y" },
        x2: { value: x22, scale: "x", optional: true },
        y2: { value: y22, scale: "y", optional: true }
      },
      options,
      defaults8
    );
    this.bend = bend === true ? 22.5 : Math.max(-90, Math.min(90, bend));
    this.headAngle = +headAngle;
    this.headLength = +headLength;
    this.insetStart = +insetStart;
    this.insetEnd = +insetEnd;
  }
  render(index2, scales, channels, dimensions, context) {
    const { x1: X13, y1: Y13, x2: X24 = X13, y2: Y24 = Y13, SW } = channels;
    const { strokeWidth, bend, headAngle, headLength, insetStart, insetEnd } = this;
    const sw = SW ? (i2) => SW[i2] : constant(strokeWidth === void 0 ? 1 : strokeWidth);
    const bendAngle = bend * radians3;
    const wingAngle = headAngle * radians3 / 2;
    const wingScale = headLength / 1.5;
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, scales).call(
      (g2) => g2.selectAll().data(index2).enter().append("path").call(applyDirectStyles, this).attr("d", (i2) => {
        let x12 = X13[i2], y12 = Y13[i2], x22 = X24[i2], y22 = Y24[i2];
        const lineLength = Math.hypot(x22 - x12, y22 - y12);
        if (lineLength <= insetStart + insetEnd)
          return null;
        let lineAngle = Math.atan2(y22 - y12, x22 - x12);
        const headLength2 = Math.min(wingScale * sw(i2), lineLength / 3);
        const r = Math.hypot(lineLength / Math.tan(bendAngle), lineLength) / 2;
        if (insetStart || insetEnd) {
          if (r < 1e5) {
            const sign3 = Math.sign(bendAngle);
            const [cx, cy] = pointPointCenter([x12, y12], [x22, y22], r, sign3);
            if (insetStart) {
              [x12, y12] = circleCircleIntersect([cx, cy, r], [x12, y12, insetStart], -sign3 * Math.sign(insetStart));
            }
            if (insetEnd) {
              const [x5, y5] = circleCircleIntersect([cx, cy, r], [x22, y22, insetEnd], sign3 * Math.sign(insetEnd));
              lineAngle += Math.atan2(y5 - cy, x5 - cx) - Math.atan2(y22 - cy, x22 - cx);
              x22 = x5, y22 = y5;
            }
          } else {
            const dx = x22 - x12, dy = y22 - y12, d = Math.hypot(dx, dy);
            if (insetStart)
              x12 += dx / d * insetStart, y12 += dy / d * insetStart;
            if (insetEnd)
              x22 -= dx / d * insetEnd, y22 -= dy / d * insetEnd;
          }
        }
        const endAngle = lineAngle + bendAngle;
        const leftAngle = endAngle + wingAngle;
        const rightAngle = endAngle - wingAngle;
        const x3 = x22 - headLength2 * Math.cos(leftAngle);
        const y3 = y22 - headLength2 * Math.sin(leftAngle);
        const x4 = x22 - headLength2 * Math.cos(rightAngle);
        const y4 = y22 - headLength2 * Math.sin(rightAngle);
        return `M${x12},${y12}${r < 1e5 ? `A${r},${r} 0,0,${bendAngle > 0 ? 1 : 0} ` : `L`}${x22},${y22}M${x3},${y3}L${x22},${y22}L${x4},${y4}`;
      }).call(applyChannelStyles, this, channels)
    ).node();
  }
};
function pointPointCenter([ax, ay], [bx, by], r, sign3) {
  const dx = bx - ax, dy = by - ay, d = Math.hypot(dx, dy);
  const k3 = sign3 * Math.sqrt(r * r - d * d / 4) / d;
  return [(ax + bx) / 2 - dy * k3, (ay + by) / 2 + dx * k3];
}
function circleCircleIntersect([ax, ay, ar], [bx, by, br], sign3) {
  const dx = bx - ax, dy = by - ay, d = Math.hypot(dx, dy);
  const x3 = (dx * dx + dy * dy - br * br + ar * ar) / (2 * d);
  const y3 = sign3 * Math.sqrt(ar * ar - x3 * x3);
  return [ax + (dx * x3 + dy * y3) / d, ay + (dy * x3 - dx * y3) / d];
}
function arrow(data, { x: x3, x1: x12, x2: x22, y: y3, y1: y12, y2: y22, ...options } = {}) {
  [x12, x22] = maybeSameValue(x3, x12, x22);
  [y12, y22] = maybeSameValue(y3, y12, y22);
  return new Arrow(data, { ...options, x1: x12, x2: x22, y1: y12, y2: y22 });
}

// ../../node_modules/@observablehq/plot/src/marks/bar.js
var AbstractBar = class extends Mark {
  constructor(data, channels, options = {}, defaults22) {
    super(data, channels, options, defaults22);
    const { inset: inset2 = 0, insetTop = inset2, insetRight = inset2, insetBottom = inset2, insetLeft = inset2, rx, ry } = options;
    this.insetTop = number5(insetTop);
    this.insetRight = number5(insetRight);
    this.insetBottom = number5(insetBottom);
    this.insetLeft = number5(insetLeft);
    this.rx = impliedString(rx, "auto");
    this.ry = impliedString(ry, "auto");
  }
  render(index2, scales, channels, dimensions, context) {
    const { rx, ry } = this;
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(this._transform, this, scales).call(
      (g2) => g2.selectAll().data(index2).enter().append("rect").call(applyDirectStyles, this).attr("x", this._x(scales, channels, dimensions)).attr("width", this._width(scales, channels, dimensions)).attr("y", this._y(scales, channels, dimensions)).attr("height", this._height(scales, channels, dimensions)).call(applyAttr, "rx", rx).call(applyAttr, "ry", ry).call(applyChannelStyles, this, channels)
    ).node();
  }
  _x(scales, { x: X3 }, { marginLeft: marginLeft2 }) {
    const { insetLeft } = this;
    return X3 ? (i2) => X3[i2] + insetLeft : marginLeft2 + insetLeft;
  }
  _y(scales, { y: Y3 }, { marginTop: marginTop2 }) {
    const { insetTop } = this;
    return Y3 ? (i2) => Y3[i2] + insetTop : marginTop2 + insetTop;
  }
  _width({ x: x3 }, { x: X3 }, { marginRight: marginRight2, marginLeft: marginLeft2, width: width2 }) {
    const { insetLeft, insetRight } = this;
    const bandwidth = X3 && x3 ? x3.bandwidth() : width2 - marginRight2 - marginLeft2;
    return Math.max(0, bandwidth - insetLeft - insetRight);
  }
  _height({ y: y3 }, { y: Y3 }, { marginTop: marginTop2, marginBottom: marginBottom2, height: height2 }) {
    const { insetTop, insetBottom } = this;
    const bandwidth = Y3 && y3 ? y3.bandwidth() : height2 - marginTop2 - marginBottom2;
    return Math.max(0, bandwidth - insetTop - insetBottom);
  }
};
var defaults9 = {
  ariaLabel: "bar"
};
var BarX = class extends AbstractBar {
  constructor(data, options = {}) {
    const { x1: x12, x2: x22, y: y3 } = options;
    super(
      data,
      {
        x1: { value: x12, scale: "x" },
        x2: { value: x22, scale: "x" },
        y: { value: y3, scale: "y", type: "band", optional: true }
      },
      options,
      defaults9
    );
  }
  _transform(selection2, mark2, { x: x3 }) {
    selection2.call(applyTransform, mark2, { x: x3 }, 0, 0);
  }
  _x({ x: x3 }, { x1: X13, x2: X24 }, { marginLeft: marginLeft2 }) {
    const { insetLeft } = this;
    return isCollapsed(x3) ? marginLeft2 + insetLeft : (i2) => Math.min(X13[i2], X24[i2]) + insetLeft;
  }
  _width({ x: x3 }, { x1: X13, x2: X24 }, { marginRight: marginRight2, marginLeft: marginLeft2, width: width2 }) {
    const { insetLeft, insetRight } = this;
    return isCollapsed(x3) ? width2 - marginRight2 - marginLeft2 - insetLeft - insetRight : (i2) => Math.max(0, Math.abs(X24[i2] - X13[i2]) - insetLeft - insetRight);
  }
};
var BarY = class extends AbstractBar {
  constructor(data, options = {}) {
    const { x: x3, y1: y12, y2: y22 } = options;
    super(
      data,
      {
        y1: { value: y12, scale: "y" },
        y2: { value: y22, scale: "y" },
        x: { value: x3, scale: "x", type: "band", optional: true }
      },
      options,
      defaults9
    );
  }
  _transform(selection2, mark2, { y: y3 }) {
    selection2.call(applyTransform, mark2, { y: y3 }, 0, 0);
  }
  _y({ y: y3 }, { y1: Y13, y2: Y24 }, { marginTop: marginTop2 }) {
    const { insetTop } = this;
    return isCollapsed(y3) ? marginTop2 + insetTop : (i2) => Math.min(Y13[i2], Y24[i2]) + insetTop;
  }
  _height({ y: y3 }, { y1: Y13, y2: Y24 }, { marginTop: marginTop2, marginBottom: marginBottom2, height: height2 }) {
    const { insetTop, insetBottom } = this;
    return isCollapsed(y3) ? height2 - marginTop2 - marginBottom2 - insetTop - insetBottom : (i2) => Math.max(0, Math.abs(Y24[i2] - Y13[i2]) - insetTop - insetBottom);
  }
};
function barX(data, options = {}) {
  if (!hasXY(options))
    options = { ...options, y: indexOf, x2: identity7 };
  return new BarX(data, maybeStackX(maybeIntervalX(maybeIdentityX(options))));
}
function barY(data, options = {}) {
  if (!hasXY(options))
    options = { ...options, x: indexOf, y2: identity7 };
  return new BarY(data, maybeStackY(maybeIntervalY(maybeIdentityY(options))));
}

// ../../node_modules/@observablehq/plot/src/marks/cell.js
var defaults10 = {
  ariaLabel: "cell"
};
var Cell = class extends AbstractBar {
  constructor(data, { x: x3, y: y3, ...options } = {}) {
    super(
      data,
      {
        x: { value: x3, scale: "x", type: "band", optional: true },
        y: { value: y3, scale: "y", type: "band", optional: true }
      },
      options,
      defaults10
    );
  }
  _transform(selection2, mark2) {
    selection2.call(applyTransform, mark2, {}, 0, 0);
  }
};
function cell(data, { x: x3, y: y3, ...options } = {}) {
  [x3, y3] = maybeTuple(x3, y3);
  return new Cell(data, { ...options, x: x3, y: y3 });
}
function cellX(data, { x: x3 = indexOf, fill, stroke, ...options } = {}) {
  if (fill === void 0 && maybeColorChannel(stroke)[0] === void 0)
    fill = identity7;
  return new Cell(data, { ...options, x: x3, fill, stroke });
}
function cellY(data, { y: y3 = indexOf, fill, stroke, ...options } = {}) {
  if (fill === void 0 && maybeColorChannel(stroke)[0] === void 0)
    fill = identity7;
  return new Cell(data, { ...options, y: y3, fill, stroke });
}

// ../../node_modules/@observablehq/plot/src/marks/dot.js
var defaults11 = {
  ariaLabel: "dot",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 1.5
};
function withDefaultSort(options) {
  return options.sort === void 0 && options.reverse === void 0 ? sort2({ channel: "-r" }, options) : options;
}
var Dot = class extends Mark {
  constructor(data, options = {}) {
    const { x: x3, y: y3, r, rotate, symbol: symbol2 = circle_default2, frameAnchor } = options;
    const [vrotate, crotate] = maybeNumberChannel(rotate, 0);
    const [vsymbol, csymbol] = maybeSymbolChannel(symbol2);
    const [vr, cr] = maybeNumberChannel(r, vsymbol == null ? 3 : 4.5);
    super(
      data,
      {
        x: { value: x3, scale: "x", optional: true },
        y: { value: y3, scale: "y", optional: true },
        r: { value: vr, scale: "r", filter: positive, optional: true },
        rotate: { value: vrotate, optional: true },
        symbol: { value: vsymbol, scale: "auto", optional: true }
      },
      withDefaultSort(options),
      defaults11
    );
    this.r = cr;
    this.rotate = crotate;
    this.symbol = csymbol;
    this.frameAnchor = maybeFrameAnchor(frameAnchor);
    const { channels } = this;
    const { symbol: symbolChannel } = channels;
    if (symbolChannel) {
      const { fill: fillChannel, stroke: strokeChannel } = channels;
      symbolChannel.hint = {
        fill: fillChannel ? fillChannel.value === symbolChannel.value ? "color" : "currentColor" : this.fill,
        stroke: strokeChannel ? strokeChannel.value === symbolChannel.value ? "color" : "currentColor" : this.stroke
      };
    }
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    const { x: X3, y: Y3, r: R, rotate: A5, symbol: S2 } = channels;
    const { r, rotate, symbol: symbol2 } = this;
    const [cx, cy] = applyFrameAnchor(this, dimensions);
    const circle3 = symbol2 === circle_default2;
    const size = R ? void 0 : r * r * Math.PI;
    if (negative(r))
      index2 = [];
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, { x: X3 && x3, y: Y3 && y3 }).call(
      (g2) => g2.selectAll().data(index2).enter().append(circle3 ? "circle" : "path").call(applyDirectStyles, this).call(
        circle3 ? (selection2) => {
          selection2.attr("cx", X3 ? (i2) => X3[i2] : cx).attr("cy", Y3 ? (i2) => Y3[i2] : cy).attr("r", R ? (i2) => R[i2] : r);
        } : (selection2) => {
          selection2.attr(
            "transform",
            template`translate(${X3 ? (i2) => X3[i2] : cx},${Y3 ? (i2) => Y3[i2] : cy})${A5 ? (i2) => ` rotate(${A5[i2]})` : rotate ? ` rotate(${rotate})` : ``}`
          ).attr(
            "d",
            R && S2 ? (i2) => {
              const p2 = pathRound();
              S2[i2].draw(p2, R[i2] * R[i2] * Math.PI);
              return p2;
            } : R ? (i2) => {
              const p2 = pathRound();
              symbol2.draw(p2, R[i2] * R[i2] * Math.PI);
              return p2;
            } : S2 ? (i2) => {
              const p2 = pathRound();
              S2[i2].draw(p2, size);
              return p2;
            } : (() => {
              const p2 = pathRound();
              symbol2.draw(p2, size);
              return p2;
            })()
          );
        }
      ).call(applyChannelStyles, this, channels)
    ).node();
  }
};
function dot(data, { x: x3, y: y3, ...options } = {}) {
  if (options.frameAnchor === void 0)
    [x3, y3] = maybeTuple(x3, y3);
  return new Dot(data, { ...options, x: x3, y: y3 });
}
function dotX(data, { x: x3 = identity7, ...options } = {}) {
  return new Dot(data, maybeIntervalMidY({ ...options, x: x3 }));
}
function dotY(data, { y: y3 = identity7, ...options } = {}) {
  return new Dot(data, maybeIntervalMidX({ ...options, y: y3 }));
}
function circle(data, options) {
  return dot(data, { ...options, symbol: "circle" });
}
function hexagon(data, options) {
  return dot(data, { ...options, symbol: "hexagon" });
}

// ../../node_modules/@observablehq/plot/src/marks/line.js
var defaults12 = {
  ariaLabel: "line",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 1.5,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  strokeMiterlimit: 1
};
var Line = class extends Mark {
  constructor(data, options = {}) {
    const { x: x3, y: y3, z: z2, curve, tension } = options;
    super(
      data,
      {
        x: { value: x3, scale: "x" },
        y: { value: y3, scale: "y" },
        z: { value: maybeZ(options), optional: true }
      },
      options,
      defaults12
    );
    this.z = z2;
    this.curve = maybeCurveAuto(curve, tension);
    markers(this, options);
  }
  filter(index2) {
    return index2;
  }
  project(channels, values2, context) {
    if (this.curve !== curveAuto) {
      super.project(channels, values2, context);
    }
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: X3, y: Y3 } = channels;
    const { curve } = this;
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, scales).call(
      (g2) => g2.selectAll().data(groupIndex(index2, [X3, Y3], this, channels)).enter().append("path").call(applyDirectStyles, this).call(applyGroupedChannelStyles, this, channels).call(applyGroupedMarkers, this, channels, context).attr(
        "d",
        curve === curveAuto && context.projection ? sphereLine(context.projection, X3, Y3) : line_default2().curve(curve).defined((i2) => i2 >= 0).x((i2) => X3[i2]).y((i2) => Y3[i2])
      )
    ).node();
  }
};
function sphereLine(projection3, X3, Y3) {
  const path2 = path_default(projection3);
  X3 = coerceNumbers(X3);
  Y3 = coerceNumbers(Y3);
  return (I2) => {
    let line3 = [];
    const lines = [line3];
    for (const i2 of I2) {
      if (i2 === -1) {
        line3 = [];
        lines.push(line3);
      } else {
        line3.push([X3[i2], Y3[i2]]);
      }
    }
    return path2({ type: "MultiLineString", coordinates: lines });
  };
}
function line(data, { x: x3, y: y3, ...options } = {}) {
  [x3, y3] = maybeTuple(x3, y3);
  return new Line(data, { ...options, x: x3, y: y3 });
}
function lineX(data, { x: x3 = identity7, y: y3 = indexOf, ...options } = {}) {
  return new Line(data, maybeDenseIntervalY({ ...options, x: x3, y: y3 }));
}
function lineY(data, { x: x3 = indexOf, y: y3 = identity7, ...options } = {}) {
  return new Line(data, maybeDenseIntervalX({ ...options, x: x3, y: y3 }));
}

// ../../node_modules/@observablehq/plot/src/marks/rect.js
var defaults13 = {
  ariaLabel: "rect"
};
var Rect = class extends Mark {
  constructor(data, options = {}) {
    const {
      x1: x12,
      y1: y12,
      x2: x22,
      y2: y22,
      inset: inset2 = 0,
      insetTop = inset2,
      insetRight = inset2,
      insetBottom = inset2,
      insetLeft = inset2,
      rx,
      ry
    } = options;
    super(
      data,
      {
        x1: { value: x12, scale: "x", optional: true },
        y1: { value: y12, scale: "y", optional: true },
        x2: { value: x22, scale: "x", optional: true },
        y2: { value: y22, scale: "y", optional: true }
      },
      options,
      defaults13
    );
    this.insetTop = number5(insetTop);
    this.insetRight = number5(insetRight);
    this.insetBottom = number5(insetBottom);
    this.insetLeft = number5(insetLeft);
    this.rx = impliedString(rx, "auto");
    this.ry = impliedString(ry, "auto");
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    const { x1: X13, y1: Y13, x2: X24, y2: Y24 } = channels;
    const { marginTop: marginTop2, marginRight: marginRight2, marginBottom: marginBottom2, marginLeft: marginLeft2, width: width2, height: height2 } = dimensions;
    const { projection: projection3 } = context;
    const { insetTop, insetRight, insetBottom, insetLeft, rx, ry } = this;
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, { x: X13 && X24 && x3, y: Y13 && Y24 && y3 }, 0, 0).call(
      (g2) => g2.selectAll().data(index2).enter().append("rect").call(applyDirectStyles, this).attr(
        "x",
        X13 && X24 && (projection3 || !isCollapsed(x3)) ? (i2) => Math.min(X13[i2], X24[i2]) + insetLeft : marginLeft2 + insetLeft
      ).attr(
        "y",
        Y13 && Y24 && (projection3 || !isCollapsed(y3)) ? (i2) => Math.min(Y13[i2], Y24[i2]) + insetTop : marginTop2 + insetTop
      ).attr(
        "width",
        X13 && X24 && (projection3 || !isCollapsed(x3)) ? (i2) => Math.max(0, Math.abs(X24[i2] - X13[i2]) - insetLeft - insetRight) : width2 - marginRight2 - marginLeft2 - insetRight - insetLeft
      ).attr(
        "height",
        Y13 && Y24 && (projection3 || !isCollapsed(y3)) ? (i2) => Math.max(0, Math.abs(Y13[i2] - Y24[i2]) - insetTop - insetBottom) : height2 - marginTop2 - marginBottom2 - insetTop - insetBottom
      ).call(applyAttr, "rx", rx).call(applyAttr, "ry", ry).call(applyChannelStyles, this, channels)
    ).node();
  }
};
function rect(data, options) {
  return new Rect(data, maybeTrivialIntervalX(maybeTrivialIntervalY(options)));
}
function rectX(data, options = {}) {
  if (!hasXY(options))
    options = { ...options, y: indexOf, x2: identity7, interval: 1 };
  return new Rect(data, maybeStackX(maybeTrivialIntervalY(maybeIdentityX(options))));
}
function rectY(data, options = {}) {
  if (!hasXY(options))
    options = { ...options, x: indexOf, y2: identity7, interval: 1 };
  return new Rect(data, maybeStackY(maybeTrivialIntervalX(maybeIdentityY(options))));
}

// ../../node_modules/@observablehq/plot/src/marks/auto.js
function autoSpec(data, options) {
  options = normalizeOptions(options);
  const { x: x3, y: y3, color: color3, size } = options;
  const X3 = materializeValue(data, x3);
  const Y3 = materializeValue(data, y3);
  const C3 = materializeValue(data, color3);
  const S2 = materializeValue(data, size);
  let {
    fx,
    fy,
    x: { value: xValue, reduce: xReduce, zero: xZero2, ...xOptions },
    y: { value: yValue, reduce: yReduce, zero: yZero2, ...yOptions },
    color: { value: colorValue, color: colorColor, reduce: colorReduce },
    size: { value: sizeValue, reduce: sizeReduce },
    // TODO constant radius?
    mark: mark2
  } = options;
  if (xReduce === void 0)
    xReduce = yReduce == null && xValue == null && sizeValue == null && yValue != null ? "count" : null;
  if (yReduce === void 0)
    yReduce = xReduce == null && yValue == null && sizeValue == null && xValue != null ? "count" : null;
  if (sizeReduce === void 0 && sizeValue == null && colorReduce == null && xReduce == null && yReduce == null && (xValue == null || isOrdinal(X3)) && (yValue == null || isOrdinal(Y3))) {
    sizeReduce = "count";
  }
  if (xZero2 === void 0)
    xZero2 = isZeroReducer(xReduce) ? true : void 0;
  if (yZero2 === void 0)
    yZero2 = isZeroReducer(yReduce) ? true : void 0;
  if (xValue == null && yValue == null)
    throw new Error("must specify x or y");
  if (xReduce != null && yValue == null)
    throw new Error("reducing x requires y");
  if (yReduce != null && xValue == null)
    throw new Error("reducing y requires x");
  if (mark2 === void 0) {
    mark2 = sizeValue != null || sizeReduce != null ? "dot" : isZeroReducer(xReduce) || isZeroReducer(yReduce) || colorReduce != null ? "bar" : xValue != null && yValue != null ? isOrdinal(X3) || isOrdinal(Y3) || xReduce == null && yReduce == null && !isMonotonic(X3) && !isMonotonic(Y3) ? "dot" : "line" : xValue != null || yValue != null ? "rule" : null;
  }
  let Z3;
  let colorMode;
  let markImpl;
  switch (mark2) {
    case "dot":
      markImpl = dot;
      colorMode = "stroke";
      break;
    case "line":
      markImpl = X3 && Y3 || xReduce != null || yReduce != null ? yZero2 || yReduce != null || X3 && isMonotonic(X3) ? lineY : xZero2 || xReduce != null || Y3 && isMonotonic(Y3) ? lineX : line : X3 ? lineX : lineY;
      colorMode = "stroke";
      if (isHighCardinality(C3))
        Z3 = null;
      break;
    case "area":
      markImpl = !(yZero2 || yReduce != null) && (xZero2 || xReduce != null || Y3 && isMonotonic(Y3)) ? areaX : areaY;
      colorMode = "fill";
      if (isHighCardinality(C3))
        Z3 = null;
      break;
    case "rule":
      markImpl = X3 ? ruleX : ruleY;
      colorMode = "stroke";
      break;
    case "bar":
      markImpl = yZero2 ? isOrdinalReduced(xReduce, X3) ? barY : rectY : xZero2 ? isOrdinalReduced(yReduce, Y3) ? barX : rectX : isOrdinalReduced(xReduce, X3) && isOrdinalReduced(yReduce, Y3) ? cell : isOrdinalReduced(xReduce, X3) ? barY : isOrdinalReduced(yReduce, Y3) ? barX : xReduce != null ? rectX : yReduce != null ? rectY : rect;
      colorMode = "fill";
      break;
    default:
      throw new Error(`invalid mark: ${mark2}`);
  }
  let markOptions2 = {
    fx,
    fy,
    x: X3 ?? void 0,
    // treat null x as undefined for implicit stack
    y: Y3 ?? void 0,
    // treat null y as undefined for implicit stack
    [colorMode]: C3 ?? colorColor,
    z: Z3,
    r: S2 ?? void 0,
    // treat null size as undefined for default constant radius
    tip: true
  };
  let transformImpl;
  let transformOptions = { [colorMode]: colorReduce ?? void 0, r: sizeReduce ?? void 0 };
  if (xReduce != null && yReduce != null) {
    throw new Error(`cannot reduce both x and y`);
  } else if (yReduce != null) {
    transformOptions.y = yReduce;
    transformImpl = isOrdinal(X3) ? groupX : binX;
  } else if (xReduce != null) {
    transformOptions.x = xReduce;
    transformImpl = isOrdinal(Y3) ? groupY : binY;
  } else if (colorReduce != null || sizeReduce != null) {
    if (X3 && Y3) {
      transformImpl = isOrdinal(X3) && isOrdinal(Y3) ? group2 : isOrdinal(X3) ? binY : isOrdinal(Y3) ? binX : bin2;
    } else if (X3) {
      transformImpl = isOrdinal(X3) ? groupX : binX;
    } else if (Y3) {
      transformImpl = isOrdinal(Y3) ? groupY : binY;
    }
  }
  if (transformImpl === bin2 || transformImpl === binX)
    markOptions2.x = { value: X3, ...xOptions };
  if (transformImpl === bin2 || transformImpl === binY)
    markOptions2.y = { value: Y3, ...yOptions };
  if (xZero2 === void 0)
    xZero2 = X3 && !(transformImpl === bin2 || transformImpl === binX) && (markImpl === barX || markImpl === areaX || markImpl === rectX || markImpl === ruleY);
  if (yZero2 === void 0)
    yZero2 = Y3 && !(transformImpl === bin2 || transformImpl === binY) && (markImpl === barY || markImpl === areaY || markImpl === rectY || markImpl === ruleX);
  return {
    fx: fx ?? null,
    fy: fy ?? null,
    x: {
      value: xValue ?? null,
      reduce: xReduce ?? null,
      zero: !!xZero2,
      ...xOptions
    },
    y: {
      value: yValue ?? null,
      reduce: yReduce ?? null,
      zero: !!yZero2,
      ...yOptions
    },
    color: {
      value: colorValue ?? null,
      reduce: colorReduce ?? null,
      ...colorColor !== void 0 && { color: colorColor }
    },
    size: {
      value: sizeValue ?? null,
      reduce: sizeReduce ?? null
    },
    mark: mark2,
    markImpl: implNames[markImpl],
    markOptions: markOptions2,
    transformImpl: implNames[transformImpl],
    transformOptions,
    colorMode
  };
}
function auto(data, options) {
  const spec = autoSpec(data, options);
  const {
    fx,
    fy,
    x: { zero: xZero2 },
    y: { zero: yZero2 },
    markOptions: markOptions2,
    transformOptions,
    colorMode
  } = spec;
  const markImpl = impls[spec.markImpl];
  const transformImpl = impls[spec.transformImpl];
  const frames = fx != null || fy != null ? frame2({ strokeOpacity: 0.1 }) : null;
  const rules = [xZero2 ? ruleX([0]) : null, yZero2 ? ruleY([0]) : null];
  const mark2 = markImpl(data, transformImpl ? transformImpl(transformOptions, markOptions2) : markOptions2);
  return colorMode === "stroke" ? marks(frames, rules, mark2) : marks(frames, mark2, rules);
}
function isMonotonic(values2) {
  let previous;
  let previousOrder;
  for (const value of values2) {
    if (value == null)
      continue;
    if (previous === void 0) {
      previous = value;
      continue;
    }
    const order = Math.sign(ascending(previous, value));
    if (!order)
      continue;
    if (previousOrder !== void 0 && order !== previousOrder)
      return false;
    previous = value;
    previousOrder = order;
  }
  return true;
}
function normalizeOptions({ x: x3, y: y3, color: color3, size, fx, fy, mark: mark2 } = {}) {
  if (!isOptions(x3))
    x3 = makeOptions(x3);
  if (!isOptions(y3))
    y3 = makeOptions(y3);
  if (!isOptions(color3))
    color3 = isColor(color3) ? { color: color3 } : makeOptions(color3);
  if (!isOptions(size))
    size = makeOptions(size);
  if (isOptions(fx))
    ({ value: fx } = makeOptions(fx));
  if (isOptions(fy))
    ({ value: fy } = makeOptions(fy));
  if (mark2 != null)
    mark2 = `${mark2}`.toLowerCase();
  return { x: x3, y: y3, color: color3, size, fx, fy, mark: mark2 };
}
function materializeValue(data, options) {
  const V2 = valueof(data, options.value);
  if (V2)
    V2.label = labelof(options.value);
  return V2;
}
function makeOptions(value) {
  return isReducer(value) ? { reduce: value } : { value };
}
function isZeroReducer(reduce) {
  return /^(?:distinct|count|sum|proportion)$/i.test(reduce);
}
function isSelectReducer(reduce) {
  return /^(?:first|last|mode)$/i.test(reduce);
}
function isOrdinalReduced(reduce, value) {
  return reduce != null && !isSelectReducer(reduce) || !value ? false : isOrdinal(value);
}
function isReducer(reduce) {
  if (reduce == null)
    return false;
  if (typeof reduce.reduceIndex === "function")
    return true;
  if (typeof reduce.reduce === "function" && isObject4(reduce))
    return true;
  if (/^p\d{2}$/i.test(reduce))
    return true;
  switch (`${reduce}`.toLowerCase()) {
    case "first":
    case "last":
    case "count":
    case "distinct":
    case "sum":
    case "proportion":
    case "proportion-facet":
    case "deviation":
    case "min":
    case "min-index":
    case "max":
    case "max-index":
    case "mean":
    case "median":
    case "variance":
    case "mode":
      return true;
  }
  return false;
}
function isHighCardinality(value) {
  return value ? new InternSet(value).size > value.length >> 1 : false;
}
var impls = {
  dot,
  line,
  lineX,
  lineY,
  areaX,
  areaY,
  ruleX,
  ruleY,
  barX,
  barY,
  rect,
  rectX,
  rectY,
  cell,
  bin: bin2,
  binX,
  binY,
  group: group2,
  groupX,
  groupY
};
var implNames = Object.fromEntries(Object.entries(impls).map(([name2, impl]) => [impl, name2]));

// ../../node_modules/@observablehq/plot/src/transforms/map.js
function mapX(mapper, options = {}) {
  let { x: x3, x1: x12, x2: x22 } = options;
  if (x3 === void 0 && x12 === void 0 && x22 === void 0)
    options = { ...options, x: x3 = identity7 };
  const outputs = {};
  if (x3 != null)
    outputs.x = mapper;
  if (x12 != null)
    outputs.x1 = mapper;
  if (x22 != null)
    outputs.x2 = mapper;
  return map3(outputs, options);
}
function mapY(mapper, options = {}) {
  let { y: y3, y1: y12, y2: y22 } = options;
  if (y3 === void 0 && y12 === void 0 && y22 === void 0)
    options = { ...options, y: y3 = identity7 };
  const outputs = {};
  if (y3 != null)
    outputs.y = mapper;
  if (y12 != null)
    outputs.y1 = mapper;
  if (y22 != null)
    outputs.y2 = mapper;
  return map3(outputs, options);
}
function map3(outputs = {}, options = {}) {
  const z2 = maybeZ(options);
  const channels = Object.entries(outputs).map(([key, map4]) => {
    const input2 = maybeInput(key, options);
    if (input2 == null)
      throw new Error(`missing channel: ${key}`);
    const [output, setOutput] = column2(input2);
    return { key, input: input2, output, setOutput, map: maybeMap(map4) };
  });
  return {
    ...basic(options, (data, facets) => {
      const Z3 = valueof(data, z2);
      const X3 = channels.map(({ input: input2 }) => valueof(data, input2));
      const MX = channels.map(({ setOutput }) => setOutput(new Array(data.length)));
      for (const facet of facets) {
        for (const I2 of Z3 ? group(facet, (i2) => Z3[i2]).values() : [facet]) {
          channels.forEach(({ map: map4 }, i2) => map4.mapIndex(I2, X3[i2], MX[i2]));
        }
      }
      return { data, facets };
    }),
    ...Object.fromEntries(channels.map(({ key, output }) => [key, output]))
  };
}
function maybeMap(map4) {
  if (map4 == null)
    throw new Error("missing map");
  if (typeof map4.mapIndex === "function")
    return map4;
  if (typeof map4.map === "function" && isObject4(map4))
    return mapMap(map4);
  if (typeof map4 === "function")
    return mapFunction(taker(map4));
  switch (`${map4}`.toLowerCase()) {
    case "cumsum":
      return mapCumsum;
    case "rank":
      return mapFunction((I2, V2) => rank2(I2, (i2) => V2[i2]));
    case "quantile":
      return mapFunction((I2, V2) => rankQuantile(I2, (i2) => V2[i2]));
  }
  throw new Error(`invalid map: ${map4}`);
}
function mapMap(map4) {
  console.warn("deprecated map interface; implement mapIndex instead.");
  return { mapIndex: map4.map.bind(map4) };
}
function rankQuantile(I2, f2) {
  const n = count2(I2, f2) - 1;
  return rank2(I2, f2).map((r) => r / n);
}
function mapFunction(f2) {
  return {
    mapIndex(I2, S2, T2) {
      const M2 = f2(I2, S2);
      if (M2.length !== I2.length)
        throw new Error("map function returned a mismatched length");
      for (let i2 = 0, n = I2.length; i2 < n; ++i2)
        T2[I2[i2]] = M2[i2];
    }
  };
}
var mapCumsum = {
  mapIndex(I2, S2, T2) {
    let sum6 = 0;
    for (const i2 of I2)
      T2[i2] = sum6 += S2[i2];
  }
};

// ../../node_modules/@observablehq/plot/src/marks/tick.js
var defaults14 = {
  ariaLabel: "tick",
  fill: null,
  stroke: "currentColor"
};
var AbstractTick = class extends Mark {
  constructor(data, channels, options) {
    super(data, channels, options, defaults14);
    markers(this, options);
  }
  render(index2, scales, channels, dimensions, context) {
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(this._transform, this, scales).call(
      (g2) => g2.selectAll().data(index2).enter().append("line").call(applyDirectStyles, this).attr("x1", this._x1(scales, channels, dimensions)).attr("x2", this._x2(scales, channels, dimensions)).attr("y1", this._y1(scales, channels, dimensions)).attr("y2", this._y2(scales, channels, dimensions)).call(applyChannelStyles, this, channels).call(applyMarkers, this, channels, context)
    ).node();
  }
};
var TickX = class extends AbstractTick {
  constructor(data, options = {}) {
    const { x: x3, y: y3, inset: inset2 = 0, insetTop = inset2, insetBottom = inset2 } = options;
    super(
      data,
      {
        x: { value: x3, scale: "x" },
        y: { value: y3, scale: "y", type: "band", optional: true }
      },
      options
    );
    this.insetTop = number5(insetTop);
    this.insetBottom = number5(insetBottom);
  }
  _transform(selection2, mark2, { x: x3 }) {
    selection2.call(applyTransform, mark2, { x: x3 }, offset, 0);
  }
  _x1(scales, { x: X3 }) {
    return (i2) => X3[i2];
  }
  _x2(scales, { x: X3 }) {
    return (i2) => X3[i2];
  }
  _y1({ y: y3 }, { y: Y3 }, { marginTop: marginTop2 }) {
    const { insetTop } = this;
    return Y3 && y3 ? (i2) => Y3[i2] + insetTop : marginTop2 + insetTop;
  }
  _y2({ y: y3 }, { y: Y3 }, { height: height2, marginBottom: marginBottom2 }) {
    const { insetBottom } = this;
    return Y3 && y3 ? (i2) => Y3[i2] + y3.bandwidth() - insetBottom : height2 - marginBottom2 - insetBottom;
  }
};
var TickY = class extends AbstractTick {
  constructor(data, options = {}) {
    const { x: x3, y: y3, inset: inset2 = 0, insetRight = inset2, insetLeft = inset2 } = options;
    super(
      data,
      {
        y: { value: y3, scale: "y" },
        x: { value: x3, scale: "x", type: "band", optional: true }
      },
      options
    );
    this.insetRight = number5(insetRight);
    this.insetLeft = number5(insetLeft);
  }
  _transform(selection2, mark2, { y: y3 }) {
    selection2.call(applyTransform, mark2, { y: y3 }, 0, offset);
  }
  _x1({ x: x3 }, { x: X3 }, { marginLeft: marginLeft2 }) {
    const { insetLeft } = this;
    return X3 && x3 ? (i2) => X3[i2] + insetLeft : marginLeft2 + insetLeft;
  }
  _x2({ x: x3 }, { x: X3 }, { width: width2, marginRight: marginRight2 }) {
    const { insetRight } = this;
    return X3 && x3 ? (i2) => X3[i2] + x3.bandwidth() - insetRight : width2 - marginRight2 - insetRight;
  }
  _y1(scales, { y: Y3 }) {
    return (i2) => Y3[i2];
  }
  _y2(scales, { y: Y3 }) {
    return (i2) => Y3[i2];
  }
};
function tickX(data, { x: x3 = identity7, ...options } = {}) {
  return new TickX(data, { ...options, x: x3 });
}
function tickY(data, { y: y3 = identity7, ...options } = {}) {
  return new TickY(data, { ...options, y: y3 });
}

// ../../node_modules/@observablehq/plot/src/marks/box.js
function boxX(data, {
  x: x3 = identity7,
  y: y3 = null,
  fill = "#ccc",
  fillOpacity,
  stroke = "currentColor",
  strokeOpacity,
  strokeWidth = 2,
  sort: sort3,
  ...options
} = {}) {
  const group3 = y3 != null ? groupY : groupZ;
  return marks(
    ruleY(data, group3({ x1: loqr1, x2: hiqr2 }, { x: x3, y: y3, stroke, strokeOpacity, ...options })),
    barX(data, group3({ x1: "p25", x2: "p75" }, { x: x3, y: y3, fill, fillOpacity, ...options })),
    tickX(data, group3({ x: "p50" }, { x: x3, y: y3, stroke, strokeOpacity, strokeWidth, sort: sort3, ...options })),
    dot(data, map3({ x: oqr }, { x: x3, y: y3, z: y3, stroke, strokeOpacity, ...options }))
  );
}
function boxY(data, {
  y: y3 = identity7,
  x: x3 = null,
  fill = "#ccc",
  fillOpacity,
  stroke = "currentColor",
  strokeOpacity,
  strokeWidth = 2,
  sort: sort3,
  ...options
} = {}) {
  const group3 = x3 != null ? groupX : groupZ;
  return marks(
    ruleX(data, group3({ y1: loqr1, y2: hiqr2 }, { x: x3, y: y3, stroke, strokeOpacity, ...options })),
    barY(data, group3({ y1: "p25", y2: "p75" }, { x: x3, y: y3, fill, fillOpacity, ...options })),
    tickY(data, group3({ y: "p50" }, { x: x3, y: y3, stroke, strokeOpacity, strokeWidth, sort: sort3, ...options })),
    dot(data, map3({ y: oqr }, { x: x3, y: y3, z: x3, stroke, strokeOpacity, ...options }))
  );
}
function oqr(values2) {
  const r1 = loqr1(values2);
  const r2 = hiqr2(values2);
  return values2.map((v3) => v3 < r1 || v3 > r2 ? v3 : NaN);
}
function loqr1(values2) {
  const lo = quartile1(values2) * 2.5 - quartile3(values2) * 1.5;
  return min2(values2, (d) => d >= lo ? d : NaN);
}
function hiqr2(values2) {
  const hi = quartile3(values2) * 2.5 - quartile1(values2) * 1.5;
  return max2(values2, (d) => d <= hi ? d : NaN);
}
function quartile1(values2) {
  return quantile2(values2, 0.25);
}
function quartile3(values2) {
  return quantile2(values2, 0.75);
}

// ../../node_modules/@observablehq/plot/src/marks/raster.js
var defaults15 = {
  ariaLabel: "raster",
  stroke: null,
  pixelSize: 1
};
function number6(input2, name2) {
  const x3 = +input2;
  if (isNaN(x3))
    throw new Error(`invalid ${name2}: ${input2}`);
  return x3;
}
function integer(input2, name2) {
  const x3 = Math.floor(input2);
  if (isNaN(x3))
    throw new Error(`invalid ${name2}: ${input2}`);
  return x3;
}
var AbstractRaster = class extends Mark {
  constructor(data, channels, options = {}, defaults22) {
    let {
      width: width2,
      height: height2,
      x: x3,
      y: y3,
      x1: x12 = x3 == null ? 0 : void 0,
      y1: y12 = y3 == null ? 0 : void 0,
      x2: x22 = x3 == null ? width2 : void 0,
      y2: y22 = y3 == null ? height2 : void 0,
      pixelSize = defaults22.pixelSize,
      blur: blur3 = 0,
      interpolate
    } = options;
    if (width2 != null)
      width2 = integer(width2, "width");
    if (height2 != null)
      height2 = integer(height2, "height");
    if (x12 != null)
      x12 = number6(x12, "x1");
    if (y12 != null)
      y12 = number6(y12, "y1");
    if (x22 != null)
      x22 = number6(x22, "x2");
    if (y22 != null)
      y22 = number6(y22, "y2");
    if (x3 == null && (x12 == null || x22 == null))
      throw new Error("missing x");
    if (y3 == null && (y12 == null || y22 == null))
      throw new Error("missing y");
    if (data != null && width2 != null && height2 != null) {
      if (x3 === void 0 && x12 != null && x22 != null)
        x3 = denseX(x12, x22, width2, height2);
      if (y3 === void 0 && y12 != null && y22 != null)
        y3 = denseY(y12, y22, width2, height2);
    }
    super(
      data,
      {
        x: { value: x3, scale: "x", optional: true },
        y: { value: y3, scale: "y", optional: true },
        x1: { value: x12 == null ? null : [x12], scale: "x", optional: true, filter: null },
        y1: { value: y12 == null ? null : [y12], scale: "y", optional: true, filter: null },
        x2: { value: x22 == null ? null : [x22], scale: "x", optional: true, filter: null },
        y2: { value: y22 == null ? null : [y22], scale: "y", optional: true, filter: null },
        ...channels
      },
      options,
      defaults22
    );
    this.width = width2;
    this.height = height2;
    this.pixelSize = number6(pixelSize, "pixelSize");
    this.blur = number6(blur3, "blur");
    this.interpolate = x3 == null || y3 == null ? null : maybeInterpolate(interpolate);
  }
};
var Raster = class extends AbstractRaster {
  constructor(data, options = {}) {
    const { imageRendering } = options;
    if (data == null) {
      const { fill, fillOpacity } = options;
      if (maybeNumberChannel(fillOpacity)[0] !== void 0)
        options = sampler("fillOpacity", options);
      if (maybeColorChannel(fill)[0] !== void 0)
        options = sampler("fill", options);
    }
    super(data, void 0, options, defaults15);
    this.imageRendering = impliedString(imageRendering, "auto");
  }
  // Ignore the color scale, so the fill channel is returned unscaled.
  scale(channels, { color: color3, ...scales }, context) {
    return super.scale(channels, scales, context);
  }
  render(index2, scales, values2, dimensions, context) {
    const color3 = scales[values2.channels.fill?.scale] ?? ((x3) => x3);
    const { x: X3, y: Y3 } = values2;
    const { document: document2 } = context;
    const [x12, y12, x22, y22] = renderBounds(values2, dimensions, context);
    const dx = x22 - x12;
    const dy = y22 - y12;
    const { pixelSize: k3, width: w2 = Math.round(Math.abs(dx) / k3), height: h2 = Math.round(Math.abs(dy) / k3) } = this;
    const n = w2 * h2;
    let { fill: F2, fillOpacity: FO } = values2;
    let offset2 = 0;
    if (this.interpolate) {
      const kx2 = w2 / dx;
      const ky2 = h2 / dy;
      const IX = map2(X3, (x3) => (x3 - x12) * kx2, Float64Array);
      const IY = map2(Y3, (y3) => (y3 - y12) * ky2, Float64Array);
      if (F2)
        F2 = this.interpolate(index2, w2, h2, IX, IY, F2);
      if (FO)
        FO = this.interpolate(index2, w2, h2, IX, IY, FO);
    } else if (this.data == null && index2)
      offset2 = index2.fi * n;
    const canvas = document2.createElement("canvas");
    canvas.width = w2;
    canvas.height = h2;
    const context2d = canvas.getContext("2d");
    const image3 = context2d.createImageData(w2, h2);
    const imageData3 = image3.data;
    let { r, g: g2, b: b2 } = rgb(this.fill) ?? { r: 0, g: 0, b: 0 };
    let a2 = (this.fillOpacity ?? 1) * 255;
    for (let i2 = 0; i2 < n; ++i2) {
      const j2 = i2 << 2;
      if (F2) {
        const fi = color3(F2[i2 + offset2]);
        if (fi == null) {
          imageData3[j2 + 3] = 0;
          continue;
        }
        ({ r, g: g2, b: b2 } = rgb(fi));
      }
      if (FO)
        a2 = FO[i2 + offset2] * 255;
      imageData3[j2 + 0] = r;
      imageData3[j2 + 1] = g2;
      imageData3[j2 + 2] = b2;
      imageData3[j2 + 3] = a2;
    }
    if (this.blur > 0)
      blurImage(image3, this.blur);
    context2d.putImageData(image3, 0, 0);
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, scales).call(
      (g3) => g3.append("image").attr("transform", `translate(${x12},${y12}) scale(${Math.sign(x22 - x12)},${Math.sign(y22 - y12)})`).attr("width", Math.abs(dx)).attr("height", Math.abs(dy)).attr("preserveAspectRatio", "none").call(applyAttr, "image-rendering", this.imageRendering).call(applyDirectStyles, this).attr("xlink:href", canvas.toDataURL())
    ).node();
  }
};
function maybeTuples(k3, data, options) {
  if (arguments.length < 3)
    options = data, data = null;
  let { x: x3, y: y3, [k3]: z2, ...rest } = options;
  if (x3 === void 0 && y3 === void 0 && isTuples(data)) {
    x3 = first2, y3 = second2;
    if (z2 === void 0)
      z2 = third;
  }
  return [data, { ...rest, x: x3, y: y3, [k3]: z2 }];
}
function raster() {
  const [data, options] = maybeTuples("fill", ...arguments);
  return new Raster(
    data,
    data == null || options.fill !== void 0 || options.fillOpacity !== void 0 ? options : { ...options, fill: identity7 }
  );
}
function renderBounds({ x1: x12, y1: y12, x2: x22, y2: y22 }, dimensions, { projection: projection3 }) {
  const { width: width2, height: height2, marginTop: marginTop2, marginRight: marginRight2, marginBottom: marginBottom2, marginLeft: marginLeft2 } = dimensions;
  return [
    x12 && projection3 == null ? x12[0] : marginLeft2,
    y12 && projection3 == null ? y12[0] : marginTop2,
    x22 && projection3 == null ? x22[0] : width2 - marginRight2,
    y22 && projection3 == null ? y22[0] : height2 - marginBottom2
  ];
}
function rasterBounds({ x1: x12, y1: y12, x2: x22, y2: y22 }, scales, dimensions, context) {
  const channels = {};
  if (x12)
    channels.x1 = x12;
  if (y12)
    channels.y1 = y12;
  if (x22)
    channels.x2 = x22;
  if (y22)
    channels.y2 = y22;
  return renderBounds(valueObject(channels, scales), dimensions, context);
}
function sampler(name2, options = {}) {
  const { [name2]: value } = options;
  if (typeof value !== "function")
    throw new Error(`invalid ${name2}: not a function`);
  return initializer({ ...options, [name2]: void 0 }, function(data, facets, channels, scales, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    if (!x3)
      throw new Error("missing scale: x");
    if (!y3)
      throw new Error("missing scale: y");
    const [x12, y12, x22, y22] = rasterBounds(channels, scales, dimensions, context);
    const dx = x22 - x12;
    const dy = y22 - y12;
    const { pixelSize: k3 } = this;
    const { width: w2 = Math.round(Math.abs(dx) / k3), height: h2 = Math.round(Math.abs(dy) / k3) } = options;
    const V2 = new Array(w2 * h2 * (facets ? facets.length : 1));
    const kx2 = dx / w2;
    const ky2 = dy / h2;
    let i2 = 0;
    for (const facet of facets ?? [void 0]) {
      for (let yi = 0.5; yi < h2; ++yi) {
        for (let xi = 0.5; xi < w2; ++xi, ++i2) {
          V2[i2] = value(x3.invert(x12 + xi * kx2), y3.invert(y12 + yi * ky2), facet);
        }
      }
    }
    return { data: V2, facets, channels: { [name2]: { value: V2, scale: "auto" } } };
  });
}
function maybeInterpolate(interpolate) {
  if (typeof interpolate === "function")
    return interpolate;
  if (interpolate == null)
    return interpolateNone;
  switch (`${interpolate}`.toLowerCase()) {
    case "none":
      return interpolateNone;
    case "nearest":
      return interpolateNearest;
    case "barycentric":
      return interpolatorBarycentric();
    case "random-walk":
      return interpolatorRandomWalk();
  }
  throw new Error(`invalid interpolate: ${interpolate}`);
}
function interpolateNone(index2, width2, height2, X3, Y3, V2) {
  const W2 = new Array(width2 * height2);
  for (const i2 of index2) {
    if (X3[i2] < 0 || X3[i2] >= width2 || Y3[i2] < 0 || Y3[i2] >= height2)
      continue;
    W2[Math.floor(Y3[i2]) * width2 + Math.floor(X3[i2])] = V2[i2];
  }
  return W2;
}
function interpolatorBarycentric({ random = lcg(42) } = {}) {
  return (index2, width2, height2, X3, Y3, V2) => {
    const n = index2.length;
    const nw = width2 >> 2;
    const nh = (height2 >> 2) - 1;
    const m2 = n + nw * 2 + nh * 2;
    const XY2 = new Float64Array(m2 * 2);
    for (let i3 = 0; i3 < n; ++i3)
      XY2[i3 * 2] = X3[index2[i3]], XY2[i3 * 2 + 1] = Y3[index2[i3]];
    let i2 = n;
    const addPoint = (x3, y3) => (XY2[i2 * 2] = x3, XY2[i2 * 2 + 1] = y3, i2++);
    for (let j2 = 0; j2 <= nw; ++j2)
      addPoint(j2 / nw * width2, 0), addPoint(j2 / nw * width2, height2);
    for (let j2 = 0; j2 < nh; ++j2)
      addPoint(width2, j2 / nh * height2), addPoint(0, j2 / nh * height2);
    V2 = take(V2, index2);
    const delaunay = new Delaunay(XY2.subarray(0, n * 2));
    for (let j2 = n, ij; j2 < m2; ++j2)
      V2[j2] = V2[ij = delaunay.find(XY2[j2 * 2], XY2[j2 * 2 + 1], ij)];
    const { points: points2, triangles } = new Delaunay(XY2);
    const W2 = new V2.constructor(width2 * height2);
    const mix = mixer(V2, random);
    for (let i3 = 0; i3 < triangles.length; i3 += 3) {
      const ta = triangles[i3];
      const tb = triangles[i3 + 1];
      const tc = triangles[i3 + 2];
      const Ax = points2[2 * ta];
      const Bx = points2[2 * tb];
      const Cx = points2[2 * tc];
      const Ay = points2[2 * ta + 1];
      const By = points2[2 * tb + 1];
      const Cy = points2[2 * tc + 1];
      const x12 = Math.min(Ax, Bx, Cx);
      const x22 = Math.max(Ax, Bx, Cx);
      const y12 = Math.min(Ay, By, Cy);
      const y22 = Math.max(Ay, By, Cy);
      const z2 = (By - Cy) * (Ax - Cx) + (Ay - Cy) * (Cx - Bx);
      if (!z2)
        continue;
      const va = V2[ta];
      const vb = V2[tb];
      const vc = V2[tc];
      for (let x3 = Math.floor(x12); x3 < x22; ++x3) {
        for (let y3 = Math.floor(y12); y3 < y22; ++y3) {
          if (x3 < 0 || x3 >= width2 || y3 < 0 || y3 >= height2)
            continue;
          const xp = x3 + 0.5;
          const yp = y3 + 0.5;
          const ga = ((By - Cy) * (xp - Cx) + (yp - Cy) * (Cx - Bx)) / z2;
          if (ga < 0)
            continue;
          const gb = ((Cy - Ay) * (xp - Cx) + (yp - Cy) * (Ax - Cx)) / z2;
          if (gb < 0)
            continue;
          const gc = 1 - ga - gb;
          if (gc < 0)
            continue;
          W2[x3 + width2 * y3] = mix(va, ga, vb, gb, vc, gc, x3, y3);
        }
      }
    }
    return W2;
  };
}
function interpolateNearest(index2, width2, height2, X3, Y3, V2) {
  const W2 = new V2.constructor(width2 * height2);
  const delaunay = Delaunay.from(
    index2,
    (i2) => X3[i2],
    (i2) => Y3[i2]
  );
  let iy, ix;
  for (let y3 = 0.5, k3 = 0; y3 < height2; ++y3) {
    ix = iy;
    for (let x3 = 0.5; x3 < width2; ++x3, ++k3) {
      ix = delaunay.find(x3, y3, ix);
      if (x3 === 0.5)
        iy = ix;
      W2[k3] = V2[index2[ix]];
    }
  }
  return W2;
}
function interpolatorRandomWalk({ random = lcg(42), minDistance = 0.5, maxSteps = 2 } = {}) {
  return (index2, width2, height2, X3, Y3, V2) => {
    const W2 = new V2.constructor(width2 * height2);
    const delaunay = Delaunay.from(
      index2,
      (i2) => X3[i2],
      (i2) => Y3[i2]
    );
    let iy, ix, iw;
    for (let y3 = 0.5, k3 = 0; y3 < height2; ++y3) {
      ix = iy;
      for (let x3 = 0.5; x3 < width2; ++x3, ++k3) {
        let cx = x3;
        let cy = y3;
        iw = ix = delaunay.find(cx, cy, ix);
        if (x3 === 0.5)
          iy = ix;
        let distance;
        let step = 0;
        while ((distance = Math.hypot(X3[index2[iw]] - cx, Y3[index2[iw]] - cy)) > minDistance && step < maxSteps) {
          const angle = random(x3, y3, step) * 2 * Math.PI;
          cx += Math.cos(angle) * distance;
          cy += Math.sin(angle) * distance;
          iw = delaunay.find(cx, cy, iw);
          ++step;
        }
        W2[k3] = V2[index2[iw]];
      }
    }
    return W2;
  };
}
function blend(a2, ca3, b2, cb, c4, cc2) {
  return ca3 * a2 + cb * b2 + cc2 * c4;
}
function pick(random) {
  return (a2, ca3, b2, cb, c4, cc2, x3, y3) => {
    const u4 = random(x3, y3);
    return u4 < ca3 ? a2 : u4 < ca3 + cb ? b2 : c4;
  };
}
function mixer(F2, random) {
  return isNumeric(F2) || isTemporal(F2) ? blend : pick(random);
}
function denseX(x12, x22, width2) {
  return {
    transform(data) {
      const n = data.length;
      const X3 = new Float64Array(n);
      const kx2 = (x22 - x12) / width2;
      const x06 = x12 + kx2 / 2;
      for (let i2 = 0; i2 < n; ++i2)
        X3[i2] = i2 % width2 * kx2 + x06;
      return X3;
    }
  };
}
function denseY(y12, y22, width2, height2) {
  return {
    transform(data) {
      const n = data.length;
      const Y3 = new Float64Array(n);
      const ky2 = (y22 - y12) / height2;
      const y06 = y12 + ky2 / 2;
      for (let i2 = 0; i2 < n; ++i2)
        Y3[i2] = Math.floor(i2 / width2) % height2 * ky2 + y06;
      return Y3;
    }
  };
}

// ../../node_modules/@observablehq/plot/src/marks/contour.js
var defaults16 = {
  ariaLabel: "contour",
  fill: "none",
  stroke: "currentColor",
  strokeMiterlimit: 1,
  pixelSize: 2
};
var Contour = class extends AbstractRaster {
  constructor(data, { smooth = true, value, ...options } = {}) {
    const channels = styles({}, options, defaults16);
    if (value === void 0) {
      for (const key in channels) {
        if (channels[key].value != null) {
          if (value !== void 0)
            throw new Error("ambiguous contour value");
          value = options[key];
          options[key] = "value";
        }
      }
    }
    if (value != null) {
      const v3 = { transform: (D4) => D4.map((d) => d.value), label: labelof(value) };
      for (const key in channels) {
        if (options[key] === "value") {
          options[key] = v3;
        }
      }
    }
    if (data == null) {
      if (value == null)
        throw new Error("missing contour value");
      options = sampler("value", { value, ...options });
      value = null;
    } else {
      let { interpolate } = options;
      if (value === void 0)
        value = identity7;
      if (interpolate === void 0)
        options.interpolate = "nearest";
    }
    super(data, { value: { value, optional: true } }, contourGeometry(options), defaults16);
    const contourChannels = { geometry: { value: identity7 } };
    for (const key in this.channels) {
      const channel = this.channels[key];
      const { scale: scale3 } = channel;
      if (scale3 === "x" || scale3 === "y" || key === "value")
        continue;
      contourChannels[key] = channel;
      delete this.channels[key];
    }
    this.contourChannels = contourChannels;
    this.smooth = !!smooth;
  }
  filter(index2, { x: x3, y: y3, value, ...channels }, values2) {
    return super.filter(index2, channels, values2);
  }
  render(index2, scales, channels, dimensions, context) {
    const { geometry: G } = channels;
    const path2 = path_default();
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, scales).call((g2) => {
      g2.selectAll().data(index2).enter().append("path").call(applyDirectStyles, this).attr("d", (i2) => path2(G[i2])).call(applyChannelStyles, this, channels);
    }).node();
  }
};
function contourGeometry({ thresholds, interval: interval2, ...options }) {
  thresholds = maybeThresholds(thresholds, interval2, thresholdSturges);
  return initializer(options, function(data, facets, channels, scales, dimensions, context) {
    const [x12, y12, x22, y22] = rasterBounds(channels, scales, dimensions, context);
    const dx = x22 - x12;
    const dy = y22 - y12;
    const { pixelSize: k3, width: w2 = Math.round(Math.abs(dx) / k3), height: h2 = Math.round(Math.abs(dy) / k3) } = this;
    const kx2 = w2 / dx;
    const ky2 = h2 / dy;
    const V2 = channels.value.value;
    const VV = [];
    if (this.interpolate) {
      const { x: X3, y: Y3 } = applyPosition(channels, scales, context);
      const IX = map2(X3, (x3) => (x3 - x12) * kx2, Float64Array);
      const IY = map2(Y3, (y3) => (y3 - y12) * ky2, Float64Array);
      const ichannels = [channels.x, channels.y, channels.value];
      const ivalues = [IX, IY, V2];
      for (const facet of facets) {
        const index2 = this.filter(facet, ichannels, ivalues);
        VV.push(this.interpolate(index2, w2, h2, IX, IY, V2));
      }
    } else if (facets) {
      const n = w2 * h2;
      const m2 = facets.length;
      for (let i2 = 0; i2 < m2; ++i2)
        VV.push(V2.slice(i2 * n, i2 * n + n));
    } else {
      VV.push(V2);
    }
    if (this.blur > 0)
      for (const V3 of VV)
        blur2({ data: V3, width: w2, height: h2 }, this.blur);
    const T2 = maybeTicks(thresholds, V2, ...finiteExtent(VV));
    if (T2 === null)
      throw new Error(`unsupported thresholds: ${thresholds}`);
    const { contour: contour3 } = contours_default().size([w2, h2]).smooth(this.smooth);
    const contourData = [];
    const contourFacets = [];
    for (const V3 of VV) {
      contourFacets.push(range(contourData.length, contourData.push(...map2(T2, (t) => contour3(V3, t)))));
    }
    for (const { coordinates } of contourData) {
      for (const rings of coordinates) {
        for (const ring of rings) {
          for (const point6 of ring) {
            point6[0] = point6[0] / kx2 + x12;
            point6[1] = point6[1] / ky2 + y12;
          }
        }
      }
    }
    return {
      data: contourData,
      facets: contourFacets,
      channels: createChannels(this.contourChannels, contourData)
    };
  });
}
function maybeTicks(thresholds, V2, min5, max4) {
  if (typeof thresholds?.range === "function")
    return thresholds.range(thresholds.floor(min5), max4);
  if (typeof thresholds === "function")
    thresholds = thresholds(V2, min5, max4);
  if (typeof thresholds !== "number")
    return arrayify2(thresholds);
  const tz = ticks(...nice(min5, max4, thresholds), thresholds);
  while (tz[tz.length - 1] >= max4)
    tz.pop();
  while (tz[1] < min5)
    tz.shift();
  return tz;
}
function contour() {
  return new Contour(...maybeTuples("value", ...arguments));
}
function finiteExtent(VV) {
  return [min2(VV, (V2) => min2(V2, finite3)), max2(VV, (V2) => max2(V2, finite3))];
}
function finite3(x3) {
  return isFinite(x3) ? x3 : NaN;
}

// ../../node_modules/@observablehq/plot/src/marks/crosshair.js
function crosshair(data, options) {
  return crosshairK(pointer, data, options);
}
function crosshairX(data, options = {}) {
  return crosshairK(pointerX, data, options);
}
function crosshairY(data, options = {}) {
  return crosshairK(pointerY, data, options);
}
function crosshairK(pointer2, data, options = {}) {
  const { x: x3, y: y3, maxRadius } = options;
  const p2 = pointer2({ px: x3, py: y3, maxRadius });
  const M2 = [];
  if (x3 != null)
    M2.push(ruleX(data, ruleOptions("x", { ...p2, inset: -6 }, options)));
  if (y3 != null)
    M2.push(ruleY(data, ruleOptions("y", { ...p2, inset: -6 }, options)));
  if (x3 != null)
    M2.push(text(data, textOptions("x", { ...p2, dy: 9, frameAnchor: "bottom", lineAnchor: "top" }, options)));
  if (y3 != null)
    M2.push(text(data, textOptions("y", { ...p2, dx: -9, frameAnchor: "left", textAnchor: "end" }, options)));
  for (const m2 of M2)
    m2.ariaLabel = `crosshair ${m2.ariaLabel}`;
  return marks(...M2);
}
function markOptions(k3, { channels: pointerChannels, ...pointerOptions }, { facet, facetAnchor, fx, fy, [k3]: p2, channels, transform: transform3, initializer: initializer2 }) {
  return {
    ...pointerOptions,
    facet,
    facetAnchor,
    fx,
    fy,
    [k3]: p2,
    channels: { ...pointerChannels, ...channels },
    transform: transform3,
    initializer: pxpy(k3, initializer2)
  };
}
function pxpy(k3, i2) {
  if (i2 == null)
    return i2;
  return function(data, facets, { x: x12, y: y12, px, py, ...c1 }, ...args) {
    const { channels: { x: x3, y: y3, ...c4 } = {}, ...rest } = i2.call(this, data, facets, { ...c1, x: px, y: py }, ...args);
    return {
      channels: {
        ...c4,
        ...x3 && { px: x3, ...k3 === "x" && { x: x3 } },
        ...y3 && { py: y3, ...k3 === "y" && { y: y3 } }
      },
      ...rest
    };
  };
}
function ruleOptions(k3, pointerOptions, options) {
  const {
    color: color3 = "currentColor",
    opacity: opacity2 = 0.2,
    ruleStroke: stroke = color3,
    ruleStrokeOpacity: strokeOpacity = opacity2,
    ruleStrokeWidth: strokeWidth
  } = options;
  return {
    ...markOptions(k3, pointerOptions, options),
    stroke,
    strokeOpacity,
    strokeWidth
  };
}
function textOptions(k3, pointerOptions, options) {
  const {
    color: color3 = "currentColor",
    textFill: fill = color3,
    textFillOpacity: fillOpacity,
    textStroke: stroke = "white",
    textStrokeOpacity: strokeOpacity,
    textStrokeWidth: strokeWidth = 5
  } = options;
  return {
    ...markOptions(k3, pointerOptions, textChannel(k3, options)),
    fill,
    fillOpacity,
    stroke,
    strokeOpacity,
    strokeWidth
  };
}
function textChannel(source, options) {
  return initializer(options, (data, facets, channels) => {
    return { channels: { text: { value: getSource(channels, source)?.value } } };
  });
}

// ../../node_modules/@observablehq/plot/src/marks/delaunay.js
var delaunayLinkDefaults = {
  ariaLabel: "delaunay link",
  fill: "none",
  stroke: "currentColor",
  strokeMiterlimit: 1
};
var delaunayMeshDefaults = {
  ariaLabel: "delaunay mesh",
  fill: null,
  stroke: "currentColor",
  strokeOpacity: 0.2
};
var hullDefaults = {
  ariaLabel: "hull",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 1.5,
  strokeMiterlimit: 1
};
var voronoiDefaults = {
  ariaLabel: "voronoi",
  fill: "none",
  stroke: "currentColor",
  strokeMiterlimit: 1
};
var voronoiMeshDefaults = {
  ariaLabel: "voronoi mesh",
  fill: null,
  stroke: "currentColor",
  strokeOpacity: 0.2
};
var DelaunayLink = class extends Mark {
  constructor(data, options = {}) {
    const { x: x3, y: y3, z: z2, curve, tension } = options;
    super(
      data,
      {
        x: { value: x3, scale: "x", optional: true },
        y: { value: y3, scale: "y", optional: true },
        z: { value: z2, optional: true }
      },
      options,
      delaunayLinkDefaults
    );
    this.curve = maybeCurve(curve, tension);
    markers(this, options);
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    const { x: X3, y: Y3, z: Z3 } = channels;
    const { curve } = this;
    const [cx, cy] = applyFrameAnchor(this, dimensions);
    const xi = X3 ? (i2) => X3[i2] : constant(cx);
    const yi = Y3 ? (i2) => Y3[i2] : constant(cy);
    const mark2 = this;
    function links(index3) {
      let i2 = -1;
      const newIndex = [];
      const newChannels = {};
      for (const k3 in channels)
        newChannels[k3] = [];
      const X13 = [];
      const X24 = [];
      const Y13 = [];
      const Y24 = [];
      function link4(ti, tj) {
        ti = index3[ti];
        tj = index3[tj];
        newIndex.push(++i2);
        X13[i2] = xi(ti);
        Y13[i2] = yi(ti);
        X24[i2] = xi(tj);
        Y24[i2] = yi(tj);
        for (const k3 in channels)
          newChannels[k3].push(channels[k3][tj]);
      }
      const { halfedges, hull: hull3, triangles } = Delaunay.from(index3, xi, yi);
      for (let i3 = 0; i3 < halfedges.length; ++i3) {
        const j2 = halfedges[i3];
        if (j2 > i3)
          link4(triangles[i3], triangles[j2]);
      }
      for (let i3 = 0; i3 < hull3.length; ++i3) {
        link4(hull3[i3], hull3[(i3 + 1) % hull3.length]);
      }
      select_default2(this).selectAll().data(newIndex).enter().append("path").call(applyDirectStyles, mark2).attr("d", (i3) => {
        const p2 = pathRound();
        const c4 = curve(p2);
        c4.lineStart();
        c4.point(X13[i3], Y13[i3]);
        c4.point(X24[i3], Y24[i3]);
        c4.lineEnd();
        return p2;
      }).call(applyChannelStyles, mark2, newChannels).call(applyMarkers, mark2, newChannels, context);
    }
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, { x: X3 && x3, y: Y3 && y3 }).call(
      Z3 ? (g2) => g2.selectAll().data(group(index2, (i2) => Z3[i2]).values()).enter().append("g").each(links) : (g2) => g2.datum(index2).each(links)
    ).node();
  }
};
var AbstractDelaunayMark = class extends Mark {
  constructor(data, options = {}, defaults22, zof = ({ z: z2 }) => z2) {
    const { x: x3, y: y3 } = options;
    super(
      data,
      {
        x: { value: x3, scale: "x", optional: true },
        y: { value: y3, scale: "y", optional: true },
        z: { value: zof(options), optional: true }
      },
      options,
      defaults22
    );
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    const { x: X3, y: Y3, z: Z3 } = channels;
    const [cx, cy] = applyFrameAnchor(this, dimensions);
    const xi = X3 ? (i2) => X3[i2] : constant(cx);
    const yi = Y3 ? (i2) => Y3[i2] : constant(cy);
    const mark2 = this;
    function mesh(index3) {
      const delaunay = Delaunay.from(index3, xi, yi);
      select_default2(this).append("path").datum(index3[0]).call(applyDirectStyles, mark2).attr("d", mark2._render(delaunay, dimensions)).call(applyChannelStyles, mark2, channels);
    }
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, { x: X3 && x3, y: Y3 && y3 }).call(
      Z3 ? (g2) => g2.selectAll().data(group(index2, (i2) => Z3[i2]).values()).enter().append("g").each(mesh) : (g2) => g2.datum(index2).each(mesh)
    ).node();
  }
};
var DelaunayMesh = class extends AbstractDelaunayMark {
  constructor(data, options = {}) {
    super(data, options, delaunayMeshDefaults);
    this.fill = "none";
  }
  _render(delaunay) {
    return delaunay.render();
  }
};
var Hull = class extends AbstractDelaunayMark {
  constructor(data, options = {}) {
    super(data, options, hullDefaults, maybeZ);
  }
  _render(delaunay) {
    return delaunay.renderHull();
  }
};
var Voronoi2 = class extends Mark {
  constructor(data, options = {}) {
    const { x: x3, y: y3, z: z2 } = options;
    super(
      data,
      {
        x: { value: x3, scale: "x", optional: true },
        y: { value: y3, scale: "y", optional: true },
        z: { value: z2, optional: true }
      },
      options,
      voronoiDefaults
    );
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    const { x: X3, y: Y3, z: Z3 } = channels;
    const [cx, cy] = applyFrameAnchor(this, dimensions);
    const xi = X3 ? (i2) => X3[i2] : constant(cx);
    const yi = Y3 ? (i2) => Y3[i2] : constant(cy);
    const mark2 = this;
    function cells(index3) {
      const delaunay = Delaunay.from(index3, xi, yi);
      const voronoi3 = voronoiof(delaunay, dimensions);
      select_default2(this).selectAll().data(index3).enter().append("path").call(applyDirectStyles, mark2).attr("d", (_2, i2) => voronoi3.renderCell(i2)).call(applyChannelStyles, mark2, channels);
    }
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, { x: X3 && x3, y: Y3 && y3 }).call(
      Z3 ? (g2) => g2.selectAll().data(group(index2, (i2) => Z3[i2]).values()).enter().append("g").each(cells) : (g2) => g2.datum(index2).each(cells)
    ).node();
  }
};
var VoronoiMesh = class extends AbstractDelaunayMark {
  constructor(data, options) {
    super(data, options, voronoiMeshDefaults);
    this.fill = "none";
  }
  _render(delaunay, dimensions) {
    return voronoiof(delaunay, dimensions).render();
  }
};
function voronoiof(delaunay, dimensions) {
  const { width: width2, height: height2, marginTop: marginTop2, marginRight: marginRight2, marginBottom: marginBottom2, marginLeft: marginLeft2 } = dimensions;
  return delaunay.voronoi([marginLeft2, marginTop2, width2 - marginRight2, height2 - marginBottom2]);
}
function delaunayMark(DelaunayMark, data, { x: x3, y: y3, ...options } = {}) {
  [x3, y3] = maybeTuple(x3, y3);
  return new DelaunayMark(data, { ...options, x: x3, y: y3 });
}
function delaunayLink(data, options) {
  return delaunayMark(DelaunayLink, data, options);
}
function delaunayMesh(data, options) {
  return delaunayMark(DelaunayMesh, data, options);
}
function hull(data, options) {
  return delaunayMark(Hull, data, options);
}
function voronoi(data, options) {
  return delaunayMark(Voronoi2, data, options);
}
function voronoiMesh(data, options) {
  return delaunayMark(VoronoiMesh, data, options);
}

// ../../node_modules/@observablehq/plot/src/marks/density.js
var defaults17 = {
  ariaLabel: "density",
  fill: "none",
  stroke: "currentColor",
  strokeMiterlimit: 1
};
var Density = class extends Mark {
  constructor(data, { x: x3, y: y3, z: z2, weight, fill, stroke, ...options } = {}) {
    const fillDensity = isDensity(fill) && (fill = "currentColor", true);
    const strokeDensity = isDensity(stroke) && (stroke = "currentColor", true);
    super(
      data,
      {
        x: { value: x3, scale: "x", optional: true },
        y: { value: y3, scale: "y", optional: true },
        z: { value: maybeZ({ z: z2, fill, stroke }), optional: true },
        weight: { value: weight, optional: true }
      },
      densityInitializer({ ...options, fill, stroke }, fillDensity, strokeDensity),
      defaults17
    );
    if (fillDensity)
      this.fill = void 0;
    if (strokeDensity)
      this.stroke = void 0;
    this.z = z2;
  }
  filter(index2) {
    return index2;
  }
  render(index2, scales, channels, dimensions, context) {
    const { contours } = channels;
    const path2 = path_default();
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, {}).call(
      (g2) => g2.selectAll().data(index2).enter().append("path").call(applyDirectStyles, this).call(applyChannelStyles, this, channels).attr("d", (i2) => path2(contours[i2]))
    ).node();
  }
};
function density(data, { x: x3, y: y3, ...options } = {}) {
  [x3, y3] = maybeTuple(x3, y3);
  return new Density(data, { ...options, x: x3, y: y3 });
}
var dropChannels = /* @__PURE__ */ new Set(["x", "y", "z", "weight"]);
function densityInitializer(options, fillDensity, strokeDensity) {
  const k3 = 100;
  let { bandwidth, thresholds } = options;
  bandwidth = bandwidth === void 0 ? 20 : +bandwidth;
  thresholds = thresholds === void 0 ? 20 : typeof thresholds?.[Symbol.iterator] === "function" ? coerceNumbers(thresholds) : +thresholds;
  return initializer(options, function(data, facets, channels, scales, dimensions, context) {
    const W2 = channels.weight ? coerceNumbers(channels.weight.value) : null;
    const Z3 = channels.z?.value;
    const { z: z2 } = this;
    const [cx, cy] = applyFrameAnchor(this, dimensions);
    const { width: width2, height: height2 } = dimensions;
    const { x: X3, y: Y3 } = applyPosition(channels, scales, context);
    const newChannels = Object.fromEntries(
      Object.entries(channels).filter(([key]) => !dropChannels.has(key)).map(([key, channel]) => [key, { ...channel, value: [] }])
    );
    const FD = fillDensity && [];
    const SD = strokeDensity && [];
    const density3 = density_default().x(X3 ? (i2) => X3[i2] : cx).y(Y3 ? (i2) => Y3[i2] : cy).weight(W2 ? (i2) => W2[i2] : 1).size([width2, height2]).bandwidth(bandwidth);
    const facetsContours = [];
    for (const facet of facets) {
      const facetContours = [];
      facetsContours.push(facetContours);
      for (const index2 of Z3 ? groupZ2(facet, Z3, z2) : [facet]) {
        const contour3 = density3.contours(index2);
        facetContours.push([index2, contour3]);
      }
    }
    let T2 = thresholds;
    if (!(T2 instanceof TypedArray)) {
      let maxValue = 0;
      for (const facetContours of facetsContours) {
        for (const [, contour3] of facetContours) {
          const max4 = contour3.max;
          if (max4 > maxValue)
            maxValue = max4;
        }
      }
      T2 = Float64Array.from({ length: thresholds - 1 }, (_2, i2) => maxValue * k3 * (i2 + 1) / thresholds);
    }
    const newFacets = [];
    const contours = [];
    for (const facetContours of facetsContours) {
      const newFacet = [];
      newFacets.push(newFacet);
      for (const [index2, contour3] of facetContours) {
        for (const t of T2) {
          newFacet.push(contours.length);
          contours.push(contour3(t / k3));
          if (FD)
            FD.push(t);
          if (SD)
            SD.push(t);
          for (const key in newChannels) {
            newChannels[key].value.push(channels[key].value[index2[0]]);
          }
        }
      }
    }
    if (FD)
      FD.push(0);
    if (SD)
      SD.push(0);
    return {
      data,
      facets: newFacets,
      channels: {
        ...newChannels,
        ...FD && { fill: { value: FD, scale: "color" } },
        ...SD && { stroke: { value: SD, scale: "color" } },
        contours: { value: contours }
      }
    };
  });
}
function isDensity(value) {
  return /^density$/i.test(value);
}

// ../../node_modules/@observablehq/plot/src/marks/geo.js
var defaults18 = {
  ariaLabel: "geo",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 1,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  strokeMiterlimit: 1
};
var Geo = class extends Mark {
  constructor(data, options = {}) {
    const [vr, cr] = maybeNumberChannel(options.r, 3);
    super(
      data,
      {
        geometry: { value: options.geometry, scale: "projection" },
        r: { value: vr, scale: "r", filter: positive, optional: true }
      },
      withDefaultSort(options),
      defaults18
    );
    this.r = cr;
  }
  render(index2, scales, channels, dimensions, context) {
    const { geometry: G, r: R } = channels;
    const path2 = path_default(context.projection ?? scaleProjection2(scales));
    const { r } = this;
    if (negative(r))
      index2 = [];
    else if (r !== void 0)
      path2.pointRadius(r);
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, scales).call((g2) => {
      g2.selectAll().data(index2).enter().append("path").call(applyDirectStyles, this).attr("d", R ? (i2) => path2.pointRadius(R[i2])(G[i2]) : (i2) => path2(G[i2])).call(applyChannelStyles, this, channels);
    }).node();
  }
};
function scaleProjection2({ x: X3, y: Y3 }) {
  if (X3 || Y3) {
    X3 ??= (x3) => x3;
    Y3 ??= (y3) => y3;
    return transform_default({
      point(x3, y3) {
        this.stream.point(X3(x3), Y3(y3));
      }
    });
  }
}
function geo(data, { geometry = identity7, ...options } = {}) {
  switch (data?.type) {
    case "FeatureCollection":
      data = data.features;
      break;
    case "GeometryCollection":
      data = data.geometries;
      break;
    case "Feature":
    case "LineString":
    case "MultiLineString":
    case "MultiPoint":
    case "MultiPolygon":
    case "Point":
    case "Polygon":
    case "Sphere":
      data = [data];
      break;
  }
  return new Geo(data, { geometry, ...options });
}
function sphere({ strokeWidth = 1.5, ...options } = {}) {
  return geo({ type: "Sphere" }, { strokeWidth, ...options });
}
function graticule2({ strokeOpacity = 0.1, ...options } = {}) {
  return geo(graticule10(), { strokeOpacity, ...options });
}

// ../../node_modules/@observablehq/plot/src/transforms/hexbin.js
var ox = 0.5;
var oy = 0;
function hexbin(outputs = { fill: "count" }, { binWidth, ...options } = {}) {
  const { z: z2 } = options;
  binWidth = binWidth === void 0 ? 20 : number5(binWidth);
  outputs = maybeOutputs(outputs, options);
  if (hasOutput(outputs, "fill"))
    options.channels = { ...options.channels, fill: { value: [] } };
  if (options.symbol === void 0)
    options.symbol = "hexagon";
  if (options.r === void 0 && !hasOutput(outputs, "r"))
    options.r = binWidth / 2;
  return initializer(options, (data, facets, channels, scales, _2, context) => {
    let { x: X3, y: Y3, z: Z3, fill: F2, stroke: S2, symbol: Q2 } = channels;
    if (X3 === void 0)
      throw new Error("missing channel: x");
    if (Y3 === void 0)
      throw new Error("missing channel: y");
    ({ x: X3, y: Y3 } = applyPosition(channels, scales, context));
    Z3 = Z3 ? Z3.value : valueof(data, z2);
    F2 = F2?.value;
    S2 = S2?.value;
    Q2 = Q2?.value;
    const G = maybeSubgroup(outputs, { z: Z3, fill: F2, stroke: S2, symbol: Q2 });
    const GZ = Z3 && [];
    const GF = F2 && [];
    const GS = S2 && [];
    const GQ = Q2 && [];
    const binFacets = [];
    const BX = [];
    const BY = [];
    let i2 = -1;
    for (const o of outputs)
      o.initialize(data);
    for (const facet of facets) {
      const binFacet = [];
      for (const o of outputs)
        o.scope("facet", facet);
      for (const [f2, I2] of maybeGroup(facet, G)) {
        for (const bin3 of hbin(I2, X3, Y3, binWidth)) {
          binFacet.push(++i2);
          BX.push(bin3.x);
          BY.push(bin3.y);
          if (Z3)
            GZ.push(G === Z3 ? f2 : Z3[bin3[0]]);
          if (F2)
            GF.push(G === F2 ? f2 : F2[bin3[0]]);
          if (S2)
            GS.push(G === S2 ? f2 : S2[bin3[0]]);
          if (Q2)
            GQ.push(G === Q2 ? f2 : Q2[bin3[0]]);
          for (const o of outputs)
            o.reduce(bin3);
        }
      }
      binFacets.push(binFacet);
    }
    const sx = channels.x.scale;
    const sy = channels.y.scale;
    const binChannels = {
      x: { value: BX, source: scales[sx] ? { value: map2(BX, scales[sx].invert), scale: sx } : null },
      y: { value: BY, source: scales[sy] ? { value: map2(BY, scales[sy].invert), scale: sy } : null },
      ...Z3 && { z: { value: GZ } },
      ...F2 && { fill: { value: GF, scale: "auto" } },
      ...S2 && { stroke: { value: GS, scale: "auto" } },
      ...Q2 && { symbol: { value: GQ, scale: "auto" } },
      ...Object.fromEntries(
        outputs.map(({ name: name2, output }) => [
          name2,
          {
            scale: "auto",
            label: output.label,
            radius: name2 === "r" ? binWidth / 2 : void 0,
            value: output.transform()
          }
        ])
      )
    };
    return { data, facets: binFacets, channels: binChannels };
  });
}
function hbin(I2, X3, Y3, dx) {
  const dy = dx * (1.5 / sqrt35);
  const bins2 = /* @__PURE__ */ new Map();
  for (const i2 of I2) {
    let px = X3[i2], py = Y3[i2];
    if (isNaN(px) || isNaN(py))
      continue;
    let pj = Math.round(py = (py - oy) / dy), pi5 = Math.round(px = (px - ox) / dx - (pj & 1) / 2), py1 = py - pj;
    if (Math.abs(py1) * 3 > 1) {
      let px1 = px - pi5, pi22 = pi5 + (px < pi5 ? -1 : 1) / 2, pj2 = pj + (py < pj ? -1 : 1), px2 = px - pi22, py2 = py - pj2;
      if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2)
        pi5 = pi22 + (pj & 1 ? 1 : -1) / 2, pj = pj2;
    }
    const key = `${pi5},${pj}`;
    let bin3 = bins2.get(key);
    if (bin3 === void 0) {
      bins2.set(key, bin3 = []);
      bin3.x = (pi5 + (pj & 1) / 2) * dx + ox;
      bin3.y = pj * dy + oy;
    }
    bin3.push(i2);
  }
  return bins2.values();
}

// ../../node_modules/@observablehq/plot/src/marks/hexgrid.js
var defaults19 = {
  ariaLabel: "hexgrid",
  fill: "none",
  stroke: "currentColor",
  strokeOpacity: 0.1
};
function hexgrid(options) {
  return new Hexgrid(options);
}
var Hexgrid = class extends Mark {
  constructor({ binWidth = 20, clip = true, ...options } = {}) {
    super(singleton, void 0, { clip, ...options }, defaults19);
    this.binWidth = number5(binWidth);
  }
  render(index2, scales, channels, dimensions, context) {
    const { binWidth } = this;
    const { marginTop: marginTop2, marginRight: marginRight2, marginBottom: marginBottom2, marginLeft: marginLeft2, width: width2, height: height2 } = dimensions;
    const x06 = marginLeft2 - ox, x12 = width2 - marginRight2 - ox, y06 = marginTop2 - oy, y12 = height2 - marginBottom2 - oy, rx = binWidth / 2, ry = rx * sqrt4_3, hy = ry / 2, wx = rx * 2, wy = ry * 1.5, i0 = Math.floor(x06 / wx), i1 = Math.ceil(x12 / wx), j0 = Math.floor((y06 + hy) / wy), j1 = Math.ceil((y12 - hy) / wy) + 1, path2 = `m0,${round(-ry)}l${round(rx)},${round(hy)}v${round(ry)}l${round(-rx)},${round(hy)}`;
    let d = path2;
    for (let j2 = j0; j2 < j1; ++j2) {
      for (let i2 = i0; i2 < i1; ++i2) {
        d += `M${round(i2 * wx + (j2 & 1) * rx)},${round(j2 * wy)}${path2}`;
      }
    }
    return create3("svg:g", context).datum(0).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, {}, offset + ox, offset + oy).call((g2) => g2.append("path").call(applyDirectStyles, this).call(applyChannelStyles, this, channels).attr("d", d)).node();
  }
};
function round(x3) {
  return Math.round(x3 * 1e3) / 1e3;
}

// ../../node_modules/@observablehq/plot/src/marks/image.js
var defaults20 = {
  ariaLabel: "image",
  fill: null,
  stroke: null
};
function isPath(string2) {
  return /^\.*\//.test(string2);
}
function isUrl(string2) {
  return /^(blob|data|file|http|https):/i.test(string2);
}
function maybePathChannel(value) {
  return typeof value === "string" && (isPath(value) || isUrl(value)) ? [void 0, value] : [value, void 0];
}
var Image = class extends Mark {
  constructor(data, options = {}) {
    let { x: x3, y: y3, r, width: width2, height: height2, rotate, src, preserveAspectRatio, crossOrigin, frameAnchor, imageRendering } = options;
    if (r == null)
      r = void 0;
    if (r === void 0 && width2 === void 0 && height2 === void 0)
      width2 = height2 = 16;
    else if (width2 === void 0 && height2 !== void 0)
      width2 = height2;
    else if (height2 === void 0 && width2 !== void 0)
      height2 = width2;
    const [vs, cs] = maybePathChannel(src);
    const [vr, cr] = maybeNumberChannel(r);
    const [vw, cw] = maybeNumberChannel(width2, cr !== void 0 ? cr * 2 : void 0);
    const [vh, ch] = maybeNumberChannel(height2, cr !== void 0 ? cr * 2 : void 0);
    const [va, ca3] = maybeNumberChannel(rotate, 0);
    super(
      data,
      {
        x: { value: x3, scale: "x", optional: true },
        y: { value: y3, scale: "y", optional: true },
        r: { value: vr, scale: "r", filter: positive, optional: true },
        width: { value: vw, filter: positive, optional: true },
        height: { value: vh, filter: positive, optional: true },
        rotate: { value: va, optional: true },
        src: { value: vs, optional: true }
      },
      withDefaultSort(options),
      defaults20
    );
    this.src = cs;
    this.width = cw;
    this.rotate = ca3;
    this.height = ch;
    this.r = cr;
    this.preserveAspectRatio = impliedString(preserveAspectRatio, "xMidYMid");
    this.crossOrigin = string(crossOrigin);
    this.frameAnchor = maybeFrameAnchor(frameAnchor);
    this.imageRendering = impliedString(imageRendering, "auto");
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: x3, y: y3 } = scales;
    const { x: X3, y: Y3, width: W2, height: H2, r: R, rotate: A5, src: S2 } = channels;
    const { r, width: width2, height: height2, rotate } = this;
    const [cx, cy] = applyFrameAnchor(this, dimensions);
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, { x: X3 && x3, y: Y3 && y3 }).call(
      (g2) => g2.selectAll().data(index2).enter().append("image").call(applyDirectStyles, this).attr("x", position2(X3, W2, R, cx, width2, r)).attr("y", position2(Y3, H2, R, cy, height2, r)).attr("width", W2 ? (i2) => W2[i2] : width2 !== void 0 ? width2 : R ? (i2) => R[i2] * 2 : r * 2).attr("height", H2 ? (i2) => H2[i2] : height2 !== void 0 ? height2 : R ? (i2) => R[i2] * 2 : r * 2).attr("transform", A5 ? (i2) => `rotate(${A5[i2]})` : rotate ? `rotate(${rotate})` : null).attr("transform-origin", A5 || rotate ? template`${X3 ? (i2) => X3[i2] : cx}px ${Y3 ? (i2) => Y3[i2] : cy}px` : null).call(applyAttr, "href", S2 ? (i2) => S2[i2] : this.src).call(applyAttr, "preserveAspectRatio", this.preserveAspectRatio).call(applyAttr, "crossorigin", this.crossOrigin).call(applyAttr, "image-rendering", this.imageRendering).call(applyAttr, "clip-path", R ? (i2) => `circle(${R[i2]}px)` : r !== void 0 ? `circle(${r}px)` : null).call(applyChannelStyles, this, channels)
    ).node();
  }
};
function position2(X3, W2, R, x3, w2, r) {
  return W2 && X3 ? (i2) => X3[i2] - W2[i2] / 2 : W2 ? (i2) => x3 - W2[i2] / 2 : X3 && w2 !== void 0 ? (i2) => X3[i2] - w2 / 2 : w2 !== void 0 ? x3 - w2 / 2 : R && X3 ? (i2) => X3[i2] - R[i2] : R ? (i2) => x3 - R[i2] : X3 ? (i2) => X3[i2] - r : x3 - r;
}
function image(data, { x: x3, y: y3, ...options } = {}) {
  if (options.frameAnchor === void 0)
    [x3, y3] = maybeTuple(x3, y3);
  return new Image(data, { ...options, x: x3, y: y3 });
}

// ../../node_modules/@observablehq/plot/src/stats.js
function ibetainv(p2, a2, b2) {
  var EPS2 = 1e-8;
  var a1 = a2 - 1;
  var b1 = b2 - 1;
  var j2 = 0;
  var lna, lnb, pp, t, u4, err, x3, al, h2, w2, afac;
  if (p2 <= 0)
    return 0;
  if (p2 >= 1)
    return 1;
  if (a2 >= 1 && b2 >= 1) {
    pp = p2 < 0.5 ? p2 : 1 - p2;
    t = Math.sqrt(-2 * Math.log(pp));
    x3 = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
    if (p2 < 0.5)
      x3 = -x3;
    al = (x3 * x3 - 3) / 6;
    h2 = 2 / (1 / (2 * a2 - 1) + 1 / (2 * b2 - 1));
    w2 = x3 * Math.sqrt(al + h2) / h2 - (1 / (2 * b2 - 1) - 1 / (2 * a2 - 1)) * (al + 5 / 6 - 2 / (3 * h2));
    x3 = a2 / (a2 + b2 * Math.exp(2 * w2));
  } else {
    lna = Math.log(a2 / (a2 + b2));
    lnb = Math.log(b2 / (a2 + b2));
    t = Math.exp(a2 * lna) / a2;
    u4 = Math.exp(b2 * lnb) / b2;
    w2 = t + u4;
    if (p2 < t / w2)
      x3 = Math.pow(a2 * w2 * p2, 1 / a2);
    else
      x3 = 1 - Math.pow(b2 * w2 * (1 - p2), 1 / b2);
  }
  afac = -gammaln(a2) - gammaln(b2) + gammaln(a2 + b2);
  for (; j2 < 10; j2++) {
    if (x3 === 0 || x3 === 1)
      return x3;
    err = ibeta(x3, a2, b2) - p2;
    t = Math.exp(a1 * Math.log(x3) + b1 * Math.log(1 - x3) + afac);
    u4 = err / t;
    x3 -= t = u4 / (1 - 0.5 * Math.min(1, u4 * (a1 / x3 - b1 / (1 - x3))));
    if (x3 <= 0)
      x3 = 0.5 * (x3 + t);
    if (x3 >= 1)
      x3 = 0.5 * (x3 + t + 1);
    if (Math.abs(t) < EPS2 * x3 && j2 > 0)
      break;
  }
  return x3;
}
function ibeta(x3, a2, b2) {
  var bt = x3 === 0 || x3 === 1 ? 0 : Math.exp(gammaln(a2 + b2) - gammaln(a2) - gammaln(b2) + a2 * Math.log(x3) + b2 * Math.log(1 - x3));
  if (x3 < 0 || x3 > 1)
    return false;
  if (x3 < (a2 + 1) / (a2 + b2 + 2))
    return bt * betacf(x3, a2, b2) / a2;
  return 1 - bt * betacf(1 - x3, b2, a2) / b2;
}
function betacf(x3, a2, b2) {
  var fpmin = 1e-30;
  var m2 = 1;
  var qab = a2 + b2;
  var qap = a2 + 1;
  var qam = a2 - 1;
  var c4 = 1;
  var d = 1 - qab * x3 / qap;
  var m22, aa2, del, h2;
  if (Math.abs(d) < fpmin)
    d = fpmin;
  d = 1 / d;
  h2 = d;
  for (; m2 <= 100; m2++) {
    m22 = 2 * m2;
    aa2 = m2 * (b2 - m2) * x3 / ((qam + m22) * (a2 + m22));
    d = 1 + aa2 * d;
    if (Math.abs(d) < fpmin)
      d = fpmin;
    c4 = 1 + aa2 / c4;
    if (Math.abs(c4) < fpmin)
      c4 = fpmin;
    d = 1 / d;
    h2 *= d * c4;
    aa2 = -(a2 + m2) * (qab + m2) * x3 / ((a2 + m22) * (qap + m22));
    d = 1 + aa2 * d;
    if (Math.abs(d) < fpmin)
      d = fpmin;
    c4 = 1 + aa2 / c4;
    if (Math.abs(c4) < fpmin)
      c4 = fpmin;
    d = 1 / d;
    del = d * c4;
    h2 *= del;
    if (Math.abs(del - 1) < 3e-7)
      break;
  }
  return h2;
}
function gammaln(x3) {
  var j2 = 0;
  var cof = [
    76.18009172947146,
    -86.5053203294167,
    24.01409824083091,
    -1.231739572450155,
    0.001208650973866179,
    -5395239384953e-18
  ];
  var ser = 1.000000000190015;
  var xx, y3, tmp3;
  tmp3 = (y3 = xx = x3) + 5.5;
  tmp3 -= (xx + 0.5) * Math.log(tmp3);
  for (; j2 < 6; j2++)
    ser += cof[j2] / ++y3;
  return Math.log(2.506628274631 * ser / xx) - tmp3;
}
function qt(p2, dof) {
  var x3 = ibetainv(2 * Math.min(p2, 1 - p2), 0.5 * dof, 0.5);
  x3 = Math.sqrt(dof * (1 - x3) / x3);
  return p2 > 0.5 ? x3 : -x3;
}

// ../../node_modules/@observablehq/plot/src/marks/linearRegression.js
var defaults21 = {
  ariaLabel: "linear-regression",
  fill: "currentColor",
  fillOpacity: 0.1,
  stroke: "currentColor",
  strokeWidth: 1.5,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  strokeMiterlimit: 1
};
var LinearRegression = class extends Mark {
  constructor(data, options = {}) {
    const { x: x3, y: y3, z: z2, ci = 0.95, precision = 4 } = options;
    super(
      data,
      {
        x: { value: x3, scale: "x" },
        y: { value: y3, scale: "y" },
        z: { value: maybeZ(options), optional: true }
      },
      options,
      defaults21
    );
    this.z = z2;
    this.ci = +ci;
    this.precision = +precision;
    if (!(0 <= this.ci && this.ci < 1))
      throw new Error(`invalid ci; not in [0, 1): ${ci}`);
    if (!(this.precision > 0))
      throw new Error(`invalid precision: ${precision}`);
  }
  render(index2, scales, channels, dimensions, context) {
    const { x: X3, y: Y3, z: Z3 } = channels;
    const { ci } = this;
    return create3("svg:g", context).call(applyIndirectStyles, this, dimensions, context).call(applyTransform, this, scales).call(
      (g2) => g2.selectAll().data(Z3 ? groupZ2(index2, Z3, this.z) : [index2]).enter().call(
        (enter) => enter.append("path").attr("fill", "none").call(applyDirectStyles, this).call(applyGroupedChannelStyles, this, { ...channels, fill: null, fillOpacity: null }).attr("d", (I2) => this._renderLine(I2, X3, Y3)).call(
          ci && !isNone(this.fill) ? (path2) => path2.select(pathBefore).attr("stroke", "none").call(applyDirectStyles, this).call(applyGroupedChannelStyles, this, {
            ...channels,
            stroke: null,
            strokeOpacity: null,
            strokeWidth: null
          }).attr("d", (I2) => this._renderBand(I2, X3, Y3)) : () => {
          }
        )
      )
    ).node();
  }
};
function pathBefore() {
  return this.parentNode.insertBefore(this.ownerDocument.createElementNS(namespaces_default.svg, "path"), this);
}
var LinearRegressionX = class extends LinearRegression {
  constructor(data, options) {
    super(data, options);
  }
  _renderBand(I2, X3, Y3) {
    const { ci, precision } = this;
    const [y12, y22] = extent(I2, (i2) => Y3[i2]);
    const f2 = linearRegressionF(I2, Y3, X3);
    const g2 = confidenceIntervalF(I2, Y3, X3, (1 - ci) / 2, f2);
    return area_default3().y((y3) => y3).x0((y3) => g2(y3, -1)).x1((y3) => g2(y3, 1))(range(y12, y22 - precision / 2, precision).concat(y22));
  }
  _renderLine(I2, X3, Y3) {
    const [y12, y22] = extent(I2, (i2) => Y3[i2]);
    const f2 = linearRegressionF(I2, Y3, X3);
    return `M${f2(y12)},${y12}L${f2(y22)},${y22}`;
  }
};
var LinearRegressionY = class extends LinearRegression {
  constructor(data, options) {
    super(data, options);
  }
  _renderBand(I2, X3, Y3) {
    const { ci, precision } = this;
    const [x12, x22] = extent(I2, (i2) => X3[i2]);
    const f2 = linearRegressionF(I2, X3, Y3);
    const g2 = confidenceIntervalF(I2, X3, Y3, (1 - ci) / 2, f2);
    return area_default3().x((x3) => x3).y0((x3) => g2(x3, -1)).y1((x3) => g2(x3, 1))(range(x12, x22 - precision / 2, precision).concat(x22));
  }
  _renderLine(I2, X3, Y3) {
    const [x12, x22] = extent(I2, (i2) => X3[i2]);
    const f2 = linearRegressionF(I2, X3, Y3);
    return `M${x12},${f2(x12)}L${x22},${f2(x22)}`;
  }
};
function linearRegressionX(data, { y: y3 = indexOf, x: x3 = identity7, stroke, fill = isNoneish(stroke) ? "currentColor" : stroke, ...options } = {}) {
  return new LinearRegressionX(data, maybeDenseIntervalY({ ...options, x: x3, y: y3, fill, stroke }));
}
function linearRegressionY(data, { x: x3 = indexOf, y: y3 = identity7, stroke, fill = isNoneish(stroke) ? "currentColor" : stroke, ...options } = {}) {
  return new LinearRegressionY(data, maybeDenseIntervalX({ ...options, x: x3, y: y3, fill, stroke }));
}
function linearRegressionF(I2, X3, Y3) {
  let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;
  for (const i2 of I2) {
    const xi = X3[i2];
    const yi = Y3[i2];
    sumX += xi;
    sumY += yi;
    sumXY += xi * yi;
    sumX2 += xi * xi;
  }
  const n = I2.length;
  const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
  const intercept = (sumY - slope * sumX) / n;
  return (x3) => slope * x3 + intercept;
}
function confidenceIntervalF(I2, X3, Y3, p2, f2) {
  const mean3 = sum4(I2, (i2) => X3[i2]) / I2.length;
  let a2 = 0, b2 = 0;
  for (const i2 of I2) {
    a2 += (X3[i2] - mean3) ** 2;
    b2 += (Y3[i2] - f2(X3[i2])) ** 2;
  }
  const sy = Math.sqrt(b2 / (I2.length - 2));
  const t = qt(p2, I2.length - 2);
  return (x3, k3) => {
    const Y4 = f2(x3);
    const se2 = sy * Math.sqrt(1 / I2.length + (x3 - mean3) ** 2 / a2);
    return Y4 + k3 * t * se2;
  };
}

// ../../node_modules/@observablehq/plot/src/transforms/tree.js
function treeNode({
  path: path2 = identity7,
  // the delimited path
  delimiter,
  // how the path is separated
  frameAnchor,
  treeLayout = tree_default,
  treeSort,
  treeSeparation,
  treeAnchor,
  ...options
} = {}) {
  treeAnchor = maybeTreeAnchor(treeAnchor);
  treeSort = maybeTreeSort(treeSort);
  if (frameAnchor === void 0)
    frameAnchor = treeAnchor.frameAnchor;
  const normalize4 = normalizer(delimiter);
  const outputs = treeOutputs(options, maybeNodeValue);
  const [X3, setX] = column2();
  const [Y3, setY] = column2();
  return {
    x: X3,
    y: Y3,
    frameAnchor,
    ...basic(options, (data, facets) => {
      const P2 = normalize4(valueof(data, path2));
      const X4 = setX([]);
      const Y4 = setY([]);
      let treeIndex = -1;
      const treeData = [];
      const treeFacets = [];
      const rootof = stratify_default().path((i2) => P2[i2]);
      const layout = treeLayout();
      if (layout.nodeSize)
        layout.nodeSize([1, 1]);
      if (layout.separation && treeSeparation !== void 0)
        layout.separation(treeSeparation ?? one2);
      for (const o of outputs)
        o[output_values] = o[output_setValues]([]);
      for (const facet of facets) {
        const treeFacet = [];
        const root2 = rootof(facet.filter((i2) => P2[i2] != null)).each((node) => node.data = data[node.data]);
        if (treeSort != null)
          root2.sort(treeSort);
        layout(root2);
        for (const node of root2.descendants()) {
          treeFacet.push(++treeIndex);
          treeData[treeIndex] = node.data;
          treeAnchor.position(node, treeIndex, X4, Y4);
          for (const o of outputs)
            o[output_values][treeIndex] = o[output_evaluate](node);
        }
        treeFacets.push(treeFacet);
      }
      return { data: treeData, facets: treeFacets };
    }),
    ...Object.fromEntries(outputs)
  };
}
function treeLink({
  path: path2 = identity7,
  // the delimited path
  delimiter,
  // how the path is separated
  curve = "bump-x",
  stroke = "#555",
  strokeWidth = 1.5,
  strokeOpacity = 0.5,
  treeLayout = tree_default,
  treeSort,
  treeSeparation,
  treeAnchor,
  ...options
} = {}) {
  treeAnchor = maybeTreeAnchor(treeAnchor);
  treeSort = maybeTreeSort(treeSort);
  options = { curve, stroke, strokeWidth, strokeOpacity, ...options };
  const normalize4 = normalizer(delimiter);
  const outputs = treeOutputs(options, maybeLinkValue);
  const [X13, setX1] = column2();
  const [X24, setX2] = column2();
  const [Y13, setY1] = column2();
  const [Y24, setY2] = column2();
  return {
    x1: X13,
    x2: X24,
    y1: Y13,
    y2: Y24,
    ...basic(options, (data, facets) => {
      const P2 = normalize4(valueof(data, path2));
      const X14 = setX1([]);
      const X25 = setX2([]);
      const Y14 = setY1([]);
      const Y25 = setY2([]);
      let treeIndex = -1;
      const treeData = [];
      const treeFacets = [];
      const rootof = stratify_default().path((i2) => P2[i2]);
      const layout = treeLayout();
      if (layout.nodeSize)
        layout.nodeSize([1, 1]);
      if (layout.separation && treeSeparation !== void 0)
        layout.separation(treeSeparation ?? one2);
      for (const o of outputs)
        o[output_values] = o[output_setValues]([]);
      for (const facet of facets) {
        const treeFacet = [];
        const root2 = rootof(facet.filter((i2) => P2[i2] != null)).each((node) => node.data = data[node.data]);
        if (treeSort != null)
          root2.sort(treeSort);
        layout(root2);
        for (const { source, target } of root2.links()) {
          treeFacet.push(++treeIndex);
          treeData[treeIndex] = target.data;
          treeAnchor.position(source, treeIndex, X14, Y14);
          treeAnchor.position(target, treeIndex, X25, Y25);
          for (const o of outputs)
            o[output_values][treeIndex] = o[output_evaluate](target, source);
        }
        treeFacets.push(treeFacet);
      }
      return { data: treeData, facets: treeFacets };
    }),
    ...Object.fromEntries(outputs)
  };
}
function maybeTreeAnchor(anchor = "left") {
  switch (`${anchor}`.trim().toLowerCase()) {
    case "left":
      return treeAnchorLeft;
    case "right":
      return treeAnchorRight;
  }
  throw new Error(`invalid tree anchor: ${anchor}`);
}
var treeAnchorLeft = {
  frameAnchor: "left",
  dx: 6,
  position({ x: x3, y: y3 }, i2, X3, Y3) {
    X3[i2] = y3;
    Y3[i2] = -x3;
  }
};
var treeAnchorRight = {
  frameAnchor: "right",
  dx: -6,
  position({ x: x3, y: y3 }, i2, X3, Y3) {
    X3[i2] = -y3;
    Y3[i2] = -x3;
  }
};
function maybeTreeSort(sort3) {
  return sort3 == null || typeof sort3 === "function" ? sort3 : `${sort3}`.trim().toLowerCase().startsWith("node:") ? nodeSort(maybeNodeValue(sort3)) : nodeSort(nodeData(sort3));
}
function nodeSort(value) {
  return (a2, b2) => ascendingDefined2(value(a2), value(b2));
}
function nodeData(field2) {
  return (node) => node.data?.[field2];
}
function normalizer(delimiter = "/") {
  return `${delimiter}` === "/" ? (P2) => P2 : (P2) => P2.map(replaceAll(delimiter, "/"));
}
function replaceAll(search2, replace) {
  search2 = new RegExp(regexEscape(search2), "g");
  return (value) => value == null ? null : `${value}`.replace(search2, replace);
}
function regexEscape(string2) {
  return `${string2}`.replace(/[\\^$*+?.()|[\]{}]/g, "\\$&");
}
function isNodeValue(option) {
  return isObject4(option) && typeof option.node === "function";
}
function isLinkValue(option) {
  return isObject4(option) && typeof option.link === "function";
}
function maybeNodeValue(value) {
  if (isNodeValue(value))
    return value.node;
  value = `${value}`.trim().toLowerCase();
  if (!value.startsWith("node:"))
    return;
  switch (value) {
    case "node:name":
      return nodeName;
    case "node:path":
      return nodePath;
    case "node:internal":
      return nodeInternal;
    case "node:depth":
      return nodeDepth;
    case "node:height":
      return nodeHeight;
  }
  throw new Error(`invalid node value: ${value}`);
}
function maybeLinkValue(value) {
  if (isNodeValue(value))
    return value.node;
  if (isLinkValue(value))
    return value.link;
  value = `${value}`.trim().toLowerCase();
  if (!value.startsWith("node:") && !value.startsWith("parent:"))
    return;
  switch (value) {
    case "parent:name":
      return parentValue(nodeName);
    case "parent:path":
      return parentValue(nodePath);
    case "parent:depth":
      return parentValue(nodeDepth);
    case "parent:height":
      return parentValue(nodeHeight);
    case "node:name":
      return nodeName;
    case "node:path":
      return nodePath;
    case "node:internal":
      return nodeInternal;
    case "node:depth":
      return nodeDepth;
    case "node:height":
      return nodeHeight;
  }
  throw new Error(`invalid link value: ${value}`);
}
function nodePath(node) {
  return node.id;
}
function nodeName(node) {
  return nameof(node.id);
}
function nodeDepth(node) {
  return node.depth;
}
function nodeHeight(node) {
  return node.height;
}
function nodeInternal(node) {
  return !!node.children;
}
function parentValue(evaluate) {
  return (child, parent) => parent == null ? void 0 : evaluate(parent);
}
function nameof(path2) {
  let i2 = path2.length;
  while (--i2 > 0)
    if (slash2(path2, i2))
      break;
  return path2.slice(i2 + 1);
}
function slash2(path2, i2) {
  if (path2[i2] === "/") {
    let k3 = 0;
    while (i2 > 0 && path2[--i2] === "\\")
      ++k3;
    if ((k3 & 1) === 0)
      return true;
  }
  return false;
}
var output_setValues = 2;
var output_evaluate = 3;
var output_values = 4;
function treeOutputs(options, maybeTreeValue) {
  const outputs = [];
  for (const name2 in options) {
    const value = options[name2];
    const treeValue = maybeTreeValue(value);
    if (treeValue !== void 0) {
      outputs.push([name2, ...column2(value), treeValue]);
    }
  }
  return outputs;
}

// ../../node_modules/@observablehq/plot/src/marks/tree.js
function tree(data, {
  fill,
  stroke,
  strokeWidth,
  strokeOpacity,
  strokeLinejoin,
  strokeLinecap,
  strokeMiterlimit,
  strokeDasharray,
  strokeDashoffset,
  marker,
  markerStart = marker,
  markerEnd = marker,
  dot: dotDot = isNoneish(markerStart) && isNoneish(markerEnd),
  text: textText = "node:name",
  textStroke = "white",
  title = "node:path",
  dx,
  dy,
  ...options
} = {}) {
  if (dx === void 0)
    dx = maybeTreeAnchor(options.treeAnchor).dx;
  return marks(
    link2(
      data,
      treeLink({
        markerStart,
        markerEnd,
        stroke: stroke !== void 0 ? stroke : fill === void 0 ? "node:internal" : fill,
        strokeWidth,
        strokeOpacity,
        strokeLinejoin,
        strokeLinecap,
        strokeMiterlimit,
        strokeDasharray,
        strokeDashoffset,
        ...options
      })
    ),
    dotDot ? dot(data, treeNode({ fill: fill === void 0 ? "node:internal" : fill, title, ...options })) : null,
    textText != null ? text(
      data,
      treeNode({
        text: textText,
        fill: fill === void 0 ? "currentColor" : fill,
        stroke: textStroke,
        dx,
        dy,
        title,
        ...options
      })
    ) : null
  );
}
function cluster(data, options) {
  return tree(data, { ...options, treeLayout: cluster_default });
}

// ../../node_modules/@observablehq/plot/src/transforms/centroid.js
function centroid({ geometry = identity7, ...options } = {}) {
  return initializer({ ...options, x: null, y: null }, (data, facets, channels, scales, dimensions, { projection: projection3 }) => {
    const G = valueof(data, geometry);
    const n = G.length;
    const X3 = new Float64Array(n);
    const Y3 = new Float64Array(n);
    const path2 = path_default(projection3);
    for (let i2 = 0; i2 < n; ++i2)
      [X3[i2], Y3[i2]] = path2.centroid(G[i2]);
    return { data, facets, channels: { x: { value: X3, source: null }, y: { value: Y3, source: null } } };
  });
}
function geoCentroid({ geometry = identity7, ...options } = {}) {
  let C3;
  return {
    ...options,
    x: { transform: (data) => Float64Array.from(C3 = valueof(valueof(data, geometry), centroid_default), ([x3]) => x3) },
    y: { transform: () => Float64Array.from(C3, ([, y3]) => y3) }
  };
}

// ../../node_modules/@observablehq/plot/src/transforms/dodge.js
var import_interval_tree_1d = __toESM(require_interval_tree(), 1);
var anchorXLeft = ({ marginLeft: marginLeft2 }) => [1, marginLeft2];
var anchorXRight = ({ width: width2, marginRight: marginRight2 }) => [-1, width2 - marginRight2];
var anchorXMiddle = ({ width: width2, marginLeft: marginLeft2, marginRight: marginRight2 }) => [0, (marginLeft2 + width2 - marginRight2) / 2];
var anchorYTop = ({ marginTop: marginTop2 }) => [1, marginTop2];
var anchorYBottom = ({ height: height2, marginBottom: marginBottom2 }) => [-1, height2 - marginBottom2];
var anchorYMiddle = ({ height: height2, marginTop: marginTop2, marginBottom: marginBottom2 }) => [0, (marginTop2 + height2 - marginBottom2) / 2];
function maybeAnchor3(anchor) {
  return typeof anchor === "string" ? { anchor } : anchor;
}
function dodgeX(dodgeOptions = {}, options = {}) {
  if (arguments.length === 1)
    [dodgeOptions, options] = mergeOptions3(dodgeOptions);
  let { anchor = "left", padding: padding2 = 1, r = options.r } = maybeAnchor3(dodgeOptions);
  switch (`${anchor}`.toLowerCase()) {
    case "left":
      anchor = anchorXLeft;
      break;
    case "right":
      anchor = anchorXRight;
      break;
    case "middle":
      anchor = anchorXMiddle;
      break;
    default:
      throw new Error(`unknown dodge anchor: ${anchor}`);
  }
  return dodge("x", "y", anchor, number5(padding2), r, options);
}
function dodgeY(dodgeOptions = {}, options = {}) {
  if (arguments.length === 1)
    [dodgeOptions, options] = mergeOptions3(dodgeOptions);
  let { anchor = "bottom", padding: padding2 = 1, r = options.r } = maybeAnchor3(dodgeOptions);
  switch (`${anchor}`.toLowerCase()) {
    case "top":
      anchor = anchorYTop;
      break;
    case "bottom":
      anchor = anchorYBottom;
      break;
    case "middle":
      anchor = anchorYMiddle;
      break;
    default:
      throw new Error(`unknown dodge anchor: ${anchor}`);
  }
  return dodge("y", "x", anchor, number5(padding2), r, options);
}
function mergeOptions3(options) {
  const { anchor, padding: padding2, ...rest } = options;
  const { r } = rest;
  return [{ anchor, padding: padding2, r }, rest];
}
function dodge(y3, x3, anchor, padding2, r, options) {
  if (r != null && typeof r !== "number") {
    let { channels, sort: sort3, reverse: reverse3 } = options;
    channels = maybeNamed(channels);
    if (channels?.r === void 0)
      options = { ...options, channels: { ...channels, r: { value: r, scale: "r" } } };
    if (sort3 === void 0 && reverse3 === void 0)
      options.sort = { channel: "-r" };
  }
  return initializer(options, function(data, facets, channels, scales, dimensions, context) {
    let { [x3]: X3, r: R } = channels;
    if (!channels[x3])
      throw new Error(`missing channel: ${x3}`);
    ({ [x3]: X3 } = applyPosition(channels, scales, context));
    const cr = R ? void 0 : r !== void 0 ? number5(r) : this.r !== void 0 ? this.r : 3;
    if (R)
      R = valueof(R.value, scales[R.scale] || identity7, Float64Array);
    let [ky2, ty] = anchor(dimensions);
    const compare = ky2 ? compareAscending : compareSymmetric;
    const Y3 = new Float64Array(X3.length);
    const radius2 = R ? (i2) => R[i2] : () => cr;
    for (let I2 of facets) {
      const tree2 = (0, import_interval_tree_1d.default)();
      I2 = I2.filter(R ? (i2) => finite2(X3[i2]) && positive(R[i2]) : (i2) => finite2(X3[i2]));
      const intervals = new Float64Array(2 * I2.length + 2);
      for (const i2 of I2) {
        const ri = radius2(i2);
        const y06 = ky2 ? ri + padding2 : 0;
        const l = X3[i2] - ri;
        const h2 = X3[i2] + ri;
        let k3 = 2;
        tree2.queryInterval(l - padding2, h2 + padding2, ([, , j2]) => {
          const yj = Y3[j2] - y06;
          const dx = X3[i2] - X3[j2];
          const dr = padding2 + (R ? R[i2] + R[j2] : 2 * cr);
          const dy = Math.sqrt(dr * dr - dx * dx);
          intervals[k3++] = yj - dy;
          intervals[k3++] = yj + dy;
        });
        let candidates = intervals.slice(0, k3);
        if (ky2)
          candidates = candidates.filter((y4) => y4 >= 0);
        out:
          for (const y4 of candidates.sort(compare)) {
            for (let j2 = 0; j2 < k3; j2 += 2) {
              if (intervals[j2] + 1e-6 < y4 && y4 < intervals[j2 + 1] - 1e-6) {
                continue out;
              }
            }
            Y3[i2] = y4 + y06;
            break;
          }
        tree2.insert([l, h2, i2]);
      }
    }
    if (!ky2)
      ky2 = 1;
    for (const I2 of facets) {
      for (const i2 of I2) {
        Y3[i2] = Y3[i2] * ky2 + ty;
      }
    }
    return {
      data,
      facets,
      channels: {
        [y3]: { value: Y3, source: null },
        // don’t show in tooltip
        [x3]: { value: X3, source: channels[x3] },
        ...R && { r: { value: R, source: channels.r } }
      }
    };
  });
}
function compareSymmetric(a2, b2) {
  return Math.abs(a2) - Math.abs(b2);
}
function compareAscending(a2, b2) {
  return a2 - b2;
}

// ../../node_modules/@observablehq/plot/src/transforms/normalize.js
function normalizeX(basis2, options) {
  if (arguments.length === 1)
    ({ basis: basis2, ...options } = basis2);
  return mapX(normalize3(basis2), options);
}
function normalizeY(basis2, options) {
  if (arguments.length === 1)
    ({ basis: basis2, ...options } = basis2);
  return mapY(normalize3(basis2), options);
}
function normalize3(basis2) {
  if (basis2 === void 0)
    return normalizeFirst;
  if (typeof basis2 === "function")
    return normalizeBasis(taker(basis2));
  if (/^p\d{2}$/i.test(basis2))
    return normalizeAccessor(percentile(basis2));
  switch (`${basis2}`.toLowerCase()) {
    case "deviation":
      return normalizeDeviation;
    case "first":
      return normalizeFirst;
    case "last":
      return normalizeLast;
    case "max":
      return normalizeMax;
    case "mean":
      return normalizeMean;
    case "median":
      return normalizeMedian;
    case "min":
      return normalizeMin;
    case "sum":
      return normalizeSum;
    case "extent":
      return normalizeExtent;
  }
  throw new Error(`invalid basis: ${basis2}`);
}
function normalizeBasis(basis2) {
  return {
    mapIndex(I2, S2, T2) {
      const b2 = +basis2(I2, S2);
      for (const i2 of I2) {
        T2[i2] = S2[i2] === null ? NaN : S2[i2] / b2;
      }
    }
  };
}
function normalizeAccessor(f2) {
  return normalizeBasis((I2, S2) => f2(I2, (i2) => S2[i2]));
}
var normalizeExtent = {
  mapIndex(I2, S2, T2) {
    const [s1, s2] = extent(I2, (i2) => S2[i2]);
    const d = s2 - s1;
    for (const i2 of I2) {
      T2[i2] = S2[i2] === null ? NaN : (S2[i2] - s1) / d;
    }
  }
};
var normalizeFirst = normalizeBasis((I2, S2) => {
  for (let i2 = 0; i2 < I2.length; ++i2) {
    const s2 = S2[I2[i2]];
    if (defined(s2))
      return s2;
  }
});
var normalizeLast = normalizeBasis((I2, S2) => {
  for (let i2 = I2.length - 1; i2 >= 0; --i2) {
    const s2 = S2[I2[i2]];
    if (defined(s2))
      return s2;
  }
});
var normalizeDeviation = {
  mapIndex(I2, S2, T2) {
    const m2 = mean2(I2, (i2) => S2[i2]);
    const d = deviation(I2, (i2) => S2[i2]);
    for (const i2 of I2) {
      T2[i2] = S2[i2] === null ? NaN : d ? (S2[i2] - m2) / d : 0;
    }
  }
};
var normalizeMax = normalizeAccessor(max2);
var normalizeMean = normalizeAccessor(mean2);
var normalizeMedian = normalizeAccessor(median2);
var normalizeMin = normalizeAccessor(min2);
var normalizeSum = normalizeAccessor(sum4);

// ../../node_modules/@observablehq/plot/src/transforms/window.js
function windowX(windowOptions = {}, options) {
  if (arguments.length === 1)
    options = windowOptions;
  return mapX(window2(windowOptions), options);
}
function windowY(windowOptions = {}, options) {
  if (arguments.length === 1)
    options = windowOptions;
  return mapY(window2(windowOptions), options);
}
function window2(options = {}) {
  if (typeof options === "number")
    options = { k: options };
  let { k: k3, reduce, shift, anchor, strict } = options;
  if (anchor === void 0 && shift !== void 0) {
    anchor = maybeShift(shift);
    warn(`Warning: the shift option is deprecated; please use anchor "${anchor}" instead.`);
  }
  if (!((k3 = Math.floor(k3)) > 0))
    throw new Error(`invalid k: ${k3}`);
  return maybeReduce2(reduce)(k3, maybeAnchor4(anchor, k3), strict);
}
function maybeAnchor4(anchor = "middle", k3) {
  switch (`${anchor}`.toLowerCase()) {
    case "middle":
      return k3 - 1 >> 1;
    case "start":
      return 0;
    case "end":
      return k3 - 1;
  }
  throw new Error(`invalid anchor: ${anchor}`);
}
function maybeShift(shift) {
  switch (`${shift}`.toLowerCase()) {
    case "centered":
      return "middle";
    case "leading":
      return "start";
    case "trailing":
      return "end";
  }
  throw new Error(`invalid shift: ${shift}`);
}
function maybeReduce2(reduce = "mean") {
  if (typeof reduce === "string") {
    if (/^p\d{2}$/i.test(reduce))
      return reduceAccessor2(percentile(reduce));
    switch (reduce.toLowerCase()) {
      case "deviation":
        return reduceAccessor2(deviation);
      case "max":
        return reduceArray((I2, V2) => max2(I2, (i2) => V2[i2]));
      case "mean":
        return reduceMean;
      case "median":
        return reduceAccessor2(median2);
      case "min":
        return reduceArray((I2, V2) => min2(I2, (i2) => V2[i2]));
      case "mode":
        return reduceArray((I2, V2) => mode2(I2, (i2) => V2[i2]));
      case "sum":
        return reduceSum2;
      case "variance":
        return reduceAccessor2(variance2);
      case "difference":
        return reduceDifference;
      case "ratio":
        return reduceRatio;
      case "first":
        return reduceFirst2;
      case "last":
        return reduceLast2;
    }
  }
  if (typeof reduce !== "function")
    throw new Error(`invalid reduce: ${reduce}`);
  return reduceArray(taker(reduce));
}
function slice4(I2, i2, j2) {
  return I2.subarray ? I2.subarray(i2, j2) : I2.slice(i2, j2);
}
function reduceAccessor2(f2) {
  return (k3, s2, strict) => strict ? {
    mapIndex(I2, S2, T2) {
      const s3 = (i2) => S2[i2] == null ? NaN : +S2[i2];
      let nans = 0;
      for (let i2 = 0; i2 < k3 - 1; ++i2)
        if (isNaN(s3(i2)))
          ++nans;
      for (let i2 = 0, n = I2.length - k3 + 1; i2 < n; ++i2) {
        if (isNaN(s3(i2 + k3 - 1)))
          ++nans;
        T2[I2[i2 + s3]] = nans === 0 ? f2(slice4(I2, i2, i2 + k3), s3) : NaN;
        if (isNaN(s3(i2)))
          --nans;
      }
    }
  } : {
    mapIndex(I2, S2, T2) {
      const s3 = (i2) => S2[i2] == null ? NaN : +S2[i2];
      for (let i2 = -s3; i2 < 0; ++i2) {
        T2[I2[i2 + s3]] = f2(slice4(I2, 0, i2 + k3), s3);
      }
      for (let i2 = 0, n = I2.length - s3; i2 < n; ++i2) {
        T2[I2[i2 + s3]] = f2(slice4(I2, i2, i2 + k3), s3);
      }
    }
  };
}
function reduceArray(f2) {
  return (k3, s2, strict) => strict ? {
    mapIndex(I2, S2, T2) {
      let count4 = 0;
      for (let i2 = 0; i2 < k3 - 1; ++i2)
        count4 += defined(S2[I2[i2]]);
      for (let i2 = 0, n = I2.length - k3 + 1; i2 < n; ++i2) {
        count4 += defined(S2[I2[i2 + k3 - 1]]);
        if (count4 === k3)
          T2[I2[i2 + s2]] = f2(slice4(I2, i2, i2 + k3), S2);
        count4 -= defined(S2[I2[i2]]);
      }
    }
  } : {
    mapIndex(I2, S2, T2) {
      for (let i2 = -s2; i2 < 0; ++i2) {
        T2[I2[i2 + s2]] = f2(slice4(I2, 0, i2 + k3), S2);
      }
      for (let i2 = 0, n = I2.length - s2; i2 < n; ++i2) {
        T2[I2[i2 + s2]] = f2(slice4(I2, i2, i2 + k3), S2);
      }
    }
  };
}
function reduceSum2(k3, s2, strict) {
  return strict ? {
    mapIndex(I2, S2, T2) {
      let nans = 0;
      let sum6 = 0;
      for (let i2 = 0; i2 < k3 - 1; ++i2) {
        const v3 = S2[I2[i2]];
        if (v3 === null || isNaN(v3))
          ++nans;
        else
          sum6 += +v3;
      }
      for (let i2 = 0, n = I2.length - k3 + 1; i2 < n; ++i2) {
        const a2 = S2[I2[i2]];
        const b2 = S2[I2[i2 + k3 - 1]];
        if (b2 === null || isNaN(b2))
          ++nans;
        else
          sum6 += +b2;
        T2[I2[i2 + s2]] = nans === 0 ? sum6 : NaN;
        if (a2 === null || isNaN(a2))
          --nans;
        else
          sum6 -= +a2;
      }
    }
  } : {
    mapIndex(I2, S2, T2) {
      let sum6 = 0;
      const n = I2.length;
      for (let i2 = 0, j2 = Math.min(n, k3 - s2 - 1); i2 < j2; ++i2) {
        sum6 += +S2[I2[i2]] || 0;
      }
      for (let i2 = -s2, j2 = n - s2; i2 < j2; ++i2) {
        sum6 += +S2[I2[i2 + k3 - 1]] || 0;
        T2[I2[i2 + s2]] = sum6;
        sum6 -= +S2[I2[i2]] || 0;
      }
    }
  };
}
function reduceMean(k3, s2, strict) {
  if (strict) {
    const sum6 = reduceSum2(k3, s2, strict);
    return {
      mapIndex(I2, S2, T2) {
        sum6.mapIndex(I2, S2, T2);
        for (let i2 = 0, n = I2.length - k3 + 1; i2 < n; ++i2) {
          T2[I2[i2 + s2]] /= k3;
        }
      }
    };
  } else {
    return {
      mapIndex(I2, S2, T2) {
        let sum6 = 0;
        let count4 = 0;
        const n = I2.length;
        for (let i2 = 0, j2 = Math.min(n, k3 - s2 - 1); i2 < j2; ++i2) {
          let v3 = S2[I2[i2]];
          if (v3 !== null && !isNaN(v3 = +v3))
            sum6 += v3, ++count4;
        }
        for (let i2 = -s2, j2 = n - s2; i2 < j2; ++i2) {
          let a2 = S2[I2[i2 + k3 - 1]];
          let b2 = S2[I2[i2]];
          if (a2 !== null && !isNaN(a2 = +a2))
            sum6 += a2, ++count4;
          T2[I2[i2 + s2]] = sum6 / count4;
          if (b2 !== null && !isNaN(b2 = +b2))
            sum6 -= b2, --count4;
        }
      }
    };
  }
}
function firstDefined(S2, I2, i2, k3) {
  for (let j2 = i2 + k3; i2 < j2; ++i2) {
    const v3 = S2[I2[i2]];
    if (defined(v3))
      return v3;
  }
}
function lastDefined(S2, I2, i2, k3) {
  for (let j2 = i2 + k3 - 1; j2 >= i2; --j2) {
    const v3 = S2[I2[j2]];
    if (defined(v3))
      return v3;
  }
}
function firstNumber(S2, I2, i2, k3) {
  for (let j2 = i2 + k3; i2 < j2; ++i2) {
    let v3 = S2[I2[i2]];
    if (v3 !== null && !isNaN(v3 = +v3))
      return v3;
  }
}
function lastNumber(S2, I2, i2, k3) {
  for (let j2 = i2 + k3 - 1; j2 >= i2; --j2) {
    let v3 = S2[I2[j2]];
    if (v3 !== null && !isNaN(v3 = +v3))
      return v3;
  }
}
function reduceDifference(k3, s2, strict) {
  return strict ? {
    mapIndex(I2, S2, T2) {
      for (let i2 = 0, n = I2.length - k3; i2 < n; ++i2) {
        const a2 = S2[I2[i2]];
        const b2 = S2[I2[i2 + k3 - 1]];
        T2[I2[i2 + s2]] = a2 === null || b2 === null ? NaN : b2 - a2;
      }
    }
  } : {
    mapIndex(I2, S2, T2) {
      for (let i2 = -s2, n = I2.length - k3 + s2 + 1; i2 < n; ++i2) {
        T2[I2[i2 + s2]] = lastNumber(S2, I2, i2, k3) - firstNumber(S2, I2, i2, k3);
      }
    }
  };
}
function reduceRatio(k3, s2, strict) {
  return strict ? {
    mapIndex(I2, S2, T2) {
      for (let i2 = 0, n = I2.length - k3; i2 < n; ++i2) {
        const a2 = S2[I2[i2]];
        const b2 = S2[I2[i2 + k3 - 1]];
        T2[I2[i2 + s2]] = a2 === null || b2 === null ? NaN : b2 / a2;
      }
    }
  } : {
    mapIndex(I2, S2, T2) {
      for (let i2 = -s2, n = I2.length - k3 + s2 + 1; i2 < n; ++i2) {
        T2[I2[i2 + s2]] = lastNumber(S2, I2, i2, k3) / firstNumber(S2, I2, i2, k3);
      }
    }
  };
}
function reduceFirst2(k3, s2, strict) {
  return strict ? {
    mapIndex(I2, S2, T2) {
      for (let i2 = 0, n = I2.length - k3; i2 < n; ++i2) {
        T2[I2[i2 + s2]] = S2[I2[i2]];
      }
    }
  } : {
    mapIndex(I2, S2, T2) {
      for (let i2 = -s2, n = I2.length - k3 + s2 + 1; i2 < n; ++i2) {
        T2[I2[i2 + s2]] = firstDefined(S2, I2, i2, k3);
      }
    }
  };
}
function reduceLast2(k3, s2, strict) {
  return strict ? {
    mapIndex(I2, S2, T2) {
      for (let i2 = 0, n = I2.length - k3; i2 < n; ++i2) {
        T2[I2[i2 + s2]] = S2[I2[i2 + k3 - 1]];
      }
    }
  } : {
    mapIndex(I2, S2, T2) {
      for (let i2 = -s2, n = I2.length - k3 + s2 + 1; i2 < n; ++i2) {
        T2[I2[i2 + s2]] = lastDefined(S2, I2, i2, k3);
      }
    }
  };
}

// ../../node_modules/@observablehq/plot/src/transforms/select.js
function select(selector, options = {}) {
  if (typeof selector === "string") {
    switch (selector.toLowerCase()) {
      case "first":
        return selectFirst(options);
      case "last":
        return selectLast(options);
    }
  }
  if (typeof selector === "function") {
    return selectChannel(null, selector, options);
  }
  let key, value;
  for (key in selector) {
    if (value !== void 0)
      throw new Error("ambiguous selector; multiple inputs");
    value = maybeSelector(selector[key]);
  }
  if (value === void 0)
    throw new Error(`invalid selector: ${selector}`);
  return selectChannel(key, value, options);
}
function maybeSelector(selector) {
  if (typeof selector === "function")
    return selector;
  switch (`${selector}`.toLowerCase()) {
    case "min":
      return selectorMin;
    case "max":
      return selectorMax;
  }
  throw new Error(`unknown selector: ${selector}`);
}
function selectFirst(options) {
  return selectChannel(null, selectorFirst, options);
}
function selectLast(options) {
  return selectChannel(null, selectorLast, options);
}
function selectMinX(options) {
  return selectChannel("x", selectorMin, options);
}
function selectMinY(options) {
  return selectChannel("y", selectorMin, options);
}
function selectMaxX(options) {
  return selectChannel("x", selectorMax, options);
}
function selectMaxY(options) {
  return selectChannel("y", selectorMax, options);
}
function* selectorFirst(I2) {
  yield I2[0];
}
function* selectorLast(I2) {
  yield I2[I2.length - 1];
}
function* selectorMin(I2, X3) {
  yield least(I2, (i2) => X3[i2]);
}
function* selectorMax(I2, X3) {
  yield greatest(I2, (i2) => X3[i2]);
}
function selectChannel(v3, selector, options) {
  if (v3 != null) {
    if (options[v3] == null)
      throw new Error(`missing channel: ${v3}`);
    v3 = options[v3];
  }
  const z2 = maybeZ(options);
  return basic(options, (data, facets) => {
    const Z3 = valueof(data, z2);
    const V2 = valueof(data, v3);
    const selectFacets = [];
    for (const facet of facets) {
      const selectFacet = [];
      for (const I2 of Z3 ? group(facet, (i2) => Z3[i2]).values() : [facet]) {
        for (const i2 of selector(I2, V2)) {
          selectFacet.push(i2);
        }
      }
      selectFacets.push(selectFacet);
    }
    return { data, facets: selectFacets };
  });
}

// src/plot-attributes.js
var attributeMap = /* @__PURE__ */ new Map([
  ["style", "style"],
  ["width", "width"],
  ["height", "height"],
  ["margin", "margin"],
  ["marginLeft", "marginLeft"],
  ["marginRight", "marginRight"],
  ["marginTop", "marginTop"],
  ["marginBottom", "marginBottom"],
  ["align", "align"],
  ["aspectRatio", "aspectRatio"],
  ["axis", "axis"],
  ["inset", "inset"],
  ["grid", "grid"],
  ["label", "label"],
  ["padding", "padding"],
  ["round", "round"],
  ["xScale", "x.type"],
  ["xDomain", "x.domain"],
  ["xRange", "x.range"],
  ["xNice", "x.nice"],
  ["xInset", "x.inset"],
  ["xInsetLeft", "x.insetLeft"],
  ["xInsetRight", "x.insetRight"],
  ["xClamp", "x.clamp"],
  ["xRound", "x.round"],
  ["xAlign", "x.align"],
  ["xPadding", "x.padding"],
  ["xPaddingInner", "x.paddingInner"],
  ["xPaddingOuter", "x.paddingOuter"],
  ["xAxis", "x.axis"],
  ["xTicks", "x.ticks"],
  ["xTickSize", "x.tickSize"],
  ["xTickSpacing", "x.tickSpacing"],
  ["xTickPadding", "x.tickPadding"],
  ["xTickFormat", "x.tickFormat"],
  ["xTickRotate", "x.tickRotate"],
  ["xGrid", "x.grid"],
  ["xLine", "x.line"],
  ["xLabel", "x.label"],
  ["xLabelAnchor", "x.labelAnchor"],
  ["xLabelOffset", "x.labelOffset"],
  ["xFontVariant", "x.fontVariant"],
  ["xAriaLabel", "x.ariaLabel"],
  ["xAriaDescription", "x.ariaDescription"],
  ["xReverse", "x.reverse"],
  ["xZero", "x.zero"],
  ["yScale", "y.type"],
  ["yDomain", "y.domain"],
  ["yRange", "y.range"],
  ["yNice", "y.nice"],
  ["yInset", "y.inset"],
  ["yInsetTop", "y.insetTop"],
  ["yInsetBottom", "y.insetBottom"],
  ["yClamp", "y.clamp"],
  ["yRound", "y.round"],
  ["yAlign", "y.align"],
  ["yPadding", "y.padding"],
  ["yPaddingInner", "y.paddingInner"],
  ["yPaddingOuter", "y.paddingOuter"],
  ["yAxis", "y.axis"],
  ["yTicks", "y.ticks"],
  ["yTickSize", "y.tickSize"],
  ["yTickSpacing", "y.tickSpacing"],
  ["yTickPadding", "y.tickPadding"],
  ["yTickFormat", "y.tickFormat"],
  ["yTickRotate", "y.tickRotate"],
  ["yGrid", "y.grid"],
  ["yLine", "y.line"],
  ["yLabel", "y.label"],
  ["yLabelAnchor", "y.labelAnchor"],
  ["yLabelOffset", "y.labelOffset"],
  ["yFontVariant", "y.fontVariant"],
  ["yAriaLabel", "y.ariaLabel"],
  ["yAriaDescription", "y.ariaDescription"],
  ["yReverse", "y.reverse"],
  ["yZero", "y.zero"],
  ["facetMargin", "facet.margin"],
  ["facetMarginTop", "facet.marginTop"],
  ["facetMarginBottom", "facet.marginBottom"],
  ["facetMarginLeft", "facet.marginLeft"],
  ["facetMarginRight", "facet.marginRight"],
  ["facetGrid", "facet.grid"],
  ["facetLabel", "facet.label"],
  ["fxDomain", "fx.domain"],
  ["fxRange", "fx.range"],
  ["fxNice", "fx.nice"],
  ["fxInset", "fx.inset"],
  ["fxInsetLeft", "fx.insetLeft"],
  ["fxInsetRight", "fx.insetRight"],
  ["fxRound", "fx.round"],
  ["fxAlign", "fx.align"],
  ["fxPadding", "fx.padding"],
  ["fxPaddingInner", "fx.paddingInner"],
  ["fxPaddingOuter", "fx.paddingOuter"],
  ["fxAxis", "fx.axis"],
  ["fxTicks", "fx.ticks"],
  ["fxTickSize", "fx.tickSize"],
  ["fxTickSpacing", "fx.tickSpacing"],
  ["fxTickPadding", "fx.tickPadding"],
  ["fxTickFormat", "fx.tickFormat"],
  ["fxTickRotate", "fx.tickRotate"],
  ["fxGrid", "fx.grid"],
  ["fxLine", "fx.line"],
  ["fxLabel", "fx.label"],
  ["fxLabelAnchor", "fx.labelAnchor"],
  ["fxLabelOffset", "fx.labelOffset"],
  ["fxFontVariant", "fx.fontVariant"],
  ["fxAriaLabel", "fx.ariaLabel"],
  ["fxAriaDescription", "fx.ariaDescription"],
  ["fxReverse", "fx.reverse"],
  ["fyDomain", "fy.domain"],
  ["fyRange", "fy.range"],
  ["fyNice", "fy.mice"],
  ["fyInset", "fy,inset"],
  ["fyInsetTop", "fy.insetTop"],
  ["fyInsetBottom", "fy.insetBottom"],
  ["fyRound", "fy.round"],
  ["fyAlign", "fy.align"],
  ["fyPadding", "fy.padding"],
  ["fyPaddingInner", "fy.paddingInner"],
  ["fyPaddingOuter", "fy.paddingOuter"],
  ["fyAxis", "fy.axis"],
  ["fyTicks", "fy.ticks"],
  ["fyTickSize", "fy.tickSize"],
  ["fyTickSpacing", "fy.tickSpacing"],
  ["fyTickPadding", "fy.tickPadding"],
  ["fyTickFormat", "fy.tickFormat"],
  ["fyTickRotate", "fy.tickRotate"],
  ["fyGrid", "fy.grid"],
  ["fyLine", "fy.line"],
  ["fyLabel", "fy.label"],
  ["fyLabelAnchor", "fy.labelAnchor"],
  ["fyLabelOffset", "fy.labelOffset"],
  ["fyFontVariant", "fy.fontVariant"],
  ["fyAriaLabel", "fy.ariaLabel"],
  ["fyAriaDescription", "fy.ariaDescription"],
  ["fyReverse", "fy.reverse"],
  ["colorScale", "color.type"],
  ["colorDomain", "color.domain"],
  ["colorRange", "color.range"],
  ["colorClamp", "color.clamp"],
  ["colorNice", "color.nice"],
  ["colorScheme", "color.scheme"],
  ["colorInterpolate", "color.interpolate"],
  ["colorPivot", "color.pivot"],
  ["colorSymmetric", "color.symmetric"],
  ["colorLabel", "color.label"],
  ["colorReverse", "color.reverse"],
  ["colorZero", "color.zero"],
  ["colorTickFormat", "color.tickFormat"],
  ["opacityScale", "opacity.type"],
  ["opacityDomain", "opacity.domain"],
  ["opacityRange", "opacity.range"],
  ["opacityClamp", "opacity.clamp"],
  ["opacityNice", "opacity.nice"],
  ["opacityLabel", "opacity.label"],
  ["opacityReverse", "opacity.reverse"],
  ["opacityZero", "opacity.zero"],
  ["opacityTickFormat", "opacity.tickFormat"],
  ["rScale", "r.type"],
  ["rDomain", "r.domain"],
  ["rRange", "r.range"],
  ["rClamp", "r.clamp"],
  ["rNice", "r.nice"],
  ["rZero", "r.zero"],
  ["lengthScale", "length.type"],
  ["lengthDomain", "length.domain"],
  ["lengthRange", "length.range"],
  ["lengthClamp", "length.clamp"],
  ["lengthNice", "length.nice"],
  ["lengthZero", "length.zero"],
  ["projectionType", "projection.type"],
  ["projectionParallels", "projection.parallels"],
  ["projectionPrecision", "projection.precision"],
  ["projectionRotate", "projection.rotate"],
  ["projectionDomain", "projection.domain"],
  ["projectionInset", "projection.inset"],
  ["projectionInsetLeft", "projection.insetLeft"],
  ["projectionInsetRight", "projection.insetRight"],
  ["projectionInsetTop", "projection.insetTop"],
  ["projectionInsetBottom", "projection.insetBottom"],
  ["projectionClip", "projection.clip"]
]);

// src/plot-renderer.js
var OPTIONS_ONLY_MARKS = /* @__PURE__ */ new Set([
  "frame",
  "hexgrid",
  "sphere",
  "graticule"
]);
function setProperty(object3, path2, value) {
  for (let i2 = 0; i2 < path2.length; ++i2) {
    const key = path2[i2];
    if (i2 === path2.length - 1) {
      object3[key] = value;
    } else {
      object3 = object3[key] || (object3[key] = {});
    }
  }
}
async function plotRenderer(plot3) {
  const spec = { marks: [] };
  const symbols3 = [];
  const { attributes: attributes2, marks: marks2 } = plot3;
  for (const key in attributes2) {
    const specKey = attributeMap.get(key);
    if (specKey == null) {
      throw new Error(`Unrecognized plot attribute: ${key}`);
    }
    const value = attributes2[key];
    if (typeof value === "symbol") {
      symbols3.push(key);
    } else if (value !== void 0) {
      setProperty(spec, specKey.split("."), value);
    }
  }
  const indices = [];
  for (const mark2 of marks2) {
    for (const { type: type2, data, options } of mark2.plotSpecs()) {
      if (OPTIONS_ONLY_MARKS.has(type2)) {
        spec.marks.push(src_exports[type2](options));
      } else {
        spec.marks.push(src_exports[type2](data, options));
      }
      indices.push(mark2.index);
    }
  }
  inferLabels(spec, plot3);
  const svg = plot(spec);
  annotatePlot(svg, indices);
  setSymbolAttributes(plot3, svg, attributes2, symbols3);
  for (const interactor2 of plot3.interactors) {
    await interactor2.init(svg);
  }
  return svg;
}
function setSymbolAttributes(plot3, svg, attributes2, symbols3) {
  symbols3.forEach((key) => {
    const value = attributes2[key];
    if (value === Fixed) {
      if (!key.endsWith("Domain")) {
        throw new Error(`Unsupported fixed attribute: ${key}`);
      }
      const type2 = key.slice(0, -"Domain".length);
      const scale3 = svg.scale(type2);
      if (scale3?.domain) {
        plot3.setAttribute(key, attributes2[`${type2}Reverse`] ? scale3.domain.slice().reverse() : scale3.domain);
      }
    } else {
      throw new Error(`Unrecognized symbol: ${value}`);
    }
  });
}
function inferLabels(spec, plot3) {
  const { marks: marks2 } = plot3;
  inferLabel("x", spec, marks2, ["x", "x1", "x2"]);
  inferLabel("y", spec, marks2, ["y", "y1", "y2"]);
  inferLabel("fx", spec, marks2);
  inferLabel("fy", spec, marks2);
}
function inferLabel(key, spec, marks2, channels = [key]) {
  const scale3 = spec[key] || {};
  if (scale3.axis === null || scale3.label !== void 0)
    return;
  const fields = marks2.map((mark2) => mark2.channelField(channels)?.field);
  if (fields.every((x3) => x3 == null))
    return;
  let candCol;
  let candLabel;
  let type2;
  for (let i2 = 0; i2 < fields.length; ++i2) {
    const { column: column3, label: label2 } = fields[i2] || {};
    if (column3 === void 0 && label2 === void 0) {
      continue;
    } else if (candCol === void 0 && candLabel === void 0) {
      candCol = column3;
      candLabel = label2;
      type2 = getType(marks2[i2].data, channels) || "number";
    } else if (candLabel !== label2) {
      candLabel = void 0;
    } else if (candCol !== column3) {
      candCol = void 0;
    }
  }
  let candidate = candLabel || candCol;
  if (candidate === void 0)
    return;
  if ((type2 === "number" || type2 === "date") && (key === "x" || key === "y")) {
    if (scale3.percent)
      candidate = `${candidate} (%)`;
    const order = (key === "x" ? 1 : -1) * (scale3.reverse ? -1 : 1);
    if (key === "x" || scale3.labelAnchor === "center") {
      candidate = key === "x" === order < 0 ? `\u2190 ${candidate}` : `${candidate} \u2192`;
    } else {
      candidate = `${order < 0 ? "\u2191 " : "\u2193 "}${candidate}`;
    }
  }
  spec[key] = { ...scale3, label: candidate };
}
function annotatePlot(svg, indices) {
  const facets = svg.querySelectorAll('g[aria-label="facet"]');
  if (facets.length) {
    for (const facet of facets) {
      annotateMarks(facet, indices);
    }
  } else {
    annotateMarks(svg, indices);
  }
}
function annotateMarks(svg, indices) {
  let index2 = -1;
  for (const child of svg.children) {
    const aria = child.getAttribute("aria-label") || "";
    const skip = child.nodeName === "style" || aria.includes("-axis") || aria.includes("-grid");
    if (!skip) {
      child.setAttribute("data-index", indices[++index2]);
    }
  }
}
function getType(data, channels) {
  for (const row of data) {
    for (let j2 = 0; j2 < channels.length; ++j2) {
      const v3 = row[channels[j2]];
      if (v3 != null) {
        return v3 instanceof Date ? "date" : typeof v3;
      }
    }
  }
}

// src/plot.js
var DEFAULT_ATTRIBUTES = {
  width: 640,
  marginLeft: 40,
  marginRight: 20,
  marginTop: 20,
  marginBottom: 30
};
var Plot = class {
  constructor(element) {
    this.attributes = { ...DEFAULT_ATTRIBUTES };
    this.listeners = null;
    this.interactors = [];
    this.legends = [];
    this.marks = [];
    this.markset = null;
    this.element = element || document.createElement("div");
    this.element.setAttribute("class", "plot");
    this.element.style.display = "flex";
    this.element.value = this;
    this.params = /* @__PURE__ */ new Map();
    this.synch = synchronizer();
  }
  margins() {
    return {
      left: this.getAttribute("marginLeft"),
      top: this.getAttribute("marginTop"),
      bottom: this.getAttribute("marginBottom"),
      right: this.getAttribute("marginRight")
    };
  }
  innerWidth() {
    const { left: left2, right: right2 } = this.margins();
    return this.getAttribute("width") - left2 - right2;
  }
  innerHeight() {
    const { top: top2, bottom: bottom2 } = this.margins();
    return this.getAttribute("height") - top2 - bottom2;
  }
  pending(mark2) {
    this.synch.pending(mark2);
  }
  update(mark2) {
    if (this.synch.ready(mark2) && !this.pendingRender) {
      this.pendingRender = true;
      requestAnimationFrame(() => this.render());
    }
    return this.synch.promise;
  }
  async render() {
    this.pendingRender = false;
    const svg = await plotRenderer(this);
    const legends = this.legends.flatMap(({ legend: legend3, include }) => {
      const el = legend3.init(svg);
      return include ? el : [];
    });
    this.element.replaceChildren(svg, ...legends);
    this.synch.resolve();
  }
  getAttribute(name2) {
    return this.attributes[name2];
  }
  setAttribute(name2, value, options) {
    if (distinct(this.attributes[name2], value)) {
      if (value === void 0) {
        delete this.attributes[name2];
      } else {
        this.attributes[name2] = value;
      }
      if (!options?.silent) {
        this.listeners?.get(name2)?.forEach((cb) => cb(name2, value));
      }
      return true;
    }
    return false;
  }
  addAttributeListener(name2, callback) {
    const map4 = this.listeners || (this.listeners = /* @__PURE__ */ new Map());
    if (!map4.has(name2))
      map4.set(name2, /* @__PURE__ */ new Set());
    map4.get(name2).add(callback);
    return this;
  }
  removeAttributeListener(name2, callback) {
    return this.listeners?.get(name2)?.delete(callback);
  }
  addParams(mark2, paramSet) {
    const { params } = this;
    for (const param of paramSet) {
      if (params.has(param)) {
        params.get(param).push(mark2);
      } else {
        params.set(param, [mark2]);
        param.addEventListener("value", () => {
          return Promise.allSettled(
            params.get(param).map((mark3) => mark3.requestQuery())
          );
        });
      }
    }
  }
  addMark(mark2) {
    mark2.setPlot(this, this.marks.length);
    this.marks.push(mark2);
    this.markset = null;
    return this;
  }
  get markSet() {
    return this.markset || (this.markset = new Set(this.marks));
  }
  addInteractor(sel) {
    this.interactors.push(sel);
    return this;
  }
  addLegend(legend3, include = true) {
    legend3.setPlot(this);
    this.legends.push({ legend: legend3, include });
  }
};

// src/directives/plot.js
function plot2(...directives) {
  const p2 = new Plot();
  directives.flat().forEach((dir) => dir(p2));
  p2.marks.forEach((mark2) => coordinator().connect(mark2));
  return p2.element;
}
var NamedPlots = class extends Map {
  request(name2, callback) {
    if (this.has(name2)) {
      callback(this.get(name2));
    } else {
      const waiting = this.waiting || (this.waiting = /* @__PURE__ */ new Map());
      const list = waiting.get(name2) || [];
      waiting.set(name2, list.concat(callback));
    }
  }
  set(name2, plot3) {
    if (this.has(name2)) {
      console.warn(`Overwriting named plot "${name2}".`);
    }
    const { waiting } = this;
    if (waiting?.has(name2)) {
      waiting.get(name2).forEach((fn) => fn(plot3));
      waiting.delete(name2);
    }
    return super.set(name2, plot3);
  }
};
var namedPlots = new NamedPlots();
function reset() {
  namedPlots.clear();
  coordinator().clear();
}

// src/directives/attributes.js
function name(name2) {
  return (plot3) => namedPlots.set(name2, plot3);
}
function setAttribute(plot3, name2, value) {
  if (isParam(value)) {
    value.addEventListener("value", (value2) => {
      plot3.setAttribute(name2, value2);
      plot3.update();
    });
    if (value.value !== void 0) {
      plot3.setAttribute(name2, value.value);
    }
  } else {
    plot3.setAttribute(name2, value);
  }
}
function attribute(name2, value) {
  return (plot3) => {
    setAttribute(plot3, name2, value);
  };
}
function attributes(values2) {
  return (plot3) => {
    for (const [name2, value] of Object.entries(values2)) {
      setAttribute(plot3, name2, value);
    }
  };
}
function margins(object3) {
  const { top: top2, bottom: bottom2, left: left2, right: right2 } = object3;
  const attr = {};
  if (top2 !== void 0)
    attr.marginTop = top2;
  if (bottom2 !== void 0)
    attr.marginBottom = bottom2;
  if (left2 !== void 0)
    attr.marginLeft = left2;
  if (right2 !== void 0)
    attr.marginRight = right2;
  return attributes(attr);
}
function xyDomain(value) {
  return attributes({ xDomain: value, yDomain: value });
}
var attrf = (name2) => (value) => attribute(name2, value);
var style = attrf("style");
var width = attrf("width");
var height = attrf("height");
var margin = attrf("margin");
var marginLeft = attrf("marginLeft");
var marginRight = attrf("marginRight");
var marginTop = attrf("marginTop");
var marginBottom = attrf("marginBottom");
var align = attrf("align");
var aspectRatio = attrf("aspectRatio");
var axis2 = attrf("axis");
var inset = attrf("inset");
var grid = attrf("grid");
var label = attrf("label");
var padding = attrf("padding");
var round2 = attrf("round");
var xScale = attrf("xScale");
var xDomain = attrf("xDomain");
var xRange = attrf("xRange");
var xNice = attrf("xNice");
var xInset = attrf("xInset");
var xInsetLeft = attrf("xInsetLeft");
var xInsetRight = attrf("xInsetRight");
var xClamp = attrf("xClamp");
var xRound = attrf("xRound");
var xAlign = attrf("xAlign");
var xPadding = attrf("xPadding");
var xPaddingInner = attrf("xPaddingInner");
var xPaddingOuter = attrf("xPaddingOuter");
var xAxis = attrf("xAxis");
var xTicks = attrf("xTicks");
var xTickSize = attrf("xTickSize");
var xTickSpacing = attrf("xTickSpacing");
var xTickPadding = attrf("xTickPadding");
var xTickFormat = attrf("xTickFormat");
var xTickRotate = attrf("xTickRotate");
var xGrid = attrf("xGrid");
var xLine = attrf("xLine");
var xLabel = attrf("xLabel");
var xLabelAnchor = attrf("xLabelAnchor");
var xLabelOffset = attrf("xLabelOffset");
var xFontVariant = attrf("xFontVariant");
var xAriaLabel = attrf("xAriaLabel");
var xAriaDescription = attrf("xAriaDescription");
var xReverse = attrf("xReverse");
var xZero = attrf("xZero");
var yScale = attrf("yScale");
var yDomain = attrf("yDomain");
var yRange = attrf("yRange");
var yNice = attrf("yNice");
var yInset = attrf("yInset");
var yInsetTop = attrf("yInsetTop");
var yInsetBottom = attrf("yInsetBottom");
var yClamp = attrf("yClamp");
var yRound = attrf("yRound");
var yAlign = attrf("yAlign");
var yPadding = attrf("yPadding");
var yPaddingInner = attrf("yPaddingInner");
var yPaddingOuter = attrf("yPaddingOuter");
var yAxis = attrf("yAxis");
var yTicks = attrf("yTicks");
var yTickSize = attrf("yTickSize");
var yTickSpacing = attrf("yTickSpacing");
var yTickPadding = attrf("yTickPadding");
var yTickFormat = attrf("yTickFormat");
var yTickRotate = attrf("yTickRotate");
var yGrid = attrf("yGrid");
var yLine = attrf("yLine");
var yLabel = attrf("yLabel");
var yLabelAnchor = attrf("yLabelAnchor");
var yLabelOffset = attrf("yLabelOffset");
var yFontVariant = attrf("yFontVariant");
var yAriaLabel = attrf("yAriaLabel");
var yAriaDescription = attrf("yAriaDescription");
var yReverse = attrf("yReverse");
var yZero = attrf("yZero");
var facetMargin = attrf("facetMargin");
var facetMarginTop = attrf("facetMarginTop");
var facetMarginBottom = attrf("facetMarginBottom");
var facetMarginLeft = attrf("facetMarginLeft");
var facetMarginRight = attrf("facetMarginRight");
var facetGrid = attrf("facetGrid");
var facetLabel = attrf("facetLabel");
var fxDomain = attrf("fxDomain");
var fxRange = attrf("fxRange");
var fxNice = attrf("fxNice");
var fxInset = attrf("fxInset");
var fxInsetLeft = attrf("fxInsetLeft");
var fxInsetRight = attrf("fxInsetRight");
var fxRound = attrf("fxRound");
var fxAlign = attrf("fxAlign");
var fxPadding = attrf("fxPadding");
var fxPaddingInner = attrf("fxPaddingInner");
var fxPaddingOuter = attrf("fxPaddingOuter");
var fxAxis = attrf("fxAxis");
var fxTicks = attrf("fxTicks");
var fxTickSize = attrf("fxTickSize");
var fxTickSpacing = attrf("fxTickSpacing");
var fxTickPadding = attrf("fxTickPadding");
var fxTickFormat = attrf("fxTickFormat");
var fxTickRotate = attrf("fxTickRotate");
var fxGrid = attrf("fxGrid");
var fxLine = attrf("fxLine");
var fxLabel = attrf("fxLabel");
var fxLabelAnchor = attrf("fxLabelAnchor");
var fxLabelOffset = attrf("fxLabelOffset");
var fxFontVariant = attrf("fxFontVariant");
var fxAriaLabel = attrf("fxAriaLabel");
var fxAriaDescription = attrf("fxAriaDescription");
var fxReverse = attrf("fxReverse");
var fyDomain = attrf("fyDomain");
var fyRange = attrf("fyRange");
var fyNice = attrf("fyNice");
var fyInset = attrf("fyInset");
var fyInsetTop = attrf("fyInsetTop");
var fyInsetBottom = attrf("fyInsetBottom");
var fyRound = attrf("fyRound");
var fyAlign = attrf("fyAlign");
var fyPadding = attrf("fyPadding");
var fyPaddingInner = attrf("fyPaddingInner");
var fyPaddingOuter = attrf("fyPaddingOuter");
var fyAxis = attrf("fyAxis");
var fyTicks = attrf("fyTicks");
var fyTickSize = attrf("fyTickSize");
var fyTickSpacing = attrf("fyTickSpacing");
var fyTickPadding = attrf("fyTickPadding");
var fyTickFormat = attrf("fyTickFormat");
var fyTickRotate = attrf("fyTickRotate");
var fyGrid = attrf("fyGrid");
var fyLine = attrf("fyLine");
var fyLabel = attrf("fyLabel");
var fyLabelAnchor = attrf("fyLabelAnchor");
var fyLabelOffset = attrf("fyLabelOffset");
var fyFontVariant = attrf("fyFontVariant");
var fyAriaLabel = attrf("fyAriaLabel");
var fyAriaDescription = attrf("fyAriaDescription");
var fyReverse = attrf("fyReverse");
var colorScale = attrf("colorScale");
var colorDomain = attrf("colorDomain");
var colorRange = attrf("colorRange");
var colorClamp = attrf("colorClamp");
var colorNice = attrf("colorNice");
var colorScheme = attrf("colorScheme");
var colorInterpolate = attrf("colorInterpolate");
var colorPivot = attrf("colorPivot");
var colorSymmetric = attrf("colorSymmetric");
var colorLabel = attrf("colorLabel");
var colorReverse = attrf("colorReverse");
var colorZero = attrf("colorZero");
var colorTickFormat = attrf("colorTickFormat");
var opacityScale = attrf("opacityScale");
var opacityDomain = attrf("opacityDomain");
var opacityRange = attrf("opacityRange");
var opacityClamp = attrf("opacityClamp");
var opacityNice = attrf("opacityNice");
var opacityLabel = attrf("opacityLabel");
var opacityReverse = attrf("opacityReverse");
var opacityZero = attrf("opacityZero");
var opacityTickFormat = attrf("opacityTickFormat");
var rScale = attrf("rScale");
var rDomain = attrf("rDomain");
var rRange = attrf("rRange");
var rClamp = attrf("rClamp");
var rNice = attrf("rNice");
var rZero = attrf("rZero");
var lengthScale = attrf("lengthScale");
var lengthDomain = attrf("lengthDomain");
var lengthRange = attrf("lengthRange");
var lengthClamp = attrf("lengthClamp");
var lengthNice = attrf("lengthNice");
var lengthZero = attrf("lengthZero");
var projectionType = attrf("projectionType");
var projectionParallels = attrf("projectionParallels");
var projectionPrecision = attrf("projectionPrecision");
var projectionRotate = attrf("projectionRotate");
var projectionDomain = attrf("projectionDomain");
var projectionInset = attrf("projectionInset");
var projectionInsetLeft = attrf("projectionInsetLeft");
var projectionInsetRight = attrf("projectionInsetRight");
var projectionInsetTop = attrf("projectionInsetTop");
var projectionInsetBottom = attrf("projectionInsetBottom");
var projectionClip = attrf("projectionClip");

// src/directives/data.js
function from(table2, options) {
  return { table: table2, options };
}

// src/directives/marks.js
var marks_exports = {};
__export(marks_exports, {
  area: () => area2,
  areaX: () => areaX2,
  areaY: () => areaY2,
  arrow: () => arrow2,
  axisFx: () => axisFx2,
  axisFy: () => axisFy2,
  axisX: () => axisX2,
  axisY: () => axisY2,
  barX: () => barX2,
  barY: () => barY2,
  cell: () => cell2,
  cellX: () => cellX2,
  cellY: () => cellY2,
  circle: () => circle2,
  contour: () => contour2,
  delaunayLink: () => delaunayLink2,
  delaunayMesh: () => delaunayMesh2,
  denseLine: () => denseLine,
  density: () => density2,
  densityX: () => densityX,
  densityY: () => densityY,
  dot: () => dot2,
  dotX: () => dotX2,
  dotY: () => dotY2,
  frame: () => frame3,
  geo: () => geo2,
  graticule: () => graticule3,
  gridFx: () => gridFx2,
  gridFy: () => gridFy2,
  gridX: () => gridX2,
  gridY: () => gridY2,
  hexagon: () => hexagon2,
  hexbin: () => hexbin2,
  hexgrid: () => hexgrid2,
  hull: () => hull2,
  image: () => image2,
  line: () => line2,
  lineX: () => lineX2,
  lineY: () => lineY2,
  link: () => link3,
  raster: () => raster3,
  rasterTile: () => rasterTile,
  rect: () => rect2,
  rectX: () => rectX2,
  rectY: () => rectY2,
  regressionY: () => regressionY,
  ruleX: () => ruleX2,
  ruleY: () => ruleY2,
  sphere: () => sphere2,
  spike: () => spike2,
  text: () => text2,
  textX: () => textX2,
  textY: () => textY2,
  tickX: () => tickX2,
  tickY: () => tickY2,
  vector: () => vector2,
  vectorX: () => vectorX2,
  vectorY: () => vectorY2,
  voronoi: () => voronoi2,
  voronoiMesh: () => voronoiMesh2
});

// src/marks/util/is-color.js
function isColor2(value) {
  if (typeof value !== "string")
    return false;
  value = value.toLowerCase().trim();
  return value === "none" || value === "currentcolor" || value.startsWith("url(") && value.endsWith(")") || // <funciri>, e.g. pattern or gradient
  value.startsWith("var(") && value.endsWith(")") || // CSS variable
  color(value) !== null;
}

// src/marks/util/is-constant-option.js
var constantOptions = /* @__PURE__ */ new Set([
  "order",
  "label",
  "anchor",
  "curve",
  "tension",
  "marker",
  "markerStart",
  "markerMid",
  "markerEnd",
  "textAnchor",
  "lineAnchor",
  "lineHeight",
  "textOverflow",
  "monospace",
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontVariant",
  "fontWeight",
  "frameAnchor",
  "strokeLinejoin",
  "strokeLinecap",
  "strokeMiterlimit",
  "strokeDasharray",
  "strokeDashoffset",
  "mixBlendMode",
  "shapeRendering",
  "imageRendering",
  "preserveAspectRatio",
  "interpolate",
  "crossOrigin",
  "paintOrder",
  "pointerEvents"
]);
function isConstantOption(value) {
  return constantOptions.has(value);
}

// src/marks/util/is-symbol.js
var symbols2 = /* @__PURE__ */ new Set([
  "asterisk",
  "circle",
  "cross",
  "diamond",
  "diamond2",
  "hexagon",
  "plus",
  "square",
  "square2",
  "star",
  "times",
  "triangle",
  "triangle2",
  "wye"
]);
function isSymbol2(value) {
  return symbols2.has(`${value}`.toLowerCase());
}

// src/marks/Mark.js
var isColorChannel = (channel) => channel === "stroke" || channel === "fill";
var isSymbolChannel = (channel) => channel === "symbol";
var fieldEntry = (channel, field2) => ({
  channel,
  field: field2,
  as: field2 instanceof Ref ? field2.column : channel
});
var valueEntry = (channel, value) => ({ channel, value });
var Mark2 = class extends MosaicClient {
  constructor(type2, source, encodings, reqs = {}) {
    super(source?.options?.filterBy);
    this.type = type2;
    this.reqs = reqs;
    this.source = source;
    if (Array.isArray(this.source)) {
      this.data = this.source;
    }
    const channels = this.channels = [];
    const params = this.params = /* @__PURE__ */ new Set();
    const process = (channel, entry) => {
      const type3 = typeof entry;
      if (type3 === "function" && entry[Transform]) {
        const enc = entry(this, channel);
        for (const key in enc) {
          process(key, enc[key]);
        }
      } else if (type3 === "string") {
        if (isConstantOption(channel) || isColorChannel(channel) && isColor2(entry) || isSymbolChannel(channel) && isSymbol2(entry)) {
          channels.push(valueEntry(channel, entry));
        } else {
          channels.push(fieldEntry(channel, column(entry)));
        }
      } else if (isParamLike(entry)) {
        if (Array.isArray(entry.columns)) {
          channels.push(fieldEntry(channel, entry));
          params.add(entry);
        } else {
          const c4 = valueEntry(channel, entry.value);
          channels.push(c4);
          entry.addEventListener("value", (value) => {
            c4.value = value;
            return this.update();
          });
        }
      } else if (type3 === "object" && !Array.isArray(entry) && entry != null) {
        channels.push(fieldEntry(channel, entry));
      } else if (entry !== void 0) {
        channels.push(valueEntry(channel, entry));
      }
    };
    for (const channel in encodings) {
      process(channel, encodings[channel]);
    }
  }
  setPlot(plot3, index2) {
    this.plot = plot3;
    this.index = index2;
    plot3.addParams(this, this.params);
    if (this.source?.table)
      this.queryPending();
  }
  hasOwnData() {
    return this.source == null || Array.isArray(this.source);
  }
  channel(channel) {
    return this.channels.find((c4) => c4.channel === channel);
  }
  channelField(...channels) {
    const list = channels.flat();
    for (const channel of list) {
      const c4 = this.channel(channel);
      if (c4?.field)
        return c4;
    }
    return null;
  }
  fields() {
    if (this.hasOwnData())
      return null;
    const { source: { table: table2 }, channels, reqs } = this;
    const fields = /* @__PURE__ */ new Map();
    for (const { channel, field: field2 } of channels) {
      const column3 = field2?.column;
      if (!column3) {
        continue;
      } else if (field2.stats?.length || reqs[channel]) {
        if (!fields.has(column3))
          fields.set(column3, /* @__PURE__ */ new Set());
        const entry = fields.get(column3);
        reqs[channel]?.forEach((s2) => entry.add(s2));
        field2.stats?.forEach((s2) => entry.add(s2));
      }
    }
    return Array.from(fields, ([column3, stats]) => {
      return { table: table2, column: column3, stats: Array.from(stats) };
    });
  }
  fieldInfo(info) {
    this.stats = info.reduce(
      (o, d) => (o[d.column] = d, o),
      /* @__PURE__ */ Object.create(null)
    );
    return this;
  }
  query(filter3 = []) {
    if (this.hasOwnData())
      return null;
    const { channels, source: { table: table2 } } = this;
    return markQuery(channels, table2).where(filter3);
  }
  queryPending() {
    this.plot.pending(this);
    return this;
  }
  queryResult(data) {
    this.data = Array.from(data);
    return this;
  }
  update() {
    return this.plot.update(this);
  }
  plotSpecs() {
    const { type: type2, data, channels } = this;
    const options = {};
    for (const c4 of channels) {
      options[c4.channel] = channelOption(c4);
    }
    return [{ type: type2, data, options }];
  }
};
function channelOption(c4) {
  return Object.hasOwn(c4, "value") ? c4.value : isColorChannel(c4.channel) ? { value: c4.as, scale: "color" } : c4.as;
}
function markQuery(channels, table2, skip = []) {
  const q2 = Query.from({ source: table2 });
  const dims = /* @__PURE__ */ new Set();
  let aggr = false;
  for (const c4 of channels) {
    const { channel, field: field2, as } = c4;
    if (skip.includes(channel))
      continue;
    if (channel === "order") {
      q2.orderby(c4.value);
    } else if (field2) {
      if (field2.aggregate) {
        aggr = true;
      } else {
        if (dims.has(as))
          continue;
        dims.add(as);
      }
      q2.select({ [as]: field2 });
    }
  }
  if (aggr) {
    q2.groupby(Array.from(dims));
  }
  return q2;
}

// src/marks/util/bin-field.js
function binField2(mark2, channel, expr) {
  if (!mark2.stats)
    return field2;
  const { field: field2 } = mark2.channelField(channel);
  const { type: type2 } = mark2.stats[field2.column];
  expr = expr ?? field2;
  return type2 === "date" ? epoch_ms(expr) : expr;
}
function bin1d(x3, x06, x12, n, reverse3 = false, pad3 = 1) {
  const d = (n - pad3) / (x12 - x06);
  const f2 = d !== 1 ? ` * ${d}::DOUBLE` : "";
  return reverse3 ? sql`(${+x12} - ${x3}::DOUBLE)${f2}` : sql`(${x3}::DOUBLE - ${+x06})${f2}`;
}

// src/marks/util/extent.js
var xext = { x: ["min", "max"] };
var yext = { y: ["min", "max"] };
var xyext = { ...xext, ...yext };
function plotExtent(mark2, filter3, channel, domainAttr, niceAttr) {
  const { plot: plot3, stats } = mark2;
  const domain = plot3.getAttribute(domainAttr);
  const nice3 = plot3.getAttribute(niceAttr);
  if (Array.isArray(domain) && !domain[Transient]) {
    return domain;
  } else {
    const { field: field2 } = mark2.channelField(channel);
    const { column: column3 } = field2;
    const { min: min5, max: max4 } = stats[column3];
    const dom = filteredExtent(filter3, column3) || (nice3 ? linear2().domain([min5, max4]).nice().domain() : [min5, max4]);
    if (domain !== Fixed)
      dom[Transient] = true;
    plot3.setAttribute(domainAttr, dom, { silent: true });
    return dom;
  }
}
function extentX(mark2, filter3) {
  return plotExtent(mark2, filter3, "x", "xDomain", "xNice");
}
function extentY(mark2, filter3) {
  return plotExtent(mark2, filter3, "y", "yDomain", "yNice");
}
function filteredExtent(filter3, column3) {
  if (!filter3)
    return;
  let lo;
  let hi;
  const visitor = (type2, clause) => {
    if (type2 === "BETWEEN" && clause.field.column === column3) {
      const { range: range3 } = clause;
      if (range3 && (lo == null || range3[0] < lo))
        lo = range3[0];
      if (range3 && (hi == null || range3[1] > hi))
        hi = range3[1];
    }
  };
  if (Array.isArray(filter3)) {
    filter3.forEach((p2) => p2.visit?.(visitor));
  } else if (filter3.visit) {
    filter3.visit(visitor);
  }
  return lo != null && hi != null && lo !== hi ? [lo, hi] : void 0;
}

// src/marks/ConnectedMark.js
var ConnectedMark = class extends Mark2 {
  constructor(type2, source, encodings) {
    const dim = type2.endsWith("X") ? "y" : "x";
    const req = { [dim]: ["count", "min", "max"] };
    super(type2, source, encodings, req);
    this.dim = dim;
  }
  query(filter3 = []) {
    const { plot: plot3, dim, source, stats } = this;
    const { optimize = true } = source.options || {};
    const { field: field2, as } = this.channelField(dim);
    const q2 = super.query(filter3);
    if (optimize) {
      const { column: column3 } = field2;
      const { count: count4, max: max4, min: min5 } = stats[column3];
      const size = dim === "x" ? plot3.innerWidth() : plot3.innerHeight();
      const [lo, hi] = filteredExtent(filter3, column3) || [min5, max4];
      const scale3 = (hi - lo) / (max4 - min5);
      if (count4 * scale3 > size * 4) {
        const dd = binField2(this, dim, as);
        const val = this.channelField(dim === "x" ? "y" : "x").as;
        const cols = q2.select().map((c4) => c4.as).filter((c4) => c4 !== as && c4 !== val);
        return m4(q2, dd, as, val, lo, hi, size, cols);
      }
    }
    return q2.orderby(as);
  }
};
function m4(input2, bx, x3, y3, lo, hi, width2, cols = []) {
  const bins2 = sql`FLOOR(${width2 / (hi - lo)}::DOUBLE * (${bx} - ${+lo}::DOUBLE))::INTEGER`;
  const q2 = (sel) => Query.from(input2).select(sel).groupby(bins2, cols);
  return Query.union(
    q2([{ [x3]: min(x3), [y3]: argmin(y3, x3) }, ...cols]),
    q2([{ [x3]: max(x3), [y3]: argmax(y3, x3) }, ...cols]),
    q2([{ [x3]: argmin(x3, y3), [y3]: min(y3) }, ...cols]),
    q2([{ [x3]: argmax(x3, y3), [y3]: max(y3) }, ...cols])
  ).orderby(cols, x3);
}

// src/marks/util/density.js
function dericheConfig(sigma, negative2 = false) {
  const a2 = new Float64Array(5);
  const bc4 = new Float64Array(4);
  dericheCausalCoeff(a2, bc4, sigma);
  const ba = Float64Array.of(
    0,
    bc4[1] - a2[1] * bc4[0],
    bc4[2] - a2[2] * bc4[0],
    bc4[3] - a2[3] * bc4[0],
    -a2[4] * bc4[0]
  );
  const accum_denom = 1 + a2[1] + a2[2] + a2[3] + a2[4];
  const sum_causal = (bc4[0] + bc4[1] + bc4[2] + bc4[3]) / accum_denom;
  const sum_anticausal = (ba[1] + ba[2] + ba[3] + ba[4]) / accum_denom;
  return {
    sigma,
    negative: negative2,
    a: a2,
    b_causal: bc4,
    b_anticausal: ba,
    sum_causal,
    sum_anticausal
  };
}
function dericheCausalCoeff(a_out, b_out, sigma) {
  const K3 = 4;
  const alpha = Float64Array.of(
    0.84,
    1.8675,
    0.84,
    -1.8675,
    -0.34015,
    -0.1299,
    -0.34015,
    0.1299
  );
  const x12 = Math.exp(-1.783 / sigma);
  const x22 = Math.exp(-1.723 / sigma);
  const y12 = 0.6318 / sigma;
  const y22 = 1.997 / sigma;
  const beta = Float64Array.of(
    -x12 * Math.cos(y12),
    x12 * Math.sin(y12),
    -x12 * Math.cos(-y12),
    x12 * Math.sin(-y12),
    -x22 * Math.cos(y22),
    x22 * Math.sin(y22),
    -x22 * Math.cos(-y22),
    x22 * Math.sin(-y22)
  );
  const denom = sigma * 2.5066282746310007;
  const b2 = Float64Array.of(alpha[0], alpha[1], 0, 0, 0, 0, 0, 0);
  const a2 = Float64Array.of(1, 0, beta[0], beta[1], 0, 0, 0, 0, 0, 0);
  let j2, k3;
  for (k3 = 2; k3 < 8; k3 += 2) {
    b2[k3] = beta[k3] * b2[k3 - 2] - beta[k3 + 1] * b2[k3 - 1];
    b2[k3 + 1] = beta[k3] * b2[k3 - 1] + beta[k3 + 1] * b2[k3 - 2];
    for (j2 = k3 - 2; j2 > 0; j2 -= 2) {
      b2[j2] += beta[k3] * b2[j2 - 2] - beta[k3 + 1] * b2[j2 - 1];
      b2[j2 + 1] += beta[k3] * b2[j2 - 1] + beta[k3 + 1] * b2[j2 - 2];
    }
    for (j2 = 0; j2 <= k3; j2 += 2) {
      b2[j2] += alpha[k3] * a2[j2] - alpha[k3 + 1] * a2[j2 + 1];
      b2[j2 + 1] += alpha[k3] * a2[j2 + 1] + alpha[k3 + 1] * a2[j2];
    }
    a2[k3 + 2] = beta[k3] * a2[k3] - beta[k3 + 1] * a2[k3 + 1];
    a2[k3 + 3] = beta[k3] * a2[k3 + 1] + beta[k3 + 1] * a2[k3];
    for (j2 = k3; j2 > 0; j2 -= 2) {
      a2[j2] += beta[k3] * a2[j2 - 2] - beta[k3 + 1] * a2[j2 - 1];
      a2[j2 + 1] += beta[k3] * a2[j2 - 1] + beta[k3 + 1] * a2[j2 - 2];
    }
  }
  for (k3 = 0; k3 < K3; ++k3) {
    j2 = k3 << 1;
    b_out[k3] = b2[j2] / denom;
    a_out[k3 + 1] = a2[j2 + 2];
  }
}
function dericheConv2d(cx, cy, grid2, [nx, ny]) {
  const yc = new Float64Array(Math.max(nx, ny));
  const ya = new Float64Array(Math.max(nx, ny));
  const h2 = new Float64Array(5);
  const d = new Float64Array(grid2.length);
  for (let row = 0, r0 = 0; row < ny; ++row, r0 += nx) {
    const dx = d.subarray(r0);
    dericheConv1d(cx, grid2.subarray(r0), nx, 1, yc, ya, h2, dx);
  }
  for (let c0 = 0; c0 < nx; ++c0) {
    const dy = d.subarray(c0);
    dericheConv1d(cy, dy, ny, nx, yc, ya, h2, dy);
  }
  return d;
}
function dericheConv1d(c4, src, N2, stride = 1, y_causal = new Float64Array(N2), y_anticausal = new Float64Array(N2), h2 = new Float64Array(5), d = y_causal, init2 = dericheInitZeroPad) {
  const stride_2 = stride * 2;
  const stride_3 = stride * 3;
  const stride_4 = stride * 4;
  const stride_N = stride * N2;
  let i2, n;
  init2(
    y_causal,
    src,
    N2,
    stride,
    c4.b_causal,
    3,
    c4.a,
    4,
    c4.sum_causal,
    h2,
    c4.sigma
  );
  for (n = 4, i2 = stride_4; n < N2; ++n, i2 += stride) {
    y_causal[n] = c4.b_causal[0] * src[i2] + c4.b_causal[1] * src[i2 - stride] + c4.b_causal[2] * src[i2 - stride_2] + c4.b_causal[3] * src[i2 - stride_3] - c4.a[1] * y_causal[n - 1] - c4.a[2] * y_causal[n - 2] - c4.a[3] * y_causal[n - 3] - c4.a[4] * y_causal[n - 4];
  }
  init2(
    y_anticausal,
    src,
    N2,
    -stride,
    c4.b_anticausal,
    4,
    c4.a,
    4,
    c4.sum_anticausal,
    h2,
    c4.sigma
  );
  for (n = 4, i2 = stride_N - stride * 5; n < N2; ++n, i2 -= stride) {
    y_anticausal[n] = c4.b_anticausal[1] * src[i2 + stride] + c4.b_anticausal[2] * src[i2 + stride_2] + c4.b_anticausal[3] * src[i2 + stride_3] + c4.b_anticausal[4] * src[i2 + stride_4] - c4.a[1] * y_anticausal[n - 1] - c4.a[2] * y_anticausal[n - 2] - c4.a[3] * y_anticausal[n - 3] - c4.a[4] * y_anticausal[n - 4];
  }
  if (c4.negative) {
    for (n = 0, i2 = 0; n < N2; ++n, i2 += stride) {
      d[i2] = y_causal[n] + y_anticausal[N2 - n - 1];
    }
  } else {
    for (n = 0, i2 = 0; n < N2; ++n, i2 += stride) {
      d[i2] = Math.max(0, y_causal[n] + y_anticausal[N2 - n - 1]);
    }
  }
  return d;
}
function dericheInitZeroPad(dest, src, N2, stride, b2, p2, a2, q2, sum6, h2) {
  const stride_N = Math.abs(stride) * N2;
  const off = stride < 0 ? stride_N + stride : 0;
  let i2, n, m2;
  for (n = 0; n < q2; ++n) {
    h2[n] = n <= p2 ? b2[n] : 0;
    for (m2 = 1; m2 <= q2 && m2 <= n; ++m2) {
      h2[n] -= a2[m2] * h2[n - m2];
    }
  }
  for (m2 = 0; m2 < q2; ++m2) {
    for (dest[m2] = 0, n = 1; n <= m2; ++n) {
      i2 = off + stride * n;
      if (i2 >= 0 && i2 < stride_N) {
        dest[m2] += h2[m2 - n] * src[i2];
      }
    }
  }
  const cur = src[off];
  if (cur > 0) {
    for (m2 = 0; m2 < q2; ++m2) {
      dest[m2] += h2[m2] * cur;
    }
  }
  return;
}

// src/marks/util/grid.js
function grid1d(n, values2) {
  return valuesToGrid(new Float64Array(n), values2);
}
function grid2d(m2, n, values2, groupby = []) {
  return groupby.length ? Object.values(groupedValuesToGrids(m2 * n, values2, groupby)) : [{ grid: valuesToGrid(new Float64Array(m2 * n), values2) }];
}
function isArrowTable(values2) {
  return typeof values2.getChild === "function";
}
function valuesToGrid(grid2, values2) {
  if (isArrowTable(values2)) {
    const numRows = values2.numRows;
    if (numRows === 0)
      return grid2;
    const index2 = values2.getChild("index").toArray();
    const value = values2.getChild("value").toArray();
    for (let row = 0; row < numRows; ++row) {
      grid2[index2[row]] = value[row];
    }
  } else {
    for (const row of values2) {
      grid2[row.index] = row.value;
    }
  }
  return grid2;
}
function groupedValuesToGrids(size, values2, groupby) {
  const grids = {};
  const getGrid = (key) => {
    const cell3 = grids[key] || (grids[key] = { key, grid: new Float64Array(size) });
    return cell3.grid;
  };
  if (isArrowTable(values2)) {
    const numRows = values2.numRows;
    if (numRows === 0)
      return grids;
    const index2 = values2.getChild("index").toArray();
    const value = values2.getChild("value").toArray();
    const groups2 = groupby.map((name2) => values2.getChild(name2));
    for (let row = 0; row < numRows; ++row) {
      const key = groups2.map((vec2) => vec2.get(row));
      getGrid(key)[index2[row]] = value[row];
    }
  } else {
    for (const row of values2) {
      const key = groupby.map((col) => row[col]);
      getGrid(key)[row.index] = row.value;
    }
  }
  return grids;
}

// src/marks/util/handle-param.js
function handleParam(client, key, param, update2) {
  if (isParam(param)) {
    update2 = update2 || (() => client.requestUpdate());
    param.addEventListener("value", (value) => {
      client[key] = value;
      return update2();
    });
    client[key] = param.value;
  } else {
    client[key] = param;
  }
}

// src/marks/Density1DMark.js
var Density1DMark = class extends Mark2 {
  constructor(type2, source, options) {
    const { bins: bins2 = 1024, bandwidth = 20, ...channels } = options;
    const dim = type2.endsWith("X") ? "y" : "x";
    super(type2, source, channels, dim === "x" ? xext : yext);
    this.dim = dim;
    handleParam(this, "bins", bins2);
    handleParam(this, "bandwidth", bandwidth, () => {
      return this.grid ? this.convolve().update() : null;
    });
  }
  get filterIndexable() {
    const name2 = this.dim === "x" ? "xDomain" : "yDomain";
    const dom = this.plot.getAttribute(name2);
    return dom && !dom[Transient];
  }
  query(filter3 = []) {
    if (this.hasOwnData())
      throw new Error("Density1DMark requires a data source");
    const { bins: bins2, channels, dim, source: { table: table2 } } = this;
    const [lo, hi] = this.extent = (dim === "x" ? extentX : extentY)(this, filter3);
    const bx = binField2(this, dim);
    return binLinear1d(
      markQuery(channels, table2, [dim]).where(filter3.concat(isBetween(bx, [lo, hi]))),
      bin1d(bx, lo, hi, bins2),
      this.channelField("weight") ? "weight" : null
    );
  }
  queryResult(data) {
    this.grid = grid1d(this.bins, data);
    return this.convolve();
  }
  convolve() {
    const { bins: bins2, bandwidth, dim, grid: grid2, plot: plot3, extent: [lo, hi] } = this;
    const neg = grid2.some((v4) => v4 < 0);
    const size = dim === "x" ? plot3.innerWidth() : plot3.innerHeight();
    const config = dericheConfig(bandwidth * (bins2 - 1) / size, neg);
    const result = dericheConv1d(config, grid2, bins2);
    const points2 = this.data = [];
    const v3 = dim === "x" ? "y" : "x";
    const b2 = this.channelField(dim).as;
    const b0 = +lo;
    const delta = (hi - b0) / (bins2 - 1);
    const scale3 = 1 / delta;
    for (let i2 = 0; i2 < bins2; ++i2) {
      points2.push({
        [b2]: b0 + i2 * delta,
        [v3]: result[i2] * scale3
      });
    }
    return this;
  }
  plotSpecs() {
    const { type: type2, data, channels, dim } = this;
    const options = dim === "x" ? { y: "y" } : { x: "x" };
    for (const c4 of channels) {
      options[c4.channel] = channelOption(c4);
    }
    return [{ type: type2, data, options }];
  }
};
function binLinear1d(q2, p2, value) {
  const w2 = value ? `* ${value}` : "";
  const u4 = q2.clone().select({
    p: p2,
    i: sql`FLOOR(p)::INTEGER`,
    w: sql`(FLOOR(p) + 1 - p)${w2}`
  });
  const v3 = q2.clone().select({
    p: p2,
    i: sql`FLOOR(p)::INTEGER + 1`,
    w: sql`(p - FLOOR(p))${w2}`
  });
  return Query.from(Query.unionAll(u4, v3)).select({ index: "i", value: sum2("w") }).groupby("index").having(gt("value", 0));
}

// src/marks/Grid2DMark.js
var Grid2DMark = class extends Mark2 {
  constructor(type2, source, options) {
    const {
      bandwidth = 20,
      binType = "linear",
      binWidth = 2,
      binPad = 1,
      ...channels
    } = options;
    const densityMap = createDensityMap(channels);
    super(type2, source, channels, xyext);
    this.densityMap = densityMap;
    handleParam(this, "bandwidth", bandwidth, () => {
      return this.grids ? this.convolve().update() : null;
    });
    handleParam(this, "binWidth", binWidth);
    handleParam(this, "binType", binType);
    handleParam(this, "binPad", binPad);
  }
  setPlot(plot3, index2) {
    const update2 = () => {
      if (this.stats)
        this.requestUpdate();
    };
    plot3.addAttributeListener("domainX", update2);
    plot3.addAttributeListener("domainY", update2);
    return super.setPlot(plot3, index2);
  }
  get filterIndexable() {
    const xdom = this.plot.getAttribute("xDomain");
    const ydom = this.plot.getAttribute("yDomain");
    return xdom && ydom && !xdom[Transient] && !ydom[Transient];
  }
  query(filter3 = []) {
    const { plot: plot3, binType, binPad, channels, densityMap, source } = this;
    const [x06, x12] = this.extentX = extentX(this, filter3);
    const [y06, y12] = this.extentY = extentY(this, filter3);
    const [nx, ny] = this.bins = this.binDimensions(this);
    const bx = binField2(this, "x");
    const by = binField2(this, "y");
    const rx = !!plot3.getAttribute("xReverse");
    const ry = !!plot3.getAttribute("yReverse");
    const x3 = bin1d2(bx, x06, x12, nx, rx, this.binPad);
    const y3 = bin1d2(by, y06, y12, ny, ry, this.binPad);
    const bounds = binPad ? [isBetween(bx, [x06, x12]), isBetween(by, [y06, y12])] : [lte(x06, bx), lt(bx, x12), lte(y06, by), lt(by, y12)];
    const q2 = Query.from(source.table).where(filter3.concat(bounds));
    const groupby = this.groupby = [];
    let agg2 = count();
    for (const c4 of channels) {
      if (Object.hasOwn(c4, "field")) {
        const { as, channel, field: field2 } = c4;
        if (field2.aggregate) {
          agg2 = field2;
          densityMap[channel] = true;
        } else if (channel === "weight") {
          agg2 = sum2(field2);
        } else if (channel !== "x" && channel !== "y") {
          q2.select({ [as]: field2 });
          groupby.push(as);
        }
      }
    }
    return binType === "linear" ? binLinear2d(q2, x3, y3, agg2, nx, groupby) : bin2d(q2, x3, y3, agg2, nx, groupby);
  }
  binDimensions() {
    const { plot: plot3, binWidth } = this;
    return [
      Math.round(plot3.innerWidth() / binWidth),
      Math.round(plot3.innerHeight() / binWidth)
    ];
  }
  queryResult(data) {
    const [nx, ny] = this.bins;
    this.grids = grid2d(nx, ny, data, this.groupby);
    return this.convolve();
  }
  convolve() {
    const { bandwidth, bins: bins2, grids, plot: plot3 } = this;
    if (bandwidth <= 0) {
      this.kde = this.grids.map(({ key, grid: grid2 }) => {
        return grid2.key = key, grid2;
      });
    } else {
      const w2 = plot3.innerWidth();
      const h2 = plot3.innerHeight();
      const [nx, ny] = bins2;
      const neg = grids.some(({ grid: grid2 }) => grid2.some((v3) => v3 < 0));
      const configX = dericheConfig(bandwidth * (nx - 1) / w2, neg);
      const configY = dericheConfig(bandwidth * (ny - 1) / h2, neg);
      this.kde = this.grids.map(({ key, grid: grid2 }) => {
        const k3 = dericheConv2d(configX, configY, grid2, bins2);
        return k3.key = key, k3;
      });
    }
    return this;
  }
  plotSpecs() {
    throw new Error("Unimplemented. Use a Grid2D mark subclass.");
  }
};
function createDensityMap(channels) {
  const densityMap = {};
  for (const key in channels) {
    if (channels[key] === "density") {
      delete channels[key];
      densityMap[key] = true;
    }
  }
  return densityMap;
}
function bin1d2(x3, x06, x12, n, reverse3, pad3) {
  const d = (n - pad3) / (x12 - x06);
  const f2 = d !== 1 ? ` * ${d}::DOUBLE` : "";
  return reverse3 ? sql`(${x12} - ${x3}::DOUBLE)${f2}` : sql`(${x3}::DOUBLE - ${x06})${f2}`;
}
function bin2d(q2, xp, yp, value, xn, groupby) {
  return q2.select({
    index: sql`FLOOR(${xp})::INTEGER + FLOOR(${yp})::INTEGER * ${xn}`,
    value
  }).groupby("index", groupby);
}
function binLinear2d(q2, xp, yp, value, xn, groupby) {
  const w2 = value.column ? `* ${value.column}` : "";
  const subq = (i2, w3) => q2.clone().select({ xp, yp, i: i2, w: w3 });
  const a2 = subq(
    sql`FLOOR(xp)::INTEGER + FLOOR(yp)::INTEGER * ${xn}`,
    sql`(FLOOR(xp)::INTEGER + 1 - xp) * (FLOOR(yp)::INTEGER + 1 - yp)${w2}`
  );
  const b2 = subq(
    sql`FLOOR(xp)::INTEGER + (FLOOR(yp)::INTEGER + 1) * ${xn}`,
    sql`(FLOOR(xp)::INTEGER + 1 - xp) * (yp - FLOOR(yp)::INTEGER)${w2}`
  );
  const c4 = subq(
    sql`FLOOR(xp)::INTEGER + 1 + FLOOR(yp)::INTEGER * ${xn}`,
    sql`(xp - FLOOR(xp)::INTEGER) * (FLOOR(yp)::INTEGER + 1 - yp)${w2}`
  );
  const d = subq(
    sql`FLOOR(xp)::INTEGER + 1 + (FLOOR(yp)::INTEGER + 1) * ${xn}`,
    sql`(xp - FLOOR(xp)::INTEGER) * (yp - FLOOR(yp)::INTEGER)${w2}`
  );
  return Query.from(Query.unionAll(a2, b2, c4, d)).select({ index: "i", value: sum2("w") }, groupby).groupby("index", groupby).having(gt("value", 0));
}

// src/marks/Density2DMark.js
var Density2DMark = class extends Grid2DMark {
  constructor(source, options) {
    const { type: type2 = "dot", binsX, binsY, ...channels } = options;
    channels.binPad = channels.binPad ?? 0;
    super(type2, source, channels);
    handleParam(this, "binsX", binsX);
    handleParam(this, "binsY", binsY);
  }
  convolve() {
    super.convolve();
    const { bins: bins2, binPad, extentX: extentX2, extentY: extentY2 } = this;
    const [nx, ny] = bins2;
    const [x06, x12] = extentX2;
    const [y06, y12] = extentY2;
    const deltaX = (x12 - x06) / (nx - binPad);
    const deltaY = (y12 - y06) / (ny - binPad);
    const offset2 = binPad ? 0 : 0.5;
    this.data = points(this.kde, bins2, x06, y06, deltaX, deltaY, offset2);
    return this;
  }
  binDimensions() {
    const { plot: plot3, binWidth, binsX, binsY } = this;
    return [
      binsX ?? Math.round(plot3.innerWidth() / binWidth),
      binsY ?? Math.round(plot3.innerHeight() / binWidth)
    ];
  }
  plotSpecs() {
    const { type: type2, channels, densityMap, data } = this;
    const options = {};
    for (const c4 of channels) {
      const { channel } = c4;
      options[channel] = channel === "x" || channel === "y" ? channel : channelOption(c4);
    }
    for (const channel in densityMap) {
      if (densityMap[channel]) {
        options[channel] = "density";
      }
    }
    return [{ type: type2, data, options }];
  }
};
function points(kde, bins2, x06, y06, deltaX, deltaY, offset2) {
  const scale3 = 1 / (deltaX * deltaY);
  const [nx, ny] = bins2;
  const data = [];
  for (const grid2 of kde) {
    for (let k3 = 0, j2 = 0; j2 < ny; ++j2) {
      for (let i2 = 0; i2 < nx; ++i2, ++k3) {
        data.push({
          x: x06 + (i2 + offset2) * deltaX,
          y: y06 + (j2 + offset2) * deltaY,
          density: grid2[k3] * scale3
        });
      }
    }
  }
  return data;
}

// src/marks/util/raster.js
function raster2(grid2, data, w2, h2, scale3, scheme28) {
  const n = (scheme28.length >> 2) - 1;
  for (let j2 = 0, k3 = 0; j2 < h2; ++j2) {
    for (let i2 = 0, row = (h2 - j2 - 1) * w2; i2 < w2; ++i2, k3 += 4) {
      const c4 = n * scale3(grid2[i2 + row]) << 2;
      data[k3 + 0] = scheme28[c4 + 0];
      data[k3 + 1] = scheme28[c4 + 1];
      data[k3 + 2] = scheme28[c4 + 2];
      data[k3 + 3] = scheme28[c4 + 3];
    }
  }
}
function palette(size, interp) {
  const p2 = new Uint8ClampedArray(4 * size);
  const n = size - 1;
  for (let i2 = 0; i2 <= n; ++i2) {
    const v3 = interp(i2 / n);
    const { r, g: g2, b: b2, opacity: opacity2 = 1 } = typeof v3 === "string" ? rgb(v3) : v3;
    const k3 = i2 << 2;
    p2[k3 + 0] = r;
    p2[k3 + 1] = g2;
    p2[k3 + 2] = b2;
    p2[k3 + 3] = 255 * opacity2 | 0;
  }
  return p2;
}
function createCanvas(w2, h2) {
  if (typeof document !== "undefined") {
    const c4 = document.createElement("canvas");
    c4.setAttribute("width", w2);
    c4.setAttribute("height", h2);
    return c4;
  }
  throw new Error("Can not create a canvas instance.");
}
function opacityMap(color3 = "black") {
  const { r, g: g2, b: b2 } = rgb(color3);
  return (opacity2) => ({ r, g: g2, b: b2, opacity: opacity2 });
}

// src/marks/RasterMark.js
var RasterMark = class extends Grid2DMark {
  constructor(source, options) {
    super("image", source, options);
  }
  setPlot(plot3, index2) {
    const update2 = () => {
      if (this.stats)
        this.rasterize();
    };
    plot3.addAttributeListener("schemeColor", update2);
    super.setPlot(plot3, index2);
  }
  convolve() {
    return super.convolve().rasterize();
  }
  rasterize() {
    const { bins: bins2, kde, groupby } = this;
    const [w2, h2] = bins2;
    const { canvas, ctx, img } = imageData(this, w2, h2);
    const s2 = imageScale(this);
    const idx = groupby.indexOf(this.channelField("fill")?.as);
    const domain = idx < 0 ? [] : kde.map(({ key }) => key[idx]);
    this.data = kde.map((grid2) => {
      const palette2 = imagePalette(this, domain, grid2.key?.[idx]);
      raster2(grid2, img.data, w2, h2, s2, palette2);
      ctx.putImageData(img, 0, 0);
      return { src: canvas.toDataURL() };
    });
    return this;
  }
  plotSpecs() {
    const { type: type2, plot: plot3, data } = this;
    const options = {
      src: "src",
      width: plot3.innerWidth(),
      height: plot3.innerHeight(),
      preserveAspectRatio: "none",
      imageRendering: this.channel("imageRendering")?.value,
      frameAnchor: "middle"
    };
    return [{ type: type2, data, options }];
  }
};
function imageData(mark2, w2, h2) {
  if (!mark2.image || mark2.image.w !== w2 || mark2.image.h !== h2) {
    const canvas = createCanvas(w2, h2);
    const ctx = canvas.getContext("2d", { willReadFrequently: true });
    const img = ctx.getImageData(0, 0, w2, h2);
    mark2.image = { canvas, ctx, img, w: w2, h: h2 };
  }
  return mark2.image;
}
function imageScale(mark2) {
  const { densityMap, kde, plot: plot3 } = mark2;
  let domain = densityMap.fill && plot3.getAttribute("colorDomain");
  if (!domain) {
    let lo = 0, hi = 0;
    kde.forEach((grid2) => {
      for (const v3 of grid2) {
        if (v3 < lo)
          lo = v3;
        if (v3 > hi)
          hi = v3;
      }
    });
    domain = lo === 0 && hi === 0 ? [0, 1] : [lo, hi];
  }
  const type2 = plot3.getAttribute("colorScale");
  return scale2({ x: { type: type2, domain, range: [0, 1] } }).apply;
}
function imagePalette(mark2, domain, value, steps = 1024) {
  const { densityMap, plot: plot3 } = mark2;
  const scheme28 = plot3.getAttribute("colorScheme");
  let color3;
  if (densityMap.fill) {
    if (scheme28) {
      try {
        return palette(
          steps,
          scale2({ color: { scheme: scheme28, domain: [0, 1] } }).interpolate
        );
      } catch (err) {
        console.warn(err);
      }
    }
  } else if (domain.length) {
    const range3 = plot3.getAttribute("colorRange");
    const spec = {
      domain,
      range: range3,
      scheme: scheme28 || (range3 ? void 0 : "tableau10")
    };
    color3 = scale2({ color: spec }).apply(value);
  } else {
    const fill = mark2.channelField("fill");
    color3 = isColor2(fill?.value) ? fill.value : void 0;
  }
  return palette(steps, opacityMap(color3));
}

// src/marks/DenseLineMark.js
var DenseLineMark = class extends RasterMark {
  constructor(source, options) {
    const { normalize: normalize4 = true, ...rest } = options;
    super(source, { bandwidth: 0, ...rest });
    handleParam(this, "normalize", normalize4);
  }
  query(filter3 = []) {
    const { plot: plot3, channels, normalize: normalize4, source } = this;
    const [x06, x12] = extentX(this, filter3);
    const [y06, y12] = extentY(this, filter3);
    const [nx, ny] = this.bins = this.binDimensions(this);
    const bx = binField2(this, "x");
    const by = binField2(this, "y");
    const rx = !!plot3.getAttribute("xReverse");
    const ry = !!plot3.getAttribute("yReverse");
    const x3 = bin1d(bx, x06, x12, nx, rx, this.binPad);
    const y3 = bin1d(by, y06, y12, ny, ry, this.binPad);
    const q2 = Query.from(source.table).where(stripXY(this, filter3));
    const groupby = this.groupby = [];
    const z2 = [];
    for (const c4 of channels) {
      if (Object.hasOwn(c4, "field")) {
        const { channel, field: field2 } = c4;
        if (channel === "z") {
          q2.select({ [channel]: field2 });
          z2.push("z");
        } else if (channel !== "x" && channel !== "y") {
          q2.select({ [channel]: field2 });
          groupby.push(channel);
        }
      }
    }
    return lineDensity(q2, x3, y3, z2, nx, ny, groupby, normalize4);
  }
};
function stripXY(mark2, filter3) {
  if (Array.isArray(filter3) && !filter3.length)
    return filter3;
  const xc = mark2.channelField("x").field.column;
  const yc = mark2.channelField("y").field.column;
  const test = (p2) => p2.op !== "BETWEEN" || p2.field.column !== xc && p2.field.column !== yc;
  const filterAnd = (p2) => p2.op === "AND" ? and(p2.children.filter((c4) => test(c4))) : p2;
  return Array.isArray(filter3) ? filter3.filter((p2) => test(p2)).map((p2) => filterAnd(p2)) : filterAnd(filter3);
}
function lineDensity(q2, x3, y3, z2, xn, yn, groupby = [], normalize4 = true) {
  q2.select({
    x: sql`FLOOR(${x3})::INTEGER`,
    y: sql`FLOOR(${y3})::INTEGER`
  });
  const groups2 = groupby.concat(z2);
  const pairPart = groups2.length ? `PARTITION BY ${groups2.join(", ")} ` : "";
  const pairs = Query.from(q2).select(groups2, {
    x0: "x",
    y0: "y",
    dx: sql`(lead(x) OVER sw - x)`,
    dy: sql`(lead(y) OVER sw - y)`
  }).window({ sw: sql`${pairPart}ORDER BY x ASC` }).qualify(and(
    sql`(x0 < ${xn} OR x0 + dx < ${xn})`,
    sql`(y0 < ${yn} OR y0 + dy < ${yn})`,
    sql`(x0 > 0 OR x0 + dx > 0)`,
    sql`(y0 > 0 OR y0 + dy > 0)`
  ));
  const num = Query.select({ x: sql`GREATEST(MAX(ABS(dx)), MAX(ABS(dy)))` }).from("pairs");
  const indices = Query.select({ i: sql`UNNEST(range((${num})))::INTEGER` });
  const raster4 = Query.unionAll(
    Query.select(groups2, {
      x: sql`x0 + i`,
      y: sql`y0 + ROUND(i * dy / dx::FLOAT)::INTEGER`
    }).from("pairs", "indices").where(sql`ABS(dy) <= ABS(dx) AND i < ABS(dx)`),
    Query.select(groups2, {
      x: sql`x0 + ROUND(SIGN(dy) * i * dx / dy::FLOAT)::INTEGER`,
      y: sql`y0 + SIGN(dy) * i`
    }).from("pairs", "indices").where(sql`ABS(dy) > ABS(dx) AND i < ABS(dy)`),
    Query.select(groups2, { x: "x0", y: "y0" }).from("pairs").where(isNull("dx"))
  );
  const pointPart = ["x"].concat(groups2).join(", ");
  const points2 = Query.from("raster").select(
    groups2,
    "x",
    "y",
    normalize4 ? { w: sql`1.0 / COUNT(*) OVER (PARTITION BY ${pointPart})` } : null
  ).where(and(isBetween("x", [0, xn]), isBetween("y", [0, yn])));
  return Query.with({ pairs, indices, raster: raster4, points: points2 }).from("points").select(groupby, {
    index: sql`x + y * ${xn}::INTEGER`,
    value: normalize4 ? sum2("w") : count()
  }).groupby("index", groupby);
}

// src/marks/ContourMark.js
var ContourMark = class extends Grid2DMark {
  constructor(source, options) {
    const { thresholds = 10, ...channels } = options;
    super("geo", source, channels);
    handleParam(this, "thresholds", thresholds, () => {
      return this.grids ? this.contours().update() : null;
    });
  }
  convolve() {
    return super.convolve().contours();
  }
  contours() {
    const { bins: bins2, densityMap, kde, thresholds, groupby, plot: plot3 } = this;
    let tz = thresholds;
    if (!Array.isArray(tz)) {
      const scale3 = max2(kde.map((k3) => max2(k3)));
      tz = Array.from({ length: tz - 1 }, (_2, i2) => scale3 * (i2 + 1) / tz);
    }
    if (densityMap.fill || densityMap.stroke) {
      if (this.plot.getAttribute("colorScale") !== "log") {
        this.plot.setAttribute("colorZero", true);
      }
    }
    const [nx, ny] = bins2;
    const [x06, x12] = plot3.getAttribute("xDomain");
    const [y06, y12] = plot3.getAttribute("yDomain");
    const sx = (x12 - x06) / nx;
    const sy = (y12 - y06) / ny;
    const xo = +x06;
    const yo = +y06;
    const x3 = (v3) => xo + v3 * sx;
    const y3 = (v3) => yo + v3 * sy;
    const contour3 = contours_default().size(bins2);
    this.data = kde.flatMap((k3) => tz.map((t) => {
      const c4 = transform2(contour3.contour(k3, t), x3, y3);
      groupby.forEach((name2, i2) => c4[name2] = k3.key[i2]);
      c4.density = t;
      return c4;
    }));
    return this;
  }
  plotSpecs() {
    const { type: type2, channels, densityMap, data } = this;
    const options = {};
    for (const c4 of channels) {
      const { channel } = c4;
      if (channel !== "x" && channel !== "y") {
        options[channel] = channelOption(c4);
      }
    }
    if (densityMap.fill)
      options.fill = "density";
    if (densityMap.stroke)
      options.stroke = "density";
    return [{ type: type2, data, options }];
  }
};
function transform2(geometry, x3, y3) {
  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }
  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  }
  function transformPoint(coordinates) {
    coordinates[0] = x3(coordinates[0]);
    coordinates[1] = y3(coordinates[1]);
  }
  geometry.coordinates.forEach(transformPolygon);
  return geometry;
}

// src/marks/HexbinMark.js
var HexbinMark = class extends Mark2 {
  constructor(source, options) {
    const { type: type2 = "hexagon", binWidth = 20, ...channels } = options;
    super(type2, source, { r: binWidth / 2, clip: true, ...channels }, xyext);
    this.binWidth = binWidth;
  }
  get filterIndexable() {
    const xdom = this.plot.getAttribute("xDomain");
    const ydom = this.plot.getAttribute("yDomain");
    return xdom && ydom && !xdom[Transient] && !ydom[Transient];
  }
  query(filter3 = []) {
    if (this.hasOwnData())
      return null;
    const { plot: plot3, binWidth, channels, source } = this;
    const [x12, x22] = extentX(this, filter3);
    const [y12, y22] = extentY(this, filter3);
    const ox2 = 0.5 - plot3.getAttribute("marginLeft");
    const oy2 = 0 - plot3.getAttribute("marginTop");
    const dx = `${binWidth}::DOUBLE`;
    const dy = `${binWidth * (1.5 / Math.sqrt(3))}::DOUBLE`;
    const xr = `${plot3.innerWidth() / (x22 - x12)}::DOUBLE`;
    const yr = `${plot3.innerHeight() / (y22 - y12)}::DOUBLE`;
    let x3, y3;
    const aggr = /* @__PURE__ */ new Set();
    const cols = {};
    for (const c4 of channels) {
      if (c4.channel === "order") {
        q2.orderby(c4.value);
      } else if (c4.channel === "x") {
        x3 = c4;
      } else if (c4.channel === "y") {
        y3 = c4;
      } else if (Object.hasOwn(c4, "field")) {
        cols[c4.as] = c4.field;
        if (c4.field.aggregate) {
          c4.field.columns.forEach((col) => aggr.add(col));
        }
      }
    }
    const q2 = Query.select({
      [x3.as]: sql`${x12}::DOUBLE + ((x + 0.5 * (y & 1)) * ${dx} + ${ox2})::DOUBLE / ${xr}`,
      [y3.as]: sql`${y22}::DOUBLE - (y * ${dy} + ${oy2})::DOUBLE / ${yr}`,
      ...cols
    }).groupby("x", "y");
    const xx = `${xr} * (${x3.field} - ${x12}::DOUBLE)`;
    const yy = `${yr} * (${y22}::DOUBLE - ${y3.field})`;
    const hex2 = Query.select({
      py: sql`(${yy} - ${oy2}) / ${dy}`,
      pj: sql`ROUND(py)::INTEGER`,
      px: sql`(${xx} - ${ox2}) / ${dx} - 0.5 * (pj & 1)`,
      pi: sql`ROUND(px)::INTEGER`,
      tt: sql`ABS(py-pj) * 3 > 1 AND (px-pi)**2 + (py-pj)**2 > (px - pi - 0.5 * CASE WHEN px < pi THEN -1 ELSE 1 END)**2 + (py - pj - CASE WHEN py < pj THEN -1 ELSE 1 END)**2`,
      x: sql`CASE WHEN tt THEN (pi + (CASE WHEN px < pi THEN -0.5 ELSE 0.5 END) + (CASE WHEN pj & 1 <> 0 THEN 0.5 ELSE -0.5 END))::INTEGER ELSE pi END`,
      y: sql`CASE WHEN tt THEN (pj + CASE WHEN py < pj THEN -1 ELSE 1 END)::INTEGER ELSE pj END`
    }).select(Array.from(aggr)).from(source.table).where(isNotNull(x3.field), isNotNull(y3.field), filter3);
    return q2.from(hex2);
  }
};

// src/marks/RasterTileMark.js
var RasterTileMark = class extends Grid2DMark {
  constructor(source, options) {
    const { origin = [0, 0], dim = "xy", ...markOptions2 } = options;
    super("image", source, markOptions2);
    this.origin = origin;
    this.tileX = dim.toLowerCase().includes("x");
    this.tileY = dim.toLowerCase().includes("y");
  }
  setPlot(plot3, index2) {
    const update2 = () => {
      if (this.stats)
        this.rasterize();
    };
    plot3.addAttributeListener("schemeColor", update2);
    super.setPlot(plot3, index2);
  }
  requestQuery() {
    return this.requestTiles();
  }
  query(filter3 = []) {
    this._filter = filter3;
    return null;
  }
  tileQuery(extent4) {
    const { plot: plot3, binType, binPad, channels, densityMap, source } = this;
    const [[x06, x12], [y06, y12]] = extent4;
    const [nx, ny] = this.bins;
    const bx = binField2(this, "x");
    const by = binField2(this, "y");
    const rx = !!plot3.getAttribute("xReverse");
    const ry = !!plot3.getAttribute("yReverse");
    const x3 = bin1d3(bx, x06, x12, nx, rx, binPad);
    const y3 = bin1d3(by, y06, y12, ny, ry, binPad);
    const bounds = binPad ? [isBetween(bx, [x06, x12]), isBetween(by, [y06, y12])] : [lte(x06, bx), lt(bx, x12), lte(y06, by), lt(by, y12)];
    const q2 = Query.from(source.table).where(bounds);
    const groupby = this.groupby = [];
    let agg2 = count();
    for (const c4 of channels) {
      if (Object.hasOwn(c4, "field")) {
        const { channel, field: field2 } = c4;
        if (field2.aggregate) {
          agg2 = field2;
          densityMap[channel] = true;
        } else if (channel === "weight") {
          agg2 = sum2(field2);
        } else if (channel !== "x" && channel !== "y") {
          q2.select({ [channel]: field2 });
          groupby.push(channel);
        }
      }
    }
    return binType === "linear" ? binLinear2d2(q2, x3, y3, agg2, nx, groupby) : bin2d2(q2, x3, y3, agg2, nx, groupby);
  }
  async requestTiles() {
    const mc = coordinator();
    if (this.prefetch)
      mc.cancel(this.prefetch);
    const { binPad, tileX, tileY, origin: [tx, ty] } = this;
    const [m2, n] = this.bins = this.binDimensions(this);
    const [x06, x12] = extentX(this, this._filter);
    const [y06, y12] = extentY(this, this._filter);
    const xspan = x12 - x06;
    const yspan = y12 - y06;
    const xx = Math.floor((x06 - tx) * (m2 - binPad) / xspan);
    const yy = Math.floor((y06 - ty) * (n - binPad) / yspan);
    const tileExtent = (i2, j2) => [
      [tx + i2 * xspan, tx + (i2 + 1) * xspan],
      [ty + j2 * yspan, ty + (j2 + 1) * yspan]
    ];
    const i0 = Math.floor((x06 - tx) / xspan);
    const i1 = tileX ? tileFloor((x12 - tx) / xspan) : i0;
    const j0 = Math.floor((y06 - ty) / yspan);
    const j1 = tileY ? tileFloor((y12 - ty) / yspan) : j0;
    const coords = [];
    for (let i2 = i0; i2 <= i1; ++i2) {
      for (let j2 = j0; j2 <= j1; ++j2) {
        coords.push([i2, j2]);
      }
    }
    const queries = coords.map(
      ([i2, j2]) => mc.query(this.tileQuery(tileExtent(i2, j2)))
    );
    const prefetchCoords = [];
    if (tileX) {
      for (let j2 = j0; j2 <= j1; ++j2) {
        prefetchCoords.push([i1 + 1, j2]);
        prefetchCoords.push([i0 - 1, j2]);
      }
    }
    if (tileY) {
      const x07 = tileX ? i0 - 1 : i0;
      const x13 = tileX ? i1 + 1 : i1;
      for (let i2 = x07; i2 <= x13; ++i2) {
        prefetchCoords.push([i2, j1 + 1]);
        prefetchCoords.push([i2, j0 - 1]);
      }
    }
    this.prefetch = prefetchCoords.map(
      ([i2, j2]) => mc.prefetch(this.tileQuery(tileExtent(i2, j2)))
    );
    const tiles = await Promise.all(queries);
    this.grids = [{ grid: processTiles(m2, n, xx, yy, coords, tiles) }];
    this.convolve().update();
  }
  convolve() {
    return super.convolve().rasterize();
  }
  rasterize() {
    const { bins: bins2, kde, groupby } = this;
    const [w2, h2] = bins2;
    const { canvas, ctx, img } = imageData2(this, w2, h2);
    const s2 = imageScale2(this);
    const idx = groupby.indexOf(this.channelField("fill")?.as);
    const domain = idx < 0 ? [] : kde.map(({ key }) => key[idx]);
    this.data = kde.map((grid2) => {
      const palette2 = imagePalette2(this, domain, grid2.key?.[idx]);
      raster2(grid2, img.data, w2, h2, s2, palette2);
      ctx.putImageData(img, 0, 0);
      return { src: canvas.toDataURL() };
    });
    return this;
  }
  plotSpecs() {
    const { type: type2, data, plot: plot3 } = this;
    const options = {
      src: "src",
      width: plot3.innerWidth(),
      height: plot3.innerHeight(),
      preserveAspectRatio: "none",
      imageRendering: this.channel("imageRendering")?.value,
      frameAnchor: "middle"
    };
    return [{ type: type2, data, options }];
  }
};
function processTiles(m2, n, x3, y3, coords, tiles) {
  const grid2 = new Float64Array(m2 * n);
  tiles.forEach((data, index2) => {
    const [i2, j2] = coords[index2];
    const tx = i2 * m2 - x3;
    const ty = j2 * n - y3;
    copy3(m2, n, grid2, data, tx, ty);
  });
  return grid2;
}
function copy3(m2, n, grid2, values2, tx, ty) {
  const num = values2.numRows;
  if (num === 0)
    return;
  const index2 = values2.getChild("index").toArray();
  const value = values2.getChild("value").toArray();
  for (let row = 0; row < num; ++row) {
    const idx = index2[row];
    const i2 = tx + idx % m2;
    const j2 = ty + Math.floor(idx / m2);
    if (0 <= i2 && i2 < m2 && 0 <= j2 && j2 < n) {
      grid2[i2 + j2 * m2] = value[row];
    }
  }
}
function imageData2(mark2, w2, h2) {
  if (!mark2.image || mark2.image.w !== w2 || mark2.image.h !== h2) {
    const canvas = createCanvas(w2, h2);
    const ctx = canvas.getContext("2d", { willReadFrequently: true });
    const img = ctx.getImageData(0, 0, w2, h2);
    mark2.image = { canvas, ctx, img, w: w2, h: h2 };
  }
  return mark2.image;
}
function imageScale2(mark2) {
  const { densityMap, kde, plot: plot3 } = mark2;
  let domain = densityMap.fill && plot3.getAttribute("colorDomain");
  if (!domain) {
    let lo = 0, hi = 0;
    kde.forEach((grid2) => {
      for (const v3 of grid2) {
        if (v3 < lo)
          lo = v3;
        if (v3 > hi)
          hi = v3;
      }
    });
    domain = lo === 0 && hi === 0 ? [0, 1] : [lo, hi];
  }
  const type2 = plot3.getAttribute("colorScale");
  return scale2({ x: { type: type2, domain, range: [0, 1] } }).apply;
}
function imagePalette2(mark2, domain, value, steps = 1024) {
  const { densityMap, plot: plot3 } = mark2;
  const scheme28 = plot3.getAttribute("colorScheme");
  let color3;
  if (densityMap.fill) {
    if (scheme28) {
      try {
        return palette(
          steps,
          scale2({ color: { scheme: scheme28, domain: [0, 1] } }).interpolate
        );
      } catch (err) {
        console.warn(err);
      }
    }
  } else if (domain.length) {
    const range3 = plot3.getAttribute("colorRange");
    const spec = {
      domain,
      range: range3,
      scheme: scheme28 || (range3 ? void 0 : "tableau10")
    };
    color3 = scale2({ color: spec }).apply(value);
  } else {
    const fill = mark2.channelField("fill");
    color3 = isColor2(fill?.value) ? fill.value : void 0;
  }
  return palette(steps, opacityMap(color3));
}
function bin1d3(x3, x06, x12, n, reverse3, pad3) {
  const d = (n - pad3) / (x12 - x06);
  const f2 = d !== 1 ? ` * ${d}::DOUBLE` : "";
  return reverse3 ? sql`(${x12} - ${x3}::DOUBLE)${f2}` : sql`(${x3}::DOUBLE - ${x06})${f2}`;
}
function bin2d2(q2, xp, yp, value, xn, groupby) {
  return q2.select({
    index: sql`FLOOR(${xp})::INTEGER + FLOOR(${yp})::INTEGER * ${xn}`,
    value
  }).groupby("index", groupby);
}
function binLinear2d2(q2, xp, yp, value, xn, groupby) {
  const w2 = value.column ? `* ${value.column}` : "";
  const subq = (i2, w3) => q2.clone().select({ xp, yp, i: i2, w: w3 });
  const a2 = subq(
    sql`FLOOR(xp)::INTEGER + FLOOR(yp)::INTEGER * ${xn}`,
    sql`(FLOOR(xp)::INTEGER + 1 - xp) * (FLOOR(yp)::INTEGER + 1 - yp)${w2}`
  );
  const b2 = subq(
    sql`FLOOR(xp)::INTEGER + (FLOOR(yp)::INTEGER + 1) * ${xn}`,
    sql`(FLOOR(xp)::INTEGER + 1 - xp) * (yp - FLOOR(yp)::INTEGER)${w2}`
  );
  const c4 = subq(
    sql`FLOOR(xp)::INTEGER + 1 + FLOOR(yp)::INTEGER * ${xn}`,
    sql`(xp - FLOOR(xp)::INTEGER) * (FLOOR(yp)::INTEGER + 1 - yp)${w2}`
  );
  const d = subq(
    sql`FLOOR(xp)::INTEGER + 1 + (FLOOR(yp)::INTEGER + 1) * ${xn}`,
    sql`(xp - FLOOR(xp)::INTEGER) * (yp - FLOOR(yp)::INTEGER)${w2}`
  );
  return Query.from(Query.unionAll(a2, b2, c4, d)).select({ index: "i", value: sum2("w") }, groupby).groupby("index", groupby).having(neq("value", 0));
}
function tileFloor(value) {
  const floored = Math.floor(value);
  return floored === value ? floored - 1 : floored;
}

// src/marks/util/stats.js
function ibetainv2(p2, a2, b2) {
  var EPS2 = 1e-8;
  var a1 = a2 - 1;
  var b1 = b2 - 1;
  var j2 = 0;
  var lna, lnb, pp, t, u4, err, x3, al, h2, w2, afac;
  if (p2 <= 0)
    return 0;
  if (p2 >= 1)
    return 1;
  if (a2 >= 1 && b2 >= 1) {
    pp = p2 < 0.5 ? p2 : 1 - p2;
    t = Math.sqrt(-2 * Math.log(pp));
    x3 = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
    if (p2 < 0.5)
      x3 = -x3;
    al = (x3 * x3 - 3) / 6;
    h2 = 2 / (1 / (2 * a2 - 1) + 1 / (2 * b2 - 1));
    w2 = x3 * Math.sqrt(al + h2) / h2 - (1 / (2 * b2 - 1) - 1 / (2 * a2 - 1)) * (al + 5 / 6 - 2 / (3 * h2));
    x3 = a2 / (a2 + b2 * Math.exp(2 * w2));
  } else {
    lna = Math.log(a2 / (a2 + b2));
    lnb = Math.log(b2 / (a2 + b2));
    t = Math.exp(a2 * lna) / a2;
    u4 = Math.exp(b2 * lnb) / b2;
    w2 = t + u4;
    if (p2 < t / w2)
      x3 = Math.pow(a2 * w2 * p2, 1 / a2);
    else
      x3 = 1 - Math.pow(b2 * w2 * (1 - p2), 1 / b2);
  }
  afac = -gammaln2(a2) - gammaln2(b2) + gammaln2(a2 + b2);
  for (; j2 < 10; j2++) {
    if (x3 === 0 || x3 === 1)
      return x3;
    err = ibeta2(x3, a2, b2) - p2;
    t = Math.exp(a1 * Math.log(x3) + b1 * Math.log(1 - x3) + afac);
    u4 = err / t;
    x3 -= t = u4 / (1 - 0.5 * Math.min(1, u4 * (a1 / x3 - b1 / (1 - x3))));
    if (x3 <= 0)
      x3 = 0.5 * (x3 + t);
    if (x3 >= 1)
      x3 = 0.5 * (x3 + t + 1);
    if (Math.abs(t) < EPS2 * x3 && j2 > 0)
      break;
  }
  return x3;
}
function ibeta2(x3, a2, b2) {
  var bt = x3 === 0 || x3 === 1 ? 0 : Math.exp(gammaln2(a2 + b2) - gammaln2(a2) - gammaln2(b2) + a2 * Math.log(x3) + b2 * Math.log(1 - x3));
  if (x3 < 0 || x3 > 1)
    return false;
  if (x3 < (a2 + 1) / (a2 + b2 + 2))
    return bt * betacf2(x3, a2, b2) / a2;
  return 1 - bt * betacf2(1 - x3, b2, a2) / b2;
}
function betacf2(x3, a2, b2) {
  var fpmin = 1e-30;
  var m2 = 1;
  var qab = a2 + b2;
  var qap = a2 + 1;
  var qam = a2 - 1;
  var c4 = 1;
  var d = 1 - qab * x3 / qap;
  var m22, aa2, del, h2;
  if (Math.abs(d) < fpmin)
    d = fpmin;
  d = 1 / d;
  h2 = d;
  for (; m2 <= 100; m2++) {
    m22 = 2 * m2;
    aa2 = m2 * (b2 - m2) * x3 / ((qam + m22) * (a2 + m22));
    d = 1 + aa2 * d;
    if (Math.abs(d) < fpmin)
      d = fpmin;
    c4 = 1 + aa2 / c4;
    if (Math.abs(c4) < fpmin)
      c4 = fpmin;
    d = 1 / d;
    h2 *= d * c4;
    aa2 = -(a2 + m2) * (qab + m2) * x3 / ((a2 + m22) * (qap + m22));
    d = 1 + aa2 * d;
    if (Math.abs(d) < fpmin)
      d = fpmin;
    c4 = 1 + aa2 / c4;
    if (Math.abs(c4) < fpmin)
      c4 = fpmin;
    d = 1 / d;
    del = d * c4;
    h2 *= del;
    if (Math.abs(del - 1) < 3e-7)
      break;
  }
  return h2;
}
function gammaln2(x3) {
  var j2 = 0;
  var cof = [
    76.18009172947146,
    -86.5053203294167,
    24.01409824083091,
    -1.231739572450155,
    0.001208650973866179,
    -5395239384953e-18
  ];
  var ser = 1.000000000190015;
  var xx, y3, tmp3;
  tmp3 = (y3 = xx = x3) + 5.5;
  tmp3 -= (xx + 0.5) * Math.log(tmp3);
  for (; j2 < 6; j2++)
    ser += cof[j2] / ++y3;
  return Math.log(2.506628274631 * ser / xx) - tmp3;
}
function qt2(p2, dof) {
  var x3 = ibetainv2(2 * Math.min(p2, 1 - p2), 0.5 * dof, 0.5);
  x3 = Math.sqrt(dof * (1 - x3) / x3);
  return p2 > 0.5 ? x3 : -x3;
}

// src/marks/RegressionMark.js
var RegressionMark = class extends Mark2 {
  constructor(source, options) {
    const { ci = 0.95, precision = 4, ...channels } = options;
    super("line", source, channels);
    const update2 = () => {
      return this.modelFit ? this.confidenceBand().update() : null;
    };
    handleParam(this, "ci", ci, update2);
    handleParam(this, "precision", precision, update2);
  }
  query(filter3 = []) {
    const x3 = this.channelField("x").as;
    const y3 = this.channelField("y").as;
    const groupby = Array.from(new Set(
      ["stroke", "z", "fx", "fy"].flatMap((c4) => this.channelField(c4)?.as || [])
    ));
    return Query.from(super.query(filter3)).select({
      intercept: regrIntercept(y3, x3),
      slope: regrSlope(y3, x3),
      n: regrCount(y3, x3),
      ssy: regrSYY(y3, x3),
      ssx: regrSXX(y3, x3),
      xm: regrAvgX(y3, x3),
      x0: castDouble(min(x3).where(isNotNull(y3))),
      x1: castDouble(max(x3).where(isNotNull(y3)))
    }).select(groupby).groupby(groupby);
  }
  queryResult(data) {
    this.modelFit = Array.from(data);
    this.lineData = this.modelFit.flatMap((m2) => linePoints(m2));
    return this.confidenceBand();
  }
  confidenceBand() {
    const { ci, modelFit, precision, plot: plot3 } = this;
    const w2 = plot3.innerWidth();
    this.areaData = ci ? modelFit.flatMap((m2) => areaPoints(ci, precision, m2, w2)) : null;
    return this;
  }
  plotSpecs() {
    const { lineData, areaData, channels, ci } = this;
    const lopt = { x: "x", y: "y" };
    const aopt = { x: "x", y1: "y1", y2: "y2", fillOpacity: 0.1 };
    for (const c4 of channels) {
      switch (c4.channel) {
        case "x":
        case "y":
        case "fill":
          break;
        case "stroke":
          lopt.stroke = aopt.fill = channelOption(c4);
          break;
        case "strokeOpacity":
          lopt.strokeOpacity = channelOption(c4);
          break;
        case "fillOpacity":
          aopt.fillOpacity = channelOption(c4);
          break;
        default:
          lopt[c4.channel] = aopt[c4.channel] = channelOption(c4);
          break;
      }
    }
    return [
      ...ci ? [{ type: "areaY", data: areaData, options: aopt }] : [],
      { type: "line", data: lineData, options: lopt }
    ];
  }
};
function linePoints(model) {
  const { x0: x06, x1: x12, xm, intercept, slope, n, ssx, ssy, ...rest } = model;
  return [
    { x: x06, y: intercept + x06 * slope, ...rest },
    { x: x12, y: intercept + x12 * slope, ...rest }
  ];
}
function areaPoints(ci, precision, model, width2) {
  const { x0: x06, x1: x12, xm, intercept, slope, n, ssx, ssy, ...rest } = model;
  const pp = precision * (x12 - x06) / width2;
  const t_sy = qt2((1 - ci) / 2, n - 2) * Math.sqrt(ssy / (n - 2));
  return range(x06, x12 - pp / 2, pp).concat(x12).map((x3) => {
    const y3 = intercept + x3 * slope;
    const ye = t_sy * Math.sqrt(1 / n + (x3 - xm) ** 2 / ssx);
    return { x: x3, y1: y3 - ye, y2: y3 + ye, ...rest };
  });
}

// src/directives/marks.js
var decorators = /* @__PURE__ */ new Set([
  "frame",
  "axisX",
  "axisY",
  "axisFx",
  "axisFy",
  "gridX",
  "gridY",
  "gridFx",
  "gridFy",
  "hexgrid",
  "graticule",
  "sphere"
]);
function mark(type2, data, channels) {
  if (arguments.length === 2) {
    channels = data;
    data = decorators.has(type2) ? null : [{}];
  }
  const MarkClass = type2.startsWith("area") || type2.startsWith("line") ? ConnectedMark : Mark2;
  return explicitType(MarkClass, type2, data, channels);
}
function explicitType(MarkClass, type2, data, channels) {
  return (plot3) => {
    plot3.addMark(new MarkClass(type2, data, channels));
  };
}
function implicitType(MarkClass, data, channels) {
  return (plot3) => {
    plot3.addMark(new MarkClass(data, channels));
  };
}
var area2 = (...args) => mark("area", ...args);
var areaX2 = (...args) => mark("areaX", ...args);
var areaY2 = (...args) => mark("areaY", ...args);
var line2 = (...args) => mark("line", ...args);
var lineX2 = (...args) => mark("lineX", ...args);
var lineY2 = (...args) => mark("lineY", ...args);
var barX2 = (...args) => mark("barX", ...args);
var barY2 = (...args) => mark("barY", ...args);
var cell2 = (...args) => mark("cell", ...args);
var cellX2 = (...args) => mark("cellX", ...args);
var cellY2 = (...args) => mark("cellY", ...args);
var rect2 = (...args) => mark("rect", ...args);
var rectX2 = (...args) => mark("rectX", ...args);
var rectY2 = (...args) => mark("rectY", ...args);
var dot2 = (...args) => mark("dot", ...args);
var dotX2 = (...args) => mark("dotX", ...args);
var dotY2 = (...args) => mark("dotY", ...args);
var circle2 = (...args) => mark("circle", ...args);
var hexagon2 = (...args) => mark("hexagon", ...args);
var text2 = (...args) => mark("text", ...args);
var textX2 = (...args) => mark("textX", ...args);
var textY2 = (...args) => mark("textY", ...args);
var ruleX2 = (...args) => mark("ruleX", ...args);
var ruleY2 = (...args) => mark("ruleY", ...args);
var tickX2 = (...args) => mark("tickX", ...args);
var tickY2 = (...args) => mark("tickY", ...args);
var vector2 = (...args) => mark("vector", ...args);
var vectorX2 = (...args) => mark("vectoX", ...args);
var vectorY2 = (...args) => mark("vectorY", ...args);
var spike2 = (...args) => mark("spike", ...args);
var image2 = (...args) => mark("image", ...args);
var densityX = (...args) => explicitType(Density1DMark, "areaX", ...args);
var densityY = (...args) => explicitType(Density1DMark, "areaY", ...args);
var density2 = (...args) => implicitType(Density2DMark, ...args);
var denseLine = (...args) => implicitType(DenseLineMark, ...args);
var contour2 = (...args) => implicitType(ContourMark, ...args);
var raster3 = (...args) => implicitType(RasterMark, ...args);
var rasterTile = (...args) => implicitType(RasterTileMark, ...args);
var hexbin2 = (...args) => implicitType(HexbinMark, ...args);
var hexgrid2 = (...args) => mark("hexgrid", ...args);
var regressionY = (...args) => implicitType(RegressionMark, ...args);
var voronoi2 = (...args) => mark("voronoi", ...args);
var voronoiMesh2 = (...args) => mark("voronoiMesh", ...args);
var delaunayLink2 = (...args) => mark("delaunayLink", ...args);
var delaunayMesh2 = (...args) => mark("delaunayMesh", ...args);
var hull2 = (...args) => mark("hull", ...args);
var arrow2 = (...args) => mark("arrow", ...args);
var link3 = (...args) => mark("link", ...args);
var frame3 = (...args) => mark("frame", ...args);
var axisX2 = (...args) => mark("axisX", ...args);
var axisY2 = (...args) => mark("axisY", ...args);
var axisFx2 = (...args) => mark("axisFx", ...args);
var axisFy2 = (...args) => mark("axisFy", ...args);
var gridX2 = (...args) => mark("gridX", ...args);
var gridY2 = (...args) => mark("gridY", ...args);
var gridFx2 = (...args) => mark("gridFx", ...args);
var gridFy2 = (...args) => mark("gridFy", ...args);
var geo2 = (...args) => mark("geo", ...args);
var sphere2 = (...args) => mark("sphere", ...args);
var graticule3 = (...args) => mark("graticule", ...args);

// src/directives/interactors.js
var interactors_exports = {};
__export(interactors_exports, {
  highlight: () => highlight,
  intervalX: () => intervalX,
  intervalXY: () => intervalXY,
  intervalY: () => intervalY,
  nearestX: () => nearestX,
  nearestY: () => nearestY,
  pan: () => pan,
  panX: () => panX,
  panY: () => panY,
  panZoom: () => panZoom,
  panZoomX: () => panZoomX,
  panZoomY: () => panZoomY,
  toggle: () => toggle,
  toggleColor: () => toggleColor,
  toggleX: () => toggleX,
  toggleY: () => toggleY
});

// src/interactors/util/to-kebab-case.js
function toKebabCase(cc2) {
  const lc = cc2.toLowerCase();
  const n = cc2.length;
  let kc = "";
  for (let i2 = 0; i2 < n; ++i2) {
    kc += (cc2[i2] !== lc[i2] ? "-" : "") + lc[i2];
  }
  return kc;
}

// src/interactors/util/sanitize-styles.js
function sanitizeStyles(styles2) {
  const s2 = {};
  for (const name2 in styles2) {
    s2[toKebabCase(name2)] = styles2[name2];
  }
  return s2;
}

// src/interactors/Highlight.js
var Highlight = class {
  constructor(mark2, {
    selection: selection2,
    channels = {}
  }) {
    this.mark = mark2;
    this.selection = selection2;
    const c4 = Object.entries(sanitizeStyles(channels));
    this.channels = c4.length ? c4 : [["opacity", 0.2]];
    this.selection.addEventListener("value", throttle(() => this.update()));
  }
  init(svg) {
    this.svg = svg;
    const values2 = this.values = [];
    const index2 = this.mark.index;
    const nodes = this.nodes = svg.querySelectorAll(`[data-index="${index2}"] > *`);
    const { channels } = this;
    for (let i2 = 0; i2 < nodes.length; ++i2) {
      const node = nodes[i2];
      values2.push(channels.map((c4) => node.getAttribute(c4[0])));
    }
    return this.update();
  }
  async update() {
    const { svg, nodes, channels, values: values2, mark: mark2, selection: selection2 } = this;
    if (!svg)
      return;
    const test = await predicateFunction(mark2, selection2);
    for (let i2 = 0; i2 < nodes.length; ++i2) {
      const node = nodes[i2];
      const base = values2[i2];
      const t = test(node.__data__);
      for (let j2 = 0; j2 < channels.length; ++j2) {
        const [attr, value] = channels[j2];
        node.setAttribute(attr, t ? base[j2] : value);
      }
    }
  }
};
async function predicateFunction(mark2, selection2) {
  const pred = selection2?.predicate(mark2);
  if (!pred || pred.length === 0) {
    return () => true;
  }
  const s2 = { __: and(pred) };
  const q2 = mark2.query(mark2.filterBy?.predicate(mark2));
  const p2 = q2.groupby().length ? q2.select(s2) : q2.$select(s2);
  const data = await coordinator().query(p2);
  const v3 = data.getChild?.("__");
  return v3 ? (i2) => v3.get(i2) : (i2) => data[i2].__;
}

// src/interactors/Toggle.js
var Toggle = class {
  constructor(mark2, {
    selection: selection2,
    channels
  }) {
    this.value = null;
    this.mark = mark2;
    this.selection = selection2;
    this.clients = (/* @__PURE__ */ new Set()).add(mark2);
    this.channels = channels.map((c4) => {
      const q2 = c4 === "color" ? ["fill", "stroke"] : c4 === "x" ? ["x", "x1", "x2"] : c4 === "y" ? ["y", "y1", "y2"] : [c4];
      for (let i2 = 0; i2 < q2.length; ++i2) {
        const f2 = mark2.channelField(q2[i2]);
        if (f2)
          return {
            field: f2.field?.basis || f2.field,
            as: f2.as
          };
      }
      throw new Error(`Missing channel: ${c4}`);
    });
  }
  clause(value) {
    const { channels, clients } = this;
    let predicate = null;
    if (value) {
      const clauses = value.map((vals) => {
        const list = vals.map((v3, i2) => eq(channels[i2].field, literal(v3)));
        return list.length > 1 ? and(list) : list[0];
      });
      predicate = clauses.length > 1 ? or(clauses) : clauses[0];
    }
    return {
      source: this,
      schema: { type: "point" },
      clients,
      value,
      predicate
    };
  }
  init(svg, selector, accessor) {
    const { mark: mark2, channels, selection: selection2 } = this;
    const { data } = mark2;
    accessor = accessor || ((target) => {
      const datum2 = data[target.__data__];
      return channels.map((c4) => datum2[c4.as]);
    });
    selector = selector || `[data-index="${mark2.index}"]`;
    const groups2 = new Set(svg.querySelectorAll(selector));
    svg.addEventListener("pointerdown", (evt) => {
      const state = selection2.single ? selection2.value : this.value;
      const target = evt.target;
      let value = null;
      if (isTargetElement(groups2, target)) {
        const point6 = accessor(target);
        if (evt.shiftKey && state?.length) {
          value = state.filter((s2) => neq2(s2, point6));
          if (value.length === state.length)
            value.push(point6);
        } else if (state?.length === 1 && !neq2(state[0], point6)) {
          value = null;
        } else {
          value = [point6];
        }
      }
      this.value = value;
      if (neqSome(state, value)) {
        selection2.update(this.clause(value));
      }
    });
    svg.addEventListener("pointerenter", () => {
      this.selection.activate(this.clause([this.channels.map(() => 0)]));
    });
  }
};
function isTargetElement(groups2, node) {
  return groups2.has(node) || groups2.has(node.parentNode) || groups2.has(node.parentNode?.parentNode);
}
function neqSome(a2, b2) {
  return a2 == null || b2 == null ? a2 != null || b2 != null : a2.length !== b2.length || a2.some((x3, i2) => neq2(x3, b2[i2]));
}
function neq2(a2, b2) {
  const n = a2.length;
  if (b2.length !== n)
    return true;
  for (let i2 = 0; i2 < n; ++i2) {
    if (a2[i2] !== b2[i2])
      return true;
  }
  return false;
}

// src/interactors/util/brush.js
function wrap(brush3) {
  const brushOn = brush3.on;
  let enabled = true;
  function silence(callback) {
    enabled = false;
    callback();
    enabled = true;
  }
  brush3.reset = (...args) => {
    silence(() => brush3.clear(...args));
  };
  brush3.moveSilent = (...args) => {
    silence(() => brush3.move(...args));
  };
  brush3.on = (...args) => {
    if (args.length > 1 && args[1]) {
      const callback = args[1];
      args[1] = (...event) => enabled && callback(...event);
    }
    return brushOn(...args);
  };
  return brush3;
}
function brush2() {
  return wrap(brush_default());
}
function brushX2() {
  return wrap(brushX());
}
function brushY2() {
  return wrap(brushY());
}

// src/interactors/util/close-to.js
var EPS = 1e-12;
function closeTo(a2, b2) {
  return a2 === b2 || a2 && b2 && Math.abs(a2[0] - b2[0]) < EPS && Math.abs(a2[1] - b2[1]) < EPS || false;
}

// src/interactors/util/get-field.js
function getField(mark2, channels) {
  const field2 = mark2.channelField(channels)?.field;
  return field2?.basis || field2;
}

// src/interactors/util/invert.js
function invert(value, scale3, pixelSize = 1) {
  return scale3.invert(pixelSize * Math.floor(value / pixelSize));
}

// src/interactors/util/patchScreenCTM.js
function patchScreenCTM() {
  const node = this;
  const getScreenCTM = node.getScreenCTM;
  let memo;
  node.getScreenCTM = () => {
    return node.isConnected ? memo = getScreenCTM.call(node) : memo;
  };
}

// src/interactors/Interval1D.js
var Interval1D = class {
  constructor(mark2, {
    channel,
    selection: selection2,
    field: field2,
    pixelSize = 1,
    peers = true,
    brush: style2
  }) {
    this.mark = mark2;
    this.channel = channel;
    this.pixelSize = pixelSize || 1;
    this.selection = selection2;
    this.peers = peers;
    this.field = field2 || getField(mark2, [channel, channel + "1", channel + "2"]);
    this.style = style2 && sanitizeStyles(style2);
    this.brush = channel === "y" ? brushY2() : brushX2();
    this.brush.on("brush end", ({ selection: selection3 }) => this.publish(selection3));
  }
  reset() {
    this.value = void 0;
    if (this.g)
      this.brush.reset(this.g);
  }
  activate() {
    this.selection.activate(this.clause(this.value || [0, 1]));
  }
  publish(extent4) {
    let range3 = void 0;
    if (extent4) {
      range3 = extent4.map((v3) => invert(v3, this.scale, this.pixelSize)).sort((a2, b2) => a2 - b2);
    }
    if (!closeTo(range3, this.value)) {
      this.value = range3;
      this.g.call(this.brush.moveSilent, extent4);
      this.selection.update(this.clause(range3));
    }
  }
  clause(value) {
    const { mark: mark2, pixelSize, field: field2, scale: scale3 } = this;
    return {
      source: this,
      schema: { type: "interval", pixelSize, scales: [scale3] },
      clients: this.peers ? mark2.plot.markSet : (/* @__PURE__ */ new Set()).add(mark2),
      value,
      predicate: value ? isBetween(field2, value) : null
    };
  }
  init(svg) {
    const { brush: brush3, channel, style: style2 } = this;
    this.scale = svg.scale(channel);
    const rx = svg.scale("x").range;
    const ry = svg.scale("y").range;
    brush3.extent([[min2(rx), min2(ry)], [max2(rx), max2(ry)]]);
    const facets = select_default2(svg).selectAll('g[aria-label="facet"]');
    const root2 = facets.size() ? facets : select_default2(svg);
    this.g = root2.append("g").attr("class", `interval-${channel}`).each(patchScreenCTM).call(brush3).call(brush3.moveSilent, this.value?.map(this.scale.apply));
    if (style2) {
      const brushes = this.g.selectAll("rect.selection");
      for (const name2 in style2) {
        brushes.attr(name2, style2[name2]);
      }
    }
    svg.addEventListener("pointerenter", () => this.activate());
  }
};

// src/interactors/Interval2D.js
var asc = (a2, b2) => a2 - b2;
var Interval2D = class {
  constructor(mark2, {
    selection: selection2,
    xfield,
    yfield,
    pixelSize = 1,
    peers = true,
    brush: style2
  }) {
    this.mark = mark2;
    this.pixelSize = pixelSize || 1;
    this.selection = selection2;
    this.peers = peers;
    this.xfield = xfield || getField(mark2, ["x", "x1", "x2"]);
    this.yfield = yfield || getField(mark2, ["y", "y1", "y2"]);
    this.style = style2 && sanitizeStyles(style2);
    this.brush = brush2();
    this.brush.on("brush end", ({ selection: selection3 }) => this.publish(selection3));
  }
  reset() {
    this.value = void 0;
    if (this.g)
      this.brush.reset(this.g);
  }
  activate() {
    this.selection.activate(this.clause(this.value || [[0, 1], [0, 1]]));
  }
  publish(extent4) {
    const { value, pixelSize, xscale, yscale } = this;
    let xr = void 0;
    let yr = void 0;
    if (extent4) {
      const [a2, b2] = extent4;
      xr = [a2[0], b2[0]].map((v3) => invert(v3, xscale, pixelSize)).sort(asc);
      yr = [a2[1], b2[1]].map((v3) => invert(v3, yscale, pixelSize)).sort(asc);
    }
    if (!closeTo(xr, value?.[0]) || !closeTo(yr, value?.[1])) {
      this.value = extent4 ? [xr, yr] : void 0;
      this.g.call(this.brush.moveSilent, extent4);
      this.selection.update(this.clause(this.value));
    }
  }
  clause(value) {
    const { mark: mark2, pixelSize, xfield, yfield, xscale, yscale } = this;
    return {
      source: this,
      schema: { type: "interval", pixelSize, scales: [xscale, yscale] },
      clients: this.peers ? mark2.plot.markSet : (/* @__PURE__ */ new Set()).add(mark2),
      value,
      predicate: value ? and(isBetween(xfield, value[0]), isBetween(yfield, value[1])) : null
    };
  }
  init(svg) {
    const { brush: brush3, style: style2 } = this;
    const xscale = this.xscale = svg.scale("x");
    const yscale = this.yscale = svg.scale("y");
    const rx = xscale.range;
    const ry = yscale.range;
    brush3.extent([[min2(rx), min2(ry)], [max2(rx), max2(ry)]]);
    const facets = select_default2(svg).selectAll('g[aria-label="facet"]');
    const root2 = facets.size() ? facets : select_default2(svg);
    this.g = root2.append("g").attr("class", `interval-xy`).each(patchScreenCTM).call(brush3);
    if (style2) {
      const brushes = this.g.selectAll("rect.selection");
      for (const name2 in style2) {
        brushes.attr(name2, style2[name2]);
      }
    }
    if (this.value) {
      const [x12, x22] = this.value[0].map(xscale.apply).sort(asc);
      const [y12, y22] = this.value[1].map(yscale.apply).sort(asc);
      this.g.call(brush3.moveSilent, [[x12, y12], [x22, y22]]);
    }
    svg.addEventListener("pointerenter", () => this.activate());
  }
};

// src/interactors/PanZoom.js
var asc2 = (a2, b2) => a2 - b2;
var PanZoom = class {
  constructor(mark2, {
    x: x3 = new Selection(),
    y: y3 = new Selection(),
    xfield,
    yfield,
    zoom: zoom2 = true,
    panx = true,
    pany = true
  }) {
    this.mark = mark2;
    this.xsel = x3;
    this.ysel = y3;
    this.xfield = xfield || getField(mark2, ["x", "x1", "x2"]);
    this.yfield = yfield || getField(mark2, ["y", "y1", "y2"]);
    this.zoom = extent3(zoom2, [0, Infinity], [1, 1]);
    this.panx = this.xsel && panx;
    this.pany = this.ysel && pany;
    const { plot: plot3 } = mark2;
    if (panx) {
      this.xsel.addEventListener("value", (value) => {
        if (plot3.setAttribute("xDomain", value))
          plot3.update();
      });
    }
    if (pany) {
      this.ysel.addEventListener("value", (value) => {
        if (plot3.setAttribute("yDomain", value))
          plot3.update();
      });
    }
  }
  publish(transform3) {
    if (this.panx) {
      const xdom = rescaleX(transform3, this.xscale);
      this.xsel.update(this.clause(xdom, this.xfield, this.xscale));
    }
    if (this.pany) {
      const ydom = rescaleY(transform3, this.yscale);
      this.ysel.update(this.clause(ydom, this.yfield, this.yscale));
    }
  }
  clause(value, field2, scale3) {
    return {
      source: this,
      schema: { type: "interval", scales: [scale3] },
      clients: this.mark.plot.markSet,
      value,
      predicate: value ? isBetween(field2, value) : null
    };
  }
  init(svg) {
    this.svg = svg;
    if (this.initialized)
      return;
    else
      this.initialized = true;
    const { panx, pany, mark: { plot: { element } }, xsel, ysel } = this;
    this.xscale = svg.scale("x");
    this.yscale = svg.scale("y");
    const rx = this.xscale.range.slice().sort(asc2);
    const ry = this.yscale.range.slice().sort(asc2);
    const tx = extent3(panx, [-Infinity, Infinity], rx);
    const ty = extent3(pany, [-Infinity, Infinity], ry);
    const z2 = zoom_default2().extent([[rx[0], ry[0]], [rx[1], ry[1]]]).scaleExtent(this.zoom).translateExtent([[tx[0], ty[0]], [tx[1], ty[1]]]).on("start", () => {
      this.xscale = this.svg.scale("x");
      this.yscale = this.svg.scale("y");
    }).on("end", () => element.__zoom = new Transform2(1, 0, 0)).on("zoom", ({ transform: transform3 }) => this.publish(transform3));
    select_default2(element).call(z2);
    if (panx || pany) {
      let enter = false;
      element.addEventListener("mouseenter", () => {
        if (enter)
          return;
        else
          enter = true;
        if (panx) {
          const { xscale, xfield } = this;
          xsel.activate(this.clause(xscale.domain, xfield, xscale));
        }
        if (pany) {
          const { yscale, yfield } = this;
          ysel.activate(this.clause(yscale.domain, yfield, yscale));
        }
      });
      element.addEventListener("mouseleave", () => enter = false);
    }
  }
};
function extent3(ext, defaultTrue, defaultFalse) {
  return ext ? Array.isArray(ext) ? ext : defaultTrue : defaultFalse;
}
function rescaleX(transform3, scale3) {
  return scale3.range.map(transform3.invertX, transform3).map(scale3.invert, scale3);
}
function rescaleY(transform3, scale3) {
  return scale3.range.map(transform3.invertY, transform3).map(scale3.invert, scale3);
}

// src/interactors/Nearest.js
var Nearest = class {
  constructor(mark2, {
    selection: selection2,
    channel,
    field: field2
  }) {
    this.mark = mark2;
    this.selection = selection2;
    this.clients = (/* @__PURE__ */ new Set()).add(mark2);
    this.channel = channel;
    this.field = field2 || getField(mark2, [channel]);
  }
  clause(value) {
    const { clients, field: field2 } = this;
    const predicate = value ? eq(field2, literal(value)) : null;
    return {
      source: this,
      schema: { type: "point" },
      clients,
      value,
      predicate
    };
  }
  init(svg) {
    const that = this;
    const { mark: mark2, channel, selection: selection2 } = this;
    const { data } = mark2;
    const key = mark2.channelField(channel).as;
    const facets = select_default2(svg).selectAll('g[aria-label="facet"]');
    const root2 = facets.size() ? facets : select_default2(svg);
    const scale3 = svg.scale(channel);
    const param = !isSelection(selection2);
    root2.on("pointerdown pointermove", function(evt) {
      const [x3, y3] = pointer_default(evt, this);
      const z2 = findNearest(data, key, scale3.invert(channel === "x" ? x3 : y3));
      selection2.update(param ? z2 : that.clause(z2));
    });
    if (param)
      return;
    svg.addEventListener("pointerenter", () => {
      this.selection.activate(this.clause(0));
    });
  }
};
function findNearest(data, key, value) {
  let dist2 = Infinity;
  let v3;
  data.forEach((d) => {
    const delta = Math.abs(d[key] - value);
    if (delta < dist2) {
      dist2 = delta;
      v3 = d[key];
    }
  });
  return v3;
}

// src/directives/interactors.js
function interactor(InteractorClass, options) {
  return (plot3) => {
    const mark2 = plot3.marks[plot3.marks.length - 1];
    plot3.addInteractor(new InteractorClass(mark2, options));
  };
}
function highlight({ by, ...channels }) {
  return interactor(Highlight, { selection: by, channels });
}
function toggle({ as, ...rest }) {
  return interactor(Toggle, { ...rest, selection: as });
}
function toggleX({ as }) {
  return toggle({ as, channels: ["x"] });
}
function toggleY({ as }) {
  return toggle({ as, channels: ["y"] });
}
function toggleColor({ as }) {
  return toggle({ as, channels: ["color"] });
}
function nearestX({ as, ...rest }) {
  return interactor(Nearest, { ...rest, selection: as, channel: "x" });
}
function nearestY({ as, ...rest }) {
  return interactor(Nearest, { ...rest, selection: as, channel: "y" });
}
function intervalX({ as, ...rest }) {
  return interactor(Interval1D, { ...rest, selection: as, channel: "x" });
}
function intervalY({ as, ...rest }) {
  return interactor(Interval1D, { ...rest, selection: as, channel: "y" });
}
function intervalXY({ as, ...rest }) {
  return interactor(Interval2D, { ...rest, selection: as });
}
function zoom(options) {
  return interactor(PanZoom, options);
}
function pan(options = {}) {
  return zoom({ ...options, zoom: false });
}
function panX(options = {}) {
  return zoom({ ...options, zoom: false, pany: false });
}
function panY(options = {}) {
  return zoom({ ...options, zoom: false, panx: false });
}
function panZoom(options = {}) {
  return zoom(options);
}
function panZoomX(options = {}) {
  return zoom({ ...options, pany: false });
}
function panZoomY(options = {}) {
  return zoom({ ...options, panx: false });
}

// src/directives/legends.js
var legends_exports = {};
__export(legends_exports, {
  colorLegend: () => colorLegend,
  opacityLegend: () => opacityLegend,
  symbolLegend: () => symbolLegend
});

// src/legend.js
var Legend = class {
  constructor(channel, options) {
    const { as, ...rest } = options;
    this.channel = channel;
    this.options = { label: null, ...rest };
    this.selection = as;
    this.element = document.createElement("div");
    this.element.setAttribute("class", "legend");
    this.element.value = this;
  }
  setPlot(plot3) {
    const { channel, selection: selection2 } = this;
    const mark2 = findMark(plot3, channel);
    if (this.selection && mark2) {
      this.handler = new Toggle(mark2, { selection: selection2, channels: [channel] });
      this.selection.addEventListener("value", () => this.update());
    }
  }
  init(svg) {
    const { channel, options, handler } = this;
    const scale3 = svg.scale(channel);
    const opt = scale3.type === "ordinal" ? options : { marginTop: 1, tickSize: 2, height: 28, ...options };
    this.legend = svg.legend(channel, opt);
    if (handler) {
      handler.init(this.legend, ":scope > div", (el) => [el.__data__]);
      this.update();
    }
    this.element.replaceChildren(this.legend);
    return this.element;
  }
  update() {
    if (!this.legend)
      return;
    const { value } = this.selection;
    const curr = value && value.length ? new Set(value.map((v3) => v3[0])) : null;
    const nodes = this.legend.querySelectorAll(":scope > div");
    for (const node of nodes) {
      const selected = curr ? curr.has(node.__data__) : true;
      node.style.opacity = selected ? 1 : 0.2;
    }
  }
};
function findMark({ marks: marks2 }, channel) {
  const channels = channel === "color" ? ["fill", "stroke"] : channel === "opacity" ? ["opacity", "fillOpacity", "strokeOpacity"] : null;
  if (channels == null)
    return null;
  for (let i2 = marks2.length - 1; i2 > -1; --i2) {
    if (marks2[i2].channelField(channels)) {
      return marks2[i2];
    }
  }
  return null;
}

// src/directives/legends.js
function legend2(channel, options = {}) {
  if (options.for) {
    const { for: maybePlot, ...rest } = options;
    const legend3 = new Legend(channel, rest);
    const type2 = typeof maybePlot;
    const add = (plot3) => plot3.addLegend(legend3, false);
    if (type2 === "string") {
      namedPlots.request(maybePlot, add);
    } else if (maybePlot.value) {
      add(maybePlot.value);
    }
    return legend3.element;
  } else {
    return (plot3) => plot3.addLegend(new Legend(channel, options));
  }
}
var colorLegend = (options) => legend2("color", options);
var opacityLegend = (options) => legend2("opacity", options);
var symbolLegend = (options) => legend2("symbol", options);

// src/layout/concat.js
function concat({ direction = "vertical", wrap: wrap2 = false }, children2) {
  const div = document.createElement("div");
  div.style.display = "flex";
  div.style.flexDirection = direction === "vertical" ? "column" : "row";
  div.style.flexWrap = !wrap2 ? "nowrap" : wrap2 === true ? "wrap" : wrap2;
  div.style.justifyContent = "flex-start";
  div.style.alignItems = "flex-start";
  children2.forEach((child) => div.appendChild(child));
  div.value = { element: div };
  return div;
}
function vconcat(...plots) {
  return concat({ direction: "vertical" }, plots.flat());
}
function hconcat(...plots) {
  return concat({ direction: "horizontal" }, plots.flat());
}

// src/layout/space.js
function space({ dim = "width", size = 10 }) {
  const span = document.createElement("span");
  span.style.display = "inline-block";
  span.style[dim] = Number.isNaN(+size) ? size : `${size}px`;
  const obj = { element: span };
  span.value = obj;
  return span;
}
function vspace(size) {
  return space({ dim: "height", size });
}
function hspace(size) {
  return space({ dim: "width", size });
}

// ../../node_modules/topojson-client/src/identity.js
function identity_default4(x3) {
  return x3;
}

// ../../node_modules/topojson-client/src/transform.js
function transform_default2(transform3) {
  if (transform3 == null)
    return identity_default4;
  var x06, y06, kx2 = transform3.scale[0], ky2 = transform3.scale[1], dx = transform3.translate[0], dy = transform3.translate[1];
  return function(input2, i2) {
    if (!i2)
      x06 = y06 = 0;
    var j2 = 2, n = input2.length, output = new Array(n);
    output[0] = (x06 += input2[0]) * kx2 + dx;
    output[1] = (y06 += input2[1]) * ky2 + dy;
    while (j2 < n)
      output[j2] = input2[j2], ++j2;
    return output;
  };
}

// ../../node_modules/topojson-client/src/reverse.js
function reverse_default(array3, n) {
  var t, j2 = array3.length, i2 = j2 - n;
  while (i2 < --j2)
    t = array3[i2], array3[i2++] = array3[j2], array3[j2] = t;
}

// ../../node_modules/topojson-client/src/feature.js
function feature_default(topology, o) {
  if (typeof o === "string")
    o = topology.objects[o];
  return o.type === "GeometryCollection" ? { type: "FeatureCollection", features: o.geometries.map(function(o2) {
    return feature(topology, o2);
  }) } : feature(topology, o);
}
function feature(topology, o) {
  var id2 = o.id, bbox = o.bbox, properties = o.properties == null ? {} : o.properties, geometry = object2(topology, o);
  return id2 == null && bbox == null ? { type: "Feature", properties, geometry } : bbox == null ? { type: "Feature", id: id2, properties, geometry } : { type: "Feature", id: id2, bbox, properties, geometry };
}
function object2(topology, o) {
  var transformPoint = transform_default2(topology.transform), arcs = topology.arcs;
  function arc(i2, points2) {
    if (points2.length)
      points2.pop();
    for (var a2 = arcs[i2 < 0 ? ~i2 : i2], k3 = 0, n = a2.length; k3 < n; ++k3) {
      points2.push(transformPoint(a2[k3], k3));
    }
    if (i2 < 0)
      reverse_default(points2, n);
  }
  function point6(p2) {
    return transformPoint(p2);
  }
  function line3(arcs2) {
    var points2 = [];
    for (var i2 = 0, n = arcs2.length; i2 < n; ++i2)
      arc(arcs2[i2], points2);
    if (points2.length < 2)
      points2.push(points2[0]);
    return points2;
  }
  function ring(arcs2) {
    var points2 = line3(arcs2);
    while (points2.length < 4)
      points2.push(points2[0]);
    return points2;
  }
  function polygon(arcs2) {
    return arcs2.map(ring);
  }
  function geometry(o2) {
    var type2 = o2.type, coordinates;
    switch (type2) {
      case "GeometryCollection":
        return { type: type2, geometries: o2.geometries.map(geometry) };
      case "Point":
        coordinates = point6(o2.coordinates);
        break;
      case "MultiPoint":
        coordinates = o2.coordinates.map(point6);
        break;
      case "LineString":
        coordinates = line3(o2.arcs);
        break;
      case "MultiLineString":
        coordinates = o2.arcs.map(line3);
        break;
      case "Polygon":
        coordinates = polygon(o2.arcs);
        break;
      case "MultiPolygon":
        coordinates = o2.arcs.map(polygon);
        break;
      default:
        return null;
    }
    return { type: type2, coordinates };
  }
  return geometry(o);
}

// ../../node_modules/topojson-client/src/stitch.js
function stitch_default(topology, arcs) {
  var stitchedArcs = {}, fragmentByStart = {}, fragmentByEnd = {}, fragments = [], emptyIndex = -1;
  arcs.forEach(function(i2, j2) {
    var arc = topology.arcs[i2 < 0 ? ~i2 : i2], t;
    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i2, arcs[j2] = t;
    }
  });
  arcs.forEach(function(i2) {
    var e = ends(i2), start2 = e[0], end = e[1], f2, g2;
    if (f2 = fragmentByEnd[start2]) {
      delete fragmentByEnd[f2.end];
      f2.push(i2);
      f2.end = end;
      if (g2 = fragmentByStart[end]) {
        delete fragmentByStart[g2.start];
        var fg = g2 === f2 ? f2 : f2.concat(g2);
        fragmentByStart[fg.start = f2.start] = fragmentByEnd[fg.end = g2.end] = fg;
      } else {
        fragmentByStart[f2.start] = fragmentByEnd[f2.end] = f2;
      }
    } else if (f2 = fragmentByStart[end]) {
      delete fragmentByStart[f2.start];
      f2.unshift(i2);
      f2.start = start2;
      if (g2 = fragmentByEnd[start2]) {
        delete fragmentByEnd[g2.end];
        var gf = g2 === f2 ? f2 : g2.concat(f2);
        fragmentByStart[gf.start = g2.start] = fragmentByEnd[gf.end = f2.end] = gf;
      } else {
        fragmentByStart[f2.start] = fragmentByEnd[f2.end] = f2;
      }
    } else {
      f2 = [i2];
      fragmentByStart[f2.start = start2] = fragmentByEnd[f2.end = end] = f2;
    }
  });
  function ends(i2) {
    var arc = topology.arcs[i2 < 0 ? ~i2 : i2], p0 = arc[0], p1;
    if (topology.transform)
      p1 = [0, 0], arc.forEach(function(dp) {
        p1[0] += dp[0], p1[1] += dp[1];
      });
    else
      p1 = arc[arc.length - 1];
    return i2 < 0 ? [p1, p0] : [p0, p1];
  }
  function flush(fragmentByEnd2, fragmentByStart2) {
    for (var k3 in fragmentByEnd2) {
      var f2 = fragmentByEnd2[k3];
      delete fragmentByStart2[f2.start];
      delete f2.start;
      delete f2.end;
      f2.forEach(function(i2) {
        stitchedArcs[i2 < 0 ? ~i2 : i2] = 1;
      });
      fragments.push(f2);
    }
  }
  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function(i2) {
    if (!stitchedArcs[i2 < 0 ? ~i2 : i2])
      fragments.push([i2]);
  });
  return fragments;
}

// ../../node_modules/topojson-client/src/mesh.js
function mesh_default(topology) {
  return object2(topology, meshArcs.apply(this, arguments));
}
function meshArcs(topology, object3, filter3) {
  var arcs, i2, n;
  if (arguments.length > 1)
    arcs = extractArcs(topology, object3, filter3);
  else
    for (i2 = 0, arcs = new Array(n = topology.arcs.length); i2 < n; ++i2)
      arcs[i2] = i2;
  return { type: "MultiLineString", arcs: stitch_default(topology, arcs) };
}
function extractArcs(topology, object3, filter3) {
  var arcs = [], geomsByArc = [], geom;
  function extract0(i2) {
    var j2 = i2 < 0 ? ~i2 : i2;
    (geomsByArc[j2] || (geomsByArc[j2] = [])).push({ i: i2, g: geom });
  }
  function extract1(arcs2) {
    arcs2.forEach(extract0);
  }
  function extract2(arcs2) {
    arcs2.forEach(extract1);
  }
  function extract3(arcs2) {
    arcs2.forEach(extract2);
  }
  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;
      case "LineString":
        extract1(o.arcs);
        break;
      case "MultiLineString":
      case "Polygon":
        extract2(o.arcs);
        break;
      case "MultiPolygon":
        extract3(o.arcs);
        break;
    }
  }
  geometry(object3);
  geomsByArc.forEach(filter3 == null ? function(geoms) {
    arcs.push(geoms[0].i);
  } : function(geoms) {
    if (filter3(geoms[0].g, geoms[geoms.length - 1].g))
      arcs.push(geoms[0].i);
  });
  return arcs;
}

// src/spec/util.js
function paramRef(value) {
  const type2 = typeof value;
  return type2 === "object" ? value?.param : type2 === "string" ? paramStr(value) : null;
}
function paramStr(value) {
  return value?.[0] === "$" ? value.slice(1) : null;
}
function toArray(value) {
  return [value].flat();
}
function isArray(value) {
  return Array.isArray(value);
}
function isObject5(value) {
  return value !== null && typeof value === "object" && !isArray(value);
}
function isNumberOrString(value) {
  const t = typeof value;
  return t === "number" || t === "string";
}
function isString(value) {
  return typeof value === "string";
}
function isFunction3(value) {
  return typeof value === "function";
}
function error(message, data) {
  throw Object.assign(Error(message), { data });
}

// src/spec/parse-data.js
function parseData(name2, spec, ctx) {
  spec = resolveDataSpec(spec, ctx);
  const parse2 = ctx.dataFormats.get(spec.type);
  if (parse2) {
    return parse2(name2, spec, ctx);
  } else {
    error(`Unrecognized data format type.`, spec);
  }
}
function resolveDataSpec(spec, ctx) {
  if (isArray(spec))
    spec = { type: "json", data: spec };
  if (isString(spec))
    spec = { type: "table", query: spec };
  return {
    ...spec,
    type: inferType(spec),
    file: resolveFile(spec, ctx)
  };
}
function inferType(spec) {
  return spec.type || fileExtension(spec.file) || "table";
}
function fileExtension(file) {
  const idx = file?.lastIndexOf(".");
  return idx > 0 ? file.slice(idx + 1) : null;
}
function resolveFile({ file }, ctx) {
  return file && ctx.baseURL ? new URL(file, ctx.baseURL).toString() : file;
}
function parseTableData(name2, spec) {
  const { query, type: type2, ...options } = spec;
  if (query) {
    return create(name2, query, options);
  }
}
function parseParquetData(name2, spec) {
  const { file, type: type2, ...options } = spec;
  return loadParquet(name2, file, options);
}
function parseCSVData(name2, spec) {
  const { file, type: type2, ...options } = spec;
  return loadCSV(name2, file, options);
}
function parseJSONData(name2, spec) {
  const { data, file, type: type2, ...options } = spec;
  return data ? loadObjects(name2, data, options) : loadJSON(name2, file, options);
}

// src/spec/parse-spec.js
var inputs = { menu, search, slider, table };
var DefaultParamParsers = /* @__PURE__ */ new Map([
  ["intersect", () => Selection.intersect()],
  ["crossfilter", () => Selection.crossfilter()],
  ["union", () => Selection.union()],
  ["single", () => Selection.single()],
  ["value", ({ date: date2, value }, ctx) => Array.isArray(value) ? Param.array(value.map((v3) => ctx.maybeParam(v3))) : Param.value(parse(date2, value))]
]);
var DefaultSpecParsers = /* @__PURE__ */ new Map([
  ["plot", { type: isArray, parse: parsePlot }],
  ["mark", { type: isString, parse: parseNakedMark }],
  ["legend", { type: isString, parse: parseLegend }],
  ["hconcat", { type: isArray, parse: parseHConcat }],
  ["vconcat", { type: isArray, parse: parseVConcat }],
  ["hspace", { type: isNumberOrString, parse: parseHSpace }],
  ["vspace", { type: isNumberOrString, parse: parseVSpace }],
  ["input", { type: isString, parse: parseInput }]
]);
var DefaultDataFormats = /* @__PURE__ */ new Map([
  ["csv", parseCSVData],
  ["json", parseJSONData],
  ["geojson", parseGeoJSONData],
  ["topojson", parseTopoJSONData],
  ["parquet", parseParquetData],
  ["table", parseTableData]
]);
var DefaultTransforms = /* @__PURE__ */ new Map([
  ["avg", avg],
  ["bin", bin],
  ["count", count],
  ["dateMonth", dateMonth],
  ["dateMonthDay", dateMonthDay],
  ["dateDay", dateDay],
  ["bin", bin],
  ["max", max],
  ["median", median],
  ["min", min],
  ["mode", mode],
  ["quantile", quantile],
  ["sum", sum2],
  ["row_number", row_number],
  ["rank", rank],
  ["dense_rank", dense_rank],
  ["percent_rank", percent_rank],
  ["cume_dist", cume_dist],
  ["ntile", ntile],
  ["lag", lag],
  ["lead", lead],
  ["first_value", first_value],
  ["last_value", last_value],
  ["nth_value", nth_value]
]);
var DefaultMarks = new Map(Object.entries(marks_exports));
var DefaultInputs = new Map(Object.entries(inputs));
var DefaultLegends = new Map(Object.entries(legends_exports));
var DefaultAttributes = new Map(Object.entries(attributes_exports));
var DefaultInteractors = new Map(Object.entries(interactors_exports));
function parseSpec(spec, options) {
  spec = isString(spec) ? JSON.parse(spec) : spec;
  return new ParseContext(options).parse(spec);
}
var ParseContext = class {
  constructor({
    specParsers = DefaultSpecParsers,
    paramParsers = DefaultParamParsers,
    dataFormats = DefaultDataFormats,
    transforms = DefaultTransforms,
    attributes: attributes2 = DefaultAttributes,
    interactors = DefaultInteractors,
    legends = DefaultLegends,
    inputs: inputs2 = DefaultInputs,
    marks: marks2 = DefaultMarks,
    params = [],
    datasets = [],
    baseURL = null
  } = {}) {
    this.specParsers = specParsers;
    this.paramParsers = paramParsers;
    this.dataFormats = dataFormats;
    this.transforms = transforms;
    this.attributes = attributes2;
    this.interactors = interactors;
    this.legends = legends;
    this.inputs = inputs2;
    this.marks = marks2;
    this.params = new Map(params);
    this.datasets = new Map(datasets);
    this.baseURL = baseURL;
    this.postQueue = [];
  }
  after(fn) {
    this.postQueue.push(fn);
  }
  maybeParam(value, ctr = () => Param.value()) {
    const { params } = this;
    const name2 = paramRef(value);
    if (name2) {
      if (!params.has(name2)) {
        const p2 = ctr();
        params.set(name2, p2);
        return p2;
      } else {
        return params.get(name2);
      }
    }
    return value;
  }
  maybeSelection(value) {
    return this.maybeParam(value, () => Selection.intersect());
  }
  maybeTransform(value) {
    if (isObject5(value)) {
      return value.expr ? parseExpression(value, this) : parseTransform(value, this);
    }
  }
  async parse(input2) {
    const { meta, data = {}, plotDefaults = {}, params, ...spec } = input2;
    for (const name2 in data) {
      const q2 = await parseData(name2, data[name2], this);
      if (q2?.data) {
        this.datasets.set(name2, q2.data);
      } else if (q2) {
        await coordinator().exec(q2);
      }
    }
    this.plotDefaults = Object.keys(plotDefaults).map((key) => parseAttribute(plotDefaults, key, this));
    for (const name2 in params) {
      this.params.set(name2, parseParam(params[name2], this));
    }
    const result = parseComponent(spec, this);
    this.postQueue.forEach((fn) => fn());
    this.postQueue = [];
    this.plotDefaults = {};
    return result;
  }
};
async function retrieveJSONData(spec) {
  const { data, file } = spec;
  return data || await fetch(file).then((r) => r.json());
}
async function parseGeoJSONData(name2, spec) {
  return { data: await retrieveJSONData(spec) };
}
async function parseTopoJSONData(name2, spec) {
  const json = await retrieveJSONData(spec);
  let data;
  if (spec.feature) {
    data = feature_default(json, json.objects[spec.feature]);
  } else {
    const object3 = spec.mesh ? json.objects[spec.mesh] : void 0;
    const filter3 = {
      interior: (a2, b2) => a2 !== b2,
      exterior: (a2, b2) => a2 === b2
    }[spec.filter];
    data = mesh_default(json, object3, filter3);
  }
  return { data: data && data.features || [data] };
}
function parseParam(param, ctx) {
  param = isObject5(param) ? param : { value: param };
  const { select: select2 = "value" } = param;
  const parser = ctx.paramParsers.get(select2);
  if (!parser) {
    error(`Unrecognized param type: ${select2}`, param);
  }
  return parser(param, ctx);
}
function parseComponent(spec, ctx) {
  for (const [key, { type: type2, parse: parse2 }] of ctx.specParsers) {
    const value = spec[key];
    if (value != null) {
      if (type2(value)) {
        return parse2(spec, ctx);
      } else {
        error(`Invalid property type: ${key}`, spec);
      }
    }
  }
  error(`Invalid specification.`, spec);
}
function parseHSpace(spec) {
  return hspace(spec.hspace);
}
function parseVSpace(spec) {
  return vspace(spec.vspace);
}
function parseInput(spec, ctx) {
  const { input: input2, ...options } = spec;
  const fn = ctx.inputs.get(input2);
  if (!isFunction3(fn)) {
    error(`Unrecognized input: ${input2}`, spec);
  }
  for (const key in options) {
    options[key] = ctx.maybeSelection(options[key]);
  }
  return fn(options);
}
function parseVConcat(spec, ctx) {
  return vconcat(spec.vconcat.map((s2) => parseComponent(s2, ctx)));
}
function parseHConcat(spec, ctx) {
  return hconcat(spec.hconcat.map((s2) => parseComponent(s2, ctx)));
}
function parsePlot(spec, ctx) {
  const { plot: plot3, ...attributes2 } = spec;
  const attrs = ctx.plotDefaults.concat(
    Object.keys(attributes2).map((key) => parseAttribute(spec, key, ctx))
  );
  const entries = plot3.map((e) => parseEntry(e, ctx));
  return plot2(attrs, entries);
}
function parseNakedMark(spec, ctx) {
  return parsePlot({ plot: [spec] }, ctx);
}
function parseLegend(spec, ctx) {
  const { legend: legend3, ...options } = spec;
  const key = `${legend3}Legend`;
  const fn = ctx.legends.get(key);
  if (!isFunction3(fn)) {
    error(`Unrecognized legend type: ${legend3}`, spec);
  }
  for (const key2 in options) {
    options[key2] = ctx.maybeSelection(options[key2]);
  }
  return fn(options);
}
function parseAttribute(spec, name2, ctx) {
  const fn = ctx.attributes.get(name2);
  if (!isFunction3(fn)) {
    error(`Unrecognized attribute: ${name2}`, spec);
  }
  const value = spec[name2];
  const arg = value === "Fixed" ? Fixed : ctx.maybeParam(value);
  return fn(arg);
}
function parseEntry(spec, ctx) {
  return isString(spec.mark) ? parseMark(spec, ctx) : isString(spec.legend) ? parseLegend(spec, ctx) : isString(spec.select) ? parseInteractor(spec, ctx) : error(`Invalid plot entry.`, spec);
}
function parseMark(spec, ctx) {
  const { mark: mark2, data, ...options } = spec;
  const fn = ctx.marks.get(mark2);
  if (!isFunction3(fn)) {
    error(`Unrecognized mark type: ${mark2}`, spec);
  }
  const input2 = parseMarkData(data, ctx);
  for (const key in options) {
    options[key] = parseMarkOption(options[key], ctx);
  }
  return input2 ? fn(input2, options) : fn(options);
}
function parseMarkData(spec, ctx) {
  if (!spec)
    return null;
  if (isArray(spec))
    return spec;
  const { from: table2, ...options } = spec;
  if (ctx.datasets.has(table2)) {
    return ctx.datasets.get(table2);
  } else {
    for (const key in options) {
      options[key] = ctx.maybeSelection(options[key]);
    }
    return from(table2, options);
  }
}
function parseMarkOption(spec, ctx) {
  return ctx.maybeTransform(spec) || ctx.maybeParam(spec);
}
function parseInteractor(spec, ctx) {
  const { select: select2, ...options } = spec;
  const fn = ctx.interactors.get(select2);
  if (!isFunction3(fn)) {
    error(`Unrecognized interactor type: ${select2}`, spec);
  }
  for (const key in options) {
    options[key] = ctx.maybeSelection(options[key]);
  }
  return fn(options);
}
function parseExpression(spec, ctx) {
  const { expr, label: label2 } = spec;
  const tokens = expr.split(/(\\'|\\"|"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|\$\w+)/g);
  const spans = [""];
  const exprs = [];
  for (let i2 = 0, k3 = 0; i2 < tokens.length; ++i2) {
    const tok = tokens[i2];
    if (tok.startsWith("$")) {
      exprs[k3] = ctx.maybeParam(tok);
      spans[++k3] = "";
    } else {
      spans[k3] += tok;
    }
  }
  return sql(spans, ...exprs).annotate({ label: label2 });
}
function parseTransform(spec, ctx) {
  const { transforms } = ctx;
  let name2;
  for (const key in spec) {
    if (transforms.has(key)) {
      name2 = key;
    }
  }
  if (!name2) {
    return;
  }
  const func = transforms.get(name2);
  const args = name2 === "count" || name2 == null ? [] : toArray(spec[name2]);
  let expr = func(...args);
  if (spec.distinct)
    expr = expr.distinct();
  if (spec.order) {
    const p2 = toArray(spec.order).map((v3) => ctx.maybeParam(v3));
    expr = expr.orderby(p2);
  }
  if (spec.partition) {
    const p2 = toArray(spec.partition).map((v3) => ctx.maybeParam(v3));
    expr = expr.partitionby(p2);
  }
  if (spec.rows) {
    expr = expr.rows(ctx.maybeParam(spec.rows));
  } else if (spec.range) {
    expr = expr.range(ctx.maybeParam(spec.range));
  }
  return expr;
}

// src/spec/to-module.js
var TOPOJSON = "https://cdn.jsdelivr.net/npm/topojson@3.0.2/+esm";
var SpecParsers = /* @__PURE__ */ new Map([
  ["plot", { type: isArray, parse: parsePlot2 }],
  ["mark", { type: isString, parse: parseNakedMark2 }],
  ["legend", { type: isString, parse: parseLegend2 }],
  ["hconcat", { type: isArray, parse: parseHConcat2 }],
  ["vconcat", { type: isArray, parse: parseVConcat2 }],
  ["hspace", { type: isNumberOrString, parse: parseHSpace2 }],
  ["vspace", { type: isNumberOrString, parse: parseVSpace2 }],
  ["input", { type: isString, parse: parseInput2 }]
]);
var DataFormats = /* @__PURE__ */ new Map([
  ["csv", parseCSVData2],
  ["json", parseJSONData2],
  ["geojson", parseGeoJSONData2],
  ["topojson", parseTopoJSONData2],
  ["parquet", parseParquetData2],
  ["table", parseTableData2]
]);
function specToModule(spec, options) {
  spec = isString(spec) ? JSON.parse(spec) : spec;
  return new CodegenContext(options).generate(spec);
}
function maybeNewline(entry) {
  return entry?.length ? [""] : [];
}
var CodegenContext = class extends ParseContext {
  constructor(options) {
    super({
      specParsers: SpecParsers,
      dataFormats: DataFormats,
      ...options
    });
    this.imports = options?.imports || /* @__PURE__ */ new Map([
      ["@uwdata/vgplot", "* as vg"]
    ]);
    this.depth = 0;
  }
  async generate(input2) {
    const { meta, data = {}, plotDefaults = {}, params, ...spec } = input2;
    const dataCode = await Promise.all(
      Object.keys(data).flatMap((name2) => {
        const q2 = parseData(name2, data[name2], this);
        return !q2 ? [] : q2.data ? `const ${name2} = ${q2.data};` : `await vg.coordinator().exec(
  ${q2}
);`;
      })
    );
    const defaultList = Object.keys(plotDefaults).map((key) => parseAttribute2(plotDefaults, key, this));
    let defaultCode = [];
    if (defaultList.length) {
      this.plotDefaults = "defaultAttributes";
      defaultCode = [
        "const defaultAttributes = [",
        defaultList.map((d) => "  " + d).join(",\n"),
        "];"
      ];
    }
    for (const name2 in params) {
      this.params.set(`$${name2}`, parseParam2(params[name2], this));
    }
    const specCode = [
      `export default ${parseSpec2(spec, this)};`
    ];
    const paramCode = [];
    for (const [key, value] of this.params) {
      paramCode.push(`const ${key} = ${value};`);
    }
    const importsCode = [];
    for (const [pkg, methods] of this.imports) {
      importsCode.push(
        isString(methods) ? `import ${methods} from "${pkg}";` : `import { ${methods.join(", ")} } from "${pkg}";`
      );
    }
    return [
      ...importsCode,
      ...maybeNewline(importsCode),
      ...dataCode,
      ...maybeNewline(dataCode),
      ...paramCode,
      ...maybeNewline(paramCode),
      ...defaultCode,
      ...maybeNewline(defaultCode),
      ...specCode
    ].join("\n");
  }
  addImport(pkg, method) {
    if (!this.imports.has(pkg)) {
      this.imports.set(pkg, []);
    }
    this.imports.get(pkg).push(method);
  }
  setImports(pkg, all2) {
    this.imports.set(pkg, all2);
  }
  maybeParam(value, ctr = "vg.Param.value()") {
    const { params } = this;
    const name2 = paramRef(value);
    if (name2) {
      const $name = `$${name2}`;
      if (!params.has($name)) {
        params.set($name, ctr);
      }
      return $name;
    }
    return JSON.stringify(value);
  }
  maybeSelection(value) {
    return this.maybeParam(value, "vg.Selection.intersect()");
  }
  maybeTransform(value) {
    if (isObject5(value)) {
      return value.expr ? parseExpression2(value, this) : parseTransform2(value, this);
    }
  }
  indent() {
    this.depth += 1;
  }
  undent() {
    this.depth -= 1;
  }
  tab() {
    return Array.from({ length: this.depth }, () => "  ").join("");
  }
};
function parseExpression2(spec, ctx) {
  const { expr, label: label2 } = spec;
  const tokens = expr.split(/(\\'|\\"|"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|\$\w+)/g);
  let str = "";
  for (let i2 = 0; i2 < tokens.length; ++i2) {
    const tok = tokens[i2];
    if (tok.startsWith("$")) {
      str += `\${${ctx.maybeParam(tok)}}`;
    } else {
      str += tok;
    }
  }
  return `vg.sql\`${str}\`` + (label2 ? `.annotate({ label: ${JSON.stringify(label2)} })` : "");
}
function parseTransform2(spec, ctx) {
  const { transforms } = ctx;
  let name2;
  for (const key in spec) {
    if (transforms.has(key)) {
      name2 = key;
    }
  }
  if (!name2) {
    return;
  }
  const args = name2 === "count" || name2 == null ? [] : toArray(spec[name2]);
  let str = `vg.${name2}(` + args.map((v3) => ctx.maybeParam(v3)).join(", ") + ")";
  if (spec.distinct) {
    str += ".distinct()";
  }
  if (spec.order) {
    const p2 = toArray(spec.order).map((v3) => ctx.maybeParam(v3));
    str += `.orderby(${p2.join(", ")})`;
  }
  if (spec.partition) {
    const p2 = toArray(spec.partition).map((v3) => ctx.maybeParam(v3));
    str += `.partitionby(${p2.join(", ")})`;
  }
  if (spec.rows) {
    str += `.rows(${ctx.maybeParam(spec.rows)})`;
  } else if (spec.range) {
    str += `.range(${ctx.maybeParam(spec.rows)})`;
  }
  return str;
}
function parseParam2(param, ctx) {
  param = isObject5(param) ? param : { value: param };
  const { select: select2 = "value" } = param;
  const parser = ctx.paramParsers.get(select2);
  if (!parser) {
    error(`Unrecognized param type: ${select2}`, param);
  }
  if (select2 === "value") {
    const { value, date: date2 } = param;
    return Array.isArray(value) ? `vg.Param.array([${value.map((v3) => ctx.maybeParam(v3)).join(", ")}])` : date2 ? `vg.Param.value(new Date(${JSON.stringify(date2)}))` : `vg.Param.value(${JSON.stringify(value)})`;
  } else {
    return `vg.Selection.${select2}()`;
  }
}
function dataOptions(options) {
  const opt = [];
  for (const key in options) {
    opt.push(`${key}: ${JSON.stringify(options[key])}`);
  }
  return opt.length ? `, { ${opt.join(", ")} }` : "";
}
function parseTableData2(name2, spec) {
  const { query, type: type2, ...options } = spec;
  if (query) {
    return `\`${create(name2, query, options)}\``;
  }
}
function parseParquetData2(name2, spec) {
  const { file, type: type2, ...options } = spec;
  return `vg.loadParquet("${name2}", "${file}"${dataOptions(options)})`;
}
function parseCSVData2(name2, spec) {
  const { file, type: type2, ...options } = spec;
  return `vg.loadCSV("${name2}", "${file}"${dataOptions(options)})`;
}
function parseJSONData2(name2, spec) {
  const { data, file, type: type2, ...options } = spec;
  const opt = dataOptions(options);
  if (data) {
    const d = "[\n    " + data.map((d2) => JSON.stringify(d2)).join(",\n    ") + "\n  ]";
    return `vg.loadObjects("${name2}", ${d}${opt})`;
  } else {
    return `vg.loadCSV("${name2}", "${file}"${opt})`;
  }
}
function fetchJSON(spec) {
  const { data, file } = spec;
  return data ? JSON.stringify(data) : `await fetch("${file}")
  .then(r => r.json())`;
}
function parseGeoJSONData2(name2, spec, ctx) {
  ctx.datasets.set(name2, name2);
  return { data: fetchJSON(spec) };
}
function parseTopoJSONData2(name2, spec, ctx) {
  ctx.datasets.set(name2, name2);
  const json = fetchJSON(spec);
  let data;
  if (spec.feature) {
    ctx.addImport(TOPOJSON, "feature");
    const object3 = `json.objects['${spec.feature}']`;
    data = json + `
  .then(json => feature(json, ${object3}).features)`;
  } else {
    ctx.addImport(TOPOJSON, "mesh");
    const object3 = spec.mesh ? `json.objects['${spec.mesh}']` : "undefined";
    const filter3 = spec.filter === "interior" ? ", (a, b) => a !== b" : spec.filter === "exterior" ? ", (a, b) => a === b" : "";
    data = json + `
  .then(json => [mesh(json, ${object3}${filter3})])`;
  }
  return { data };
}
function parseSpec2(spec, ctx) {
  for (const [key, { type: type2, parse: parse2 }] of ctx.specParsers) {
    const value = spec[key];
    if (value != null) {
      if (type2(value)) {
        return parse2(spec, ctx);
      } else {
        error(`Invalid property type: ${key}`, spec);
      }
    }
  }
  error(`Invalid specification.`, spec);
}
function parseHSpace2(spec, ctx) {
  return `${ctx.tab()}vg.hspace(${spec.hspace})`;
}
function parseVSpace2(spec, ctx) {
  return `${ctx.tab()}vg.vspace(${spec.vspace})`;
}
function parseInput2(spec, ctx) {
  const { input: input2, ...options } = spec;
  const fn = ctx.inputs.get(input2);
  if (!isFunction3(fn)) {
    error(`Unrecognized input: ${input2}`, spec);
  }
  const opt = [];
  for (const key in options) {
    opt.push(`${key}: ${ctx.maybeSelection(options[key])}`);
  }
  return `${ctx.tab()}vg.${input2}({ ${opt.join(", ")} })`;
}
function parseVConcat2(spec, ctx) {
  ctx.indent();
  const items = spec.vconcat.map((s2) => parseSpec2(s2, ctx));
  ctx.undent();
  return `${ctx.tab()}vg.vconcat(
${items.join(",\n")}
${ctx.tab()})`;
}
function parseHConcat2(spec, ctx) {
  ctx.indent();
  const items = spec.hconcat.map((s2) => parseSpec2(s2, ctx));
  ctx.undent();
  return `${ctx.tab()}vg.hconcat(
${items.join(",\n")}
${ctx.tab()})`;
}
function parsePlot2(spec, ctx) {
  const { plot: plot3, ...attributes2 } = spec;
  ctx.indent();
  const attrs = [
    ...ctx.plotDefaults ? [`${ctx.tab()}...defaultAttributes`] : [],
    ...Object.keys(attributes2).map((key) => parseAttribute2(spec, key, ctx))
  ];
  const entries = plot3.map((e) => parseEntry2(e, ctx));
  const items = entries.concat(attrs);
  ctx.undent();
  return `${ctx.tab()}vg.plot(
${items.join(",\n")}
${ctx.tab()})`;
}
function parseNakedMark2(spec, ctx) {
  return parsePlot2({ plot: [spec] }, ctx);
}
function parseLegend2(spec, ctx) {
  const { legend: legend3, ...options } = spec;
  const type2 = `${legend3}Legend`;
  if (!isFunction3(ctx.legends.get(type2))) {
    error(`Unrecognized legend type: ${legend3}`, spec);
  }
  const opt = [];
  for (const key in options) {
    opt.push(`${key}: ${ctx.maybeSelection(options[key])}`);
  }
  return `${ctx.tab()}vg.${type2}({ ${opt.join(", ")} })`;
}
function parseAttribute2(spec, name2, ctx) {
  const fn = ctx.attributes.get(name2);
  if (!isFunction3(fn)) {
    error(`Unrecognized attribute: ${name2}`, spec);
  }
  const value = spec[name2];
  const arg = value === "Fixed" ? "vg.Fixed" : ctx.maybeParam(value);
  return `${ctx.tab()}vg.${name2}(${arg})`;
}
function parseEntry2(spec, ctx) {
  return isString(spec.mark) ? parseMark2(spec, ctx) : isString(spec.legend) ? parseLegend2(spec, ctx) : isString(spec.select) ? parseInteractor2(spec, ctx) : error(`Invalid plot entry.`, spec);
}
function parseMark2(spec, ctx) {
  const { mark: mark2, data, ...options } = spec;
  if (!isFunction3(ctx.marks.get(mark2))) {
    error(`Unrecognized mark type: ${mark2}`, spec);
  }
  const input2 = parseMarkData2(data, ctx);
  const opt = [];
  for (const key in options) {
    opt.push(`${key}: ${parseMarkOption2(options[key], ctx)}`);
  }
  const d = input2 || "";
  const o = opt.length ? `{ ${opt.join(", ")} }` : "";
  let arg = `${d}${o}`;
  if (d && o) {
    ctx.indent();
    arg = `
${ctx.tab()}${d},
${ctx.tab()}${o}
`;
    ctx.undent();
    arg += ctx.tab();
  }
  return `${ctx.tab()}vg.${mark2}(${arg})`;
}
function parseMarkData2(spec, ctx) {
  if (!spec)
    return null;
  if (isArray(spec))
    return JSON.stringify(spec);
  const { from: table2, ...options } = spec;
  if (ctx.datasets.has(table2)) {
    return ctx.datasets.get(table2);
  } else {
    const opt = [];
    for (const key in options) {
      opt.push(`${key}: ${ctx.maybeSelection(options[key])}`);
    }
    const arg = opt.length ? `, { ${opt.join(", ")} }` : "";
    return `vg.from("${table2}"${arg})`;
  }
}
function parseMarkOption2(spec, ctx) {
  return ctx.maybeTransform(spec) || ctx.maybeParam(spec);
}
function parseInteractor2(spec, ctx) {
  const { select: select2, ...options } = spec;
  if (!isFunction3(ctx.interactors.get(select2))) {
    error(`Unrecognized interactor type: ${select2}`, spec);
  }
  const opt = [];
  for (const key in options) {
    opt.push(`${key}: ${ctx.maybeSelection(options[key])}`);
  }
  return `${ctx.tab()}vg.${select2}({ ${opt.join(", ")} })`;
}
export {
  Coordinator,
  Fixed,
  Mark2 as Mark,
  MosaicClient,
  Param,
  ParseContext,
  Plot,
  Query,
  Selection,
  agg,
  align,
  and,
  area2 as area,
  areaX2 as areaX,
  areaY2 as areaY,
  argmax,
  argmin,
  arrayAgg,
  arrow2 as arrow,
  aspectRatio,
  attribute,
  attributes,
  avg,
  axis2 as axis,
  axisFx2 as axisFx,
  axisFy2 as axisFy,
  axisX2 as axisX,
  axisY2 as axisY,
  barX2 as barX,
  barY2 as barY,
  bin,
  cast,
  castDouble,
  castInteger,
  cell2 as cell,
  cellX2 as cellX,
  cellY2 as cellY,
  circle2 as circle,
  colorClamp,
  colorDomain,
  colorInterpolate,
  colorLabel,
  colorLegend,
  colorNice,
  colorPivot,
  colorRange,
  colorReverse,
  colorScale,
  colorScheme,
  colorSymmetric,
  colorTickFormat,
  colorZero,
  column,
  contour2 as contour,
  coordinator,
  corr,
  count,
  covarPop,
  cume_dist,
  dateDay,
  dateMonth,
  dateMonthDay,
  delaunayLink2 as delaunayLink,
  delaunayMesh2 as delaunayMesh,
  denseLine,
  dense_rank,
  density2 as density,
  densityX,
  densityY,
  dot2 as dot,
  dotX2 as dotX,
  dotY2 as dotY,
  entropy,
  eq,
  facetGrid,
  facetLabel,
  facetMargin,
  facetMarginBottom,
  facetMarginLeft,
  facetMarginRight,
  facetMarginTop,
  first_value,
  frame3 as frame,
  from,
  fxAlign,
  fxAriaDescription,
  fxAriaLabel,
  fxAxis,
  fxDomain,
  fxFontVariant,
  fxGrid,
  fxInset,
  fxInsetLeft,
  fxInsetRight,
  fxLabel,
  fxLabelAnchor,
  fxLabelOffset,
  fxLine,
  fxNice,
  fxPadding,
  fxPaddingInner,
  fxPaddingOuter,
  fxRange,
  fxReverse,
  fxRound,
  fxTickFormat,
  fxTickPadding,
  fxTickRotate,
  fxTickSize,
  fxTickSpacing,
  fxTicks,
  fyAlign,
  fyAriaDescription,
  fyAriaLabel,
  fyAxis,
  fyDomain,
  fyFontVariant,
  fyGrid,
  fyInset,
  fyInsetBottom,
  fyInsetTop,
  fyLabel,
  fyLabelAnchor,
  fyLabelOffset,
  fyLine,
  fyNice,
  fyPadding,
  fyPaddingInner,
  fyPaddingOuter,
  fyRange,
  fyReverse,
  fyRound,
  fyTickFormat,
  fyTickPadding,
  fyTickRotate,
  fyTickSize,
  fyTickSpacing,
  fyTicks,
  geo2 as geo,
  graticule3 as graticule,
  grid,
  gridFx2 as gridFx,
  gridFy2 as gridFy,
  gridX2 as gridX,
  gridY2 as gridY,
  gt,
  gte,
  hconcat,
  height,
  hexagon2 as hexagon,
  hexbin2 as hexbin,
  hexgrid2 as hexgrid,
  highlight,
  hspace,
  hull2 as hull,
  image2 as image,
  inset,
  intervalX,
  intervalXY,
  intervalY,
  isBetween,
  isDistinct,
  isNotBetween,
  isNotDistinct,
  isNotNull,
  isNull,
  kurtosis,
  label,
  lag,
  last,
  last_value,
  lead,
  lengthClamp,
  lengthDomain,
  lengthNice,
  lengthRange,
  lengthScale,
  lengthZero,
  line2 as line,
  lineX2 as lineX,
  lineY2 as lineY,
  link3 as link,
  literal,
  loadCSV,
  loadJSON,
  loadObjects,
  loadParquet,
  lt,
  lte,
  mad,
  margin,
  marginBottom,
  marginLeft,
  marginRight,
  marginTop,
  margins,
  max,
  median,
  menu,
  min,
  mode,
  name,
  namedPlots,
  nearestX,
  nearestY,
  neq,
  not,
  nth_value,
  ntile,
  opacityClamp,
  opacityDomain,
  opacityLabel,
  opacityLegend,
  opacityNice,
  opacityRange,
  opacityReverse,
  opacityScale,
  opacityTickFormat,
  opacityZero,
  or,
  padding,
  pan,
  panX,
  panY,
  panZoom,
  panZoomX,
  panZoomY,
  parseSpec,
  percent_rank,
  plot2 as plot,
  product,
  projectionClip,
  projectionDomain,
  projectionInset,
  projectionInsetBottom,
  projectionInsetLeft,
  projectionInsetRight,
  projectionInsetTop,
  projectionParallels,
  projectionPrecision,
  projectionRotate,
  projectionType,
  quantile,
  rClamp,
  rDomain,
  rNice,
  rRange,
  rScale,
  rZero,
  rank,
  raster3 as raster,
  rasterTile,
  rect2 as rect,
  rectX2 as rectX,
  rectY2 as rectY,
  regressionY,
  reset,
  restConnector,
  round2 as round,
  row_number,
  ruleX2 as ruleX,
  ruleY2 as ruleY,
  search,
  skewness,
  slider,
  socketConnector,
  specToModule,
  sphere2 as sphere,
  spike2 as spike,
  sql,
  stddev,
  stddevPop,
  stringAgg,
  style,
  sum2 as sum,
  symbolLegend,
  table,
  text2 as text,
  textX2 as textX,
  textY2 as textY,
  tickX2 as tickX,
  tickY2 as tickY,
  toggle,
  toggleColor,
  toggleX,
  toggleY,
  varPop,
  variance,
  vconcat,
  vector2 as vector,
  vectorX2 as vectorX,
  vectorY2 as vectorY,
  voronoi2 as voronoi,
  voronoiMesh2 as voronoiMesh,
  vspace,
  wasmConnector,
  width,
  xAlign,
  xAriaDescription,
  xAriaLabel,
  xAxis,
  xClamp,
  xDomain,
  xFontVariant,
  xGrid,
  xInset,
  xInsetLeft,
  xInsetRight,
  xLabel,
  xLabelAnchor,
  xLabelOffset,
  xLine,
  xNice,
  xPadding,
  xPaddingInner,
  xPaddingOuter,
  xRange,
  xReverse,
  xRound,
  xScale,
  xTickFormat,
  xTickPadding,
  xTickRotate,
  xTickSize,
  xTickSpacing,
  xTicks,
  xZero,
  xyDomain,
  yAlign,
  yAriaDescription,
  yAriaLabel,
  yAxis,
  yClamp,
  yDomain,
  yFontVariant,
  yGrid,
  yInset,
  yInsetBottom,
  yInsetTop,
  yLabel,
  yLabelAnchor,
  yLabelOffset,
  yLine,
  yNice,
  yPadding,
  yPaddingInner,
  yPaddingOuter,
  yRange,
  yReverse,
  yRound,
  yScale,
  yTickFormat,
  yTickPadding,
  yTickRotate,
  yTickSize,
  yTickSpacing,
  yTicks,
  yZero
};
